_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.03M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.03M|  chars_format const fmt = options.format;
  277|  1.03M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.03M|  parsed_number_string_t<UC> answer;
  280|  1.03M|  answer.valid = false;
  281|  1.03M|  answer.too_many_digits = false;
  282|  1.03M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.03M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.03M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.03M|  UC const * const start_digits = p;
  303|       |
  304|  1.03M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.54M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 5.02M, False: 518k]
  |  Branch (306:25): [True: 4.51M, False: 512k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.51M|    i = 10 * i +
  310|  4.51M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.51M|    ++p;
  312|  4.51M|  }
  313|  1.03M|  UC const * const end_of_integer_part = p;
  314|  1.03M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.03M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.03M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.03M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.03M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.03M|  int64_t exponent = 0;
  324|  1.03M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 512k, False: 518k]
  |  Branch (324:49): [True: 193k, False: 318k]
  ------------------
  325|  1.03M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 193k, False: 836k]
  ------------------
  326|   193k|    ++p;
  327|   193k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   193k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   800k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 678k, False: 122k]
  |  Branch (332:27): [True: 606k, False: 71.5k]
  ------------------
  333|   606k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   606k|      ++p;
  335|   606k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   606k|    }
  337|   193k|    exponent = before - p;
  338|   193k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   193k|    digit_count -= exponent;
  340|   193k|  }
  341|  1.03M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.03M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.03M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.03M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.03M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.03M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.03M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 885k, False: 145k]
  ------------------
  352|  1.03M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 390k, False: 495k]
  ------------------
  353|  1.03M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 79.2k, False: 310k]
  |  Branch (353:29): [True: 51.2k, False: 259k]
  ------------------
  354|  1.03M|       ||
  355|  1.03M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   899k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 899k]
  ------------------
  356|   899k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   899k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   130k|    UC const * location_of_e = p;
  359|   130k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 79.2k, False: 51.2k]
  |  Branch (359:28): [True: 51.2k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   130k|      ++p;
  361|   130k|    }
  362|   130k|    bool neg_exp = false;
  363|   130k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 130k, False: 125]
  |  Branch (363:24): [True: 6.42k, False: 124k]
  ------------------
  364|  6.42k|      neg_exp = true;
  365|  6.42k|      ++p;
  366|   124k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 124k, False: 125]
  |  Branch (366:31): [True: 32.2k, False: 91.7k]
  ------------------
  367|  32.2k|      ++p;
  368|  32.2k|    }
  369|   130k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 130k]
  |  Branch (369:24): [True: 555, False: 129k]
  ------------------
  370|    730|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 730]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    730|      p = location_of_e;
  376|   129k|    } else {
  377|   408k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 313k, False: 94.9k]
  |  Branch (377:29): [True: 278k, False: 34.8k]
  ------------------
  378|   278k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   278k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 254k, False: 24.6k]
  ------------------
  380|   254k|          exp_number = 10 * exp_number + digit;
  381|   254k|        }
  382|   278k|        ++p;
  383|   278k|      }
  384|   129k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.39k, False: 123k]
  ------------------
  385|   129k|      exponent += exp_number;
  386|   129k|    }
  387|   899k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   899k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 754k, False: 145k]
  |  Branch (389:44): [True: 0, False: 754k]
  ------------------
  390|   899k|  }
  391|  1.03M|  answer.lastmatch = p;
  392|  1.03M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.03M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 177k, False: 852k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   177k|    UC const * start = start_digits;
  405|   696k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 695k, False: 1.27k]
  |  Branch (405:32): [True: 511k, False: 183k]
  |  Branch (405:53): [True: 7.18k, False: 176k]
  ------------------
  406|   519k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 511k, False: 7.18k]
  ------------------
  407|   519k|      start++;
  408|   519k|    }
  409|       |
  410|   177k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 170k, False: 7.47k]
  ------------------
  411|   170k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   170k|      i = 0;
  416|   170k|      p = answer.integer.ptr;
  417|   170k|      UC const* int_end = p + answer.integer.len();
  418|   170k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.76M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.72M, False: 46.1k]
  |  Branch (419:54): [True: 1.59M, False: 124k]
  ------------------
  420|  1.59M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.59M|        ++p;
  422|  1.59M|      }
  423|   170k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 46.1k, False: 124k]
  ------------------
  424|  46.1k|        exponent = end_of_integer_part - p + exp_number;
  425|  46.1k|      }
  426|   124k|      else { // We have a value with a fractional component.
  427|   124k|        p = answer.fraction.ptr;
  428|   124k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.15M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.02M, False: 124k]
  |  Branch (429:56): [True: 2.02M, False: 0]
  ------------------
  430|  2.02M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.02M|          ++p;
  432|  2.02M|        }
  433|   124k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   124k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   170k|    }
  437|   177k|  }
  438|  1.03M|  answer.exponent = exponent;
  439|  1.03M|  answer.mantissa = i;
  440|  1.03M|  return answer;
  441|  1.03M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  6.14M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  6.14M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 150k, False: 5.99M]
  |  Branch (36:27): [True: 469k, False: 5.52M]
  ------------------
   37|  6.14M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   193k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   701k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 565k, False: 135k]
  |  Branch (249:43): [True: 507k, False: 57.6k]
  ------------------
  250|   507k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   507k|    p += 8;
  252|   507k|  }
  253|   193k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   565k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   565k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   565k|     0x8080808080808080));
  172|   565k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.29M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.29M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.29M|  uint64_t val;
   63|  1.29M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.29M|  return val;
   69|  1.29M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   726k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   726k|  const uint64_t mask = 0x000000FF000000FF;
  148|   726k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   726k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   726k|  val -= 0x3030303030303030;
  151|   726k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   726k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   726k|  return uint32_t(val);
  154|   726k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   218k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   218k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   218k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   218k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   218k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   379k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   379k|  chars_format const fmt = options.format;
  277|   379k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   379k|  parsed_number_string_t<UC> answer;
  280|   379k|  answer.valid = false;
  281|   379k|  answer.too_many_digits = false;
  282|   379k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   379k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 379k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   379k|  UC const * const start_digits = p;
  303|       |
  304|   379k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   808k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 546k, False: 261k]
  |  Branch (306:25): [True: 428k, False: 117k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   428k|    i = 10 * i +
  310|   428k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   428k|    ++p;
  312|   428k|  }
  313|   379k|  UC const * const end_of_integer_part = p;
  314|   379k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   379k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   379k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   379k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 379k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   379k|  int64_t exponent = 0;
  324|   379k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 117k, False: 261k]
  |  Branch (324:49): [True: 1.64k, False: 116k]
  ------------------
  325|   379k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 1.64k, False: 377k]
  ------------------
  326|  1.64k|    ++p;
  327|  1.64k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  1.64k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  8.19k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 7.02k, False: 1.16k]
  |  Branch (332:27): [True: 6.54k, False: 480]
  ------------------
  333|  6.54k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  6.54k|      ++p;
  335|  6.54k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  6.54k|    }
  337|  1.64k|    exponent = before - p;
  338|  1.64k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  1.64k|    digit_count -= exponent;
  340|  1.64k|  }
  341|   379k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   379k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 379k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   379k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 379k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   379k|  int64_t exp_number = 0;            // explicit exponential part
  351|   379k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 304k, False: 75.3k]
  ------------------
  352|   379k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 116k, False: 187k]
  ------------------
  353|   379k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 184, False: 116k]
  |  Branch (353:29): [True: 12.0k, False: 104k]
  ------------------
  354|   379k|       ||
  355|   379k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   367k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 367k]
  ------------------
  356|   367k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   367k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  12.1k|    UC const * location_of_e = p;
  359|  12.1k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 184, False: 12.0k]
  |  Branch (359:28): [True: 12.0k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  12.1k|      ++p;
  361|  12.1k|    }
  362|  12.1k|    bool neg_exp = false;
  363|  12.1k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 12.1k, False: 20]
  |  Branch (363:24): [True: 2.89k, False: 9.27k]
  ------------------
  364|  2.89k|      neg_exp = true;
  365|  2.89k|      ++p;
  366|  9.29k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 9.27k, False: 20]
  |  Branch (366:31): [True: 260, False: 9.01k]
  ------------------
  367|    260|      ++p;
  368|    260|    }
  369|  12.1k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 12.1k]
  |  Branch (369:24): [True: 425, False: 11.7k]
  ------------------
  370|    455|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 455]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    455|      p = location_of_e;
  376|  11.7k|    } else {
  377|  44.2k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 36.1k, False: 8.14k]
  |  Branch (377:29): [True: 32.5k, False: 3.59k]
  ------------------
  378|  32.5k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  32.5k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 30.2k, False: 2.25k]
  ------------------
  380|  30.2k|          exp_number = 10 * exp_number + digit;
  381|  30.2k|        }
  382|  32.5k|        ++p;
  383|  32.5k|      }
  384|  11.7k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 2.86k, False: 8.87k]
  ------------------
  385|  11.7k|      exponent += exp_number;
  386|  11.7k|    }
  387|   367k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   367k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 292k, False: 75.3k]
  |  Branch (389:44): [True: 0, False: 292k]
  ------------------
  390|   367k|  }
  391|   379k|  answer.lastmatch = p;
  392|   379k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   379k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 624, False: 379k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    624|    UC const * start = start_digits;
  405|    888|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 888, False: 0]
  |  Branch (405:32): [True: 264, False: 624]
  |  Branch (405:53): [True: 0, False: 624]
  ------------------
  406|    264|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 264, False: 0]
  ------------------
  407|    264|      start++;
  408|    264|    }
  409|       |
  410|    624|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 488, False: 136]
  ------------------
  411|    488|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    488|      i = 0;
  416|    488|      p = answer.integer.ptr;
  417|    488|      UC const* int_end = p + answer.integer.len();
  418|    488|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  7.90k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 7.60k, False: 308]
  |  Branch (419:54): [True: 7.42k, False: 180]
  ------------------
  420|  7.42k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  7.42k|        ++p;
  422|  7.42k|      }
  423|    488|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 308, False: 180]
  ------------------
  424|    308|        exponent = end_of_integer_part - p + exp_number;
  425|    308|      }
  426|    180|      else { // We have a value with a fractional component.
  427|    180|        p = answer.fraction.ptr;
  428|    180|        UC const* frac_end = p + answer.fraction.len();
  429|  2.08k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.90k, False: 180]
  |  Branch (429:56): [True: 1.90k, False: 0]
  ------------------
  430|  1.90k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.90k|          ++p;
  432|  1.90k|        }
  433|    180|        exponent = answer.fraction.ptr - p + exp_number;
  434|    180|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    488|    }
  437|    624|  }
  438|   379k|  answer.exponent = exponent;
  439|   379k|  answer.mantissa = i;
  440|   379k|  return answer;
  441|   379k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   601k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   601k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 119k, False: 481k]
  |  Branch (36:27): [True: 2.51k, False: 479k]
  ------------------
   37|   601k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|  1.64k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  1.64k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  1.64k|    return;
  240|  1.64k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  58.6k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   125k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   196k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   196k|    return small_mul(vec, y);
  565|   196k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   288k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   288k|  limb carry = 0;
  284|  1.11M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 831k, False: 288k]
  ------------------
  285|   831k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   831k|  }
  287|   288k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 165k, False: 122k]
  ------------------
  288|   165k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   165k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
  289|   165k|  }
  290|   288k|  return true;
  291|   288k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.17M|  constexpr size_t len() const noexcept {
   77|  2.17M|    return length;
   78|  2.17M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   831k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   831k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   831k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   831k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   831k|  carry = limb(z >> limb_bits);
  235|   831k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   831k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.30M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.30M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.30M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.30M|    return data[index];
   60|  2.30M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   236k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   236k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 236k, False: 0]
  ------------------
   93|   236k|      push_unchecked(value);
   94|   236k|      return true;
   95|   236k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   236k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   271k|  constexpr size_t capacity() const noexcept {
   83|   271k|    return size;
   84|   271k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   291k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   291k|    data[length] = value;
   88|   291k|    length++;
   89|   291k|  }
_ZN10fast_float6bigint3addEm:
  567|   196k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   196k|    return small_add(vec, y);
  569|   196k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   196k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   196k|  return small_add_from(vec, y, 0);
  277|   196k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   196k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   196k|  size_t index = start;
  259|   196k|  limb carry = y;
  260|   196k|  bool overflow;
  261|   300k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 162k, False: 138k]
  |  Branch (261:24): [True: 103k, False: 58.6k]
  ------------------
  262|   103k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   103k|    carry = limb(overflow);
  264|   103k|    index += 1;
  265|   103k|  }
  266|   196k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 58.6k, False: 138k]
  ------------------
  267|  58.6k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  58.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 58.6k]
  |  |  ------------------
  ------------------
  268|  58.6k|  }
  269|   196k|  return true;
  270|   196k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   234k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   234k|  limb z;
  211|       |// gcc and clang
  212|   234k|#if defined(__has_builtin)
  213|   234k|  #if __has_builtin(__builtin_add_overflow)
  214|   234k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   234k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   234k|      return z;
  217|   234k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   234k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  4.61k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  4.61k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  4.61k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.61k]
  |  |  ------------------
  ------------------
  611|  4.61k|    return pow2(exp);
  612|  4.61k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  58.6k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  58.6k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  58.6k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  61.8k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.16k, False: 58.6k]
  ------------------
  582|  3.16k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.16k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.16k]
  |  |  ------------------
  ------------------
  583|  3.16k|      exp -= large_step;
  584|  3.16k|    }
  585|  58.6k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  58.6k|    uint32_t small_step = 27;
  587|  58.6k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  83.7k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 25.1k, False: 58.6k]
  ------------------
  593|  25.1k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  25.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 25.1k]
  |  |  ------------------
  ------------------
  594|  25.1k|      exp -= small_step;
  595|  25.1k|    }
  596|  58.6k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 50.6k, False: 7.98k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  50.6k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  50.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 50.6k]
  |  |  ------------------
  ------------------
  601|  50.6k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  50.6k|      );
  603|  50.6k|    }
  604|       |
  605|  58.6k|    return true;
  606|  58.6k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.16k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.16k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.16k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.16k|  } else {
  368|  3.16k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.16k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.16k]
  |  |  ------------------
  ------------------
  369|  3.16k|  }
  370|  3.16k|  return true;
  371|  3.16k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.16k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.16k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.16k|  stackvec<size> z(xs);
  338|  3.16k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.16k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.16k, False: 0]
  ------------------
  341|  3.16k|    limb y0 = y[0];
  342|  3.16k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.16k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.16k]
  |  |  ------------------
  ------------------
  343|  15.8k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.6k, False: 3.16k]
  ------------------
  344|  12.6k|      limb yi = y[index];
  345|  12.6k|      stackvec<size> zi;
  346|  12.6k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.6k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.6k|        zi.set_len(0);
  349|  12.6k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
  350|  12.6k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
  351|  12.6k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.6k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
  353|  12.6k|      }
  354|  12.6k|    }
  355|  3.16k|  }
  356|       |
  357|  3.16k|  x.normalize();
  358|  3.16k|  return true;
  359|  3.16k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.16k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.16k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.16k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.16k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  47.2k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  47.2k|    length = uint16_t(len);
   75|  47.2k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  15.8k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  15.8k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 15.8k, False: 0]
  ------------------
  108|  15.8k|      extend_unchecked(s);
  109|  15.8k|      return true;
  110|  15.8k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  15.8k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  15.8k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  15.8k|    limb* ptr = data + length;
  102|  15.8k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  15.8k|    set_len(len() + s.len());
  104|  15.8k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.6k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.6k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.6k]
  |  Branch (300:26): [True: 12.4k, False: 201]
  ------------------
  301|  12.4k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  12.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
  302|  12.4k|  }
  303|       |
  304|  12.6k|  bool carry = false;
  305|   106k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 94.3k, False: 12.6k]
  ------------------
  306|  94.3k|    limb xi = x[index + start];
  307|  94.3k|    limb yi = y[index];
  308|  94.3k|    bool c1 = false;
  309|  94.3k|    bool c2 = false;
  310|  94.3k|    xi = scalar_add(xi, yi, c1);
  311|  94.3k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 35.9k, False: 58.3k]
  ------------------
  312|  35.9k|      xi = scalar_add(xi, 1, c2);
  313|  35.9k|    }
  314|  94.3k|    x[index + start] = xi;
  315|  94.3k|    carry = c1 | c2;
  316|  94.3k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.6k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.6k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.6k|  return true;
  323|  12.6k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  12.4k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  12.4k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 12.4k]
  ------------------
  132|      0|      return false;
  133|  12.4k|    } else {
  134|  12.4k|      resize_unchecked(new_len, value);
  135|  12.4k|      return true;
  136|  12.4k|    }
  137|  12.4k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  12.4k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  12.4k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 12.4k, False: 0]
  ------------------
  120|  12.4k|      size_t count = new_len - len();
  121|  12.4k|      limb* first = data + len();
  122|  12.4k|      limb* last = first + count;
  123|  12.4k|      ::std::fill(first, last, value);
  124|  12.4k|      set_len(new_len);
  125|  12.4k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  12.4k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  57.2k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  57.2k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 57.2k, False: 0]
  |  Branch (152:25): [True: 0, False: 57.2k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  57.2k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  70.5k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  70.5k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  70.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  70.5k|    size_t rindex = length - index - 1;
   69|  70.5k|    return data[rindex];
   70|  70.5k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  58.5k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  58.5k|    return shl(exp);
  574|  58.5k|  }
_ZN10fast_float6bigint3shlEm:
  530|  58.5k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  58.5k|    size_t rem = n % limb_bits;
  532|  58.5k|    size_t div = n / limb_bits;
  533|  58.5k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 54.1k, False: 4.47k]
  ------------------
  534|  54.1k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  54.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 54.1k]
  |  |  ------------------
  ------------------
  535|  54.1k|    }
  536|  58.5k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 6.33k, False: 52.2k]
  ------------------
  537|  6.33k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.33k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.33k]
  |  |  ------------------
  ------------------
  538|  6.33k|    }
  539|  58.5k|    return true;
  540|  58.5k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  54.1k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  54.1k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  54.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  54.1k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  54.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  54.1k|    size_t shl = n;
  493|  54.1k|    size_t shr = limb_bits - shl;
  494|  54.1k|    limb prev = 0;
  495|   176k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 122k, False: 54.1k]
  ------------------
  496|   122k|      limb xi = vec[index];
  497|   122k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   122k|      prev = xi;
  499|   122k|    }
  500|       |
  501|  54.1k|    limb carry = prev >> shr;
  502|  54.1k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 12.4k, False: 41.6k]
  ------------------
  503|  12.4k|      return vec.try_push(carry);
  504|  12.4k|    }
  505|  41.6k|    return true;
  506|  54.1k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  6.33k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  6.33k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  6.33k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  6.33k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 6.33k]
  ------------------
  512|      0|      return false;
  513|  6.33k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 6.33k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  6.33k|      limb* dst = vec.data + n;
  516|  6.33k|      const limb* src = vec.data;
  517|  6.33k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  6.33k|      limb* first = vec.data;
  520|  6.33k|      limb* last = first + n;
  521|  6.33k|      ::std::fill(first, last, 0);
  522|  6.33k|      vec.set_len(n + vec.len());
  523|  6.33k|      return true;
  524|  6.33k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  6.33k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  10.9k|  constexpr bool is_empty() const noexcept {
   80|  10.9k|    return length == 0;
   81|  10.9k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  4.61k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  4.61k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  4.61k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 4.61k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  4.61k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 952, False: 3.66k]
  ------------------
  435|    952|      return uint64_hi64(vec.rindex(0), truncated);
  436|  3.66k|    } else {
  437|  3.66k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  3.66k|      truncated |= vec.nonzero(2);
  439|  3.66k|      return result;
  440|  3.66k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  4.61k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    952|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    952|  truncated = false;
  167|    952|  int shl = leading_zeroes(r0);
  168|    952|  return r0 << shl;
  169|    952|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  3.66k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  3.66k|  int shl = leading_zeroes(r0);
  174|  3.66k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 3.62k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  3.62k|  } else {
  178|  3.62k|    int shr = 64 - shl;
  179|  3.62k|    truncated = (r1 << shl) != 0;
  180|  3.62k|    return (r0 << shl) | (r1 >> shr);
  181|  3.62k|  }
  182|  3.66k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  3.66k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  3.70k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 486, False: 3.21k]
  ------------------
  143|    486|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 446, False: 40]
  ------------------
  144|    446|        return true;
  145|    446|      }
  146|     40|      index++;
  147|     40|    }
  148|  3.21k|    return false;
  149|  3.66k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  4.61k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  4.61k|    int lz = ctlz();
  560|  4.61k|    return int(limb_bits * vec.len()) - lz;
  561|  4.61k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  4.61k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  4.61k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 4.61k]
  ------------------
  545|      0|      return 0;
  546|  4.61k|    } else {
  547|  4.61k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  4.61k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  4.61k|    }
  555|  4.61k|  }
_ZN10fast_float6bigintC2Em:
  418|  54.0k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  54.0k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  54.0k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  54.0k|    vec.normalize();
  426|  54.0k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  54.0k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  54.0k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 54.0k]
  ------------------
  464|      0|      return 1;
  465|  54.0k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 54.0k]
  ------------------
  466|      0|      return -1;
  467|  54.0k|    } else {
  468|   105k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 102k, False: 3.42k]
  ------------------
  469|   102k|        limb xi = vec[index - 1];
  470|   102k|        limb yi = other.vec[index - 1];
  471|   102k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 12.6k, False: 89.5k]
  ------------------
  472|  12.6k|          return 1;
  473|  89.5k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 37.9k, False: 51.6k]
  ------------------
  474|  37.9k|          return -1;
  475|  37.9k|        }
  476|   102k|      }
  477|  3.42k|      return 0;
  478|  54.0k|    }
  479|  54.0k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   204k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   204k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   204k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   204k|    return data[index];
   64|   204k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   231k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   231k|  adjusted_mantissa answer;
   96|   231k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.71k, False: 227k]
  |  Branch (96:19): [True: 1.14k, False: 226k]
  ------------------
   97|  4.85k|    answer.power2 = 0;
   98|  4.85k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.85k|    return answer;
  101|  4.85k|  }
  102|   226k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 7.21k, False: 219k]
  ------------------
  103|       |    // we want to get infinity:
  104|  7.21k|    answer.power2 = binary::infinite_power();
  105|  7.21k|    answer.mantissa = 0;
  106|  7.21k|    return answer;
  107|  7.21k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   219k|  int lz = leading_zeroes(w);
  112|   219k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   219k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   219k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   219k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   219k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   219k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.04k, False: 218k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.04k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 954]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    954|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    954|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    954|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    954|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 954, False: 0]
  ------------------
  156|    954|    return answer;
  157|  1.04k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   218k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 76.9k, False: 141k]
  |  Branch (162:30): [True: 74.9k, False: 2.01k]
  |  Branch (162:77): [True: 68.7k, False: 6.17k]
  ------------------
  163|   218k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 8.47k, False: 60.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  8.47k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.56k, False: 4.90k]
  ------------------
  168|  3.56k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.56k|    }
  170|  8.47k|  }
  171|       |
  172|   218k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   218k|  answer.mantissa >>= 1;
  174|   218k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 15.1k, False: 203k]
  ------------------
  175|  15.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  15.1k|    answer.power2++; // undo previous addition
  177|  15.1k|  }
  178|       |
  179|   218k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   218k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.10k, False: 217k]
  ------------------
  181|  1.10k|    answer.power2 = binary::infinite_power();
  182|  1.10k|    answer.mantissa = 0;
  183|  1.10k|  }
  184|   218k|  return answer;
  185|   219k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   244k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   244k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   244k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   244k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   244k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   244k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   244k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 47.3k, False: 196k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  47.3k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  47.3k|    firstproduct.low += secondproduct.high;
   35|  47.3k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 33.3k, False: 13.9k]
  ------------------
   36|  33.3k|      firstproduct.high++;
   37|  33.3k|    }
   38|  47.3k|  }
   39|   244k|  return firstproduct;
   40|   244k|}
_ZN10fast_float6detail5powerEi:
   58|   479k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   479k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   479k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  24.7k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  24.7k|  int lz = leading_zeroes(w);
   82|  24.7k|  w <<= lz;
   83|  24.7k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  24.7k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  24.7k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  24.7k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  24.7k|  int hilz = int(w >> 63) ^ 1;
   69|  24.7k|  adjusted_mantissa answer;
   70|  24.7k|  answer.mantissa = w << hilz;
   71|  24.7k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  24.7k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  24.7k|  return answer;
   74|  24.7k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   208k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   208k|  adjusted_mantissa answer;
   96|   208k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.53k, False: 205k]
  |  Branch (96:19): [True: 334, False: 204k]
  ------------------
   97|  3.86k|    answer.power2 = 0;
   98|  3.86k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.86k|    return answer;
  101|  3.86k|  }
  102|   204k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.61k, False: 201k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.61k|    answer.power2 = binary::infinite_power();
  105|  3.61k|    answer.mantissa = 0;
  106|  3.61k|    return answer;
  107|  3.61k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   201k|  int lz = leading_zeroes(w);
  112|   201k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   201k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   201k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   201k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   201k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   201k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.58k, False: 198k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.58k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 52, False: 2.53k]
  ------------------
  137|     52|      answer.power2 = 0;
  138|     52|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     52|      return answer;
  141|     52|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.53k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.53k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.53k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.53k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.53k, False: 0]
  ------------------
  156|  2.53k|    return answer;
  157|  2.58k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   198k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 61.7k, False: 136k]
  |  Branch (162:30): [True: 34.1k, False: 27.6k]
  |  Branch (162:77): [True: 30.0k, False: 4.07k]
  ------------------
  163|   198k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.99k, False: 24.0k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.99k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.85k, False: 1.14k]
  ------------------
  168|  4.85k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.85k|    }
  170|  5.99k|  }
  171|       |
  172|   198k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   198k|  answer.mantissa >>= 1;
  174|   198k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.5k, False: 184k]
  ------------------
  175|  14.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.5k|    answer.power2++; // undo previous addition
  177|  14.5k|  }
  178|       |
  179|   198k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   198k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 292, False: 198k]
  ------------------
  181|    292|    answer.power2 = binary::infinite_power();
  182|    292|    answer.mantissa = 0;
  183|    292|  }
  184|   198k|  return answer;
  185|   201k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   235k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   235k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   235k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   235k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   235k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   235k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   235k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 93.0k, False: 142k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  93.0k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  93.0k|    firstproduct.low += secondproduct.high;
   35|  93.0k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 30.4k, False: 62.5k]
  ------------------
   36|  30.4k|      firstproduct.high++;
   37|  30.4k|    }
   38|  93.0k|  }
   39|   235k|  return firstproduct;
   40|   235k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  33.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  33.8k|  int lz = leading_zeroes(w);
   82|  33.8k|  w <<= lz;
   83|  33.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  33.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  33.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  33.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  33.8k|  int hilz = int(w >> 63) ^ 1;
   69|  33.8k|  adjusted_mantissa answer;
   70|  33.8k|  answer.mantissa = w << hilz;
   71|  33.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  33.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  33.8k|  return answer;
   74|  33.8k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  24.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  24.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  24.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  24.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  24.7k|  size_t digits = 0;
  413|  24.7k|  bigint bigmant;
  414|  24.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  24.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  24.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 514, False: 24.2k]
  ------------------
  418|    514|    return positive_digit_comp<T>(bigmant, exponent);
  419|  24.2k|  } else {
  420|  24.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  24.2k|  }
  422|  24.7k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  58.6k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  58.6k|  uint64_t mantissa = num.mantissa;
   30|  58.6k|  int32_t exponent = int32_t(num.exponent);
   31|   293k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 234k, False: 58.6k]
  ------------------
   32|   234k|    mantissa /= 10000;
   33|   234k|    exponent += 4;
   34|   234k|  }
   35|   117k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 58.6k, False: 58.6k]
  ------------------
   36|  58.6k|    mantissa /= 100;
   37|  58.6k|    exponent += 2;
   38|  58.6k|  }
   39|  58.6k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 58.6k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  58.6k|  return exponent;
   44|  58.6k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  58.6k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  58.6k|  size_t counter = 0;
  245|  58.6k|  digits = 0;
  246|  58.6k|  limb value = 0;
  247|  58.6k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  58.6k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  58.6k|  UC const * p = num.integer.ptr;
  255|  58.6k|  UC const * pend = p + num.integer.len();
  256|  58.6k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   131k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 73.2k, False: 58.3k]
  ------------------
  259|   124k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 65.5k, False: 58.4k]
  |  Branch (259:45): [True: 51.1k, False: 14.4k]
  |  Branch (259:70): [True: 50.8k, False: 285]
  ------------------
  260|  50.8k|      parse_eight_digits(p, value, counter, digits);
  261|  50.8k|    }
  262|   229k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 212k, False: 16.8k]
  |  Branch (262:30): [True: 156k, False: 56.1k]
  |  Branch (262:43): [True: 156k, False: 285]
  ------------------
  263|   156k|      parse_one_digit(p, value, counter, digits);
  264|   156k|    }
  265|  73.2k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 285, False: 72.9k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    285|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    285|      bool truncated = is_truncated(p, pend);
  269|    285|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 249, False: 36]
  ------------------
  270|    249|        truncated |= is_truncated(num.fraction);
  271|    249|      }
  272|    285|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 179, False: 106]
  ------------------
  273|    179|        round_up_bigint(result, digits);
  274|    179|      }
  275|    285|      return;
  276|  72.9k|    } else {
  277|  72.9k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  72.9k|      counter = 0;
  279|  72.9k|      value = 0;
  280|  72.9k|    }
  281|  73.2k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  58.3k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 54.1k, False: 4.20k]
  ------------------
  285|  54.1k|    p = num.fraction.ptr;
  286|  54.1k|    pend = p + num.fraction.len();
  287|  54.1k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.26k, False: 51.9k]
  ------------------
  288|  2.26k|      skip_zeros(p, pend);
  289|  2.26k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   172k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 121k, False: 51.0k]
  ------------------
  292|   289k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 224k, False: 65.0k]
  |  Branch (292:47): [True: 169k, False: 54.9k]
  |  Branch (292:72): [True: 167k, False: 1.37k]
  ------------------
  293|   167k|        parse_eight_digits(p, value, counter, digits);
  294|   167k|      }
  295|   504k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 435k, False: 69.1k]
  |  Branch (295:32): [True: 385k, False: 49.8k]
  |  Branch (295:45): [True: 383k, False: 2.36k]
  ------------------
  296|   383k|        parse_one_digit(p, value, counter, digits);
  297|   383k|      }
  298|   121k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 3.14k, False: 118k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  3.14k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  3.14k|        bool truncated = is_truncated(p, pend);
  302|  3.14k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.13k, False: 1.01k]
  ------------------
  303|  2.13k|          round_up_bigint(result, digits);
  304|  2.13k|        }
  305|  3.14k|        return;
  306|   118k|      } else {
  307|   118k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   118k|        counter = 0;
  309|   118k|        value = 0;
  310|   118k|      }
  311|   121k|    }
  312|  54.1k|  }
  313|       |
  314|  55.2k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 55.2k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  55.2k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  60.9k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  60.9k|  uint64_t val;
  161|  73.2k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 35.1k, False: 38.0k]
  ------------------
  162|  35.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  35.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 22.8k, False: 12.2k]
  ------------------
  164|  22.8k|      break;
  165|  22.8k|    }
  166|  12.2k|    first += int_cmp_len<UC>();
  167|  12.2k|  }
  168|   119k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 117k, False: 2.26k]
  ------------------
  169|   117k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 58.6k, False: 58.4k]
  ------------------
  170|  58.6k|      break;
  171|  58.6k|    }
  172|  58.4k|    first++;
  173|  58.4k|  }
  174|  60.9k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   218k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   218k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   218k|  p += 8;
  210|   218k|  counter += 8;
  211|   218k|  count += 8;
  212|   218k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   539k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   539k|  value = value * 10 + limb(*p - UC('0'));
  218|   539k|  p++;
  219|   539k|  counter++;
  220|   539k|  count++;
  221|   539k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   196k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   196k|  big.mul(power);
  226|   196k|  big.add(value);
  227|   196k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.68k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.68k|  uint64_t val;
  183|  7.99k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 5.44k, False: 2.55k]
  ------------------
  184|  5.44k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  5.44k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.13k, False: 4.31k]
  ------------------
  186|  1.13k|      return true;
  187|  1.13k|    }
  188|  4.31k|    first += int_cmp_len<UC>();
  189|  4.31k|  }
  190|  4.10k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.81k, False: 1.28k]
  ------------------
  191|  2.81k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.26k, False: 1.55k]
  ------------------
  192|  1.26k|      return true;
  193|  1.26k|    }
  194|  1.55k|    ++first;
  195|  1.55k|  }
  196|  1.28k|  return false;
  197|  2.55k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    249|bool is_truncated(span<const UC> s) noexcept {
  201|    249|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    249|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.31k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.31k|  add_native(big, 10, 1);
  234|  2.31k|  count++;
  235|  2.31k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    514|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    514|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    514|  adjusted_mantissa answer;
  324|    514|  bool truncated;
  325|    514|  answer.mantissa = bigmant.hi64(truncated);
  326|    514|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
  334|       |
  335|    514|  return answer;
  336|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    514|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 514]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    514|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    514|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 514]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 514]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    514|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    514|  const uint64_t mask
  125|    514|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 514]
  ------------------
  126|    514|    ? UINT64_MAX
  127|    514|    : (uint64_t(1) << shift) - 1;
  128|    514|  const uint64_t halfway
  129|    514|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 514]
  ------------------
  130|    514|    ? 0
  131|    514|    : uint64_t(1) << (shift - 1);
  132|    514|  uint64_t truncated_bits = am.mantissa & mask;
  133|    514|  bool is_above = truncated_bits > halfway;
  134|    514|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    514|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 514]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    514|  } else {
  140|    514|    am.mantissa >>= shift;
  141|    514|  }
  142|    514|  am.power2 += shift;
  143|       |
  144|    514|  bool is_odd = (am.mantissa & 1) == 1;
  145|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 440]
  |  Branch (331:27): [True: 348, False: 92]
  |  Branch (331:41): [True: 58, False: 290]
  |  Branch (331:56): [True: 56, False: 326]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    514|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  24.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  24.2k|  bigint& real_digits = bigmant;
  347|  24.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  24.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  24.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  24.2k|  T b;
  354|  24.2k|  to_float(false, am_b, b);
  355|  24.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  24.2k|  bigint theor_digits(theor.mantissa);
  357|  24.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  24.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  24.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  24.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 24.2k, False: 0]
  ------------------
  363|  24.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  24.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  24.2k|  }
  365|  24.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 24.2k, False: 0]
  ------------------
  366|  24.2k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  24.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  24.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  24.2k|  int ord = real_digits.compare(theor_digits);
  373|  24.2k|  adjusted_mantissa answer = am;
  374|  24.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  24.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  24.2k|      (void)_;  // not needed, since we've done our comparison
  377|  24.2k|      (void)__; // not needed, since we've done our comparison
  378|  24.2k|      if (ord > 0) {
  379|  24.2k|        return true;
  380|  24.2k|      } else if (ord < 0) {
  381|  24.2k|        return false;
  382|  24.2k|      } else {
  383|  24.2k|        return is_odd;
  384|  24.2k|      }
  385|  24.2k|    });
  386|  24.2k|  });
  387|       |
  388|  24.2k|  return answer;
  389|  24.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  24.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  24.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  24.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 24.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  24.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  24.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 24.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  24.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  24.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 24.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  24.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  24.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  54.0k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  54.0k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 54.0k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  54.0k|  } else {
  153|  54.0k|    am.mantissa >>= shift;
  154|  54.0k|  }
  155|  54.0k|  am.power2 += shift;
  156|  54.0k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  24.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  24.2k|  adjusted_mantissa am = to_extended(value);
   84|  24.2k|  am.mantissa <<= 1;
   85|  24.2k|  am.mantissa += 1;
   86|  24.2k|  am.power2 -= 1;
   87|  24.2k|  return am;
   88|  24.2k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  24.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  24.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  24.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  24.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  24.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  24.2k|  adjusted_mantissa am;
   56|  24.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  24.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  24.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  24.2k|#endif
   63|  24.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 24.2k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  24.2k|  } else {
   68|       |    // normal
   69|  24.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  24.2k|    am.power2 -= bias;
   71|  24.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  24.2k|  }
   73|       |
   74|  24.2k|  return am;
   75|  24.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  24.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  24.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  24.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 24.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  24.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  24.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 24.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  24.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  24.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 24.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  24.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  24.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  24.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  24.2k|      (void)_;  // not needed, since we've done our comparison
  377|  24.2k|      (void)__; // not needed, since we've done our comparison
  378|  24.2k|      if (ord > 0) {
  379|  24.2k|        return true;
  380|  24.2k|      } else if (ord < 0) {
  381|  24.2k|        return false;
  382|  24.2k|      } else {
  383|  24.2k|        return is_odd;
  384|  24.2k|      }
  385|  24.2k|    });
  386|  24.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  24.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  24.2k|  const uint64_t mask
  125|  24.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 24.2k]
  ------------------
  126|  24.2k|    ? UINT64_MAX
  127|  24.2k|    : (uint64_t(1) << shift) - 1;
  128|  24.2k|  const uint64_t halfway
  129|  24.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 24.2k]
  ------------------
  130|  24.2k|    ? 0
  131|  24.2k|    : uint64_t(1) << (shift - 1);
  132|  24.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  24.2k|  bool is_above = truncated_bits > halfway;
  134|  24.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  24.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 24.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  24.2k|  } else {
  140|  24.2k|    am.mantissa >>= shift;
  141|  24.2k|  }
  142|  24.2k|  am.power2 += shift;
  143|       |
  144|  24.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  24.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  24.2k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  24.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  24.2k|      (void)_;  // not needed, since we've done our comparison
  377|  24.2k|      (void)__; // not needed, since we've done our comparison
  378|  24.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 24.0k]
  ------------------
  379|    210|        return true;
  380|  24.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 21.1k, False: 2.93k]
  ------------------
  381|  21.1k|        return false;
  382|  21.1k|      } else {
  383|  2.93k|        return is_odd;
  384|  2.93k|      }
  385|  24.2k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  33.8k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  33.8k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  33.8k|  int32_t sci_exp = scientific_exponent(num);
  411|  33.8k|  size_t max_digits = binary_format<T>::max_digits();
  412|  33.8k|  size_t digits = 0;
  413|  33.8k|  bigint bigmant;
  414|  33.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  33.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  33.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 4.09k, False: 29.7k]
  ------------------
  418|  4.09k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  29.7k|  } else {
  420|  29.7k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  29.7k|  }
  422|  33.8k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  4.09k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  4.09k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  4.09k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  4.09k|  adjusted_mantissa answer;
  324|  4.09k|  bool truncated;
  325|  4.09k|  answer.mantissa = bigmant.hi64(truncated);
  326|  4.09k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  4.09k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  4.09k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  4.09k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  4.09k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  4.09k|    });
  333|  4.09k|  });
  334|       |
  335|  4.09k|  return answer;
  336|  4.09k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  4.09k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  4.09k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  4.09k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 4.09k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  4.09k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  4.09k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 432, False: 3.66k]
  ------------------
  109|    432|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    432|    am.power2++;
  111|    432|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  4.09k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  4.09k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 4.09k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  4.09k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  4.09k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  4.09k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  4.09k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  4.09k|    });
  333|  4.09k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  4.09k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  4.09k|  const uint64_t mask
  125|  4.09k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 4.09k]
  ------------------
  126|  4.09k|    ? UINT64_MAX
  127|  4.09k|    : (uint64_t(1) << shift) - 1;
  128|  4.09k|  const uint64_t halfway
  129|  4.09k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 4.09k]
  ------------------
  130|  4.09k|    ? 0
  131|  4.09k|    : uint64_t(1) << (shift - 1);
  132|  4.09k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  4.09k|  bool is_above = truncated_bits > halfway;
  134|  4.09k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  4.09k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 4.09k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  4.09k|  } else {
  140|  4.09k|    am.mantissa >>= shift;
  141|  4.09k|  }
  142|  4.09k|  am.power2 += shift;
  143|       |
  144|  4.09k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  4.09k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  4.09k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  4.09k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  4.09k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 508, False: 3.59k]
  |  Branch (331:27): [True: 2.92k, False: 665]
  |  Branch (331:41): [True: 785, False: 2.14k]
  |  Branch (331:56): [True: 356, False: 2.44k]
  |  Branch (331:66): [True: 60, False: 296]
  ------------------
  332|  4.09k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  29.7k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  29.7k|  bigint& real_digits = bigmant;
  347|  29.7k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  29.7k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  29.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  29.7k|  T b;
  354|  29.7k|  to_float(false, am_b, b);
  355|  29.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  29.7k|  bigint theor_digits(theor.mantissa);
  357|  29.7k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  29.7k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  29.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  29.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 29.7k, False: 0]
  ------------------
  363|  29.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  29.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  29.7k|  }
  365|  29.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.48k, False: 27.3k]
  ------------------
  366|  2.48k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.48k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  27.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 27.2k, False: 88]
  ------------------
  368|  27.2k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  27.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  27.2k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  29.7k|  int ord = real_digits.compare(theor_digits);
  373|  29.7k|  adjusted_mantissa answer = am;
  374|  29.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.7k|      (void)_;  // not needed, since we've done our comparison
  377|  29.7k|      (void)__; // not needed, since we've done our comparison
  378|  29.7k|      if (ord > 0) {
  379|  29.7k|        return true;
  380|  29.7k|      } else if (ord < 0) {
  381|  29.7k|        return false;
  382|  29.7k|      } else {
  383|  29.7k|        return is_odd;
  384|  29.7k|      }
  385|  29.7k|    });
  386|  29.7k|  });
  387|       |
  388|  29.7k|  return answer;
  389|  29.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  29.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 29.6k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.6k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  29.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  29.7k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  29.7k|  adjusted_mantissa am = to_extended(value);
   84|  29.7k|  am.mantissa <<= 1;
   85|  29.7k|  am.mantissa += 1;
   86|  29.7k|  am.power2 -= 1;
   87|  29.7k|  return am;
   88|  29.7k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  29.7k|adjusted_mantissa to_extended(T value) noexcept {
   50|  29.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  29.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  29.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  29.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  29.7k|  adjusted_mantissa am;
   56|  29.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  29.7k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  29.7k|  ::memcpy(&bits, &value, sizeof(T));
   62|  29.7k|#endif
   63|  29.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 104, False: 29.6k]
  ------------------
   64|       |    // denormal
   65|    104|    am.power2 = 1 - bias;
   66|    104|    am.mantissa = bits & mantissa_mask;
   67|  29.6k|  } else {
   68|       |    // normal
   69|  29.6k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  29.6k|    am.power2 -= bias;
   71|  29.6k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  29.6k|  }
   73|       |
   74|  29.7k|  return am;
   75|  29.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  29.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 29.6k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 88, False: 29.6k]
  ------------------
  109|     88|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     88|    am.power2++;
  111|     88|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  29.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.7k|      (void)_;  // not needed, since we've done our comparison
  377|  29.7k|      (void)__; // not needed, since we've done our comparison
  378|  29.7k|      if (ord > 0) {
  379|  29.7k|        return true;
  380|  29.7k|      } else if (ord < 0) {
  381|  29.7k|        return false;
  382|  29.7k|      } else {
  383|  29.7k|        return is_odd;
  384|  29.7k|      }
  385|  29.7k|    });
  386|  29.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  29.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  29.7k|  const uint64_t mask
  125|  29.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 29.7k]
  ------------------
  126|  29.7k|    ? UINT64_MAX
  127|  29.7k|    : (uint64_t(1) << shift) - 1;
  128|  29.7k|  const uint64_t halfway
  129|  29.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 29.7k]
  ------------------
  130|  29.7k|    ? 0
  131|  29.7k|    : uint64_t(1) << (shift - 1);
  132|  29.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  29.7k|  bool is_above = truncated_bits > halfway;
  134|  29.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  29.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 29.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  29.7k|  } else {
  140|  29.7k|    am.mantissa >>= shift;
  141|  29.7k|  }
  142|  29.7k|  am.power2 += shift;
  143|       |
  144|  29.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  29.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  29.7k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  29.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.7k|      (void)_;  // not needed, since we've done our comparison
  377|  29.7k|      (void)__; // not needed, since we've done our comparison
  378|  29.7k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 12.4k, False: 17.3k]
  ------------------
  379|  12.4k|        return true;
  380|  17.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 16.8k, False: 490]
  ------------------
  381|  16.8k|        return false;
  382|  16.8k|      } else {
  383|    490|        return is_odd;
  384|    490|      }
  385|  29.7k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.06M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.22M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   407k|  constexpr size_t len() const noexcept {
  238|   407k|    return length;
  239|   407k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   687k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   687k|  return -10;
  469|   687k|#endif
  470|   687k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   644k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   644k|  return 10;
  517|   644k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   568k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   568k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   568k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.64M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.64M|  return 23;
  477|  1.64M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   540k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   540k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   540k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   557k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   227k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   227k|  return -65;
  568|   227k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   226k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   226k|  return 38;
  559|   226k|}
_ZN10fast_float14leading_zeroesEm:
  268|   488k|int leading_zeroes(uint64_t input_num) {
  269|   488k|  assert(input_num > 0);
  270|   488k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   488k|  return __builtin_clzll(input_num);
  285|   488k|#endif
  286|   488k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   619k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   619k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   619k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   619k|  answer.low = uint64_t(r);
  337|   619k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   619k|  return answer;
  342|   619k|}
_ZN10fast_float8value128C2Ev:
  251|   619k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   268k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   268k|  return -127;
  500|   268k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  76.9k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  76.9k|  return -17;
  493|  76.9k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  74.9k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  74.9k|  return 10;
  485|  74.9k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   170k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   170k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 58.6k, False: 112k]
  |  Branch (352:38): [True: 0, False: 112k]
  ------------------
  353|   170k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  24.7k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  24.7k|  return 114;
  575|  24.7k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  97.7k|{
  650|  97.7k|    return sizeof(uint64_t) / sizeof(UC);
  651|  97.7k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  40.6k|{
  644|  40.6k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  40.6k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  40.6k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  77.6k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   201k|  constexpr size_t len() const noexcept {
  238|   201k|    return length;
  239|   201k|  }
_ZNK10fast_float4spanImEixEm:
  241|   110k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   110k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   110k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   110k|    return ptr[index];
  244|   110k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   171k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   171k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   171k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   171k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   171k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   171k|  ::memcpy(&value, &word, sizeof(T));
  615|   171k|#endif
  616|   171k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   171k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   421k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   421k|  return 0xFF;
  507|   421k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.03M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   759k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   381k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|    668|  constexpr size_t len() const noexcept {
  238|    668|    return length;
  239|    668|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   379k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   722k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   722k|  return -22;
  461|   722k|#endif
  462|   722k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   715k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   715k|  return 22;
  514|   715k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   606k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   606k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   606k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.66M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.66M|  return 52;
  474|  1.66M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   600k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   600k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   600k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   205k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   205k|  return -342;
  564|   205k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   204k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   204k|  return 308;
  555|   204k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   269k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   269k|  return -1023;
  497|   269k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  61.7k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  61.7k|  return -4;
  489|  61.7k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  34.1k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  34.1k|  return 23;
  481|  34.1k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  33.8k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  33.8k|  return 769;
  572|  33.8k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   152k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   152k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   152k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   152k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   152k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   152k|  ::memcpy(&value, &word, sizeof(T));
  615|   152k|#endif
  616|   152k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   152k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   388k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   388k|  return 0x7FF;
  504|   388k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   506k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   506k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   506k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   506k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   506k|    return from_chars_advanced(first, last, value, options);
  143|   506k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   506k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   506k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   506k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   506k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   506k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 506k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   506k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   506k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 506k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   506k|  answer.ec = std::errc(); // be optimistic
  221|   506k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   506k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 464k, False: 41.5k]
  |  Branch (227:69): [True: 439k, False: 24.8k]
  |  Branch (227:131): [True: 391k, False: 48.0k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   391k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 391k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   391k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 364k, False: 27.8k]
  ------------------
  239|   364k|        value = T(pns.mantissa);
  240|   364k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 8.19k, False: 355k]
  ------------------
  241|   355k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   364k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 364k]
  ------------------
  243|   364k|        return answer;
  244|   364k|      }
  245|   391k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   391k|  }
  262|   142k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   142k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 84.1k, False: 58.1k]
  |  Branch (263:29): [True: 84.1k, False: 0]
  ------------------
  264|  84.1k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 24.7k, False: 59.3k]
  ------------------
  265|  24.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  24.7k|    }
  267|  84.1k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   142k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 24.7k, False: 117k]
  ------------------
  271|   142k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   142k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 139k, False: 3.24k]
  |  Branch (273:29): [True: 15.4k, False: 123k]
  |  Branch (273:49): [True: 799, False: 14.6k]
  |  Branch (273:68): [True: 4.24k, False: 137k]
  ------------------
  274|  5.04k|    answer.ec = std::errc::result_out_of_range;
  275|  5.04k|  }
  276|   142k|  return answer;
  277|   506k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.17M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.17M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.17M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.17M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.17M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.17M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   181k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   181k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   181k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   181k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   181k|    return from_chars_advanced(first, last, value, options);
  143|   181k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   181k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   181k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   181k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   181k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   181k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 181k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   181k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   181k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 181k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   181k|  answer.ec = std::errc(); // be optimistic
  221|   181k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   181k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 180k, False: 1.23k]
  |  Branch (227:69): [True: 177k, False: 3.03k]
  |  Branch (227:131): [True: 177k, False: 122]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   177k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 177k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   177k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 176k, False: 418]
  ------------------
  239|   176k|        value = T(pns.mantissa);
  240|   176k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 506, False: 176k]
  ------------------
  241|   176k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   176k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 176k]
  ------------------
  243|   176k|        return answer;
  244|   176k|      }
  245|   177k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   177k|  }
  262|  4.81k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  4.81k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 230, False: 4.58k]
  |  Branch (263:29): [True: 230, False: 0]
  ------------------
  264|    230|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 230]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    230|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  4.81k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 4.81k]
  ------------------
  271|  4.81k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  4.81k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 4.33k, False: 472]
  |  Branch (273:29): [True: 3.25k, False: 1.08k]
  |  Branch (273:49): [True: 832, False: 2.41k]
  |  Branch (273:68): [True: 2.41k, False: 1.56k]
  ------------------
  274|  3.25k|    answer.ec = std::errc::result_out_of_range;
  275|  3.25k|  }
  276|  4.81k|  return answer;
  277|   181k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   524k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   524k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   524k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   524k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   524k|    return from_chars_advanced(first, last, value, options);
  143|   524k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   524k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   524k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   524k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   524k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   524k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 524k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   524k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   524k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 524k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   524k|  answer.ec = std::errc(); // be optimistic
  221|   524k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   524k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 518k, False: 5.57k]
  |  Branch (227:69): [True: 494k, False: 24.0k]
  |  Branch (227:131): [True: 413k, False: 81.4k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   413k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 413k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   413k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 406k, False: 6.17k]
  ------------------
  239|   406k|        value = T(pns.mantissa);
  240|   406k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 22.5k, False: 384k]
  ------------------
  241|   384k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   406k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 406k]
  ------------------
  243|   406k|        return answer;
  244|   406k|      }
  245|   413k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   413k|  }
  262|   117k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   117k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 86.2k, False: 30.9k]
  |  Branch (263:29): [True: 86.2k, False: 0]
  ------------------
  264|  86.2k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 33.8k, False: 52.3k]
  ------------------
  265|  33.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  33.8k|    }
  267|  86.2k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   117k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 33.8k, False: 83.3k]
  ------------------
  271|   117k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   117k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 114k, False: 2.98k]
  |  Branch (273:29): [True: 9.97k, False: 104k]
  |  Branch (273:49): [True: 182, False: 9.79k]
  |  Branch (273:68): [True: 2.17k, False: 114k]
  ------------------
  274|  2.36k|    answer.ec = std::errc::result_out_of_range;
  275|  2.36k|  }
  276|   117k|  return answer;
  277|   524k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   198k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   198k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   198k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   198k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   198k|    return from_chars_advanced(first, last, value, options);
  143|   198k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   198k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   198k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   198k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   198k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   198k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 198k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   198k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   198k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 198k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   198k|  answer.ec = std::errc(); // be optimistic
  221|   198k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   198k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 196k, False: 1.41k]
  |  Branch (227:69): [True: 193k, False: 3.22k]
  |  Branch (227:131): [True: 193k, False: 258]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   193k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 193k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   193k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 193k, False: 150]
  ------------------
  239|   193k|        value = T(pns.mantissa);
  240|   193k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 652, False: 192k]
  ------------------
  241|   192k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   193k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 193k]
  ------------------
  243|   193k|        return answer;
  244|   193k|      }
  245|   193k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   193k|  }
  262|  5.04k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  5.04k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 258, False: 4.78k]
  |  Branch (263:29): [True: 258, False: 0]
  ------------------
  264|    258|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 258]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    258|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  5.04k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 5.04k]
  ------------------
  271|  5.04k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  5.04k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 4.50k, False: 542]
  |  Branch (273:29): [True: 1.52k, False: 2.98k]
  |  Branch (273:49): [True: 166, False: 1.35k]
  |  Branch (273:68): [True: 1.35k, False: 3.52k]
  ------------------
  274|  1.52k|    answer.ec = std::errc::result_out_of_range;
  275|  1.52k|  }
  276|  5.04k|  return answer;
  277|   198k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.33M|{
 3807|  3.33M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.33M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.33M|    }
 3810|  3.33M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.33M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.33M|    }
 3813|  3.33M|    else {
 3814|       |        // utf-32
 3815|  3.33M|        static_assert(sizeof(U) == 4);
 3816|  3.33M|        SCN_UNUSED(ch);
 3817|  3.33M|        return 1;
 3818|  3.33M|    }
 3819|  3.33M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.33M|{
 3771|  3.33M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.33M|    SCN_GCC_COMPAT_PUSH
 3774|  3.33M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.33M|    constexpr char lengths[] =
 3776|  3.33M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.33M|        "\1\1\1\1\1\1\1\1"
 3778|  3.33M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.33M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.33M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.33M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.33M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.33M|    SCN_GCC_COMPAT_POP
 3785|  3.33M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.01M|{
 4013|  3.01M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  3.01M|        return decode_utf8_code_point_exhaustive(input);
 4015|  3.01M|    }
 4016|  3.01M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  3.01M|        return decode_utf16_code_point_exhaustive(input);
 4018|  3.01M|    }
 4019|  3.01M|    else {
 4020|  3.01M|        SCN_EXPECT(input.size() == 1);
 4021|  3.01M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.01M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  3.01M|            return invalid_code_point;
 4024|  3.01M|        }
 4025|  3.01M|        return cp;
 4026|  3.01M|    }
 4027|  3.01M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  3.01M|{
 3826|  3.01M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  3.01M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  3.01M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  3.01M|    };
 3831|       |
 3832|  3.01M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.95M, False: 63.1k]
  ------------------
 3833|  2.95M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 700, False: 2.95M]
  ------------------
 3834|    700|            SCN_UNLIKELY_ATTR
 3835|    700|            return invalid_code_point;
 3836|    700|        }
 3837|  2.95M|        return static_cast<char32_t>(input[0]);
 3838|  2.95M|    }
 3839|       |
 3840|  63.1k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 57.2k, False: 5.90k]
  ------------------
 3841|  57.2k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 152, False: 57.1k]
  ------------------
 3842|    152|            SCN_UNLIKELY_ATTR
 3843|    152|            return invalid_code_point;
 3844|    152|        }
 3845|  57.1k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 6.46k, False: 50.6k]
  ------------------
 3846|  6.46k|            SCN_UNLIKELY_ATTR
 3847|  6.46k|            return invalid_code_point;
 3848|  6.46k|        }
 3849|       |
 3850|  50.6k|        char32_t cp{};
 3851|  50.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  50.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  50.6k|        return cp;
 3854|  57.1k|    }
 3855|       |
 3856|  5.90k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.43k, False: 2.47k]
  ------------------
 3857|  3.43k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 113, False: 3.32k]
  ------------------
 3858|    113|            SCN_UNLIKELY_ATTR
 3859|    113|            return invalid_code_point;
 3860|    113|        }
 3861|  3.32k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.31k, False: 2.00k]
  ------------------
 3862|  3.32k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 597, False: 1.40k]
  ------------------
 3863|  1.91k|            SCN_UNLIKELY_ATTR
 3864|  1.91k|            return invalid_code_point;
 3865|  1.91k|        }
 3866|       |
 3867|  1.40k|        char32_t cp{};
 3868|  1.40k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.40k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.40k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.40k|        return cp;
 3872|  3.32k|    }
 3873|       |
 3874|  2.47k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.47k, False: 0]
  ------------------
 3875|  2.47k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.47k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.47k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 499, False: 1.97k]
  ------------------
 3880|    499|            SCN_UNLIKELY_ATTR
 3881|    499|            return invalid_code_point;
 3882|    499|        }
 3883|  1.97k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 552, False: 1.42k]
  ------------------
 3884|  1.97k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 565, False: 855]
  ------------------
 3885|  1.97k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 542, False: 313]
  ------------------
 3886|  1.65k|            SCN_UNLIKELY_ATTR
 3887|  1.65k|            return invalid_code_point;
 3888|  1.65k|        }
 3889|       |
 3890|    313|        char32_t cp{};
 3891|    313|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    313|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    313|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    313|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    313|        return cp;
 3896|  1.97k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  66.7k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  66.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  66.7k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  5.04M|{
 3699|  5.04M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  5.04M|                                          decltype(first), decltype(last)> &&
 3701|  5.04M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  5.04M|        return {first, last};
 3703|  5.04M|    }
 3704|  5.04M|    else {
 3705|  5.04M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  5.04M|                                       to_address(first), to_address(last)))};
 3707|  5.04M|    }
 3708|  5.04M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  15.3M|{
  326|  15.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  15.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  15.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  17.5M|{
  304|  17.5M|    return p;
  305|  17.5M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  8.05M|{
 3730|  8.05M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  8.05M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  8.05M|                      decltype(it)> &&
 3733|  8.05M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  8.05M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  8.05M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  8.05M|        return it;
 3736|  8.05M|    }
 3737|  8.05M|    else {
 3738|  8.05M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  8.05M|    }
 3740|  8.05M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  93.1k|    {
 2724|  93.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  93.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  93.1k|    {
 2705|  93.1k|        return decay_copy(t.begin());
 2706|  93.1k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  11.7M|{
 1949|  11.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.22M|    {
 2781|  2.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.22M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.22M|    {
 2763|  2.22M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.22M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   162k|{
 8867|   162k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   162k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   162k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   162k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   693k|{
 5396|   693k|    detail::check_scan_arg_types<Args...>();
 5397|   693k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   693k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.11M|{
 5135|  1.11M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.11M|                  "Scan argument types must be default constructible");
 5137|  1.11M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.11M|                  "Scan argument types must be Destructible");
 5139|  1.11M|    static_assert(
 5140|  1.11M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.11M|        "Scan argument types must not be references");
 5142|  1.11M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|   693k|    {
 5349|   693k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   693k|    {
 5360|   693k|        return {detail::make_arg<
 5361|   693k|            kind, Context,
 5362|   693k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   693k|                                 typename Context::char_type>::value>(args)...};
 5364|   693k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   693k|{
 5170|   693k|    return make_value<Context>(value).ref_value;
 5171|   693k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   767k|{
 5120|   767k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   767k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   767k|                                  needs_context_tag>) {
 5124|   767k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   767k|    }
 5126|   767k|    else {
 5127|   767k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   767k|            value, context_tag<Context>{}));
 5129|   767k|    }
 5130|   767k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   767k|    {                                                                        \
 4959|   767k|        return val;                                                          \
 4960|   767k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.11M|{
 5089|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.11M|    constexpr bool scannable_char =
 5093|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.11M|    static_assert(scannable_char,
 5095|  1.11M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.11M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.11M|    constexpr bool scannable_const =
 5099|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.11M|    constexpr bool scannable_disabled =
 5103|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.11M|    static_assert(scannable_disabled,
 5105|  1.11M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.11M|    static_assert(
 5110|  1.11M|        scannable,
 5111|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.11M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.11M|    return arg_value{arg};
 5115|  1.11M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  1.11M|    {
 4902|  1.11M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   499k|{
 8654|   499k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   499k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   499k|{
 8591|   499k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   499k|    auto result = vscan_impl(buffer, format, args);
 8594|   499k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.9k, False: 458k]
  |  |  ------------------
  ------------------
 8595|  41.9k|        return unexpected(result.error());
 8596|  41.9k|    }
 8597|   458k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   499k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.10M|{
 4720|  1.10M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.10M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.10M|                  "\n"
 4724|  1.10M|                  "Unsupported range type given as input to a scanning "
 4725|  1.10M|                  "function.\n"
 4726|  1.10M|                  "A range needs to have a character type (value type) "
 4727|  1.10M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.10M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.10M|                  "to be included.\n"
 4730|  1.10M|                  "See the scnlib documentation for more details.");
 4731|  1.10M|    static_assert(
 4732|  1.10M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.10M|        "\n"
 4734|  1.10M|        "Unsupported range type given as input to a scanning "
 4735|  1.10M|        "function.\n"
 4736|  1.10M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.10M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.10M|        "not supported.");
 4739|  1.10M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.10M|                  "\n"
 4741|  1.10M|                  "Unsupported range type given as input to a scanning "
 4742|  1.10M|                  "function.\n"
 4743|  1.10M|                  "file_marker_found cannot be used as an "
 4744|  1.10M|                  "source range type to scn::scan.\n"
 4745|  1.10M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.10M|                  "and do not provide an explicit source range, "
 4747|  1.10M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.10M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.10M|                  "\n"
 4750|  1.10M|                  "Unsupported range type given as input to a scanning "
 4751|  1.10M|                  "function.\n"
 4752|  1.10M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.10M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.10M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.10M|                  "\n"
 4756|  1.10M|                  "Unsupported range type given as input to a scanning "
 4757|  1.10M|                  "function.\n"
 4758|  1.10M|                  "A range needs to model forward_range and have a valid "
 4759|  1.10M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.10M|                  "Examples of scannable ranges are std::string, "
 4761|  1.10M|                  "std::string_view, "
 4762|  1.10M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.10M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.10M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.10M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.10M|{
 4659|  1.10M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.10M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.10M|    }
 4662|  1.10M|    else {
 4663|  1.10M|        return invalid_char_type{};
 4664|  1.10M|    }
 4665|  1.10M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.10M|    {
 2855|  1.10M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.10M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.10M|    {
 2836|  1.10M|        return t.data();
 2837|  1.10M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.10M|    {
 3231|  1.10M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 14.3k, False: 1.09M]
  ------------------
 3232|  1.10M|                   ? nullptr
 3233|  1.10M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.10M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.10M|    {
 3005|  1.10M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.10M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.10M|    {
 2978|  1.10M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.10M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  6.08M|    {
 3339|  6.08M|        return m_iterator == m_sentinel;
 3340|  6.08M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  2.20M|    {
 3185|  2.20M|        return static_cast<const D&>(*this);
 3186|  2.20M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.11M|    {
 2724|  2.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.11M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.11M|    {
 2705|  2.11M|        return decay_copy(t.begin());
 2706|  2.11M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  26.7M|    {
 3330|  26.7M|        return m_iterator;
 3331|  26.7M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.10M|    {
 2930|  1.10M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.10M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.10M|    {
 2896|  1.10M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.10M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.56M|{
 1949|  4.56M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.56M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  6.12M|    {
 3346|  6.12M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  6.12M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  11.3M|    {
 1598|  11.3M|        return has_value();
 1599|  11.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  22.4M|    {
  485|  22.4M|        return m_has_value;
  486|  22.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   827k|    {
 1604|   827k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   827k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   827k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   827k|        return this->get_unexpected().error();
 1606|   827k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   827k|    {
  468|   827k|        return m_unexpected;
  469|   827k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  6.38M|    {
  361|  6.38M|        return m_unexpected;
  362|  6.38M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  3.11M|    {
  347|  3.11M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.11M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.11M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  90.8k|    {
 1476|  90.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  90.8k|    {
  447|  90.8k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  6.94M|    {
  356|  6.94M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.94M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.94M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.10M|    {
 1177|  1.10M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.01M|{
 5923|  1.01M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.01M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.01M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.01M|    }
 5927|  1.01M|    else {
 5928|  1.01M|        auto it = ranges::begin(source);
 5929|  1.01M|        while (n > 0) {
 5930|  1.01M|            --n;
 5931|  1.01M|            ++it;
 5932|  1.01M|        }
 5933|  1.01M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.01M|    }
 5935|  1.01M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  6.29M|    {
 2724|  6.29M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  6.29M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  6.29M|    {
 2705|  6.29M|        return decay_copy(t.begin());
 2706|  6.29M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  1.01M|{
 5910|  1.01M|    return ranges::end(source);
 5911|  1.01M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.01M|    {
 2781|  1.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.01M|    {
 2763|  1.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.01M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  13.0M|    {
 3334|  13.0M|        return m_sentinel;
 3335|  13.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  4.44M|    {
 1653|  4.44M|        return value();
 1654|  4.44M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  10.2M|    {
 1627|  10.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.2M|        return this->get_value();
 1629|  10.2M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  10.2M|    {
  451|  10.2M|        return m_value;
  452|  10.2M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.01M|    {
  437|  1.01M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   325k|    {
 7975|   325k|        return m_str;
 7976|   325k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   693k|    {
 5426|   693k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   693k|    {
 5379|   693k|        return m_argptrs;
 5380|   693k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  2.13M|    {
 5478|  2.13M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   325k|{
 8820|   325k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 297k]
  |  |  ------------------
  ------------------
 8821|  27.9k|        return unexpected(result.error());
 8822|  27.9k|    }
 8823|   297k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   325k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.10M|    {
 1598|  1.10M|        return has_value();
 1599|  1.10M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.21M|    {
  485|  2.21M|        return m_has_value;
  486|  2.21M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  90.8k|    {
 1604|  90.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  90.8k|        return this->get_unexpected().error();
 1606|  90.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  90.8k|    {
  468|  90.8k|        return m_unexpected;
  469|  90.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  30.2k|    {
 1476|  30.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  30.2k|    {
  447|  30.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   360k|    {
 1177|   360k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   916k|    {
 1653|   916k|        return value();
 1654|   916k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   329k|    {
 5830|   329k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  1.01M|    {
 5681|  1.01M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|   933k|    {
 5616|   933k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   329k|    {
 1430|   329k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   329k|    {
  437|   329k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   693k|    {
 5374|   693k|        return m_args;
 5375|   693k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  10.4M|    {
 3316|  10.4M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  2.13M|{
 7691|  2.13M|    return s;
 7692|  2.13M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  2.13M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   325k|    {
 7971|   325k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   360k|    {
 1598|   360k|        return has_value();
 1599|   360k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   690k|    {
  485|   690k|        return m_has_value;
  486|   690k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   329k|    {
 1673|   329k|        return &value();
 1674|   329k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   329k|    {
 1627|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   329k|        return this->get_value();
 1629|   329k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   329k|    {
  451|   329k|        return m_value;
  452|   329k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  1.01M|    {
 5698|  1.01M|        return ranges::begin(m_range);
 5699|  1.01M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   162k|{
 8934|   162k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   162k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   162k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   162k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   499k|{
 8672|   499k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   499k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   499k|{
 8607|   499k|#if !SCN_DISABLE_LOCALE
 8608|   499k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   499k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   499k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   499k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   499k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.9k, False: 458k]
  |  |  ------------------
  ------------------
 8615|  41.9k|        return unexpected(result.error());
 8616|  41.9k|    }
 8617|   458k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   499k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  35.1k|{
 8973|  35.1k|    T value;
 8974|  35.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  35.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 32.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  32.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.8k|    static_cast<    \
  |  |  929|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.8k|    static_cast<    \
  |  |  929|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  35.1k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  73.1k|{
 5155|  73.1k|    check_scan_arg_types<T>();
 5156|       |
 5157|  73.1k|    basic_scan_arg<Context> arg;
 5158|  73.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  73.1k|    arg.m_value = make_value<Context>(value);
 5160|  73.1k|    return arg;
 5161|  73.1k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.36M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  3.45M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   108k|{
 8685|   108k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   108k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   108k|{
 8631|   108k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   108k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   108k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.98k, False: 101k]
  |  |  ------------------
  ------------------
 8635|  6.98k|        return unexpected(result.error());
 8636|  6.98k|    }
 8637|   101k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   108k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   101k|    {
 1663|   101k|        return std::move(value());
 1664|   101k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   167k|{
 8867|   167k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   167k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   167k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   167k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   718k|{
 5396|   718k|    detail::check_scan_arg_types<Args...>();
 5397|   718k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   718k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.16M|{
 5135|  1.16M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.16M|                  "Scan argument types must be default constructible");
 5137|  1.16M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.16M|                  "Scan argument types must be Destructible");
 5139|  1.16M|    static_assert(
 5140|  1.16M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.16M|        "Scan argument types must not be references");
 5142|  1.16M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|   718k|    {
 5349|   718k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   718k|    {
 5360|   718k|        return {detail::make_arg<
 5361|   718k|            kind, Context,
 5362|   718k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   718k|                                 typename Context::char_type>::value>(args)...};
 5364|   718k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   718k|{
 5170|   718k|    return make_value<Context>(value).ref_value;
 5171|   718k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   794k|{
 5120|   794k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   794k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   794k|                                  needs_context_tag>) {
 5124|   794k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   794k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   794k|    }
 5126|   794k|    else {
 5127|   794k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   794k|            value, context_tag<Context>{}));
 5129|   794k|    }
 5130|   794k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   794k|    {                                                                        \
 4959|   794k|        return val;                                                          \
 4960|   794k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.16M|{
 5089|  1.16M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.16M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.16M|    constexpr bool scannable_char =
 5093|  1.16M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.16M|    static_assert(scannable_char,
 5095|  1.16M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.16M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.16M|    constexpr bool scannable_const =
 5099|  1.16M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.16M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.16M|    constexpr bool scannable_disabled =
 5103|  1.16M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.16M|    static_assert(scannable_disabled,
 5105|  1.16M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.16M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.16M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.16M|    static_assert(
 5110|  1.16M|        scannable,
 5111|  1.16M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.16M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.16M|    return arg_value{arg};
 5115|  1.16M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  1.16M|    {
 4902|  1.16M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   335k|    {
 7975|   335k|        return m_str;
 7976|   335k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   718k|    {
 5426|   718k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   718k|    {
 5379|   718k|        return m_argptrs;
 5380|   718k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   335k|{
 8820|   335k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 307k]
  |  |  ------------------
  ------------------
 8821|  27.9k|        return unexpected(result.error());
 8822|  27.9k|    }
 8823|   307k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   335k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  30.2k|    {
 1476|  30.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  30.2k|    {
  447|  30.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   372k|    {
 1177|   372k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   341k|    {
 5830|   341k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|   980k|    {
 5616|   980k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   341k|    {
 1430|   341k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   341k|    {
  437|   341k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   718k|    {
 5374|   718k|        return m_args;
 5375|   718k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   335k|    {
 7971|   335k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   372k|    {
 1598|   372k|        return has_value();
 1599|   372k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   713k|    {
  485|   713k|        return m_has_value;
  486|   713k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   341k|    {
 1673|   341k|        return &value();
 1674|   341k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   341k|    {
 1627|   341k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   341k|        return this->get_value();
 1629|   341k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   341k|    {
  451|   341k|        return m_value;
  452|   341k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   167k|{
 8934|   167k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   167k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   167k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   167k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  36.5k|{
 8973|  36.5k|    T value;
 8974|  36.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  36.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 34.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.2k|    static_cast<    \
  |  |  929|  34.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.2k|    static_cast<    \
  |  |  929|  34.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  36.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  76.2k|{
 5155|  76.2k|    check_scan_arg_types<T>();
 5156|       |
 5157|  76.2k|    basic_scan_arg<Context> arg;
 5158|  76.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  76.2k|    arg.m_value = make_value<Context>(value);
 5160|  76.2k|    return arg;
 5161|  76.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   169k|{
 8867|   169k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   169k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   169k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   169k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   726k|{
 5396|   726k|    detail::check_scan_arg_types<Args...>();
 5397|   726k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   726k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.17M|{
 5135|  1.17M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.17M|                  "Scan argument types must be default constructible");
 5137|  1.17M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.17M|                  "Scan argument types must be Destructible");
 5139|  1.17M|    static_assert(
 5140|  1.17M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.17M|        "Scan argument types must not be references");
 5142|  1.17M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|   726k|    {
 5349|   726k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   726k|    {
 5360|   726k|        return {detail::make_arg<
 5361|   726k|            kind, Context,
 5362|   726k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   726k|                                 typename Context::char_type>::value>(args)...};
 5364|   726k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   726k|{
 5170|   726k|    return make_value<Context>(value).ref_value;
 5171|   726k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   803k|{
 5120|   803k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   803k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   803k|                                  needs_context_tag>) {
 5124|   803k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   803k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   803k|    }
 5126|   803k|    else {
 5127|   803k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   803k|            value, context_tag<Context>{}));
 5129|   803k|    }
 5130|   803k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   803k|    {                                                                        \
 4959|   803k|        return val;                                                          \
 4960|   803k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.17M|{
 5089|  1.17M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.17M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.17M|    constexpr bool scannable_char =
 5093|  1.17M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.17M|    static_assert(scannable_char,
 5095|  1.17M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.17M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.17M|    constexpr bool scannable_const =
 5099|  1.17M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.17M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.17M|    constexpr bool scannable_disabled =
 5103|  1.17M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.17M|    static_assert(scannable_disabled,
 5105|  1.17M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.17M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.17M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.17M|    static_assert(
 5110|  1.17M|        scannable,
 5111|  1.17M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.17M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.17M|    return arg_value{arg};
 5115|  1.17M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  1.17M|    {
 4902|  1.17M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   339k|    {
 7975|   339k|        return m_str;
 7976|   339k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   726k|    {
 5426|   726k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   726k|    {
 5379|   726k|        return m_argptrs;
 5380|   726k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   339k|{
 8820|   339k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 311k]
  |  |  ------------------
  ------------------
 8821|  27.9k|        return unexpected(result.error());
 8822|  27.9k|    }
 8823|   311k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   339k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  30.2k|    {
 1476|  30.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  30.2k|    {
  447|  30.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   376k|    {
 1177|   376k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   346k|    {
 5830|   346k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|   996k|    {
 5616|   996k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   346k|    {
 1430|   346k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   346k|    {
  437|   346k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   726k|    {
 5374|   726k|        return m_args;
 5375|   726k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   339k|    {
 7971|   339k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   376k|    {
 1598|   376k|        return has_value();
 1599|   376k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   722k|    {
  485|   722k|        return m_has_value;
  486|   722k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   346k|    {
 1673|   346k|        return &value();
 1674|   346k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   346k|    {
 1627|   346k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   346k|        return this->get_value();
 1629|   346k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   346k|    {
  451|   346k|        return m_value;
  452|   346k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   169k|{
 8934|   169k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   169k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   169k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   169k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  37.1k|{
 8973|  37.1k|    T value;
 8974|  37.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  37.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  37.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 34.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|  37.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.8k|    static_cast<    \
  |  |  929|  34.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.8k|    static_cast<    \
  |  |  929|  34.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  37.1k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  77.2k|{
 5155|  77.2k|    check_scan_arg_types<T>();
 5156|       |
 5157|  77.2k|    basic_scan_arg<Context> arg;
 5158|  77.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  77.2k|    arg.m_value = make_value<Context>(value);
 5160|  77.2k|    return arg;
 5161|  77.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  90.8k|    {
 2724|  90.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  90.8k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  90.8k|    {
 2705|  90.8k|        return decay_copy(t.begin());
 2706|  90.8k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  53.9M|{
 1949|  53.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  53.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  53.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.51M|    {
 2781|  2.51M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.51M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.51M|    {
 2763|  2.51M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.51M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   184k|{
 8867|   184k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   184k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   184k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   184k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   569k|{
 8654|   569k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   569k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   569k|{
 8591|   569k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   569k|    auto result = vscan_impl(buffer, format, args);
 8594|   569k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.9k, False: 527k]
  |  |  ------------------
  ------------------
 8595|  41.9k|        return unexpected(result.error());
 8596|  41.9k|    }
 8597|   527k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   569k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.25M|{
 4720|  1.25M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.25M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.25M|                  "\n"
 4724|  1.25M|                  "Unsupported range type given as input to a scanning "
 4725|  1.25M|                  "function.\n"
 4726|  1.25M|                  "A range needs to have a character type (value type) "
 4727|  1.25M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.25M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.25M|                  "to be included.\n"
 4730|  1.25M|                  "See the scnlib documentation for more details.");
 4731|  1.25M|    static_assert(
 4732|  1.25M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.25M|        "\n"
 4734|  1.25M|        "Unsupported range type given as input to a scanning "
 4735|  1.25M|        "function.\n"
 4736|  1.25M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.25M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.25M|        "not supported.");
 4739|  1.25M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.25M|                  "\n"
 4741|  1.25M|                  "Unsupported range type given as input to a scanning "
 4742|  1.25M|                  "function.\n"
 4743|  1.25M|                  "file_marker_found cannot be used as an "
 4744|  1.25M|                  "source range type to scn::scan.\n"
 4745|  1.25M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.25M|                  "and do not provide an explicit source range, "
 4747|  1.25M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.25M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.25M|                  "\n"
 4750|  1.25M|                  "Unsupported range type given as input to a scanning "
 4751|  1.25M|                  "function.\n"
 4752|  1.25M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.25M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.25M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.25M|                  "\n"
 4756|  1.25M|                  "Unsupported range type given as input to a scanning "
 4757|  1.25M|                  "function.\n"
 4758|  1.25M|                  "A range needs to model forward_range and have a valid "
 4759|  1.25M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.25M|                  "Examples of scannable ranges are std::string, "
 4761|  1.25M|                  "std::string_view, "
 4762|  1.25M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.25M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.25M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.25M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.25M|{
 4690|  1.25M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  1.25M|        return file_marker_found{};
 4692|  1.25M|    }
 4693|  1.25M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  1.25M|        if constexpr (ranges::range<Range>) {
 4695|  1.25M|            return insufficient_range{};
 4696|  1.25M|        }
 4697|  1.25M|        else {
 4698|  1.25M|            return invalid_input_range{};
 4699|  1.25M|        }
 4700|  1.25M|    }
 4701|  1.25M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  1.25M|        return invalid_char_type{};
 4703|  1.25M|    }
 4704|  1.25M|    else {
 4705|  1.25M|        return make_forward_scan_buffer(r);
 4706|  1.25M|    }
 4707|  1.25M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.25M|{
 4524|  1.25M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.25M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  1.25M|    {
 4411|  1.25M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  1.25M|    {
 4382|  1.25M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  1.25M|    {
 4151|  1.25M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.25M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.42M|    {
 2724|  2.42M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.42M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.42M|    {
 2705|  2.42M|        return decay_copy(t.begin());
 2706|  2.42M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  3.58M|    {
 3330|  3.58M|        return m_iterator;
 3331|  3.58M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  15.7M|    {
 4415|  15.7M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 287k, False: 15.4M]
  ------------------
 4416|   287k|            return false;
 4417|   287k|        }
 4418|  15.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  15.4M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  15.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  15.4M|        }
 4421|  15.4M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 14.1M, False: 1.24M]
  ------------------
 4422|  14.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  14.1M|                                          this->m_current_view.begin(),
 4424|  14.1M|                                          this->m_current_view.end());
 4425|  14.1M|        }
 4426|  15.4M|        m_latest = *m_cursor;
 4427|  15.4M|        ++m_cursor;
 4428|  15.4M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  15.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  15.4M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  15.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  15.4M|        }
 4432|  15.4M|        return true;
 4433|  15.4M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  46.5M|    {
 2781|  46.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  46.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  46.5M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  46.5M|    {
 2763|  46.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  46.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  46.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  47.7M|    {
 3334|  47.7M|        return m_sentinel;
 3335|  47.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.25M|    {
 4071|  1.25M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.25M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.25M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  90.8k|    {
 1476|  90.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  90.8k|    {
  447|  90.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.25M|    {
 1177|  1.25M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.16M|{
 5923|  1.16M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.16M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.16M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.16M|    }
 5927|  1.16M|    else {
 5928|  1.16M|        auto it = ranges::begin(source);
 5929|  1.16M|        while (n > 0) {
 5930|  1.16M|            --n;
 5931|  1.16M|            ++it;
 5932|  1.16M|        }
 5933|  1.16M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.16M|    }
 5935|  1.16M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.16M|    {
 2724|  1.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.16M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.16M|    {
 2705|  1.16M|        return decay_copy(t.begin());
 2706|  1.16M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.16M|{
 5910|  1.16M|    return ranges::end(source);
 5911|  1.16M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.16M|    {
 2781|  1.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.16M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.16M|    {
 2763|  1.16M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.16M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  1.16M|    {
 1430|  1.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  1.16M|    {
  437|  1.16M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   368k|    {
 7975|   368k|        return m_str;
 7976|   368k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   368k|{
 8820|   368k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 340k]
  |  |  ------------------
  ------------------
 8821|  27.9k|        return unexpected(result.error());
 8822|  27.9k|    }
 8823|   340k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   368k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.25M|    {
 1598|  1.25M|        return has_value();
 1599|  1.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.51M|    {
  485|  2.51M|        return m_has_value;
  486|  2.51M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  90.8k|    {
 1604|  90.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  90.8k|        return this->get_unexpected().error();
 1606|  90.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  90.8k|    {
  468|  90.8k|        return m_unexpected;
  469|  90.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  30.2k|    {
 1476|  30.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  30.2k|    {
  447|  30.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   406k|    {
 1177|   406k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  1.05M|    {
 1653|  1.05M|        return value();
 1654|  1.05M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  1.16M|    {
 1627|  1.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.16M|        return this->get_value();
 1629|  1.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.16M|    {
  451|  1.16M|        return m_value;
  452|  1.16M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   376k|    {
 5830|   376k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  1.16M|    {
 5681|  1.16M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   376k|    {
 1430|   376k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   376k|    {
  437|   376k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  2.42M|    {
 3316|  2.42M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   368k|    {
 7971|   368k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   406k|    {
 1598|   406k|        return has_value();
 1599|   406k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   783k|    {
  485|   783k|        return m_has_value;
  486|   783k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   376k|    {
 1673|   376k|        return &value();
 1674|   376k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   376k|    {
 1627|   376k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   376k|        return this->get_value();
 1629|   376k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   376k|    {
  451|   376k|        return m_value;
  452|   376k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.16M|    {
 5698|  1.16M|        return ranges::begin(m_range);
 5699|  1.16M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   184k|{
 8934|   184k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   184k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   184k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   184k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   569k|{
 8672|   569k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   569k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   569k|{
 8607|   569k|#if !SCN_DISABLE_LOCALE
 8608|   569k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   569k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   569k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   569k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   569k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.9k, False: 527k]
  |  |  ------------------
  ------------------
 8615|  41.9k|        return unexpected(result.error());
 8616|  41.9k|    }
 8617|   527k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   569k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  37.9k|{
 8973|  37.9k|    T value;
 8974|  37.9k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  37.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  37.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|  37.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  35.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  37.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   117k|{
 8685|   117k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   117k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   117k|{
 8631|   117k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   117k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.98k, False: 110k]
  |  |  ------------------
  ------------------
 8635|  6.98k|        return unexpected(result.error());
 8636|  6.98k|    }
 8637|   110k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   117k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   110k|    {
 1663|   110k|        return std::move(value());
 1664|   110k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   191k|{
 8867|   191k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   191k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   191k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   191k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   383k|    {
 7975|   383k|        return m_str;
 7976|   383k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   383k|{
 8820|   383k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 355k]
  |  |  ------------------
  ------------------
 8821|  27.9k|        return unexpected(result.error());
 8822|  27.9k|    }
 8823|   355k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   383k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  30.2k|    {
 1476|  30.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  30.2k|    {
  447|  30.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   422k|    {
 1177|   422k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   392k|    {
 5830|   392k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   392k|    {
 1430|   392k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   392k|    {
  437|   392k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   383k|    {
 7971|   383k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   422k|    {
 1598|   422k|        return has_value();
 1599|   422k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   815k|    {
  485|   815k|        return m_has_value;
  486|   815k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   392k|    {
 1673|   392k|        return &value();
 1674|   392k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   392k|    {
 1627|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   392k|        return this->get_value();
 1629|   392k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   392k|    {
  451|   392k|        return m_value;
  452|   392k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   191k|{
 8934|   191k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   191k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   191k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   191k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  39.6k|{
 8973|  39.6k|    T value;
 8974|  39.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  39.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 37.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  37.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  39.6k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   193k|{
 8867|   193k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   193k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   193k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   193k|    static_cast<    \
  |  |  929|   193k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   193k|    static_cast<    \
  |  |  929|   193k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   193k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   386k|    {
 7975|   386k|        return m_str;
 7976|   386k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   386k|{
 8820|   386k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 358k]
  |  |  ------------------
  ------------------
 8821|  27.9k|        return unexpected(result.error());
 8822|  27.9k|    }
 8823|   358k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   386k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  30.2k|    {
 1476|  30.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  30.2k|    {
  447|  30.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   427k|    {
 1177|   427k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   396k|    {
 5830|   396k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   396k|    {
 1430|   396k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   396k|    {
  437|   396k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   386k|    {
 7971|   386k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   427k|    {
 1598|   427k|        return has_value();
 1599|   427k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   823k|    {
  485|   823k|        return m_has_value;
  486|   823k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   396k|    {
 1673|   396k|        return &value();
 1674|   396k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   396k|    {
 1627|   396k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   396k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   396k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   396k|        return this->get_value();
 1629|   396k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   396k|    {
  451|   396k|        return m_value;
  452|   396k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   193k|{
 8934|   193k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   193k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   193k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   193k|    static_cast<    \
  |  |  929|   193k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   193k|    static_cast<    \
  |  |  929|   193k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   193k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  40.0k|{
 8973|  40.0k|    T value;
 8974|  40.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  40.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  40.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  40.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  40.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 37.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.32k|    }                                                  \
  |  |  |  | 3671|  40.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  37.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  37.7k|    static_cast<    \
  |  |  929|  37.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  37.7k|    static_cast<    \
  |  |  929|  37.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  40.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   186k|    {
 2724|   186k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   186k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   186k|    {
 2705|   186k|        return decay_copy(t.begin());
 2706|   186k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  3.58M|{
 1949|  3.58M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.58M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.09M|    {
 2781|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.09M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.09M|    {
 2763|  1.09M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.09M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   319k|{
 5396|   319k|    detail::check_scan_arg_types<Args...>();
 5397|   319k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   319k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   319k|    {
 5349|   319k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   319k|    {
 5360|   319k|        return {detail::make_arg<
 5361|   319k|            kind, Context,
 5362|   319k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   319k|                                 typename Context::char_type>::value>(args)...};
 5364|   319k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   319k|{
 5170|   319k|    return make_value<Context>(value).ref_value;
 5171|   319k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   348k|{
 5120|   348k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   348k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   348k|                                  needs_context_tag>) {
 5124|   348k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   348k|    }
 5126|   348k|    else {
 5127|   348k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   348k|            value, context_tag<Context>{}));
 5129|   348k|    }
 5130|   348k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   348k|    {                                                                        \
 4959|   348k|        return val;                                                          \
 4960|   348k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   248k|{
 8591|   248k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   248k|    auto result = vscan_impl(buffer, format, args);
 8594|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.8k, False: 165k]
  |  |  ------------------
  ------------------
 8595|  83.8k|        return unexpected(result.error());
 8596|  83.8k|    }
 8597|   165k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   248k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   545k|{
 4720|   545k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   545k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   545k|                  "\n"
 4724|   545k|                  "Unsupported range type given as input to a scanning "
 4725|   545k|                  "function.\n"
 4726|   545k|                  "A range needs to have a character type (value type) "
 4727|   545k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   545k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   545k|                  "to be included.\n"
 4730|   545k|                  "See the scnlib documentation for more details.");
 4731|   545k|    static_assert(
 4732|   545k|        !std::is_same_v<T, custom_char_traits>,
 4733|   545k|        "\n"
 4734|   545k|        "Unsupported range type given as input to a scanning "
 4735|   545k|        "function.\n"
 4736|   545k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   545k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   545k|        "not supported.");
 4739|   545k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   545k|                  "\n"
 4741|   545k|                  "Unsupported range type given as input to a scanning "
 4742|   545k|                  "function.\n"
 4743|   545k|                  "file_marker_found cannot be used as an "
 4744|   545k|                  "source range type to scn::scan.\n"
 4745|   545k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   545k|                  "and do not provide an explicit source range, "
 4747|   545k|                  "or use scn::scan with a FILE* directly.");
 4748|   545k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   545k|                  "\n"
 4750|   545k|                  "Unsupported range type given as input to a scanning "
 4751|   545k|                  "function.\n"
 4752|   545k|                  "In order to be scannable, a range needs to satisfy "
 4753|   545k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   545k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   545k|                  "\n"
 4756|   545k|                  "Unsupported range type given as input to a scanning "
 4757|   545k|                  "function.\n"
 4758|   545k|                  "A range needs to model forward_range and have a valid "
 4759|   545k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   545k|                  "Examples of scannable ranges are std::string, "
 4761|   545k|                  "std::string_view, "
 4762|   545k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   545k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   545k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   545k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   545k|{
 4659|   545k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   545k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   545k|    }
 4662|   545k|    else {
 4663|   545k|        return invalid_char_type{};
 4664|   545k|    }
 4665|   545k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   545k|    {
 2855|   545k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   545k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   545k|    {
 2836|   545k|        return t.data();
 2837|   545k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   545k|    {
 3231|   545k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.51k, False: 543k]
  ------------------
 3232|   545k|                   ? nullptr
 3233|   545k|                   : std::addressof(*ranges::begin(derived()));
 3234|   545k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   545k|    {
 3005|   545k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   545k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   545k|    {
 2978|   545k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   545k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  1.00M|    {
 3339|  1.00M|        return m_iterator == m_sentinel;
 3340|  1.00M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.08M|    {
 3185|  1.08M|        return static_cast<const D&>(*this);
 3186|  1.08M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   907k|    {
 2724|   907k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   907k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   907k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   907k|    {
 2705|   907k|        return decay_copy(t.begin());
 2706|   907k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  18.9M|    {
 3330|  18.9M|        return m_iterator;
 3331|  18.9M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   545k|    {
 2930|   545k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   545k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   545k|    {
 2896|   545k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   545k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  2.42M|    {
 3346|  2.42M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  2.42M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   181k|    {
 1476|   181k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   181k|    {
  447|   181k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   545k|    {
 1177|   545k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   363k|{
 5923|   363k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   363k|                      ranges::iterator_t<SourceRange>>) {
 5925|   363k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   363k|    }
 5927|   363k|    else {
 5928|   363k|        auto it = ranges::begin(source);
 5929|   363k|        while (n > 0) {
 5930|   363k|            --n;
 5931|   363k|            ++it;
 5932|   363k|        }
 5933|   363k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   363k|    }
 5935|   363k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.02M|    {
 2724|  1.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.02M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.02M|    {
 2705|  1.02M|        return decay_copy(t.begin());
 2706|  1.02M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   363k|{
 5910|   363k|    return ranges::end(source);
 5911|   363k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   363k|    {
 2781|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   363k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   363k|    {
 2763|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   363k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  10.8M|    {
 3334|  10.8M|        return m_sentinel;
 3335|  10.8M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   363k|    {
 1430|   363k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   363k|    {
  437|   363k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   159k|    {
 7975|   159k|        return m_str;
 7976|   159k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   319k|    {
 5426|   319k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   319k|    {
 5379|   319k|        return m_argptrs;
 5380|   319k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   995k|    {
 5478|   995k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   159k|{
 8820|   159k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 103k]
  |  |  ------------------
  ------------------
 8821|  55.8k|        return unexpected(result.error());
 8822|  55.8k|    }
 8823|   103k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   159k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   545k|    {
 1598|   545k|        return has_value();
 1599|   545k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.09M|    {
  485|  1.09M|        return m_has_value;
  486|  1.09M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   181k|    {
 1604|   181k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   181k|        return this->get_unexpected().error();
 1606|   181k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   181k|    {
  468|   181k|        return m_unexpected;
  469|   181k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  60.5k|    {
 1476|  60.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  60.5k|    {
  447|  60.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   174k|    {
 1177|   174k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   330k|    {
 1653|   330k|        return value();
 1654|   330k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   363k|    {
 1627|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   363k|        return this->get_value();
 1629|   363k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   363k|    {
  451|   363k|        return m_value;
  452|   363k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   113k|    {
 5830|   113k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   363k|    {
 5681|   363k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   113k|    {
 1430|   113k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   113k|    {
  437|   113k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   319k|    {
 5374|   319k|        return m_args;
 5375|   319k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  6.75M|    {
 3316|  6.75M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   995k|{
 7696|   995k|    return s;
 7697|   995k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   995k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   159k|    {
 7971|   159k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   174k|    {
 1598|   174k|        return has_value();
 1599|   174k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   288k|    {
  485|   288k|        return m_has_value;
  486|   288k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   113k|    {
 1673|   113k|        return &value();
 1674|   113k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   113k|    {
 1627|   113k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   113k|        return this->get_value();
 1629|   113k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   113k|    {
  451|   113k|        return m_value;
  452|   113k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   363k|    {
 5698|   363k|        return ranges::begin(m_range);
 5699|   363k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   248k|{
 8607|   248k|#if !SCN_DISABLE_LOCALE
 8608|   248k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   248k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   248k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   248k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.8k, False: 165k]
  |  |  ------------------
  ------------------
 8615|  83.8k|        return unexpected(result.error());
 8616|  83.8k|    }
 8617|   165k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   248k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  29.5k|{
 5155|  29.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  29.5k|    basic_scan_arg<Context> arg;
 5158|  29.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  29.5k|    arg.m_value = make_value<Context>(value);
 5160|  29.5k|    return arg;
 5161|  29.5k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.09M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  47.5k|{
 8631|  47.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  47.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  47.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.9k, False: 33.5k]
  |  |  ------------------
  ------------------
 8635|  13.9k|        return unexpected(result.error());
 8636|  13.9k|    }
 8637|  33.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  47.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  33.5k|    {
 1663|  33.5k|        return std::move(value());
 1664|  33.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   334k|{
 5396|   334k|    detail::check_scan_arg_types<Args...>();
 5397|   334k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   334k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   334k|    {
 5349|   334k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   334k|    {
 5360|   334k|        return {detail::make_arg<
 5361|   334k|            kind, Context,
 5362|   334k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   334k|                                 typename Context::char_type>::value>(args)...};
 5364|   334k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   334k|{
 5170|   334k|    return make_value<Context>(value).ref_value;
 5171|   334k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   367k|{
 5120|   367k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   367k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   367k|                                  needs_context_tag>) {
 5124|   367k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   367k|    }
 5126|   367k|    else {
 5127|   367k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   367k|            value, context_tag<Context>{}));
 5129|   367k|    }
 5130|   367k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   367k|    {                                                                        \
 4959|   367k|        return val;                                                          \
 4960|   367k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   167k|    {
 7975|   167k|        return m_str;
 7976|   167k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   334k|    {
 5426|   334k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   334k|    {
 5379|   334k|        return m_argptrs;
 5380|   334k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   167k|{
 8820|   167k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 111k]
  |  |  ------------------
  ------------------
 8821|  55.8k|        return unexpected(result.error());
 8822|  55.8k|    }
 8823|   111k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   167k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  60.5k|    {
 1476|  60.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  60.5k|    {
  447|  60.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   183k|    {
 1177|   183k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   123k|    {
 5830|   123k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   123k|    {
 1430|   123k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   123k|    {
  437|   123k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   334k|    {
 5374|   334k|        return m_args;
 5375|   334k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   167k|    {
 7971|   167k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   183k|    {
 1598|   183k|        return has_value();
 1599|   183k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   306k|    {
  485|   306k|        return m_has_value;
  486|   306k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   123k|    {
 1673|   123k|        return &value();
 1674|   123k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   123k|    {
 1627|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   123k|        return this->get_value();
 1629|   123k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   123k|    {
  451|   123k|        return m_value;
  452|   123k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  32.1k|{
 5155|  32.1k|    check_scan_arg_types<T>();
 5156|       |
 5157|  32.1k|    basic_scan_arg<Context> arg;
 5158|  32.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  32.1k|    arg.m_value = make_value<Context>(value);
 5160|  32.1k|    return arg;
 5161|  32.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   341k|{
 5396|   341k|    detail::check_scan_arg_types<Args...>();
 5397|   341k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   341k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   341k|    {
 5349|   341k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   341k|    {
 5360|   341k|        return {detail::make_arg<
 5361|   341k|            kind, Context,
 5362|   341k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   341k|                                 typename Context::char_type>::value>(args)...};
 5364|   341k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   341k|{
 5170|   341k|    return make_value<Context>(value).ref_value;
 5171|   341k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   374k|{
 5120|   374k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   374k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   374k|                                  needs_context_tag>) {
 5124|   374k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   374k|    }
 5126|   374k|    else {
 5127|   374k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   374k|            value, context_tag<Context>{}));
 5129|   374k|    }
 5130|   374k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   374k|    {                                                                        \
 4959|   374k|        return val;                                                          \
 4960|   374k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   170k|    {
 7975|   170k|        return m_str;
 7976|   170k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   341k|    {
 5426|   341k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   341k|    {
 5379|   341k|        return m_argptrs;
 5380|   341k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   170k|{
 8820|   170k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 114k]
  |  |  ------------------
  ------------------
 8821|  55.8k|        return unexpected(result.error());
 8822|  55.8k|    }
 8823|   114k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   170k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  60.5k|    {
 1476|  60.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  60.5k|    {
  447|  60.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   187k|    {
 1177|   187k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   126k|    {
 5830|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   126k|    {
 1430|   126k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   126k|    {
  437|   126k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   341k|    {
 5374|   341k|        return m_args;
 5375|   341k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   170k|    {
 7971|   170k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   187k|    {
 1598|   187k|        return has_value();
 1599|   187k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   314k|    {
  485|   314k|        return m_has_value;
  486|   314k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   126k|    {
 1673|   126k|        return &value();
 1674|   126k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   126k|    {
 1627|   126k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   126k|        return this->get_value();
 1629|   126k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   126k|    {
  451|   126k|        return m_value;
  452|   126k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  33.2k|{
 5155|  33.2k|    check_scan_arg_types<T>();
 5156|       |
 5157|  33.2k|    basic_scan_arg<Context> arg;
 5158|  33.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  33.2k|    arg.m_value = make_value<Context>(value);
 5160|  33.2k|    return arg;
 5161|  33.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   181k|    {
 2724|   181k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   181k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   181k|    {
 2705|   181k|        return decay_copy(t.begin());
 2706|   181k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  10.6M|{
 1949|  10.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.09M|    {
 2781|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.09M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.09M|    {
 2763|  1.09M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.09M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   248k|{
 8591|   248k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   248k|    auto result = vscan_impl(buffer, format, args);
 8594|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.8k, False: 164k]
  |  |  ------------------
  ------------------
 8595|  83.8k|        return unexpected(result.error());
 8596|  83.8k|    }
 8597|   164k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   248k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   545k|{
 4720|   545k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   545k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   545k|                  "\n"
 4724|   545k|                  "Unsupported range type given as input to a scanning "
 4725|   545k|                  "function.\n"
 4726|   545k|                  "A range needs to have a character type (value type) "
 4727|   545k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   545k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   545k|                  "to be included.\n"
 4730|   545k|                  "See the scnlib documentation for more details.");
 4731|   545k|    static_assert(
 4732|   545k|        !std::is_same_v<T, custom_char_traits>,
 4733|   545k|        "\n"
 4734|   545k|        "Unsupported range type given as input to a scanning "
 4735|   545k|        "function.\n"
 4736|   545k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   545k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   545k|        "not supported.");
 4739|   545k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   545k|                  "\n"
 4741|   545k|                  "Unsupported range type given as input to a scanning "
 4742|   545k|                  "function.\n"
 4743|   545k|                  "file_marker_found cannot be used as an "
 4744|   545k|                  "source range type to scn::scan.\n"
 4745|   545k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   545k|                  "and do not provide an explicit source range, "
 4747|   545k|                  "or use scn::scan with a FILE* directly.");
 4748|   545k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   545k|                  "\n"
 4750|   545k|                  "Unsupported range type given as input to a scanning "
 4751|   545k|                  "function.\n"
 4752|   545k|                  "In order to be scannable, a range needs to satisfy "
 4753|   545k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   545k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   545k|                  "\n"
 4756|   545k|                  "Unsupported range type given as input to a scanning "
 4757|   545k|                  "function.\n"
 4758|   545k|                  "A range needs to model forward_range and have a valid "
 4759|   545k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   545k|                  "Examples of scannable ranges are std::string, "
 4761|   545k|                  "std::string_view, "
 4762|   545k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   545k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   545k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   545k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   545k|{
 4690|   545k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   545k|        return file_marker_found{};
 4692|   545k|    }
 4693|   545k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   545k|        if constexpr (ranges::range<Range>) {
 4695|   545k|            return insufficient_range{};
 4696|   545k|        }
 4697|   545k|        else {
 4698|   545k|            return invalid_input_range{};
 4699|   545k|        }
 4700|   545k|    }
 4701|   545k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   545k|        return invalid_char_type{};
 4703|   545k|    }
 4704|   545k|    else {
 4705|   545k|        return make_forward_scan_buffer(r);
 4706|   545k|    }
 4707|   545k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   545k|{
 4524|   545k|    return basic_scan_forward_buffer_impl(range);
 4525|   545k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   545k|    {
 4411|   545k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   545k|    {
 4382|   545k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   545k|    {
 4151|   545k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   545k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   908k|    {
 2724|   908k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   908k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   908k|    {
 2705|   908k|        return decay_copy(t.begin());
 2706|   908k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  1.27M|    {
 3330|  1.27M|        return m_iterator;
 3331|  1.27M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  2.70M|    {
 4415|  2.70M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 174k, False: 2.53M]
  ------------------
 4416|   174k|            return false;
 4417|   174k|        }
 4418|  2.53M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  2.53M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.53M|        }
 4421|  2.53M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.99M, False: 543k]
  ------------------
 4422|  1.99M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.99M|                                          this->m_current_view.begin(),
 4424|  1.99M|                                          this->m_current_view.end());
 4425|  1.99M|        }
 4426|  2.53M|        m_latest = *m_cursor;
 4427|  2.53M|        ++m_cursor;
 4428|  2.53M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.53M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  2.53M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.53M|        }
 4432|  2.53M|        return true;
 4433|  2.53M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  7.77M|    {
 2781|  7.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  7.77M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  7.77M|    {
 2763|  7.77M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  7.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  7.77M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  8.13M|    {
 3334|  8.13M|        return m_sentinel;
 3335|  8.13M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   545k|    {
 4071|   545k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   545k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   545k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   181k|    {
 1476|   181k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   181k|    {
  447|   181k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   545k|    {
 1177|   545k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   363k|{
 5923|   363k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   363k|                      ranges::iterator_t<SourceRange>>) {
 5925|   363k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   363k|    }
 5927|   363k|    else {
 5928|   363k|        auto it = ranges::begin(source);
 5929|   363k|        while (n > 0) {
 5930|   363k|            --n;
 5931|   363k|            ++it;
 5932|   363k|        }
 5933|   363k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   363k|    }
 5935|   363k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   363k|    {
 2724|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   363k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   363k|    {
 2705|   363k|        return decay_copy(t.begin());
 2706|   363k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   363k|{
 5910|   363k|    return ranges::end(source);
 5911|   363k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   363k|    {
 2781|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   363k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   363k|    {
 2763|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   363k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   363k|    {
 1430|   363k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   363k|    {
  437|   363k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   159k|    {
 7975|   159k|        return m_str;
 7976|   159k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   159k|{
 8820|   159k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 103k]
  |  |  ------------------
  ------------------
 8821|  55.8k|        return unexpected(result.error());
 8822|  55.8k|    }
 8823|   103k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   159k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   545k|    {
 1598|   545k|        return has_value();
 1599|   545k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.09M|    {
  485|  1.09M|        return m_has_value;
  486|  1.09M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   181k|    {
 1604|   181k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   181k|        return this->get_unexpected().error();
 1606|   181k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   181k|    {
  468|   181k|        return m_unexpected;
  469|   181k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  60.5k|    {
 1476|  60.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  60.5k|    {
  447|  60.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   174k|    {
 1177|   174k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   329k|    {
 1653|   329k|        return value();
 1654|   329k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   363k|    {
 1627|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   363k|        return this->get_value();
 1629|   363k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   363k|    {
  451|   363k|        return m_value;
  452|   363k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   113k|    {
 5830|   113k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   363k|    {
 5681|   363k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   113k|    {
 1430|   113k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   113k|    {
  437|   113k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   908k|    {
 3316|   908k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   159k|    {
 7971|   159k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   174k|    {
 1598|   174k|        return has_value();
 1599|   174k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   287k|    {
  485|   287k|        return m_has_value;
  486|   287k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   113k|    {
 1673|   113k|        return &value();
 1674|   113k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   113k|    {
 1627|   113k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   113k|        return this->get_value();
 1629|   113k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   113k|    {
  451|   113k|        return m_value;
  452|   113k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   363k|    {
 5698|   363k|        return ranges::begin(m_range);
 5699|   363k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   248k|{
 8607|   248k|#if !SCN_DISABLE_LOCALE
 8608|   248k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   248k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   248k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   248k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   248k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.8k, False: 164k]
  |  |  ------------------
  ------------------
 8615|  83.8k|        return unexpected(result.error());
 8616|  83.8k|    }
 8617|   164k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   248k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  47.4k|{
 8631|  47.4k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  47.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  47.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.9k, False: 33.4k]
  |  |  ------------------
  ------------------
 8635|  13.9k|        return unexpected(result.error());
 8636|  13.9k|    }
 8637|  33.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  47.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  33.4k|    {
 1663|  33.4k|        return std::move(value());
 1664|  33.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   167k|    {
 7975|   167k|        return m_str;
 7976|   167k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   167k|{
 8820|   167k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 111k]
  |  |  ------------------
  ------------------
 8821|  55.8k|        return unexpected(result.error());
 8822|  55.8k|    }
 8823|   111k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   167k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  60.5k|    {
 1476|  60.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  60.5k|    {
  447|  60.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   183k|    {
 1177|   183k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   122k|    {
 5830|   122k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   122k|    {
 1430|   122k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   122k|    {
  437|   122k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   167k|    {
 7971|   167k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   183k|    {
 1598|   183k|        return has_value();
 1599|   183k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   306k|    {
  485|   306k|        return m_has_value;
  486|   306k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   122k|    {
 1673|   122k|        return &value();
 1674|   122k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   122k|    {
 1627|   122k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   122k|        return this->get_value();
 1629|   122k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   122k|    {
  451|   122k|        return m_value;
  452|   122k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   170k|    {
 7975|   170k|        return m_str;
 7976|   170k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   170k|{
 8820|   170k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 114k]
  |  |  ------------------
  ------------------
 8821|  55.8k|        return unexpected(result.error());
 8822|  55.8k|    }
 8823|   114k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   170k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  60.5k|    {
 1476|  60.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  60.5k|    {
  447|  60.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   187k|    {
 1177|   187k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   126k|    {
 5830|   126k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   126k|    {
 1430|   126k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   126k|    {
  437|   126k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   170k|    {
 7971|   170k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   187k|    {
 1598|   187k|        return has_value();
 1599|   187k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   314k|    {
  485|   314k|        return m_has_value;
  486|   314k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   126k|    {
 1673|   126k|        return &value();
 1674|   126k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   126k|    {
 1627|   126k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   126k|        return this->get_value();
 1629|   126k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   126k|    {
  451|   126k|        return m_value;
  452|   126k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  3.83M|    {
 3568|  3.83M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.83M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  3.83M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  15.9M|    {
 3574|  15.9M|        return m_code == good;
 3575|  15.9M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   419k|    {
 3585|   419k|        return m_code;
 3586|   419k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  56.7M|    {
 3330|  56.7M|        return m_iterator;
 3331|  56.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  22.5M|    {
 3330|  22.5M|        return m_iterator;
 3331|  22.5M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  2.49M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   663k|    {
 6272|   663k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   663k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|   663k|            m_specs.localized = true;
 6274|   663k|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|   663k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.82M|    {
 6303|  1.82M|        m_specs.type = type;
 6304|  1.82M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.49M|    {
 6376|  2.49M|        return static_cast<bool>(m_error);
 6377|  2.49M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   419k|{
 3609|   419k|    return a.code() == b;
 3610|   419k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   419k|{
 3613|   419k|    return !(a == b);
 3614|   419k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   663k|{
 7063|   663k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 663k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 663k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 663k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 663k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 663k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 663k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 663k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 663k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 663k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 663k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 663k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 663k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 663k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 663k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 663k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 663k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   211k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 211k, False: 452k]
  ------------------
 7091|   435k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 223k, False: 440k]
  ------------------
 7092|   663k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 228k, False: 435k]
  ------------------
 7093|   663k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 663k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 663k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 663k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 663k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 663k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 663k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   663k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   663k|            SCN_CLANG_POP
 7110|   663k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   663k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.91M|    {
 2896|  2.91M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.91M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.91M|    {
 2930|  2.91M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.91M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.91M|    {
 2953|  2.91M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.91M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.91M|    {
 2962|  2.91M|        return fn::impl(std::forward<T>(t));
 2963|  2.91M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|    988|{
 3654|    988|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    988|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    988|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.38k|{
 3654|  2.38k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.38k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  30.2k|{
 3654|  30.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  30.2k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  2.49M|{
 7193|  2.49M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 1.82M, False: 663k]
  ------------------
 7194|  2.49M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 1.82M]
  ------------------
 7195|  1.82M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 1.82M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  2.49M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   356M|    {
 4195|   356M|        return m_end == nullptr;
 4196|   356M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   960k|{
 3715|   960k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   960k|                                          const CharT*, const CharT*>) {
 3717|   960k|        return {first, last};
 3718|   960k|    }
 3719|   960k|    else {
 3720|   960k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   960k|    }
 3722|   960k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  4.73M|    {
 4211|  4.73M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 4.73M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  4.73M|        return parent()->get_segment_starting_at(position());
 4217|  4.73M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   198M|    {
 4205|   198M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   198M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   198M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   198M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  4.73M|    {
 4101|  4.73M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06M, False: 2.66M]
  |  |  ------------------
  ------------------
 4102|  4.73M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.06M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.06M|        }
 4105|  2.66M|        const auto start = pos - m_putback_buffer.size();
 4106|  2.66M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  2.66M|        return m_current_view.substr(start);
 4108|  2.66M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  3.30M|    {
 4200|  3.30M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  3.30M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  3.30M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  8.67M|    {
 4190|  8.67M|        return m_position;
 4191|  8.67M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  3.76M|    {
 4123|  3.76M|        return m_is_contiguous;
 4124|  3.76M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  71.7M|    {
 4195|  71.7M|        return m_end == nullptr;
 4196|  71.7M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   353k|{
 3715|   353k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   353k|                                          const CharT*, const CharT*>) {
 3717|   353k|        return {first, last};
 3718|   353k|    }
 3719|   353k|    else {
 3720|   353k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   353k|    }
 3722|   353k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  1.27M|    {
 4211|  1.27M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.27M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.27M|        return parent()->get_segment_starting_at(position());
 4217|  1.27M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  38.4M|    {
 4205|  38.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  38.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  38.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  38.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  1.27M|    {
 4101|  1.27M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 718k, False: 558k]
  |  |  ------------------
  ------------------
 4102|  1.27M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   718k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   718k|        }
 4105|   558k|        const auto start = pos - m_putback_buffer.size();
 4106|   558k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   558k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   558k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   558k|        return m_current_view.substr(start);
 4108|   558k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.41M|    {
 4200|  1.41M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.41M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.41M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  2.82M|    {
 4190|  2.82M|        return m_position;
 4191|  2.82M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.63M|    {
 4123|  1.63M|        return m_is_contiguous;
 4124|  1.63M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  9.94M|    {
 3180|  9.94M|        return static_cast<D&>(*this);
 3181|  9.94M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  4.97M|    {
 2978|  4.97M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  4.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  4.97M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  4.97M|    {
 3005|  4.97M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  4.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  4.97M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.97M|    {
 3221|  4.97M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 11.4k, False: 4.96M]
  ------------------
 3222|  4.97M|                   ? nullptr
 3223|  4.97M|                   : std::addressof(*ranges::begin(derived()));
 3224|  4.97M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   919k|    {
 3180|   919k|        return static_cast<D&>(*this);
 3181|   919k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   459k|    {
 2978|   459k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   459k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   459k|    {
 3005|   459k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   459k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   459k|    {
 3221|   459k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 459k]
  ------------------
 3222|   459k|                   ? nullptr
 3223|   459k|                   : std::addressof(*ranges::begin(derived()));
 3224|   459k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|   903k|    {
 8169|   903k|        return ranges::subrange{begin(), end()};
 8170|   903k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  2.64M|    {
 8153|  2.64M|        return m_current;
 8154|  2.64M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|   903k|    {
 8161|   903k|        return ranges::default_sentinel;
 8162|   903k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  13.8M|    {
 3316|  13.8M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  5.28M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.25M|    {
 1837|  1.25M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.25M|                                            std::forward<F>(f));
 1839|  1.25M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.25M|{
 1323|  1.25M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.25M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.25M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.25M|            return result(*std::forward<Exp>(exp));
 1327|  1.25M|        }
 1328|       |
 1329|  1.25M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.25M|        return result(unexpect, monostate{});
 1331|  1.25M|    }
 1332|  1.25M|    else {
 1333|  1.25M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.25M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.23M, False: 19.1k]
  |  |  ------------------
  ------------------
 1335|  1.25M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.25M|                   : result(unexpect,
 1337|  19.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.25M|    }
 1340|  1.25M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  13.3M|    {
  485|  13.3M|        return m_has_value;
  486|  13.3M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  4.50M|    {
 1663|  4.50M|        return std::move(value());
 1664|  4.50M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  5.14M|    {
 1627|  5.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.14M|        return this->get_value();
 1629|  5.14M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  5.14M|    {
  451|  5.14M|        return m_value;
  452|  5.14M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  5.56M|    {
 1430|  5.56M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  5.56M|    {
  437|  5.56M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.10M|    {
 1177|  7.10M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  42.4k|{
 1211|  42.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  42.4k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  55.1k|    {
 1614|  55.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  55.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  55.1k|        return std::move(this->get_unexpected().error());
 1616|  55.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  74.4k|    {
  468|  74.4k|        return m_unexpected;
  469|  74.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   421k|    {
  361|   421k|        return m_unexpected;
  362|   421k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.24M|    {
 1486|  1.24M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.47M|    {
  447|  1.47M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   402k|    {
 8169|   402k|        return ranges::subrange{begin(), end()};
 8170|   402k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  1.06M|    {
 8153|  1.06M|        return m_current;
 8154|  1.06M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   402k|    {
 8161|   402k|        return ranges::default_sentinel;
 8162|   402k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  5.46M|    {
 3316|  5.46M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   545k|    {
 1837|   545k|        return detail::transform_error_impl(std::move(*this),
 1838|   545k|                                            std::forward<F>(f));
 1839|   545k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   545k|{
 1323|   545k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   545k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   545k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   545k|            return result(*std::forward<Exp>(exp));
 1327|   545k|        }
 1328|       |
 1329|   545k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   545k|        return result(unexpect, monostate{});
 1331|   545k|    }
 1332|   545k|    else {
 1333|   545k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   545k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   545k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 541k, False: 3.51k]
  |  |  ------------------
  ------------------
 1335|   545k|                   ? result(*std::forward<Exp>(exp))
 1336|   545k|                   : result(unexpect,
 1337|  3.51k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.51k|                                           std::forward<Exp>(exp).error()));
 1339|   545k|    }
 1340|   545k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.18M|    {
  485|  5.18M|        return m_has_value;
  486|  5.18M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.90M|    {
 1663|  1.90M|        return std::move(value());
 1664|  1.90M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.92M|    {
 1627|  1.92M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.92M|        return this->get_value();
 1629|  1.92M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.92M|    {
  451|  1.92M|        return m_value;
  452|  1.92M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.89M|    {
 1430|  1.89M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.89M|    {
  437|  1.89M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.11M|    {
 1177|  3.11M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  56.2k|    {
 1614|  56.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  56.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  56.2k|        return std::move(this->get_unexpected().error());
 1616|  56.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  58.0k|    {
  468|  58.0k|        return m_unexpected;
  469|  58.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   717k|    {
 1486|   717k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.21M|    {
  447|  1.21M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   160k|    {
  347|   160k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   160k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   160k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   201k|    {
 1476|   201k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.27M|    {
  447|  1.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.25M|    {
 1177|  6.25M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  4.91M|    {
 1430|  4.91M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.91M|    {
  437|  4.91M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  7.33M|    {
 1598|  7.33M|        return has_value();
 1599|  7.33M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  11.4M|    {
  485|  11.4M|        return m_has_value;
  486|  11.4M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   241k|    {
 1604|   241k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   241k|        return this->get_unexpected().error();
 1606|   241k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   241k|    {
  468|   241k|        return m_unexpected;
  469|   241k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  3.16M|    {
 1663|  3.16M|        return std::move(value());
 1664|  3.16M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.92M|    {
 1627|  3.92M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.92M|        return this->get_value();
 1629|  3.92M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.92M|    {
  451|  3.92M|        return m_value;
  452|  3.92M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   404k|    {
 1476|   404k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.02M|    {
  447|  1.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.11M|    {
 1177|  3.11M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  2.08M|    {
 1430|  2.08M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.08M|    {
  437|  2.08M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.65M|    {
 1598|  3.65M|        return has_value();
 1599|  3.65M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.77M|    {
  485|  5.77M|        return m_has_value;
  486|  5.77M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   486k|    {
 1604|   486k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   486k|        return this->get_unexpected().error();
 1606|   486k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   486k|    {
  468|   486k|        return m_unexpected;
  469|   486k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.36M|    {
 1663|  1.36M|        return std::move(value());
 1664|  1.36M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.62M|    {
 1627|  1.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.62M|        return this->get_value();
 1629|  1.62M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.62M|    {
  451|  1.62M|        return m_value;
  452|  1.62M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.10M|    {
 1837|  1.10M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.10M|                                            std::forward<F>(f));
 1839|  1.10M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.10M|{
 1323|  1.10M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.10M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.10M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.10M|            return result(*std::forward<Exp>(exp));
 1327|  1.10M|        }
 1328|       |
 1329|  1.10M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.10M|        return result(unexpect, monostate{});
 1331|  1.10M|    }
 1332|  1.10M|    else {
 1333|  1.10M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.10M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.09M, False: 16.1k]
  |  |  ------------------
  ------------------
 1335|  1.10M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.10M|                   : result(unexpect,
 1337|  16.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  16.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.10M|    }
 1340|  1.10M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.20M|    {
  485|  4.20M|        return m_has_value;
  486|  4.20M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.09M|    {
 1663|  1.09M|        return std::move(value());
 1664|  1.09M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.43M|    {
 1627|  1.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.43M|        return this->get_value();
 1629|  1.43M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.43M|    {
  451|  1.43M|        return m_value;
  452|  1.43M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  16.1k|    {
 1614|  16.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  16.1k|        return std::move(this->get_unexpected().error());
 1616|  16.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  21.0k|    {
  468|  21.0k|        return m_unexpected;
  469|  21.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.07M|    {
 1486|  1.07M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  10.9M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   226k|    {
 1476|   226k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  11.0M|    {
 4280|  11.0M|        return x.is_at_end();
 4281|  11.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  27.1M|    {
 4324|  27.1M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 27.1M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  27.1M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 27.1M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  27.1M|        return !read_at_position();
 4331|  27.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   116M|    {
 4304|   116M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   116M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   116M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 116M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   116M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   116M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 100M, False: 15.7M]
  |  |  ------------------
  ------------------
 4311|   100M|            return true;
 4312|   100M|        }
 4313|       |
 4314|  31.1M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 15.7M, False: 15.4M]
  ------------------
 4315|  15.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 287k, False: 15.4M]
  ------------------
 4316|   287k|                return false;
 4317|   287k|            }
 4318|  15.7M|        }
 4319|  15.4M|        return true;
 4320|  15.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   151M|    {
 4081|   151M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   151M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  30.2M|    {
 4239|  30.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  30.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  30.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 30.2M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  30.2M|        auto res = read_at_position();
 4248|  30.2M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  30.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  30.2M|        return parent()->get_character_at(m_position);
 4250|  30.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  30.2M|    {
 4112|  30.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  30.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.1M, False: 11.1M]
  |  |  ------------------
  ------------------
 4113|  30.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  19.1M|            return m_putback_buffer[pos];
 4115|  19.1M|        }
 4116|  11.1M|        const auto start = pos - m_putback_buffer.size();
 4117|  11.1M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  11.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  11.1M|        return m_current_view[start];
 4119|  11.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  8.01M|    {
 1430|  8.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  8.01M|    {
  437|  8.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.09M|    {
 1177|  8.09M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   141k|    {
  347|   141k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   141k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   141k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  74.4k|    {
 1476|  74.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  74.4k|    {
  447|  74.4k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   210k|    {
  356|   210k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   210k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   210k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.53M|    {
 1598|  3.53M|        return has_value();
 1599|  3.53M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|   642k|    {
 1653|   642k|        return value();
 1654|   642k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  28.4M|    {
 4274|  28.4M|        return !(lhs == rhs);
 4275|  28.4M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  31.7M|    {
 4269|  31.7M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 31.7M, False: 0]
  |  Branch (4269:46): [True: 4.16M, False: 27.5M]
  ------------------
 4270|  31.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  59.2M|    {
 4225|  59.2M|        ++m_position;
 4226|  59.2M|        (void)read_at_position();
 4227|  59.2M|        return *this;
 4228|  59.2M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  68.9k|    {
  347|  68.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  68.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  68.9k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  14.4k|    {
 1476|  14.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  14.4k|    {
  447|  14.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.72M|    {
 1177|  1.72M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.71M|    {
 1430|  1.71M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  1.71M|    {
  437|  1.71M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.72M|    {
 1598|  1.72M|        return has_value();
 1599|  1.72M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.45M|    {
  485|  3.45M|        return m_has_value;
  486|  3.45M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  14.4k|    {
 1604|  14.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  14.4k|        return this->get_unexpected().error();
 1606|  14.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  14.4k|    {
  468|  14.4k|        return m_unexpected;
  469|  14.4k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.71M|    {
 1663|  1.71M|        return std::move(value());
 1664|  1.71M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.71M|    {
 1627|  1.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.71M|        return this->get_value();
 1629|  1.71M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.71M|    {
  451|  1.71M|        return m_value;
  452|  1.71M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  38.7M|    {
 3334|  38.7M|        return m_sentinel;
 3335|  38.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  62.1k|    {
  347|  62.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  62.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  62.1k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  13.7M|    {
  361|  13.7M|        return m_unexpected;
  362|  13.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.73M|    {
  356|  3.73M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.73M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.73M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  16.7M|    {
  347|  16.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  16.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  16.7M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  16.7M|    {
  361|  16.7M|        return m_unexpected;
  362|  16.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  16.7M|    {
  356|  16.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  16.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  16.7M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   141k|{
 1211|   141k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   141k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.52M|    {
  347|  3.52M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.52M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.52M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  19.3k|    {
 1604|  19.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.3k|        return this->get_unexpected().error();
 1606|  19.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.27M|    {
 1476|  1.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.31M|    {
  447|  1.31M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.7M|    {
 1177|  13.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|   648k|    {
 1430|   648k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   648k|    {
  437|   648k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  7.01M|    {
 1476|  7.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  7.01M|    {
  447|  7.01M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  15.0M|    {
 1598|  15.0M|        return has_value();
 1599|  15.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  26.5M|    {
  485|  26.5M|        return m_has_value;
  486|  26.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.53M|    {
 1604|  3.53M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.53M|        return this->get_unexpected().error();
 1606|  3.53M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.53M|    {
  468|  3.53M|        return m_unexpected;
  469|  3.53M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  1.35M|    {
 1430|  1.35M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.35M|    {
  437|  1.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.35M|    {
 1177|  1.35M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  3.51M|    {
 1653|  3.51M|        return value();
 1654|  3.51M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  6.77M|    {
 1627|  6.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.77M|        return this->get_value();
 1629|  6.77M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.77M|    {
  451|  6.77M|        return m_value;
  452|  6.77M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   116k|    {
 1598|   116k|        return has_value();
 1599|   116k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.70M|    {
  485|  2.70M|        return m_has_value;
  486|  2.70M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.23M|    {
 1663|  1.23M|        return std::move(value());
 1664|  1.23M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.35M|    {
 1627|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35M|        return this->get_value();
 1629|  1.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.35M|    {
  451|  1.35M|        return m_value;
  452|  1.35M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.30M|    {
 1837|  3.30M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.30M|                                            std::forward<F>(f));
 1839|  3.30M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.30M|{
 1323|  3.30M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.30M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.30M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.30M|            return result(*std::forward<Exp>(exp));
 1327|  3.30M|        }
 1328|       |
 1329|  3.30M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.30M|        return result(unexpect, monostate{});
 1331|  3.30M|    }
 1332|  3.30M|    else {
 1333|  3.30M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.30M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.26M, False: 35.9k]
  |  |  ------------------
  ------------------
 1335|  3.30M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.30M|                   : result(unexpect,
 1337|  35.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.9k|                                           std::forward<Exp>(exp).error()));
 1339|  3.30M|    }
 1340|  3.30M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  4.81M|    {
 1430|  4.81M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  4.81M|    {
  437|  4.81M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  35.9k|    {
 1486|  35.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.26M|    {
 1663|  3.26M|        return std::move(value());
 1664|  3.26M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.41M|    {
 3330|  1.41M|        return m_iterator;
 3331|  1.41M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.41M|    {
 3334|  1.41M|        return m_sentinel;
 3335|  1.41M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  8.32M|    {
 1598|  8.32M|        return has_value();
 1599|  8.32M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  13.0M|    {
  485|  13.0M|        return m_has_value;
  486|  13.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   299k|    {
 1604|   299k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   299k|        return this->get_unexpected().error();
 1606|   299k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   299k|    {
  468|   299k|        return m_unexpected;
  469|   299k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.57M|    {
 1663|  3.57M|        return std::move(value());
 1664|  3.57M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.45M|    {
 1627|  4.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.45M|        return this->get_value();
 1629|  4.45M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.45M|    {
  451|  4.45M|        return m_value;
  452|  4.45M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.22M|{
  326|  2.22M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.22M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  1.11M|    {
 3316|  1.11M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  16.0M|    {
 4291|  16.0M|        return !x.is_at_end();
 4292|  16.0M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  21.0k|    {
 1476|  21.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  21.0k|    {
  447|  21.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.74M|    {
 1177|  2.74M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.72M|    {
 1430|  2.72M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.72M|    {
  437|  2.72M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.63M|    {
 1598|  1.63M|        return has_value();
 1599|  1.63M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   347k|    {
 1653|   347k|        return value();
 1654|   347k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  11.6k|    {
 1476|  11.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  11.6k|    {
  447|  11.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.48M|    {
 1177|  1.48M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.47M|    {
 1430|  1.47M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.47M|    {
  437|  1.47M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.48M|    {
 1598|  1.48M|        return has_value();
 1599|  1.48M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.96M|    {
  485|  2.96M|        return m_has_value;
  486|  2.96M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.6k|    {
 1604|  11.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.6k|        return this->get_unexpected().error();
 1606|  11.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.6k|    {
  468|  11.6k|        return m_unexpected;
  469|  11.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.47M|    {
 1663|  1.47M|        return std::move(value());
 1664|  1.47M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.47M|    {
 1627|  1.47M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.47M|        return this->get_value();
 1629|  1.47M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.47M|    {
  451|  1.47M|        return m_value;
  452|  1.47M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.87k|    {
 1604|  4.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.87k|        return this->get_unexpected().error();
 1606|  4.87k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.12M|    {
 1476|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.12M|    {
  447|  1.12M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.25M|    {
 1177|  6.25M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   352k|    {
 1430|   352k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   352k|    {
  437|   352k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  4.31M|    {
 1476|  4.31M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.31M|    {
  447|  4.31M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  7.35M|    {
 1598|  7.35M|        return has_value();
 1599|  7.35M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  12.5M|    {
  485|  12.5M|        return m_has_value;
  486|  12.5M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.99M|    {
 1604|  2.99M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.99M|        return this->get_unexpected().error();
 1606|  2.99M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.99M|    {
  468|  2.99M|        return m_unexpected;
  469|  2.99M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  1.12M|    {
 1430|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.12M|    {
  437|  1.12M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.12M|    {
 1177|  1.12M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.15M|    {
 1653|  1.15M|        return value();
 1654|  1.15M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.15M|    {
 1627|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.15M|        return this->get_value();
 1629|  1.15M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.15M|    {
  451|  1.15M|        return m_value;
  452|  1.15M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  28.6k|    {
 1598|  28.6k|        return has_value();
 1599|  28.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.24M|    {
  485|  2.24M|        return m_has_value;
  486|  2.24M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.09M|    {
 1663|  1.09M|        return std::move(value());
 1664|  1.09M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.12M|    {
 1627|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.12M|        return this->get_value();
 1629|  1.12M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.12M|    {
  451|  1.12M|        return m_value;
  452|  1.12M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   470k|    {
 1430|   470k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   470k|    {
  437|   470k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.10M|    {
 2855|  2.10M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.10M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.10M|    {
 2836|  2.10M|        return t.data();
 2837|  2.10M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   827k|    {
 1476|   827k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   827k|    {
  447|   827k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.55M|    {
 1177|  9.55M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  8.61M|    {
 1430|  8.61M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  8.61M|    {
  437|  8.61M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  5.82M|    {
 1663|  5.82M|        return std::move(value());
 1664|  5.82M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.61M|{
 1211|  3.61M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.61M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.23M|    {
 1837|  1.23M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.23M|                                            std::forward<F>(f));
 1839|  1.23M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.23M|{
 1323|  1.23M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.23M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.23M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.23M|            return result(*std::forward<Exp>(exp));
 1327|  1.23M|        }
 1328|       |
 1329|  1.23M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.23M|        return result(unexpect, monostate{});
 1331|  1.23M|    }
 1332|  1.23M|    else {
 1333|  1.23M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.23M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.23M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.23M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.23M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.23M|    }
 1340|  1.23M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.23M|    {
 1430|  1.23M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.23M|    {
  437|  1.23M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.23M|    {
 1177|  1.23M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.23M|    {
 1598|  1.23M|        return has_value();
 1599|  1.23M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.47M|    {
  485|  2.47M|        return m_has_value;
  486|  2.47M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.23M|    {
 1663|  1.23M|        return std::move(value());
 1664|  1.23M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.23M|    {
 1627|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.23M|        return this->get_value();
 1629|  1.23M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.23M|    {
  451|  1.23M|        return m_value;
  452|  1.23M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.22M|    {
 1823|  1.22M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.22M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  1.22M|{
 1323|  1.22M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.22M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.22M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.22M|            return result(*std::forward<Exp>(exp));
 1327|  1.22M|        }
 1328|       |
 1329|  1.22M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.22M|        return result(unexpect, monostate{});
 1331|  1.22M|    }
 1332|  1.22M|    else {
 1333|  1.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 1335|  1.22M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.22M|                   : result(unexpect,
 1337|  1.22M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.22M|                                           std::forward<Exp>(exp).error()));
 1339|  1.22M|    }
 1340|  1.22M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|  62.0k|    {
 1430|  62.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  62.0k|    {
  437|  62.0k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   881k|    {
 1653|   881k|        return value();
 1654|   881k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   284k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   116k|    {
 1673|   116k|        return &value();
 1674|   116k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   890k|    {
 2724|   890k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   890k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   890k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   890k|    {
 2705|   890k|        return decay_copy(t.begin());
 2706|   890k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   890k|{
 1949|   890k|    return SCN_FWD(t);
  ------------------
  |  |  930|   890k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   890k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   542k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.09M|    {
 1837|  1.09M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.09M|                                            std::forward<F>(f));
 1839|  1.09M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.09M|{
 1323|  1.09M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.09M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.09M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.09M|            return result(*std::forward<Exp>(exp));
 1327|  1.09M|        }
 1328|       |
 1329|  1.09M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.09M|        return result(unexpect, monostate{});
 1331|  1.09M|    }
 1332|  1.09M|    else {
 1333|  1.09M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.09M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.09M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.09M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.09M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.09M|    }
 1340|  1.09M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.09M|    {
 1430|  1.09M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.09M|    {
  437|  1.09M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.09M|    {
 1177|  1.09M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.09M|    {
 1598|  1.09M|        return has_value();
 1599|  1.09M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.18M|    {
  485|  2.18M|        return m_has_value;
  486|  2.18M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.09M|    {
 1663|  1.09M|        return std::move(value());
 1664|  1.09M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.09M|    {
 1627|  1.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.09M|        return this->get_value();
 1629|  1.09M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.09M|    {
  451|  1.09M|        return m_value;
  452|  1.09M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.05M|    {
 1823|  1.05M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.05M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.05M|{
 1323|  1.05M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.05M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.05M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.05M|            return result(*std::forward<Exp>(exp));
 1327|  1.05M|        }
 1328|       |
 1329|  1.05M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.05M|        return result(unexpect, monostate{});
 1331|  1.05M|    }
 1332|  1.05M|    else {
 1333|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1335|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.05M|                   : result(unexpect,
 1337|  1.05M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.05M|                                           std::forward<Exp>(exp).error()));
 1339|  1.05M|    }
 1340|  1.05M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|  60.6k|    {
 1430|  60.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  60.6k|    {
  437|  60.6k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.05M|    {
 3648|  1.05M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   759k|    {
 1653|   759k|        return value();
 1654|   759k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  28.5k|    {
 1673|  28.5k|        return &value();
 1674|  28.5k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  1.22M|    {
 3648|  1.22M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   497k|    {
 1476|   497k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  4.52M|    {
 4280|  4.52M|        return x.is_at_end();
 4281|  4.52M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  7.08M|    {
 4324|  7.08M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 7.08M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  7.08M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 7.08M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  7.08M|        return !read_at_position();
 4331|  7.08M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  22.2M|    {
 4304|  22.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  22.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  22.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 22.2M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  22.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  22.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.5M, False: 2.70M]
  |  |  ------------------
  ------------------
 4311|  19.5M|            return true;
 4312|  19.5M|        }
 4313|       |
 4314|  5.24M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.70M, False: 2.53M]
  ------------------
 4315|  2.70M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 174k, False: 2.53M]
  ------------------
 4316|   174k|                return false;
 4317|   174k|            }
 4318|  2.70M|        }
 4319|  2.53M|        return true;
 4320|  2.70M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  28.9M|    {
 4081|  28.9M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  28.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  6.96M|    {
 4239|  6.96M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  6.96M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 6.96M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  6.96M|        auto res = read_at_position();
 4248|  6.96M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  6.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  6.96M|        return parent()->get_character_at(m_position);
 4250|  6.96M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  6.96M|    {
 4112|  6.96M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.91M, False: 1.04M]
  |  |  ------------------
  ------------------
 4113|  6.96M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  5.91M|            return m_putback_buffer[pos];
 4115|  5.91M|        }
 4116|  1.04M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.04M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.04M|        return m_current_view[start];
 4119|  1.04M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  2.48M|{
 3807|  2.48M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  2.48M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  2.48M|    }
 3810|  2.48M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  2.48M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  2.48M|    }
 3813|  2.48M|    else {
 3814|       |        // utf-32
 3815|  2.48M|        static_assert(sizeof(U) == 4);
 3816|  2.48M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  2.48M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  2.48M|        return 1;
 3818|  2.48M|    }
 3819|  2.48M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  3.14M|    {
 1430|  3.14M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  3.14M|    {
  437|  3.14M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.19M|    {
 1177|  3.19M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  58.0k|    {
  447|  58.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.23M|    {
 1598|  1.23M|        return has_value();
 1599|  1.23M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  16.8k|    {
 1653|  16.8k|        return value();
 1654|  16.8k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  3.32M|    {
 4274|  3.32M|        return !(lhs == rhs);
 4275|  3.32M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  4.54M|    {
 4269|  4.54M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 4.54M, False: 0]
  |  Branch (4269:46): [True: 1.47M, False: 3.06M]
  ------------------
 4270|  4.54M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  8.21M|    {
 4225|  8.21M|        ++m_position;
 4226|  8.21M|        (void)read_at_position();
 4227|  8.21M|        return *this;
 4228|  8.21M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.48M|{
 4013|  2.48M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.48M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.48M|    }
 4016|  2.48M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  2.48M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.48M|    }
 4019|  2.48M|    else {
 4020|  2.48M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  2.48M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.48M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192k, False: 2.28M]
  |  |  ------------------
  ------------------
 4023|   192k|            return invalid_code_point;
 4024|   192k|        }
 4025|  2.28M|        return cp;
 4026|  2.48M|    }
 4027|  2.48M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.61k|    {
 1476|  2.61k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.61k|    {
  447|  2.61k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   664k|    {
 1177|   664k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   661k|    {
 1430|   661k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   661k|    {
  437|   661k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   664k|    {
 1598|   664k|        return has_value();
 1599|   664k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.32M|    {
  485|  1.32M|        return m_has_value;
  486|  1.32M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.61k|    {
 1604|  2.61k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.61k|        return this->get_unexpected().error();
 1606|  2.61k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.61k|    {
  468|  2.61k|        return m_unexpected;
  469|  2.61k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   661k|    {
 1663|   661k|        return std::move(value());
 1664|   661k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   661k|    {
 1627|   661k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   661k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   661k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   661k|        return this->get_value();
 1629|   661k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   661k|    {
  451|   661k|        return m_value;
  452|   661k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  11.6M|    {
 3334|  11.6M|        return m_sentinel;
 3335|  11.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.87k|    {
 1604|  1.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.87k|        return this->get_unexpected().error();
 1606|  1.87k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   596k|    {
 1476|   596k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   648k|    {
  447|   648k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.53M|    {
 1177|  5.53M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  16.8k|    {
 1430|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  16.8k|    {
  437|  16.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  3.12M|    {
 1476|  3.12M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  3.12M|    {
  447|  3.12M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  6.07M|    {
 1598|  6.07M|        return has_value();
 1599|  6.07M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  10.7M|    {
  485|  10.7M|        return m_has_value;
  486|  10.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.85M|    {
 1604|  1.85M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.85M|        return this->get_unexpected().error();
 1606|  1.85M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.85M|    {
  468|  1.85M|        return m_unexpected;
  469|  1.85M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   551k|    {
 1430|   551k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   551k|    {
  437|   551k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   551k|    {
 1177|   551k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   768k|    {
 1653|   768k|        return value();
 1654|   768k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  2.13M|    {
 1627|  2.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.13M|        return this->get_value();
 1629|  2.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.13M|    {
  451|  2.13M|        return m_value;
  452|  2.13M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  10.4k|    {
 1598|  10.4k|        return has_value();
 1599|  10.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   541k|    {
 1663|   541k|        return std::move(value());
 1664|   541k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   551k|    {
 1627|   551k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   551k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   551k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   551k|        return this->get_value();
 1629|   551k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   551k|    {
  451|   551k|        return m_value;
  452|   551k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.41M|    {
 1837|  1.41M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.41M|                                            std::forward<F>(f));
 1839|  1.41M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.41M|{
 1323|  1.41M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.41M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.41M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.41M|            return result(*std::forward<Exp>(exp));
 1327|  1.41M|        }
 1328|       |
 1329|  1.41M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.41M|        return result(unexpect, monostate{});
 1331|  1.41M|    }
 1332|  1.41M|    else {
 1333|  1.41M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.41M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.36M, False: 52.6k]
  |  |  ------------------
  ------------------
 1335|  1.41M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.41M|                   : result(unexpect,
 1337|  52.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  52.6k|                                           std::forward<Exp>(exp).error()));
 1339|  1.41M|    }
 1340|  1.41M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.74M|    {
 1430|  1.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.74M|    {
  437|  1.74M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  52.6k|    {
 1486|  52.6k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.36M|    {
 1663|  1.36M|        return std::move(value());
 1664|  1.36M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   390k|    {
 3330|   390k|        return m_iterator;
 3331|   390k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   390k|    {
 3334|   390k|        return m_sentinel;
 3335|   390k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  3.65M|    {
 1598|  3.65M|        return has_value();
 1599|  3.65M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.86M|    {
  485|  5.86M|        return m_has_value;
  486|  5.86M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   673k|    {
 1604|   673k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   673k|        return this->get_unexpected().error();
 1606|   673k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   673k|    {
  468|   673k|        return m_unexpected;
  469|   673k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.27M|    {
 1663|  1.27M|        return std::move(value());
 1664|  1.27M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.53M|    {
 1627|  1.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.53M|        return this->get_value();
 1629|  1.53M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.53M|    {
  451|  1.53M|        return m_value;
  452|  1.53M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   731k|{
  304|   731k|    return p;
  305|   731k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   731k|{
  326|   731k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   731k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   731k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   365k|    {
 3316|   365k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  2.56M|    {
 4291|  2.56M|        return !x.is_at_end();
 4292|  2.56M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  56.7k|    {
 1476|  56.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  56.7k|    {
  447|  56.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.70M|    {
 1177|  2.70M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.65M|    {
 1430|  2.65M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.65M|    {
  437|  2.65M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   742k|    {
 1598|   742k|        return has_value();
 1599|   742k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.68M|    {
  485|  4.68M|        return m_has_value;
  486|  4.68M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  7.19k|    {
 1653|  7.19k|        return value();
 1654|  7.19k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.91M|    {
 1627|  1.91M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.91M|        return this->get_value();
 1629|  1.91M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.91M|    {
  451|  1.91M|        return m_value;
  452|  1.91M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.61k|    {
 1476|  2.61k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.61k|    {
  447|  2.61k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   664k|    {
 1177|   664k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   662k|    {
 1430|   662k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   662k|    {
  437|   662k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   545k|    {
 1837|   545k|        return detail::transform_error_impl(std::move(*this),
 1838|   545k|                                            std::forward<F>(f));
 1839|   545k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   545k|{
 1323|   545k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   545k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   545k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   545k|            return result(*std::forward<Exp>(exp));
 1327|   545k|        }
 1328|       |
 1329|   545k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   545k|        return result(unexpect, monostate{});
 1331|   545k|    }
 1332|   545k|    else {
 1333|   545k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   545k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   545k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 541k, False: 3.51k]
  |  |  ------------------
  ------------------
 1335|   545k|                   ? result(*std::forward<Exp>(exp))
 1336|   545k|                   : result(unexpect,
 1337|  3.51k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.51k|                                           std::forward<Exp>(exp).error()));
 1339|   545k|    }
 1340|   545k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.90M|    {
 1663|  1.90M|        return std::move(value());
 1664|  1.90M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  56.3k|    {
 1614|  56.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  56.3k|        return std::move(this->get_unexpected().error());
 1616|  56.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  56.7k|    {
  468|  56.7k|        return m_unexpected;
  469|  56.7k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   623k|    {
 1486|   623k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   664k|    {
 1598|   664k|        return has_value();
 1599|   664k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.32M|    {
  485|  1.32M|        return m_has_value;
  486|  1.32M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.61k|    {
 1604|  2.61k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.61k|        return this->get_unexpected().error();
 1606|  2.61k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.61k|    {
  468|  2.61k|        return m_unexpected;
  469|  2.61k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   662k|    {
 1663|   662k|        return std::move(value());
 1664|   662k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   662k|    {
 1627|   662k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   662k|        return this->get_value();
 1629|   662k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   662k|    {
  451|   662k|        return m_value;
  452|   662k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    472|    {
 1604|    472|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    472|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    472|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    472|        return this->get_unexpected().error();
 1606|    472|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   595k|    {
 1476|   595k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   647k|    {
  447|   647k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.46M|    {
 1177|  4.46M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  7.19k|    {
 1430|  7.19k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  7.19k|    {
  437|  7.19k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  2.30M|    {
 1476|  2.30M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.30M|    {
  447|  2.30M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  5.00M|    {
 1598|  5.00M|        return has_value();
 1599|  5.00M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  9.01M|    {
  485|  9.01M|        return m_has_value;
  486|  9.01M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.75M|    {
 1604|  1.75M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.75M|        return this->get_unexpected().error();
 1606|  1.75M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.75M|    {
  468|  1.75M|        return m_unexpected;
  469|  1.75M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   545k|    {
 1430|   545k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   545k|    {
  437|   545k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   545k|    {
 1177|   545k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   265k|    {
 1653|   265k|        return value();
 1654|   265k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.63M|    {
 1627|  1.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.63M|        return this->get_value();
 1629|  1.63M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.63M|    {
  451|  1.63M|        return m_value;
  452|  1.63M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.62k|    {
 1598|  3.62k|        return has_value();
 1599|  3.62k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.09M|    {
  485|  1.09M|        return m_has_value;
  486|  1.09M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   541k|    {
 1663|   541k|        return std::move(value());
 1664|   541k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   545k|    {
 1627|   545k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   545k|        return this->get_value();
 1629|   545k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   545k|    {
  451|   545k|        return m_value;
  452|   545k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.42M|    {
 1837|  1.42M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.42M|                                            std::forward<F>(f));
 1839|  1.42M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.42M|{
 1323|  1.42M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.42M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.42M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.42M|            return result(*std::forward<Exp>(exp));
 1327|  1.42M|        }
 1328|       |
 1329|  1.42M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.42M|        return result(unexpect, monostate{});
 1331|  1.42M|    }
 1332|  1.42M|    else {
 1333|  1.42M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.42M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.42M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.36M, False: 52.8k]
  |  |  ------------------
  ------------------
 1335|  1.42M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.42M|                   : result(unexpect,
 1337|  52.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  52.8k|                                           std::forward<Exp>(exp).error()));
 1339|  1.42M|    }
 1340|  1.42M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.49M|    {
 1430|  1.49M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.49M|    {
  437|  1.49M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  52.8k|    {
 1486|  52.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.36M|    {
 1663|  1.36M|        return std::move(value());
 1664|  1.36M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   459k|    {
 2855|   459k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   459k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   459k|    {
 2836|   459k|        return t.data();
 2837|   459k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   541k|    {
 1837|   541k|        return detail::transform_error_impl(std::move(*this),
 1838|   541k|                                            std::forward<F>(f));
 1839|   541k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   541k|{
 1323|   541k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   541k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   541k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   541k|            return result(*std::forward<Exp>(exp));
 1327|   541k|        }
 1328|       |
 1329|   541k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   541k|        return result(unexpect, monostate{});
 1331|   541k|    }
 1332|   541k|    else {
 1333|   541k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   541k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   541k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 541k, False: 0]
  |  |  ------------------
  ------------------
 1335|   541k|                   ? result(*std::forward<Exp>(exp))
 1336|   541k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   541k|    }
 1340|   541k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   541k|    {
 1430|   541k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   541k|    {
  437|   541k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   541k|    {
 1177|   541k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   541k|    {
 1598|   541k|        return has_value();
 1599|   541k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.08M|    {
  485|  1.08M|        return m_has_value;
  486|  1.08M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   541k|    {
 1663|   541k|        return std::move(value());
 1664|   541k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   541k|    {
 1627|   541k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   541k|        return this->get_value();
 1629|   541k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   541k|    {
  451|   541k|        return m_value;
  452|   541k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   713k|    {
 1823|   713k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   713k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   713k|{
 1323|   713k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   713k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   713k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   713k|            return result(*std::forward<Exp>(exp));
 1327|   713k|        }
 1328|       |
 1329|   713k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   713k|        return result(unexpect, monostate{});
 1331|   713k|    }
 1332|   713k|    else {
 1333|   713k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   713k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   713k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 713k]
  |  |  ------------------
  ------------------
 1335|   713k|                   ? result(*std::forward<Exp>(exp))
 1336|   713k|                   : result(unexpect,
 1337|   713k|                            trivial_invoke(std::forward<F>(f),
 1338|   713k|                                           std::forward<Exp>(exp).error()));
 1339|   713k|    }
 1340|   713k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   262k|    {
 1653|   262k|        return value();
 1654|   262k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   101k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  10.3k|    {
 1673|  10.3k|        return &value();
 1674|  10.3k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   440k|    {
 2724|   440k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   440k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   440k|    {
 2705|   440k|        return decay_copy(t.begin());
 2706|   440k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   440k|{
 1949|   440k|    return SCN_FWD(t);
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   440k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   235k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   541k|    {
 1837|   541k|        return detail::transform_error_impl(std::move(*this),
 1838|   541k|                                            std::forward<F>(f));
 1839|   541k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   541k|{
 1323|   541k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   541k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   541k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   541k|            return result(*std::forward<Exp>(exp));
 1327|   541k|        }
 1328|       |
 1329|   541k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   541k|        return result(unexpect, monostate{});
 1331|   541k|    }
 1332|   541k|    else {
 1333|   541k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   541k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   541k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 541k, False: 0]
  |  |  ------------------
  ------------------
 1335|   541k|                   ? result(*std::forward<Exp>(exp))
 1336|   541k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   541k|    }
 1340|   541k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   541k|    {
 1430|   541k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   541k|    {
  437|   541k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   541k|    {
 1177|   541k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   541k|    {
 1598|   541k|        return has_value();
 1599|   541k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.08M|    {
  485|  1.08M|        return m_has_value;
  486|  1.08M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   541k|    {
 1663|   541k|        return std::move(value());
 1664|   541k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   541k|    {
 1627|   541k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   541k|        return this->get_value();
 1629|   541k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   541k|    {
  451|   541k|        return m_value;
  452|   541k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   620k|    {
 1823|   620k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   620k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   620k|{
 1323|   620k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   620k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   620k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   620k|            return result(*std::forward<Exp>(exp));
 1327|   620k|        }
 1328|       |
 1329|   620k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   620k|        return result(unexpect, monostate{});
 1331|   620k|    }
 1332|   620k|    else {
 1333|   620k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   620k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   620k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 620k]
  |  |  ------------------
  ------------------
 1335|   620k|                   ? result(*std::forward<Exp>(exp))
 1336|   620k|                   : result(unexpect,
 1337|   620k|                            trivial_invoke(std::forward<F>(f),
 1338|   620k|                                           std::forward<Exp>(exp).error()));
 1339|   620k|    }
 1340|   620k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   620k|    {
 3648|   620k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   263k|    {
 1653|   263k|        return value();
 1654|   263k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  3.59k|    {
 1673|  3.59k|        return &value();
 1674|  3.59k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   713k|    {
 3648|   713k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   116k|    {
 1430|   116k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   116k|    {
  437|   116k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   126k|{
 3654|   126k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   126k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   991k|    {
 2855|   991k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   991k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   991k|    {
 2836|   991k|        return t.data();
 2837|   991k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  2.13M|    {
 5466|  2.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  2.13M|        return static_cast<std::size_t>(m_desc &
 5471|  2.13M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  2.13M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  4.27M|    {
 5491|  4.27M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  4.27M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  2.13M|    {
 5434|  2.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  2.13M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  2.13M|        const auto t = type(id);
 5446|  2.13M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  2.13M|        basic_scan_arg<Context> arg;
 5451|  2.13M|        arg.m_type = t;
 5452|  2.13M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 2.13M, False: 0]
  ------------------
 5453|  2.13M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  2.13M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  2.13M|        return arg;
 5459|  2.13M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  2.13M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  2.13M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  2.13M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  2.13M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  2.13M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  2.13M|    {
 5495|  2.13M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  2.13M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  4.05M|    {
 5247|  4.05M|        return m_type != detail::arg_type::none_type;
 5248|  4.05M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   326k|{
 8417|   326k|#define SCN_VISIT(Type)                                         \
 8418|   326k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   326k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   326k|    }                                                           \
 8421|   326k|    else {                                                      \
 8422|   326k|        return vis(monostate_val);                              \
 8423|   326k|    }
 8424|       |
 8425|   326k|    monostate monostate_val{};
 8426|       |
 8427|   326k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 326k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 326k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 326k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 326k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 326k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 326k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 326k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 326k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 326k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 326k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 326k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 326k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 326k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 326k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 326k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   105k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 105k, False: 221k]
  ------------------
 8459|   105k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   105k|    }                                                           \
  |  | 8421|   105k|    else {                                                      \
  |  | 8422|   105k|        return vis(monostate_val);                              \
  |  | 8423|   105k|    }
  ------------------
 8460|   109k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 109k, False: 217k]
  ------------------
 8461|   109k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   109k|    }                                                           \
  |  | 8421|   109k|    else {                                                      \
  |  | 8422|   109k|        return vis(monostate_val);                              \
  |  | 8423|   109k|    }
  ------------------
 8462|   111k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 111k, False: 215k]
  ------------------
 8463|   111k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 326k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 326k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 326k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 326k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 326k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 326k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 326k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 326k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 326k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   326k|            SCN_CLANG_POP
 8495|   326k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  1.68M|    {
 5545|  1.68M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   903k|    {
 8138|   903k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  1.68M|    {
 8056|  1.68M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.25M|{
 4344|  1.25M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.25M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.25M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.25M|                            ranges::default_sentinel};
 4350|  1.25M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  1.25M|    {
 4177|  1.25M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.25M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.25M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   353k|{
 8417|   353k|#define SCN_VISIT(Type)                                         \
 8418|   353k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   353k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   353k|    }                                                           \
 8421|   353k|    else {                                                      \
 8422|   353k|        return vis(monostate_val);                              \
 8423|   353k|    }
 8424|       |
 8425|   353k|    monostate monostate_val{};
 8426|       |
 8427|   353k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 353k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 353k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 353k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 353k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 353k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 353k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 353k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 353k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 353k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 353k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 353k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 353k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 353k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 353k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 353k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   113k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 113k, False: 239k]
  ------------------
 8459|   113k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   113k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   113k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   113k|    }                                                           \
  |  | 8421|   113k|    else {                                                      \
  |  | 8422|   113k|        return vis(monostate_val);                              \
  |  | 8423|   113k|    }
  ------------------
 8460|   118k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 118k, False: 234k]
  ------------------
 8461|   118k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   118k|    }                                                           \
  |  | 8421|   118k|    else {                                                      \
  |  | 8422|   118k|        return vis(monostate_val);                              \
  |  | 8423|   118k|    }
  ------------------
 8462|   120k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 120k, False: 232k]
  ------------------
 8463|   120k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   120k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   120k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   120k|    }                                                           \
  |  | 8421|   120k|    else {                                                      \
  |  | 8422|   120k|        return vis(monostate_val);                              \
  |  | 8423|   120k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 353k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 353k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 353k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 353k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 353k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 353k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 353k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 353k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 353k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   353k|            SCN_CLANG_POP
 8495|   353k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   782k|{
 7044|   782k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   782k|    handler.check_args_exhausted();
 7046|   782k|    return handler.get_error();
 7047|   782k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   782k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   782k|    auto begin = format.data();
 7013|   782k|    auto it = begin;
 7014|   782k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.49M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 782k, False: 712k]
  ------------------
 7017|   782k|        const auto ch = *it++;
 7018|   782k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 782k, False: 0]
  ------------------
 7019|   782k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   782k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   782k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 69.8k, False: 712k]
  ------------------
 7023|  69.8k|                return;
 7024|  69.8k|            }
 7025|   782k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   782k|    }
 7036|       |
 7037|   712k|    handler.on_literal_text(begin, end);
 7038|   712k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   782k|{
 6942|   782k|    struct id_adapter {
 6943|   782k|        constexpr void operator()()
 6944|   782k|        {
 6945|   782k|            arg_id = handler.on_arg_id();
 6946|   782k|        }
 6947|   782k|        constexpr void operator()(std::size_t id)
 6948|   782k|        {
 6949|   782k|            arg_id = handler.on_arg_id(id);
 6950|   782k|        }
 6951|       |
 6952|   782k|        constexpr void on_error(const char* msg)
 6953|   782k|        {
 6954|   782k|            SCN_UNLIKELY_ATTR
 6955|   782k|            handler.on_error(msg);
 6956|   782k|        }
 6957|       |
 6958|   782k|        Handler& handler;
 6959|   782k|        std::size_t arg_id;
 6960|   782k|    };
 6961|       |
 6962|   782k|    ++begin;
 6963|   782k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   782k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 782k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   782k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 782k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   782k|    else {
 6975|   782k|        auto adapter = id_adapter{handler, 0};
 6976|   782k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   782k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   782k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 782k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   782k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 782k, False: 0]
  ------------------
 6987|   782k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   782k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   782k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 782k]
  |  |  |  Branch (859:45): [True: 0, False: 782k]
  |  |  |  Branch (859:45): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   782k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   782k|    }
 7003|   782k|    return begin + 1;
 7004|   782k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  1.68M|    {
 8039|  1.68M|        return m_args.get(id);
 8040|  1.68M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  1.68M|    {
 8049|  1.68M|        return m_locale;
 8050|  1.68M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  1.68M|    {
 5566|  1.68M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.68M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.68M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.68M|        do_check_arg_id(id);
 5574|  1.68M|        return id;
 5575|  1.68M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  1.68M|{
 6054|  1.68M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.68M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.68M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   782k|{
 6443|   782k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   782k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 782k, False: 0]
  |  Branch (6444:26): [True: 0, False: 782k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   782k|    handler();
 6449|   782k|    return begin;
 6450|   782k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   782k|        {
 6945|   782k|            arg_id = handler.on_arg_id();
 6946|   782k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  3.37M|    {
 5252|  3.37M|        return m_type;
 5253|  3.37M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  1.68M|    {
 5561|  1.68M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.68M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  3.37M|    {
 5550|  3.37M|        return m_format.data();
 5551|  3.37M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   782k|    {
 7122|   782k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   782k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   782k|{
 6858|   782k|    auto do_presentation = [&]() -> const CharT* {
 6859|   782k|        if (*begin == CharT{'['}) {
 6860|   782k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   782k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   782k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   782k|                return begin;
 6866|   782k|            }
 6867|   782k|            handler.on_character_set_string(set);
 6868|   782k|            return begin;
 6869|   782k|        }
 6870|   782k|        if (*begin == CharT{'/'}) {
 6871|   782k|            return parse_presentation_regex(begin, end, handler);
 6872|   782k|        }
 6873|   782k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   782k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   782k|            handler.on_error("Invalid type specifier in format string");
 6876|   782k|            return begin;
 6877|   782k|        }
 6878|   782k|        handler.on_type(type);
 6879|   782k|        return begin;
 6880|   782k|    };
 6881|       |
 6882|   782k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 782k, False: 0]
  |  Branch (6882:28): [True: 782k, False: 0]
  ------------------
 6883|   782k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 782k, False: 0]
  |  Branch (6883:36): [True: 564k, False: 217k]
  ------------------
 6884|   564k|        return do_presentation();
 6885|   564k|    }
 6886|       |
 6887|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   217k|    begin = parse_align(begin, end, handler);
 6893|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   217k|    begin = parse_width(begin, end, handler);
 6899|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   217k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 217k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   217k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 217k, False: 0]
  ------------------
 6918|   217k|        handler.on_localized();
 6919|   217k|        ++begin;
 6920|   217k|    }
 6921|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   217k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 217k, False: 0]
  |  Branch (6926:25): [True: 0, False: 217k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   217k|    return begin;
 6935|   217k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  1.68M|{
 6507|  1.68M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.21M, False: 473k]
  |  Branch (6507:33): [True: 1.21M, False: 0]
  ------------------
 6508|  1.68M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 473k, False: 0]
  |  Branch (6508:33): [True: 473k, False: 0]
  ------------------
 6509|  1.68M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   564k|    auto do_presentation = [&]() -> const CharT* {
 6859|   564k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 564k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   564k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 564k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   564k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   564k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 564k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   564k|        handler.on_type(type);
 6879|   564k|        return begin;
 6880|   564k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.21M|{
 6455|  1.21M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.21M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.21M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.21M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.21M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.21M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.21M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.21M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.21M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.21M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.21M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   512k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 512k, False: 699k]
  ------------------
 6474|   512k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.21M]
  ------------------
 6475|   512k|            return presentation_type::float_hex;
 6476|  43.7k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 43.7k, False: 1.16M]
  ------------------
 6477|  43.7k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.21M]
  ------------------
 6478|  43.7k|            return presentation_type::float_scientific;
 6479|   252k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 252k, False: 959k]
  ------------------
 6480|   252k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.21M]
  ------------------
 6481|   252k|            return presentation_type::float_fixed;
 6482|   403k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 403k, False: 808k]
  ------------------
 6483|   403k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.21M]
  ------------------
 6484|   403k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.21M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.21M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.21M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.21M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.21M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.21M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.21M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.21M|    }
 6502|  1.21M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   217k|{
 6532|   217k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   217k|    auto check_align = [](wchar_t ch) {
 6535|   217k|        switch (ch) {
 6536|   217k|            case L'<':
 6537|   217k|                return align_type::left;
 6538|   217k|            case L'>':
 6539|   217k|                return align_type::right;
 6540|   217k|            case L'^':
 6541|   217k|                return align_type::center;
 6542|   217k|            default:
 6543|   217k|                return align_type::none;
 6544|   217k|        }
 6545|   217k|    };
 6546|       |
 6547|   217k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   217k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6549|   217k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   217k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   217k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   217k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   217k|    const auto begin_before_fill = begin;
 6559|   217k|    begin += potential_fill_len;
 6560|       |
 6561|   217k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 217k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   217k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   217k|    const auto begin_after_fill = begin;
 6567|   217k|    ++begin;
 6568|       |
 6569|   217k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 217k, False: 0]
  ------------------
 6570|   217k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   217k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 217k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   217k|    }
 6578|       |
 6579|   217k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 217k, False: 0]
  ------------------
 6580|   217k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 217k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   217k|        return begin_before_fill;
 6585|   217k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   217k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   473k|{
 6514|   473k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   473k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   473k|        return 1;
 6517|   473k|    }
 6518|   473k|    else {
 6519|   473k|        const auto lengths =
 6520|   473k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   473k|            "\3\4";
 6522|   473k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   473k|        return len;
 6524|   473k|    }
 6525|   473k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   435k|    auto check_align = [](wchar_t ch) {
 6535|   435k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 435k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 435k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 435k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   435k|            default:
  ------------------
  |  Branch (6542:13): [True: 435k, False: 0]
  ------------------
 6543|   435k|                return align_type::none;
 6544|   435k|        }
 6545|   435k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   217k|{
 6597|   217k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   217k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 217k, False: 0]
  |  Branch (6599:33): [True: 0, False: 217k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   217k|    return begin;
 6610|   217k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   217k|    {
 7127|   217k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   217k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 217k, False: 0]
  ------------------
 7129|   217k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 217k, False: 0]
  ------------------
 7130|   217k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 217k]
  ------------------
 7131|   217k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   217k|        Handler::on_localized();
 7139|   217k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   782k|{
 8417|   782k|#define SCN_VISIT(Type)                                         \
 8418|   782k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   782k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   782k|    }                                                           \
 8421|   782k|    else {                                                      \
 8422|   782k|        return vis(monostate_val);                              \
 8423|   782k|    }
 8424|       |
 8425|   782k|    monostate monostate_val{};
 8426|       |
 8427|   782k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 782k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 782k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 782k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 782k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 782k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 782k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 782k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 782k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 782k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 782k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 782k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 782k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 782k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 782k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 782k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   254k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 254k, False: 527k]
  ------------------
 8459|   254k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   254k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   254k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   254k|    }                                                           \
  |  | 8421|   254k|    else {                                                      \
  |  | 8422|   254k|        return vis(monostate_val);                              \
  |  | 8423|   254k|    }
  ------------------
 8460|   262k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 262k, False: 519k]
  ------------------
 8461|   262k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   262k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   262k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   262k|    }                                                           \
  |  | 8421|   262k|    else {                                                      \
  |  | 8422|   262k|        return vis(monostate_val);                              \
  |  | 8423|   262k|    }
  ------------------
 8462|   265k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 265k, False: 517k]
  ------------------
 8463|   265k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   265k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   265k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   265k|    }                                                           \
  |  | 8421|   265k|    else {                                                      \
  |  | 8422|   265k|        return vis(monostate_val);                              \
  |  | 8423|   265k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 782k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 782k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 782k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 782k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 782k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 782k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 782k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 782k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 782k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   782k|            SCN_CLANG_POP
 8495|   782k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   903k|{
 7044|   903k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   903k|    handler.check_args_exhausted();
 7046|   903k|    return handler.get_error();
 7047|   903k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   903k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   903k|    auto begin = format.data();
 7013|   903k|    auto it = begin;
 7014|   903k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.73M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 903k, False: 833k]
  ------------------
 7017|   903k|        const auto ch = *it++;
 7018|   903k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 903k, False: 0]
  ------------------
 7019|   903k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   903k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   903k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 69.8k, False: 833k]
  ------------------
 7023|  69.8k|                return;
 7024|  69.8k|            }
 7025|   903k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   903k|    }
 7036|       |
 7037|   833k|    handler.on_literal_text(begin, end);
 7038|   833k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|   833k|    {
 8175|   833k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   833k|    static_cast<    \
  |  |  929|   833k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   833k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   903k|{
 6942|   903k|    struct id_adapter {
 6943|   903k|        constexpr void operator()()
 6944|   903k|        {
 6945|   903k|            arg_id = handler.on_arg_id();
 6946|   903k|        }
 6947|   903k|        constexpr void operator()(std::size_t id)
 6948|   903k|        {
 6949|   903k|            arg_id = handler.on_arg_id(id);
 6950|   903k|        }
 6951|       |
 6952|   903k|        constexpr void on_error(const char* msg)
 6953|   903k|        {
 6954|   903k|            SCN_UNLIKELY_ATTR
 6955|   903k|            handler.on_error(msg);
 6956|   903k|        }
 6957|       |
 6958|   903k|        Handler& handler;
 6959|   903k|        std::size_t arg_id;
 6960|   903k|    };
 6961|       |
 6962|   903k|    ++begin;
 6963|   903k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 903k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   903k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 903k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   903k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 903k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   903k|    else {
 6975|   903k|        auto adapter = id_adapter{handler, 0};
 6976|   903k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   903k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 903k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   903k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 903k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   903k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 903k, False: 0]
  ------------------
 6987|   903k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 903k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   903k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   903k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 903k]
  |  |  |  Branch (859:45): [True: 0, False: 903k]
  |  |  |  Branch (859:45): [True: 0, False: 903k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   903k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   903k|    }
 7003|   903k|    return begin + 1;
 7004|   903k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   903k|{
 6443|   903k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   903k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   903k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   903k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 903k, False: 0]
  |  Branch (6444:26): [True: 0, False: 903k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   903k|    handler();
 6449|   903k|    return begin;
 6450|   903k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   903k|        {
 6945|   903k|            arg_id = handler.on_arg_id();
 6946|   903k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   903k|    {
 7122|   903k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   903k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   903k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   903k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   903k|{
 6858|   903k|    auto do_presentation = [&]() -> const CharT* {
 6859|   903k|        if (*begin == CharT{'['}) {
 6860|   903k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   903k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   903k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   903k|                return begin;
 6866|   903k|            }
 6867|   903k|            handler.on_character_set_string(set);
 6868|   903k|            return begin;
 6869|   903k|        }
 6870|   903k|        if (*begin == CharT{'/'}) {
 6871|   903k|            return parse_presentation_regex(begin, end, handler);
 6872|   903k|        }
 6873|   903k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   903k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   903k|            handler.on_error("Invalid type specifier in format string");
 6876|   903k|            return begin;
 6877|   903k|        }
 6878|   903k|        handler.on_type(type);
 6879|   903k|        return begin;
 6880|   903k|    };
 6881|       |
 6882|   903k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 903k, False: 0]
  |  Branch (6882:28): [True: 903k, False: 0]
  ------------------
 6883|   903k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 903k, False: 0]
  |  Branch (6883:36): [True: 647k, False: 256k]
  ------------------
 6884|   647k|        return do_presentation();
 6885|   647k|    }
 6886|       |
 6887|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   256k|    begin = parse_align(begin, end, handler);
 6893|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   256k|    begin = parse_width(begin, end, handler);
 6899|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   256k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 256k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   256k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 256k, False: 0]
  ------------------
 6918|   256k|        handler.on_localized();
 6919|   256k|        ++begin;
 6920|   256k|    }
 6921|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   256k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 256k, False: 0]
  |  Branch (6926:25): [True: 0, False: 256k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   256k|    return begin;
 6935|   256k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   647k|    auto do_presentation = [&]() -> const CharT* {
 6859|   647k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 647k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   647k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 647k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   647k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   647k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   647k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 647k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   647k|        handler.on_type(type);
 6879|   647k|        return begin;
 6880|   647k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   256k|{
 6532|   256k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   256k|    auto check_align = [](wchar_t ch) {
 6535|   256k|        switch (ch) {
 6536|   256k|            case L'<':
 6537|   256k|                return align_type::left;
 6538|   256k|            case L'>':
 6539|   256k|                return align_type::right;
 6540|   256k|            case L'^':
 6541|   256k|                return align_type::center;
 6542|   256k|            default:
 6543|   256k|                return align_type::none;
 6544|   256k|        }
 6545|   256k|    };
 6546|       |
 6547|   256k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   256k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  |  Branch (859:45): [True: 0, False: 256k]
  |  |  |  Branch (859:45): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6549|   256k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   256k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   256k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   256k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   256k|    const auto begin_before_fill = begin;
 6559|   256k|    begin += potential_fill_len;
 6560|       |
 6561|   256k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 256k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   256k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   256k|    const auto begin_after_fill = begin;
 6567|   256k|    ++begin;
 6568|       |
 6569|   256k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 256k, False: 0]
  ------------------
 6570|   256k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   256k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 256k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   256k|    }
 6578|       |
 6579|   256k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 256k, False: 0]
  ------------------
 6580|   256k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 256k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   256k|        return begin_before_fill;
 6585|   256k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   256k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   512k|    auto check_align = [](wchar_t ch) {
 6535|   512k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 512k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 512k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 512k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   512k|            default:
  ------------------
  |  Branch (6542:13): [True: 512k, False: 0]
  ------------------
 6543|   512k|                return align_type::none;
 6544|   512k|        }
 6545|   512k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   256k|{
 6597|   256k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   256k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 256k, False: 0]
  |  Branch (6599:33): [True: 0, False: 256k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   256k|    return begin;
 6610|   256k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   256k|    {
 7127|   256k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   256k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 256k, False: 0]
  ------------------
 7129|   256k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 256k, False: 0]
  ------------------
 7130|   256k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 256k]
  ------------------
 7131|   256k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   256k|        Handler::on_localized();
 7139|   256k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   903k|{
 8417|   903k|#define SCN_VISIT(Type)                                         \
 8418|   903k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   903k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   903k|    }                                                           \
 8421|   903k|    else {                                                      \
 8422|   903k|        return vis(monostate_val);                              \
 8423|   903k|    }
 8424|       |
 8425|   903k|    monostate monostate_val{};
 8426|       |
 8427|   903k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 903k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 903k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 903k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 903k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 903k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 903k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 903k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 903k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 903k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 903k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 903k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 903k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 903k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 903k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 903k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   292k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 292k, False: 610k]
  ------------------
 8459|   292k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   292k|    }                                                           \
  |  | 8421|   292k|    else {                                                      \
  |  | 8422|   292k|        return vis(monostate_val);                              \
  |  | 8423|   292k|    }
  ------------------
 8460|   303k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 303k, False: 599k]
  ------------------
 8461|   303k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   303k|    }                                                           \
  |  | 8421|   303k|    else {                                                      \
  |  | 8422|   303k|        return vis(monostate_val);                              \
  |  | 8423|   303k|    }
  ------------------
 8462|   306k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 306k, False: 596k]
  ------------------
 8463|   306k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   306k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   306k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   306k|    }                                                           \
  |  | 8421|   306k|    else {                                                      \
  |  | 8422|   306k|        return vis(monostate_val);                              \
  |  | 8423|   306k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 903k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 903k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 903k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 903k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 903k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 903k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 903k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 903k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 903k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   903k|            SCN_CLANG_POP
 8495|   903k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  90.8k|    {
 4076|  90.8k|        sync(0);
 4077|  90.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   995k|    {
 5466|   995k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   995k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 995k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   995k|        return static_cast<std::size_t>(m_desc &
 5471|   995k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   995k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.99M|    {
 5491|  1.99M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.99M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   995k|    {
 5434|   995k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   995k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 995k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   995k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   995k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 995k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   995k|        const auto t = type(id);
 5446|   995k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   995k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 995k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   995k|        basic_scan_arg<Context> arg;
 5451|   995k|        arg.m_type = t;
 5452|   995k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 995k, False: 0]
  ------------------
 5453|   995k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   995k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   995k|        return arg;
 5459|   995k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   995k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   995k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   995k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   995k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   995k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   995k|    {
 5495|   995k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   995k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.89M|    {
 5247|  1.89M|        return m_type != detail::arg_type::none_type;
 5248|  1.89M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   142k|{
 8417|   142k|#define SCN_VISIT(Type)                                         \
 8418|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   142k|    }                                                           \
 8421|   142k|    else {                                                      \
 8422|   142k|        return vis(monostate_val);                              \
 8423|   142k|    }
 8424|       |
 8425|   142k|    monostate monostate_val{};
 8426|       |
 8427|   142k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 142k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 142k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 142k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 142k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 142k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 142k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 142k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 142k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 142k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 142k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 142k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 142k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 142k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 142k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 142k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  44.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 44.3k, False: 98.2k]
  ------------------
 8459|  44.3k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  44.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  44.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  44.3k|    }                                                           \
  |  | 8421|  44.3k|    else {                                                      \
  |  | 8422|  44.3k|        return vis(monostate_val);                              \
  |  | 8423|  44.3k|    }
  ------------------
 8460|  48.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 48.2k, False: 94.2k]
  ------------------
 8461|  48.2k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  48.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  48.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  48.2k|    }                                                           \
  |  | 8421|  48.2k|    else {                                                      \
  |  | 8422|  48.2k|        return vis(monostate_val);                              \
  |  | 8423|  48.2k|    }
  ------------------
 8462|  49.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 49.9k, False: 92.6k]
  ------------------
 8463|  49.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  49.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  49.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  49.9k|    }                                                           \
  |  | 8421|  49.9k|    else {                                                      \
  |  | 8422|  49.9k|        return vis(monostate_val);                              \
  |  | 8423|  49.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 142k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 142k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 142k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 142k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 142k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 142k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 142k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 142k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 142k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   142k|            SCN_CLANG_POP
 8495|   142k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   805k|    {
 5545|   805k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   402k|    {
 8138|   402k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   805k|    {
 8056|   805k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   402k|{
 7044|   402k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   402k|    handler.check_args_exhausted();
 7046|   402k|    return handler.get_error();
 7047|   402k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   402k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   402k|    auto begin = format.data();
 7013|   402k|    auto it = begin;
 7014|   402k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   665k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 402k, False: 263k]
  ------------------
 7017|   402k|        const auto ch = *it++;
 7018|   402k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 402k, False: 0]
  ------------------
 7019|   402k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   402k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   402k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 139k, False: 263k]
  ------------------
 7023|   139k|                return;
 7024|   139k|            }
 7025|   402k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   402k|    }
 7036|       |
 7037|   263k|    handler.on_literal_text(begin, end);
 7038|   263k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   402k|{
 6942|   402k|    struct id_adapter {
 6943|   402k|        constexpr void operator()()
 6944|   402k|        {
 6945|   402k|            arg_id = handler.on_arg_id();
 6946|   402k|        }
 6947|   402k|        constexpr void operator()(std::size_t id)
 6948|   402k|        {
 6949|   402k|            arg_id = handler.on_arg_id(id);
 6950|   402k|        }
 6951|       |
 6952|   402k|        constexpr void on_error(const char* msg)
 6953|   402k|        {
 6954|   402k|            SCN_UNLIKELY_ATTR
 6955|   402k|            handler.on_error(msg);
 6956|   402k|        }
 6957|       |
 6958|   402k|        Handler& handler;
 6959|   402k|        std::size_t arg_id;
 6960|   402k|    };
 6961|       |
 6962|   402k|    ++begin;
 6963|   402k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   402k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 402k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   402k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 402k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   402k|    else {
 6975|   402k|        auto adapter = id_adapter{handler, 0};
 6976|   402k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   402k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   402k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 402k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   402k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 402k, False: 0]
  ------------------
 6987|   402k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   402k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   402k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   805k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  |  Branch (859:45): [True: 0, False: 402k]
  |  |  |  Branch (859:45): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   402k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   402k|    }
 7003|   402k|    return begin + 1;
 7004|   402k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   805k|    {
 8039|   805k|        return m_args.get(id);
 8040|   805k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   805k|    {
 8049|   805k|        return m_locale;
 8050|   805k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   805k|    {
 5566|   805k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   805k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 805k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   805k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   805k|        do_check_arg_id(id);
 5574|   805k|        return id;
 5575|   805k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   805k|{
 6054|   805k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   805k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   805k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   402k|{
 6443|   402k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   402k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 402k, False: 0]
  |  Branch (6444:26): [True: 0, False: 402k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   402k|    handler();
 6449|   402k|    return begin;
 6450|   402k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   402k|        {
 6945|   402k|            arg_id = handler.on_arg_id();
 6946|   402k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.61M|    {
 5252|  1.61M|        return m_type;
 5253|  1.61M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   805k|    {
 5561|   805k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   805k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   545k|{
 4344|   545k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 545k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   545k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   545k|                            ranges::default_sentinel};
 4350|   545k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   545k|    {
 4177|   545k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   545k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   545k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.61M|    {
 5550|  1.61M|        return m_format.data();
 5551|  1.61M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   402k|    {
 7122|   402k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   402k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   402k|{
 6858|   402k|    auto do_presentation = [&]() -> const CharT* {
 6859|   402k|        if (*begin == CharT{'['}) {
 6860|   402k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   402k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   402k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   402k|                return begin;
 6866|   402k|            }
 6867|   402k|            handler.on_character_set_string(set);
 6868|   402k|            return begin;
 6869|   402k|        }
 6870|   402k|        if (*begin == CharT{'/'}) {
 6871|   402k|            return parse_presentation_regex(begin, end, handler);
 6872|   402k|        }
 6873|   402k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   402k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   402k|            handler.on_error("Invalid type specifier in format string");
 6876|   402k|            return begin;
 6877|   402k|        }
 6878|   402k|        handler.on_type(type);
 6879|   402k|        return begin;
 6880|   402k|    };
 6881|       |
 6882|   402k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 402k, False: 0]
  |  Branch (6882:28): [True: 402k, False: 0]
  ------------------
 6883|   402k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 402k, False: 0]
  |  Branch (6883:36): [True: 307k, False: 95.0k]
  ------------------
 6884|   307k|        return do_presentation();
 6885|   307k|    }
 6886|       |
 6887|  95.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  95.0k|    begin = parse_align(begin, end, handler);
 6893|  95.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  95.0k|    begin = parse_width(begin, end, handler);
 6899|  95.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  95.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 95.0k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  95.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 95.0k, False: 0]
  ------------------
 6918|  95.0k|        handler.on_localized();
 6919|  95.0k|        ++begin;
 6920|  95.0k|    }
 6921|  95.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  95.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 95.0k, False: 0]
  |  Branch (6926:25): [True: 0, False: 95.0k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  95.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  95.0k|    return begin;
 6935|  95.0k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   805k|{
 6507|   805k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 615k, False: 190k]
  |  Branch (6507:33): [True: 615k, False: 0]
  ------------------
 6508|   805k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 190k, False: 0]
  |  Branch (6508:33): [True: 190k, False: 0]
  ------------------
 6509|   805k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   307k|    auto do_presentation = [&]() -> const CharT* {
 6859|   307k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 307k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   307k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 307k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   307k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   307k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   307k|        handler.on_type(type);
 6879|   307k|        return begin;
 6880|   307k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   615k|{
 6455|   615k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 615k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 615k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 615k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 615k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 615k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 615k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 615k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 615k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 615k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 615k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   203k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 203k, False: 412k]
  ------------------
 6474|   203k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 615k]
  ------------------
 6475|   203k|            return presentation_type::float_hex;
 6476|  57.1k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 57.1k, False: 558k]
  ------------------
 6477|  57.1k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 615k]
  ------------------
 6478|  57.1k|            return presentation_type::float_scientific;
 6479|   168k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 168k, False: 446k]
  ------------------
 6480|   168k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 615k]
  ------------------
 6481|   168k|            return presentation_type::float_fixed;
 6482|   186k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 186k, False: 429k]
  ------------------
 6483|   186k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 615k]
  ------------------
 6484|   186k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 615k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 615k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 615k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 615k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 615k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 615k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 615k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   615k|    }
 6502|   615k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  95.0k|{
 6532|  95.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  95.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  95.0k|    auto check_align = [](wchar_t ch) {
 6535|  95.0k|        switch (ch) {
 6536|  95.0k|            case L'<':
 6537|  95.0k|                return align_type::left;
 6538|  95.0k|            case L'>':
 6539|  95.0k|                return align_type::right;
 6540|  95.0k|            case L'^':
 6541|  95.0k|                return align_type::center;
 6542|  95.0k|            default:
 6543|  95.0k|                return align_type::none;
 6544|  95.0k|        }
 6545|  95.0k|    };
 6546|       |
 6547|  95.0k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  95.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  |  Branch (859:45): [True: 0, False: 95.0k]
  |  |  |  Branch (859:45): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 6549|  95.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  95.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  95.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  95.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  95.0k|    const auto begin_before_fill = begin;
 6559|  95.0k|    begin += potential_fill_len;
 6560|       |
 6561|  95.0k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 95.0k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  95.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  95.0k|    const auto begin_after_fill = begin;
 6567|  95.0k|    ++begin;
 6568|       |
 6569|  95.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 95.0k, False: 0]
  ------------------
 6570|  95.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  95.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 95.0k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  95.0k|    }
 6578|       |
 6579|  95.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 95.0k, False: 0]
  ------------------
 6580|  95.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 95.0k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  95.0k|        return begin_before_fill;
 6585|  95.0k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  95.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   190k|{
 6514|   190k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   190k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   190k|        return 1;
 6517|   190k|    }
 6518|   190k|    else {
 6519|   190k|        const auto lengths =
 6520|   190k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   190k|            "\3\4";
 6522|   190k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   190k|        return len;
 6524|   190k|    }
 6525|   190k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   190k|    auto check_align = [](wchar_t ch) {
 6535|   190k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 190k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 190k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 190k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   190k|            default:
  ------------------
  |  Branch (6542:13): [True: 190k, False: 0]
  ------------------
 6543|   190k|                return align_type::none;
 6544|   190k|        }
 6545|   190k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  95.0k|{
 6597|  95.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  95.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  95.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 95.0k, False: 0]
  |  Branch (6599:33): [True: 0, False: 95.0k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  95.0k|    return begin;
 6610|  95.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  95.0k|    {
 7127|  95.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  95.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 95.0k, False: 0]
  ------------------
 7129|  95.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 95.0k, False: 0]
  ------------------
 7130|  95.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 95.0k]
  ------------------
 7131|  95.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  95.0k|        Handler::on_localized();
 7139|  95.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   402k|{
 8417|   402k|#define SCN_VISIT(Type)                                         \
 8418|   402k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   402k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   402k|    }                                                           \
 8421|   402k|    else {                                                      \
 8422|   402k|        return vis(monostate_val);                              \
 8423|   402k|    }
 8424|       |
 8425|   402k|    monostate monostate_val{};
 8426|       |
 8427|   402k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 402k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 402k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 402k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 402k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 402k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 402k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 402k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 402k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 402k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 402k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 402k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 402k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 402k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 402k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 402k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   130k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 130k, False: 272k]
  ------------------
 8459|   130k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   130k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   130k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   130k|    }                                                           \
  |  | 8421|   130k|    else {                                                      \
  |  | 8422|   130k|        return vis(monostate_val);                              \
  |  | 8423|   130k|    }
  ------------------
 8460|   135k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 135k, False: 267k]
  ------------------
 8461|   135k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   135k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   135k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   135k|    }                                                           \
  |  | 8421|   135k|    else {                                                      \
  |  | 8422|   135k|        return vis(monostate_val);                              \
  |  | 8423|   135k|    }
  ------------------
 8462|   137k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 137k, False: 265k]
  ------------------
 8463|   137k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   137k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   137k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   137k|    }                                                           \
  |  | 8421|   137k|    else {                                                      \
  |  | 8422|   137k|        return vis(monostate_val);                              \
  |  | 8423|   137k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 402k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 402k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 402k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 402k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 402k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 402k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 402k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 402k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 402k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   402k|            SCN_CLANG_POP
 8495|   402k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   142k|{
 8417|   142k|#define SCN_VISIT(Type)                                         \
 8418|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   142k|    }                                                           \
 8421|   142k|    else {                                                      \
 8422|   142k|        return vis(monostate_val);                              \
 8423|   142k|    }
 8424|       |
 8425|   142k|    monostate monostate_val{};
 8426|       |
 8427|   142k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 142k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 142k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 142k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 142k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 142k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 142k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 142k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 142k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 142k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 142k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 142k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 142k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 142k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 142k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 142k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  44.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 44.3k, False: 98.1k]
  ------------------
 8459|  44.3k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  44.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  44.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  44.3k|    }                                                           \
  |  | 8421|  44.3k|    else {                                                      \
  |  | 8422|  44.3k|        return vis(monostate_val);                              \
  |  | 8423|  44.3k|    }
  ------------------
 8460|  48.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 48.2k, False: 94.1k]
  ------------------
 8461|  48.2k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  48.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  48.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  48.2k|    }                                                           \
  |  | 8421|  48.2k|    else {                                                      \
  |  | 8422|  48.2k|        return vis(monostate_val);                              \
  |  | 8423|  48.2k|    }
  ------------------
 8462|  49.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 49.8k, False: 92.5k]
  ------------------
 8463|  49.8k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  49.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  49.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  49.8k|    }                                                           \
  |  | 8421|  49.8k|    else {                                                      \
  |  | 8422|  49.8k|        return vis(monostate_val);                              \
  |  | 8423|  49.8k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 142k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 142k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 142k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 142k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 142k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 142k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 142k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 142k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 142k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   142k|            SCN_CLANG_POP
 8495|   142k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   402k|{
 7044|   402k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   402k|    handler.check_args_exhausted();
 7046|   402k|    return handler.get_error();
 7047|   402k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   402k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   402k|    auto begin = format.data();
 7013|   402k|    auto it = begin;
 7014|   402k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   665k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 402k, False: 262k]
  ------------------
 7017|   402k|        const auto ch = *it++;
 7018|   402k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 402k, False: 0]
  ------------------
 7019|   402k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   402k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   402k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 139k, False: 262k]
  ------------------
 7023|   139k|                return;
 7024|   139k|            }
 7025|   402k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   402k|    }
 7036|       |
 7037|   262k|    handler.on_literal_text(begin, end);
 7038|   262k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   262k|    {
 8175|   262k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   262k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   402k|{
 6942|   402k|    struct id_adapter {
 6943|   402k|        constexpr void operator()()
 6944|   402k|        {
 6945|   402k|            arg_id = handler.on_arg_id();
 6946|   402k|        }
 6947|   402k|        constexpr void operator()(std::size_t id)
 6948|   402k|        {
 6949|   402k|            arg_id = handler.on_arg_id(id);
 6950|   402k|        }
 6951|       |
 6952|   402k|        constexpr void on_error(const char* msg)
 6953|   402k|        {
 6954|   402k|            SCN_UNLIKELY_ATTR
 6955|   402k|            handler.on_error(msg);
 6956|   402k|        }
 6957|       |
 6958|   402k|        Handler& handler;
 6959|   402k|        std::size_t arg_id;
 6960|   402k|    };
 6961|       |
 6962|   402k|    ++begin;
 6963|   402k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   402k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 402k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   402k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 402k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   402k|    else {
 6975|   402k|        auto adapter = id_adapter{handler, 0};
 6976|   402k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   402k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   402k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 402k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   402k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 402k, False: 0]
  ------------------
 6987|   402k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   402k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   402k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   805k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  |  Branch (859:45): [True: 0, False: 402k]
  |  |  |  Branch (859:45): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   402k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   402k|    }
 7003|   402k|    return begin + 1;
 7004|   402k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   402k|{
 6443|   402k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   402k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 402k, False: 0]
  |  Branch (6444:26): [True: 0, False: 402k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   402k|    handler();
 6449|   402k|    return begin;
 6450|   402k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   402k|        {
 6945|   402k|            arg_id = handler.on_arg_id();
 6946|   402k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   402k|    {
 7122|   402k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   402k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   402k|{
 6858|   402k|    auto do_presentation = [&]() -> const CharT* {
 6859|   402k|        if (*begin == CharT{'['}) {
 6860|   402k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   402k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   402k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   402k|                return begin;
 6866|   402k|            }
 6867|   402k|            handler.on_character_set_string(set);
 6868|   402k|            return begin;
 6869|   402k|        }
 6870|   402k|        if (*begin == CharT{'/'}) {
 6871|   402k|            return parse_presentation_regex(begin, end, handler);
 6872|   402k|        }
 6873|   402k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   402k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   402k|            handler.on_error("Invalid type specifier in format string");
 6876|   402k|            return begin;
 6877|   402k|        }
 6878|   402k|        handler.on_type(type);
 6879|   402k|        return begin;
 6880|   402k|    };
 6881|       |
 6882|   402k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 402k, False: 0]
  |  Branch (6882:28): [True: 402k, False: 0]
  ------------------
 6883|   402k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 402k, False: 0]
  |  Branch (6883:36): [True: 307k, False: 94.9k]
  ------------------
 6884|   307k|        return do_presentation();
 6885|   307k|    }
 6886|       |
 6887|  94.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  94.9k|    begin = parse_align(begin, end, handler);
 6893|  94.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  94.9k|    begin = parse_width(begin, end, handler);
 6899|  94.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  94.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 94.9k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  94.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 94.9k, False: 0]
  ------------------
 6918|  94.9k|        handler.on_localized();
 6919|  94.9k|        ++begin;
 6920|  94.9k|    }
 6921|  94.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  94.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 94.9k, False: 0]
  |  Branch (6926:25): [True: 0, False: 94.9k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  94.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  94.9k|    return begin;
 6935|  94.9k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   307k|    auto do_presentation = [&]() -> const CharT* {
 6859|   307k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 307k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   307k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 307k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   307k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   307k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   307k|        handler.on_type(type);
 6879|   307k|        return begin;
 6880|   307k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  94.9k|{
 6532|  94.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  94.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  94.9k|    auto check_align = [](wchar_t ch) {
 6535|  94.9k|        switch (ch) {
 6536|  94.9k|            case L'<':
 6537|  94.9k|                return align_type::left;
 6538|  94.9k|            case L'>':
 6539|  94.9k|                return align_type::right;
 6540|  94.9k|            case L'^':
 6541|  94.9k|                return align_type::center;
 6542|  94.9k|            default:
 6543|  94.9k|                return align_type::none;
 6544|  94.9k|        }
 6545|  94.9k|    };
 6546|       |
 6547|  94.9k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  94.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  |  Branch (859:45): [True: 0, False: 94.9k]
  |  |  |  Branch (859:45): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 6549|  94.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  94.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  94.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  94.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  94.9k|    const auto begin_before_fill = begin;
 6559|  94.9k|    begin += potential_fill_len;
 6560|       |
 6561|  94.9k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 94.9k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  94.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  94.9k|    const auto begin_after_fill = begin;
 6567|  94.9k|    ++begin;
 6568|       |
 6569|  94.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 94.9k, False: 0]
  ------------------
 6570|  94.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  94.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 94.9k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  94.9k|    }
 6578|       |
 6579|  94.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 94.9k, False: 0]
  ------------------
 6580|  94.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 94.9k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  94.9k|        return begin_before_fill;
 6585|  94.9k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  94.9k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   189k|    auto check_align = [](wchar_t ch) {
 6535|   189k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 189k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 189k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 189k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   189k|            default:
  ------------------
  |  Branch (6542:13): [True: 189k, False: 0]
  ------------------
 6543|   189k|                return align_type::none;
 6544|   189k|        }
 6545|   189k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  94.9k|{
 6597|  94.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  94.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  94.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 94.9k, False: 0]
  |  Branch (6599:33): [True: 0, False: 94.9k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  94.9k|    return begin;
 6610|  94.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  94.9k|    {
 7127|  94.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  94.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 94.9k, False: 0]
  ------------------
 7129|  94.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 94.9k, False: 0]
  ------------------
 7130|  94.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 94.9k]
  ------------------
 7131|  94.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  94.9k|        Handler::on_localized();
 7139|  94.9k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   402k|{
 8417|   402k|#define SCN_VISIT(Type)                                         \
 8418|   402k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   402k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   402k|    }                                                           \
 8421|   402k|    else {                                                      \
 8422|   402k|        return vis(monostate_val);                              \
 8423|   402k|    }
 8424|       |
 8425|   402k|    monostate monostate_val{};
 8426|       |
 8427|   402k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 402k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 402k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 402k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 402k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 402k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 402k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 402k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 402k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 402k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 402k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 402k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 402k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 402k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 402k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 402k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   129k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 129k, False: 272k]
  ------------------
 8459|   129k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   129k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   129k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   129k|    }                                                           \
  |  | 8421|   129k|    else {                                                      \
  |  | 8422|   129k|        return vis(monostate_val);                              \
  |  | 8423|   129k|    }
  ------------------
 8460|   135k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 135k, False: 267k]
  ------------------
 8461|   135k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   135k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   135k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   135k|    }                                                           \
  |  | 8421|   135k|    else {                                                      \
  |  | 8422|   135k|        return vis(monostate_val);                              \
  |  | 8423|   135k|    }
  ------------------
 8462|   137k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 137k, False: 265k]
  ------------------
 8463|   137k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   137k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   137k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   137k|    }                                                           \
  |  | 8421|   137k|    else {                                                      \
  |  | 8422|   137k|        return vis(monostate_val);                              \
  |  | 8423|   137k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 402k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 402k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 402k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 402k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 402k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 402k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 402k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 402k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 402k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   402k|            SCN_CLANG_POP
 8495|   402k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   181k|    {
 4076|   181k|        sync(0);
 4077|   181k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   226k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  95.0k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  79.7k|{
   89|  79.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  79.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  79.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  79.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   248k|{
   44|   248k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   248k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  79.7k|{
  127|  79.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  79.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  79.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  79.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   248k|{
   60|   248k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   248k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  14.7k|{
  163|  14.7k|    T value;
  164|  14.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  10.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  47.5k|{
   72|  47.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  47.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  83.7k|{
   89|  83.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  83.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  83.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  83.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.7k|    static_cast<    \
  |  |  929|  83.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.7k|    static_cast<    \
  |  |  929|  83.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  83.7k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  83.7k|{
  127|  83.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  83.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  83.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  83.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.7k|    static_cast<    \
  |  |  929|  83.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.7k|    static_cast<    \
  |  |  929|  83.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  83.7k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  16.0k|{
  163|  16.0k|    T value;
  164|  16.0k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  16.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  11.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  16.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  85.4k|{
   89|  85.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  85.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  85.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.4k|    static_cast<    \
  |  |  929|  85.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.4k|    static_cast<    \
  |  |  929|  85.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  85.4k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  85.4k|{
  127|  85.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  85.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  85.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.4k|    static_cast<    \
  |  |  929|  85.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.4k|    static_cast<    \
  |  |  929|  85.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  85.4k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  16.6k|{
  163|  16.6k|    T value;
  164|  16.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  16.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  11.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  16.6k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  79.7k|{
   89|  79.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  79.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  79.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  79.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   248k|{
   44|   248k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   248k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  79.7k|{
  127|  79.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  79.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  79.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  79.7k|    static_cast<    \
  |  |  929|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  79.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   248k|{
   60|   248k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   248k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  14.7k|{
  163|  14.7k|    T value;
  164|  14.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  10.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.1k|    static_cast<    \
  |  |  929|  10.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  47.4k|{
   72|  47.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  47.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  47.4k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  83.6k|{
   89|  83.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  83.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  83.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  83.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.6k|    static_cast<    \
  |  |  929|  83.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.6k|    static_cast<    \
  |  |  929|  83.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  83.6k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  83.6k|{
  127|  83.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  83.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  83.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  83.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.6k|    static_cast<    \
  |  |  929|  83.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  83.6k|    static_cast<    \
  |  |  929|  83.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  83.6k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  16.0k|{
  163|  16.0k|    T value;
  164|  16.0k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  16.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  11.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  16.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  85.3k|{
   89|  85.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  85.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  85.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.3k|    static_cast<    \
  |  |  929|  85.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.3k|    static_cast<    \
  |  |  929|  85.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  85.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  85.3k|{
  127|  85.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  85.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  85.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.3k|    static_cast<    \
  |  |  929|  85.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.3k|    static_cast<    \
  |  |  929|  85.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  85.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  16.6k|{
  163|  16.6k|    T value;
  164|  16.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  16.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  11.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  16.6k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.56M|{
  653|  1.56M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.56M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   655k|{
  659|   655k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   655k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 327k, False: 327k]
  ------------------
  661|   655k|                    : std::locale{};
  662|   655k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   722k|{
 1221|   722k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   722k|                                  m_nan_payload_buffer, value);
 1223|   722k|    value = this->setsign(value);
 1224|   722k|    return n;
 1225|   722k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   261k|{
 1221|   261k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   261k|                                  m_nan_payload_buffer, value);
 1223|   261k|    value = this->setsign(value);
 1224|   261k|    return n;
 1225|   261k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   748k|{
 1221|   748k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   748k|                                  m_nan_payload_buffer, value);
 1223|   748k|    value = this->setsign(value);
 1224|   748k|    return n;
 1225|   748k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   278k|{
 1221|   278k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   278k|                                  m_nan_payload_buffer, value);
 1223|   278k|    value = this->setsign(value);
 1224|   278k|    return n;
 1225|   278k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   755k|{
 1221|   755k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   755k|                                  m_nan_payload_buffer, value);
 1223|   755k|    value = this->setsign(value);
 1224|   755k|    return n;
 1225|   755k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   285k|{
 1221|   285k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   285k|                                  m_nan_payload_buffer, value);
 1223|   285k|    value = this->setsign(value);
 1224|   285k|    return n;
 1225|   285k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   499k|{
 2184|   499k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   499k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   569k|{
 2192|   569k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   569k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   569k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 527k, False: 41.9k]
  |  |  ------------------
  ------------------
 2194|   527k|        source.sync(*n);
 2195|   527k|    }
 2196|  41.9k|    else {
 2197|  41.9k|        source.sync_all();
 2198|  41.9k|    }
 2199|   569k|    return n;
 2200|   569k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   248k|{
 2208|   248k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   248k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   248k|{
 2216|   248k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   248k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   248k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 164k, False: 83.8k]
  |  |  ------------------
  ------------------
 2218|   164k|        source.sync(*n);
 2219|   164k|    }
 2220|  83.8k|    else {
 2221|  83.8k|        source.sync_all();
 2222|  83.8k|    }
 2223|   248k|    return n;
 2224|   248k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   991k|{
  194|   991k|    return find_classic_impl(
  195|   991k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   991k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   991k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.35M|{
  202|  2.35M|    return find_classic_impl(
  203|  2.35M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.35M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.35M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   499k|{
 2141|   499k|    return vscan_internal(source, format, args);
 2142|   499k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   569k|{
 2147|   569k|    auto n = vscan_internal(source, format, args);
 2148|   569k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   569k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 527k, False: 41.9k]
  |  |  ------------------
  ------------------
 2149|   527k|        source.sync(*n);
 2150|   527k|    }
 2151|  41.9k|    else {
 2152|  41.9k|        source.sync_all();
 2153|  41.9k|    }
 2154|   569k|    return n;
 2155|   569k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   248k|{
 2161|   248k|    return vscan_internal(source, format, args);
 2162|   248k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   248k|{
 2167|   248k|    auto n = vscan_internal(source, format, args);
 2168|   248k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   248k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 164k, False: 83.8k]
  |  |  ------------------
  ------------------
 2169|   164k|        source.sync(*n);
 2170|   164k|    }
 2171|  83.8k|    else {
 2172|  83.8k|        source.sync_all();
 2173|  83.8k|    }
 2174|   248k|    return n;
 2175|   248k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   108k|{
 2251|   108k|    return vscan_value_internal(source, arg);
 2252|   108k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   117k|{
 2256|   117k|    auto n = vscan_value_internal(source, arg);
 2257|   117k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   117k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 110k, False: 6.98k]
  |  |  ------------------
  ------------------
 2258|   110k|        source.sync(*n);
 2259|   110k|    }
 2260|  6.98k|    else {
 2261|  6.98k|        source.sync_all();
 2262|  6.98k|    }
 2263|   117k|    return n;
 2264|   117k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  47.5k|{
 2270|  47.5k|    return vscan_value_internal(source, arg);
 2271|  47.5k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  47.4k|{
 2276|  47.4k|    auto n = vscan_value_internal(source, arg);
 2277|  47.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  47.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.4k, False: 13.9k]
  |  |  ------------------
  ------------------
 2278|  33.4k|        source.sync(*n);
 2279|  33.4k|    }
 2280|  13.9k|    else {
 2281|  13.9k|        source.sync_all();
 2282|  13.9k|    }
 2283|  47.4k|    return n;
 2284|  47.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   991k|{
  118|   991k|    auto it = source.begin();
  119|       |
  120|  3.26M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.62M, False: 635k]
  ------------------
  121|  2.62M|        auto sv =
  122|  2.62M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.62M|                .substr(0, 8);
  124|       |
  125|  2.62M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.56M, False: 60.3k]
  ------------------
  126|  2.56M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.56M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.56M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 332k, False: 2.23M]
  ------------------
  129|   332k|                break;
  130|   332k|            }
  131|  2.23M|            continue;
  132|  2.56M|        }
  133|       |
  134|   202k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 165k, False: 36.8k]
  ------------------
  135|   165k|            auto tmp =
  136|   165k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   165k|            auto res = get_next_code_point(tmp);
  138|   165k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 23.4k, False: 142k]
  ------------------
  139|  23.4k|                return it;
  140|  23.4k|            }
  141|   142k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   142k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   142k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   142k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   142k|        }
  145|  60.3k|    }
  146|       |
  147|   968k|    return detail::make_string_view_iterator(source, it);
  148|   991k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  4.08M|{
  105|  4.08M|    static_assert(sizeof(*source.data()) == 1);
  106|  4.08M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  4.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  4.08M|    uint64_t word{};
  108|  4.08M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  4.08M|    return has_byte_greater(word, 127) != 0;
  111|  4.08M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  15.6M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   165k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.35M|{
  118|  2.35M|    auto it = source.begin();
  119|       |
  120|  2.57M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.45M, False: 1.12M]
  ------------------
  121|  1.45M|        auto sv =
  122|  1.45M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.45M|                .substr(0, 8);
  124|       |
  125|  1.45M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.37M, False: 80.8k]
  ------------------
  126|  1.37M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.37M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.37M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.16M, False: 212k]
  ------------------
  129|  1.16M|                break;
  130|  1.16M|            }
  131|   212k|            continue;
  132|  1.37M|        }
  133|       |
  134|   152k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 144k, False: 7.80k]
  ------------------
  135|   144k|            auto tmp =
  136|   144k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   144k|            auto res = get_next_code_point(tmp);
  138|   144k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 73.0k, False: 71.5k]
  ------------------
  139|  73.0k|                return it;
  140|  73.0k|            }
  141|  71.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  71.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  71.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  71.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  71.5k|        }
  145|  80.8k|    }
  146|       |
  147|  2.28M|    return detail::make_string_view_iterator(source, it);
  148|  2.35M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.13M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   144k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   722k|{
 1138|   722k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.20k, False: 718k]
  ------------------
 1139|  4.20k|        value = std::numeric_limits<T>::infinity();
 1140|  4.20k|        return 3;
 1141|  4.20k|    }
 1142|   718k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.64k, False: 715k]
  ------------------
 1143|  3.64k|        value = std::numeric_limits<T>::infinity();
 1144|  3.64k|        return 8;
 1145|  3.64k|    }
 1146|   715k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.9k, False: 685k]
  ------------------
 1147|  29.9k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.9k|        return 3;
 1149|  29.9k|    }
 1150|   685k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.00k, False: 684k]
  ------------------
 1151|  1.00k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.00k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.00k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.00k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.00k|    }
 1182|       |
 1183|   684k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   684k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   684k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   684k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 146k, False: 538k]
  ------------------
 1185|   146k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.86k, False: 143k]
  |  |  ------------------
  ------------------
 1186|  2.86k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.86k|                                         "Invalid floating-point digit");
 1188|  2.86k|        }
 1189|   146k|    }
 1190|   681k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.64k, False: 673k]
  |  |  ------------------
  ------------------
 1191|  7.64k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.64k|                                     "Invalid floating-point digit");
 1193|  7.64k|    }
 1194|       |
 1195|   673k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   673k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   673k|            double tmp{};
 1200|   673k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   673k|            value = tmp;
 1202|   673k|            return ret;
 1203|   673k|        }
 1204|   673k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   673k|            return fast_float_fallback(data, value);
 1208|   673k|        }
 1209|   673k|    }
 1210|   673k|    else {
 1211|       |        // Default to fast_float
 1212|   673k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   673k|    }
 1214|   673k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|   673k|    {
 1078|   673k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.42M|    {
  712|  2.42M|        return {kind, options};
  713|  2.42M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   673k|    {
 1082|   673k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 143k, False: 530k]
  ------------------
 1083|   673k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 24.2k, False: 506k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   167k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   167k|                                              value);
 1087|   167k|        }
 1088|       |
 1089|   506k|        const auto flags = get_flags();
 1090|   506k|        const auto view = get_view();
 1091|   506k|        const auto result = fast_float::from_chars(
 1092|   506k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   506k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 506k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   506k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.04k, False: 501k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.04k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.04k|                                              value);
 1102|  5.04k|        }
 1103|       |
 1104|   501k|        return result.ptr - view.data();
 1105|   506k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   172k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   172k|    {
 1048|   172k|#if !SCN_DISABLE_STRTOD
 1049|   172k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   172k|    }
 1056|   172k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   172k|    {
  894|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   224k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   172k|    {
  898|   172k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   172k|                           generic_strtod);
  900|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   172k|    {
  732|   172k|        CharT* end{};
  733|   172k|        errno = 0;
  734|   172k|        value = strtod_cb(src, &end);
  735|   172k|        const auto saved_errno = errno;
  736|   172k|        auto chars_read = end - src;
  737|       |
  738|   172k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   172k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.93k, False: 166k]
  |  |  ------------------
  ------------------
  740|  5.93k|            return unexpected(e);
  741|  5.93k|        }
  742|       |
  743|   166k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 142k, False: 24.0k]
  ------------------
  744|   166k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 142k, False: 0]
  ------------------
  745|   142k|            chars_read -= 2;
  746|   142k|        }
  747|       |
  748|   166k|        return chars_read;
  749|   172k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   224k|    {
  778|   224k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 84.9k, False: 139k]
  |  Branch (778:37): [True: 0, False: 84.9k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   224k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 24.5k, False: 200k]
  ------------------
  785|   224k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 24.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   224k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 9.26k, False: 215k]
  |  Branch (791:34): [True: 1.76k, False: 7.50k]
  ------------------
  792|  1.76k|            SCN_UNLIKELY_ATTR
  793|  1.76k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.76k|        }
  795|       |
  796|   223k|        SCN_GCC_COMPAT_PUSH
  797|   223k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   223k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 223k, False: 0]
  ------------------
  800|   223k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 223k, False: 0]
  ------------------
  801|   223k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 7.48k, False: 215k]
  ------------------
  802|  7.48k|            SCN_UNLIKELY_ATTR
  803|  7.48k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  7.48k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   215k|            return {};
  809|   223k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   234k|{
  687|   234k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 86.7k, False: 147k]
  |  Branch (687:25): [True: 0, False: 147k]
  ------------------
  688|   234k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   172k|    {
  755|   172k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 168k, False: 4.18k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   168k|            auto first_space = read_until_classic_space(input.view());
  758|   168k|            input.assign(
  759|   168k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   168k|        }
  761|       |
  762|   172k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 143k, False: 29.2k]
  ------------------
  763|   143k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   143k|                input.get_allocated_string().insert(0, "0x");
  765|   143k|            }
  766|   143k|            else {
  767|   143k|                input.get_allocated_string().insert(0, L"0x");
  768|   143k|            }
  769|   143k|        }
  770|       |
  771|   172k|        return input.get_allocated_string().c_str();
  772|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   172k|    {
  905|   172k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   172k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   172k|        }
  908|   172k|        else {
  909|   172k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   172k|        }
  911|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   172k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   172k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   172k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   172k|            return std::strtof(str, str_end);
  839|   172k|        }
  840|   172k|        else if constexpr (std::is_same_v<T, double>) {
  841|   172k|            return std::strtod(str, str_end);
  842|   172k|        }
  843|   172k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   172k|            return std::strtold(str, str_end);
  845|   172k|        }
  846|   172k|#endif
  847|   172k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.41M|    {
 1061|  1.41M|        unsigned format_flags{};
 1062|  1.41M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.39M, False: 10.7k]
  ------------------
 1063|  1.39M|            format_flags |= fast_float::fixed;
 1064|  1.39M|        }
 1065|  1.41M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.18M, False: 220k]
  ------------------
 1066|  1.18M|            format_flags |= fast_float::scientific;
 1067|  1.18M|        }
 1068|       |
 1069|  1.41M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.41M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   506k|    {
 1110|   506k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   506k|            return m_input.view();
 1112|   506k|        }
 1113|   506k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   506k|            return std::u16string_view{
 1115|   506k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   506k|                m_input.view().size()};
 1117|   506k|        }
 1118|   506k|        else {
 1119|   506k|            return std::u32string_view{
 1120|   506k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   506k|                m_input.view().size()};
 1122|   506k|        }
 1123|   506k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   261k|{
 1138|   261k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 261k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   261k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 261k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   261k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 261k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   261k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 261k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   261k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   261k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 58.0k, False: 203k]
  ------------------
 1185|  58.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.97k, False: 49.0k]
  |  |  ------------------
  ------------------
 1186|  8.97k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.97k|                                         "Invalid floating-point digit");
 1188|  8.97k|        }
 1189|  58.0k|    }
 1190|   252k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.7k, False: 230k]
  |  |  ------------------
  ------------------
 1191|  21.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  21.7k|                                     "Invalid floating-point digit");
 1193|  21.7k|    }
 1194|       |
 1195|   230k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   230k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   230k|            double tmp{};
 1200|   230k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   230k|            value = tmp;
 1202|   230k|            return ret;
 1203|   230k|        }
 1204|   230k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   230k|            return fast_float_fallback(data, value);
 1208|   230k|        }
 1209|   230k|    }
 1210|   230k|    else {
 1211|       |        // Default to fast_float
 1212|   230k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   230k|    }
 1214|   230k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   230k|    {
 1078|   230k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   835k|    {
  712|   835k|        return {kind, options};
  713|   835k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   230k|    {
 1082|   230k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 49.0k, False: 181k]
  ------------------
 1083|   230k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 326, False: 181k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  49.3k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  49.3k|                                              value);
 1087|  49.3k|        }
 1088|       |
 1089|   181k|        const auto flags = get_flags();
 1090|   181k|        const auto view = get_view();
 1091|   181k|        const auto result = fast_float::from_chars(
 1092|   181k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   181k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   181k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.25k, False: 178k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  3.25k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  3.25k|                                              value);
 1102|  3.25k|        }
 1103|       |
 1104|   178k|        return result.ptr - view.data();
 1105|   181k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  52.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  52.5k|    {
 1048|  52.5k|#if !SCN_DISABLE_STRTOD
 1049|  52.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  52.5k|    }
 1056|  52.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  52.5k|    {
  894|  52.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  52.5k|    {
  898|  52.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  52.5k|                           generic_strtod);
  900|  52.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  52.5k|    {
  732|  52.5k|        CharT* end{};
  733|  52.5k|        errno = 0;
  734|  52.5k|        value = strtod_cb(src, &end);
  735|  52.5k|        const auto saved_errno = errno;
  736|  52.5k|        auto chars_read = end - src;
  737|       |
  738|  52.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  52.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.31k, False: 49.2k]
  |  |  ------------------
  ------------------
  740|  3.31k|            return unexpected(e);
  741|  3.31k|        }
  742|       |
  743|  49.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 48.9k, False: 326]
  ------------------
  744|  49.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 48.9k, False: 0]
  ------------------
  745|  48.9k|            chars_read -= 2;
  746|  48.9k|        }
  747|       |
  748|  49.2k|        return chars_read;
  749|  52.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  52.5k|    {
  755|  52.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 50.6k, False: 1.99k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  50.6k|            auto first_space = read_until_classic_space(input.view());
  758|  50.6k|            input.assign(
  759|  50.6k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  50.6k|        }
  761|       |
  762|  52.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 49.0k, False: 3.57k]
  ------------------
  763|  49.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  49.0k|                input.get_allocated_string().insert(0, "0x");
  765|  49.0k|            }
  766|  49.0k|            else {
  767|  49.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  49.0k|            }
  769|  49.0k|        }
  770|       |
  771|  52.5k|        return input.get_allocated_string().c_str();
  772|  52.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  52.5k|    {
  905|  52.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  52.5k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  52.5k|        }
  908|  52.5k|        else {
  909|  52.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  52.5k|        }
  911|  52.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  52.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  52.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  52.5k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  52.5k|            return std::wcstof(str, str_end);
  877|  52.5k|        }
  878|  52.5k|        else if constexpr (std::is_same_v<T, double>) {
  879|  52.5k|            return std::wcstod(str, str_end);
  880|  52.5k|        }
  881|  52.5k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  52.5k|            return std::wcstold(str, str_end);
  883|  52.5k|        }
  884|  52.5k|#endif
  885|  52.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   181k|    {
 1110|   181k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   181k|            return m_input.view();
 1112|   181k|        }
 1113|   181k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   181k|            return std::u16string_view{
 1115|   181k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   181k|                m_input.view().size()};
 1117|   181k|        }
 1118|   181k|        else {
 1119|   181k|            return std::u32string_view{
 1120|   181k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   181k|                m_input.view().size()};
 1122|   181k|        }
 1123|   181k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   748k|{
 1138|   748k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.55k, False: 743k]
  ------------------
 1139|  4.55k|        value = std::numeric_limits<T>::infinity();
 1140|  4.55k|        return 3;
 1141|  4.55k|    }
 1142|   743k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.91k, False: 739k]
  ------------------
 1143|  3.91k|        value = std::numeric_limits<T>::infinity();
 1144|  3.91k|        return 8;
 1145|  3.91k|    }
 1146|   739k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.5k, False: 709k]
  ------------------
 1147|  30.5k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.5k|        return 3;
 1149|  30.5k|    }
 1150|   709k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.07k, False: 708k]
  ------------------
 1151|  1.07k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.07k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.07k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.07k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.07k|    }
 1182|       |
 1183|   708k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   708k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 149k, False: 558k]
  ------------------
 1185|   149k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.93k, False: 146k]
  |  |  ------------------
  ------------------
 1186|  2.93k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.93k|                                         "Invalid floating-point digit");
 1188|  2.93k|        }
 1189|   149k|    }
 1190|   705k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.13k, False: 696k]
  |  |  ------------------
  ------------------
 1191|  8.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.13k|                                     "Invalid floating-point digit");
 1193|  8.13k|    }
 1194|       |
 1195|   696k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   696k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   696k|            double tmp{};
 1200|   696k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   696k|            value = tmp;
 1202|   696k|            return ret;
 1203|   696k|        }
 1204|   696k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   696k|            return fast_float_fallback(data, value);
 1208|   696k|        }
 1209|   696k|    }
 1210|   696k|    else {
 1211|       |        // Default to fast_float
 1212|   696k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   696k|    }
 1214|   696k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|   696k|    {
 1078|   696k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   696k|    {
 1082|   696k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 146k, False: 550k]
  ------------------
 1083|   696k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 26.1k, False: 524k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   172k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   172k|                                              value);
 1087|   172k|        }
 1088|       |
 1089|   524k|        const auto flags = get_flags();
 1090|   524k|        const auto view = get_view();
 1091|   524k|        const auto result = fast_float::from_chars(
 1092|   524k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   524k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   524k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.36k, False: 521k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.36k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.36k|                                              value);
 1102|  2.36k|        }
 1103|       |
 1104|   521k|        return result.ptr - view.data();
 1105|   524k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   175k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   175k|    {
 1048|   175k|#if !SCN_DISABLE_STRTOD
 1049|   175k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   175k|    }
 1056|   175k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   175k|    {
  894|   175k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   225k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   175k|    {
  898|   175k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   175k|                           generic_strtod);
  900|   175k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   175k|    {
  732|   175k|        CharT* end{};
  733|   175k|        errno = 0;
  734|   175k|        value = strtod_cb(src, &end);
  735|   175k|        const auto saved_errno = errno;
  736|   175k|        auto chars_read = end - src;
  737|       |
  738|   175k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   175k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.80k, False: 172k]
  |  |  ------------------
  ------------------
  740|  2.80k|            return unexpected(e);
  741|  2.80k|        }
  742|       |
  743|   172k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 146k, False: 26.0k]
  ------------------
  744|   172k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 146k, False: 0]
  ------------------
  745|   146k|            chars_read -= 2;
  746|   146k|        }
  747|       |
  748|   172k|        return chars_read;
  749|   175k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   225k|    {
  778|   225k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 84.2k, False: 141k]
  |  Branch (778:37): [True: 0, False: 84.2k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   225k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 26.4k, False: 199k]
  ------------------
  785|   225k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 26.4k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   225k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.38k, False: 221k]
  |  Branch (791:34): [True: 424, False: 3.95k]
  ------------------
  792|    424|            SCN_UNLIKELY_ATTR
  793|    424|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    424|        }
  795|       |
  796|   225k|        SCN_GCC_COMPAT_PUSH
  797|   225k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   225k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 225k, False: 0]
  ------------------
  800|   225k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 225k, False: 0]
  ------------------
  801|   225k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.95k, False: 221k]
  ------------------
  802|  3.95k|            SCN_UNLIKELY_ATTR
  803|  3.95k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.95k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   221k|            return {};
  809|   225k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   230k|{
  691|   230k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 84.6k, False: 145k]
  |  Branch (691:24): [True: 0, False: 145k]
  ------------------
  692|   230k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   175k|    {
  755|   175k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 172k, False: 3.03k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   172k|            auto first_space = read_until_classic_space(input.view());
  758|   172k|            input.assign(
  759|   172k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   172k|        }
  761|       |
  762|   175k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 146k, False: 28.5k]
  ------------------
  763|   146k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   146k|                input.get_allocated_string().insert(0, "0x");
  765|   146k|            }
  766|   146k|            else {
  767|   146k|                input.get_allocated_string().insert(0, L"0x");
  768|   146k|            }
  769|   146k|        }
  770|       |
  771|   175k|        return input.get_allocated_string().c_str();
  772|   175k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   175k|    {
  905|   175k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   175k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   175k|        }
  908|   175k|        else {
  909|   175k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   175k|        }
  911|   175k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   175k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   175k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   175k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   175k|            return std::strtof(str, str_end);
  839|   175k|        }
  840|   175k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   175k|            return std::strtod(str, str_end);
  842|   175k|        }
  843|   175k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   175k|            return std::strtold(str, str_end);
  845|   175k|        }
  846|   175k|#endif
  847|   175k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   524k|    {
 1110|   524k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   524k|            return m_input.view();
 1112|   524k|        }
 1113|   524k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   524k|            return std::u16string_view{
 1115|   524k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   524k|                m_input.view().size()};
 1117|   524k|        }
 1118|   524k|        else {
 1119|   524k|            return std::u32string_view{
 1120|   524k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   524k|                m_input.view().size()};
 1122|   524k|        }
 1123|   524k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   278k|{
 1138|   278k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 278k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   278k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 278k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   278k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 278k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   278k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 278k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   278k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   278k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 58.0k, False: 220k]
  ------------------
 1185|  58.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.98k, False: 49.0k]
  |  |  ------------------
  ------------------
 1186|  8.98k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.98k|                                         "Invalid floating-point digit");
 1188|  8.98k|        }
 1189|  58.0k|    }
 1190|   269k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.2k, False: 247k]
  |  |  ------------------
  ------------------
 1191|  22.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  22.2k|                                     "Invalid floating-point digit");
 1193|  22.2k|    }
 1194|       |
 1195|   247k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   247k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   247k|            double tmp{};
 1200|   247k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   247k|            value = tmp;
 1202|   247k|            return ret;
 1203|   247k|        }
 1204|   247k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   247k|            return fast_float_fallback(data, value);
 1208|   247k|        }
 1209|   247k|    }
 1210|   247k|    else {
 1211|       |        // Default to fast_float
 1212|   247k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   247k|    }
 1214|   247k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   247k|    {
 1078|   247k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   247k|    {
 1082|   247k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 49.0k, False: 198k]
  ------------------
 1083|   247k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 326, False: 198k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  49.3k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  49.3k|                                              value);
 1087|  49.3k|        }
 1088|       |
 1089|   198k|        const auto flags = get_flags();
 1090|   198k|        const auto view = get_view();
 1091|   198k|        const auto result = fast_float::from_chars(
 1092|   198k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   198k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   198k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.52k, False: 196k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.52k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.52k|                                              value);
 1102|  1.52k|        }
 1103|       |
 1104|   196k|        return result.ptr - view.data();
 1105|   198k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  50.8k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  50.8k|    {
 1048|  50.8k|#if !SCN_DISABLE_STRTOD
 1049|  50.8k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  50.8k|    }
 1056|  50.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  50.8k|    {
  894|  50.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  50.8k|    {
  898|  50.8k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  50.8k|                           generic_strtod);
  900|  50.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  50.8k|    {
  732|  50.8k|        CharT* end{};
  733|  50.8k|        errno = 0;
  734|  50.8k|        value = strtod_cb(src, &end);
  735|  50.8k|        const auto saved_errno = errno;
  736|  50.8k|        auto chars_read = end - src;
  737|       |
  738|  50.8k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  50.8k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 49.2k]
  |  |  ------------------
  ------------------
  740|  1.57k|            return unexpected(e);
  741|  1.57k|        }
  742|       |
  743|  49.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 48.9k, False: 326]
  ------------------
  744|  49.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 48.9k, False: 0]
  ------------------
  745|  48.9k|            chars_read -= 2;
  746|  48.9k|        }
  747|       |
  748|  49.2k|        return chars_read;
  749|  50.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  50.8k|    {
  755|  50.8k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 49.7k, False: 1.13k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  49.7k|            auto first_space = read_until_classic_space(input.view());
  758|  49.7k|            input.assign(
  759|  49.7k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  49.7k|        }
  761|       |
  762|  50.8k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 49.0k, False: 1.84k]
  ------------------
  763|  49.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  49.0k|                input.get_allocated_string().insert(0, "0x");
  765|  49.0k|            }
  766|  49.0k|            else {
  767|  49.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  49.0k|            }
  769|  49.0k|        }
  770|       |
  771|  50.8k|        return input.get_allocated_string().c_str();
  772|  50.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  50.8k|    {
  905|  50.8k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  50.8k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  50.8k|        }
  908|  50.8k|        else {
  909|  50.8k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  50.8k|        }
  911|  50.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  50.8k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  50.8k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  50.8k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  50.8k|            return std::wcstof(str, str_end);
  877|  50.8k|        }
  878|  50.8k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  50.8k|            return std::wcstod(str, str_end);
  880|  50.8k|        }
  881|  50.8k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  50.8k|            return std::wcstold(str, str_end);
  883|  50.8k|        }
  884|  50.8k|#endif
  885|  50.8k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   198k|    {
 1110|   198k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   198k|            return m_input.view();
 1112|   198k|        }
 1113|   198k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   198k|            return std::u16string_view{
 1115|   198k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   198k|                m_input.view().size()};
 1117|   198k|        }
 1118|   198k|        else {
 1119|   198k|            return std::u32string_view{
 1120|   198k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   198k|                m_input.view().size()};
 1122|   198k|        }
 1123|   198k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   755k|{
 1138|   755k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.68k, False: 750k]
  ------------------
 1139|  4.68k|        value = std::numeric_limits<T>::infinity();
 1140|  4.68k|        return 3;
 1141|  4.68k|    }
 1142|   750k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 4.00k, False: 746k]
  ------------------
 1143|  4.00k|        value = std::numeric_limits<T>::infinity();
 1144|  4.00k|        return 8;
 1145|  4.00k|    }
 1146|   746k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.7k, False: 715k]
  ------------------
 1147|  30.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.7k|        return 3;
 1149|  30.7k|    }
 1150|   715k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.11k, False: 714k]
  ------------------
 1151|  1.11k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.11k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.11k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.11k|    }
 1182|       |
 1183|   714k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   714k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   714k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   714k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 150k, False: 564k]
  ------------------
 1185|   150k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.01k, False: 147k]
  |  |  ------------------
  ------------------
 1186|  3.01k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.01k|                                         "Invalid floating-point digit");
 1188|  3.01k|        }
 1189|   150k|    }
 1190|   711k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.44k, False: 703k]
  |  |  ------------------
  ------------------
 1191|  8.44k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.44k|                                     "Invalid floating-point digit");
 1193|  8.44k|    }
 1194|       |
 1195|   703k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   703k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   703k|            double tmp{};
 1200|   703k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   703k|            value = tmp;
 1202|   703k|            return ret;
 1203|   703k|        }
 1204|   703k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   703k|            return fast_float_fallback(data, value);
 1208|   703k|        }
 1209|   703k|    }
 1210|   703k|    else {
 1211|       |        // Default to fast_float
 1212|   703k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   703k|    }
 1214|   703k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   703k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   703k|    {
 1048|   703k|#if !SCN_DISABLE_STRTOD
 1049|   703k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   703k|    }
 1056|   703k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|   703k|    {
  894|   703k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   956k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   703k|    {
  898|   703k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   703k|                           generic_strtod);
  900|   703k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   703k|    {
  732|   703k|        CharT* end{};
  733|   703k|        errno = 0;
  734|   703k|        value = strtod_cb(src, &end);
  735|   703k|        const auto saved_errno = errno;
  736|   703k|        auto chars_read = end - src;
  737|       |
  738|   703k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   703k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 604, False: 702k]
  |  |  ------------------
  ------------------
  740|    604|            return unexpected(e);
  741|    604|        }
  742|       |
  743|   702k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 147k, False: 555k]
  ------------------
  744|   702k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 147k, False: 0]
  ------------------
  745|   147k|            chars_read -= 2;
  746|   147k|        }
  747|       |
  748|   702k|        return chars_read;
  749|   703k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   956k|    {
  778|   956k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 401k, False: 555k]
  |  Branch (778:37): [True: 0, False: 401k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   956k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 26.5k, False: 930k]
  ------------------
  785|   956k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 26.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   956k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 764, False: 956k]
  |  Branch (791:34): [True: 120, False: 644]
  ------------------
  792|    120|            SCN_UNLIKELY_ATTR
  793|    120|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    120|        }
  795|       |
  796|   956k|        SCN_GCC_COMPAT_PUSH
  797|   956k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   956k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 956k, False: 0]
  ------------------
  800|   956k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 956k, False: 0]
  ------------------
  801|   956k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 644, False: 956k]
  ------------------
  802|    644|            SCN_UNLIKELY_ATTR
  803|    644|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    644|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   956k|            return {};
  809|   956k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   957k|{
  695|   957k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 401k, False: 556k]
  |  Branch (695:26): [True: 0, False: 556k]
  ------------------
  696|   957k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   703k|    {
  755|   703k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 651k, False: 51.7k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   651k|            auto first_space = read_until_classic_space(input.view());
  758|   651k|            input.assign(
  759|   651k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   651k|        }
  761|       |
  762|   703k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 147k, False: 556k]
  ------------------
  763|   147k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   147k|                input.get_allocated_string().insert(0, "0x");
  765|   147k|            }
  766|   147k|            else {
  767|   147k|                input.get_allocated_string().insert(0, L"0x");
  768|   147k|            }
  769|   147k|        }
  770|       |
  771|   703k|        return input.get_allocated_string().c_str();
  772|   703k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   703k|    {
  905|   703k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   703k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   703k|        }
  908|   703k|        else {
  909|   703k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   703k|        }
  911|   703k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   703k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   703k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   703k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   703k|            return std::strtof(str, str_end);
  839|   703k|        }
  840|   703k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   703k|            return std::strtod(str, str_end);
  842|   703k|        }
  843|   703k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|   703k|            return std::strtold(str, str_end);
  845|   703k|        }
  846|   703k|#endif
  847|   703k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   285k|{
 1138|   285k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 285k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   285k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 285k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   285k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 285k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   285k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 285k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   285k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   285k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 58.0k, False: 227k]
  ------------------
 1185|  58.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.99k, False: 49.0k]
  |  |  ------------------
  ------------------
 1186|  8.99k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.99k|                                         "Invalid floating-point digit");
 1188|  8.99k|        }
 1189|  58.0k|    }
 1190|   276k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.6k, False: 253k]
  |  |  ------------------
  ------------------
 1191|  22.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  22.6k|                                     "Invalid floating-point digit");
 1193|  22.6k|    }
 1194|       |
 1195|   253k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   253k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   253k|            double tmp{};
 1200|   253k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   253k|            value = tmp;
 1202|   253k|            return ret;
 1203|   253k|        }
 1204|   253k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   253k|            return fast_float_fallback(data, value);
 1208|   253k|        }
 1209|   253k|    }
 1210|   253k|    else {
 1211|       |        // Default to fast_float
 1212|   253k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   253k|    }
 1214|   253k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   253k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   253k|    {
 1048|   253k|#if !SCN_DISABLE_STRTOD
 1049|   253k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   253k|    }
 1056|   253k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   253k|    {
  894|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   253k|    {
  898|   253k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   253k|                           generic_strtod);
  900|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   253k|    {
  732|   253k|        CharT* end{};
  733|   253k|        errno = 0;
  734|   253k|        value = strtod_cb(src, &end);
  735|   253k|        const auto saved_errno = errno;
  736|   253k|        auto chars_read = end - src;
  737|       |
  738|   253k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   253k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 160, False: 253k]
  |  |  ------------------
  ------------------
  740|    160|            return unexpected(e);
  741|    160|        }
  742|       |
  743|   253k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 49.0k, False: 204k]
  ------------------
  744|   253k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 49.0k, False: 0]
  ------------------
  745|  49.0k|            chars_read -= 2;
  746|  49.0k|        }
  747|       |
  748|   253k|        return chars_read;
  749|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   253k|    {
  755|   253k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 249k, False: 4.39k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   249k|            auto first_space = read_until_classic_space(input.view());
  758|   249k|            input.assign(
  759|   249k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   249k|        }
  761|       |
  762|   253k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 49.0k, False: 204k]
  ------------------
  763|  49.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  49.0k|                input.get_allocated_string().insert(0, "0x");
  765|  49.0k|            }
  766|  49.0k|            else {
  767|  49.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  49.0k|            }
  769|  49.0k|        }
  770|       |
  771|   253k|        return input.get_allocated_string().c_str();
  772|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   253k|    {
  905|   253k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   253k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   253k|        }
  908|   253k|        else {
  909|   253k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   253k|        }
  911|   253k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   253k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   253k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   253k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   253k|            return std::wcstof(str, str_end);
  877|   253k|        }
  878|   253k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   253k|            return std::wcstod(str, str_end);
  880|   253k|        }
  881|   253k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   253k|            return std::wcstold(str, str_end);
  883|   253k|        }
  884|   253k|#endif
  885|   253k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.13M|{
 2073|  1.13M|    const auto argcount = args.size();
 2074|  1.13M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 235k, False: 903k]
  |  Branch (2074:60): [True: 235k, False: 0]
  ------------------
 2075|   235k|        auto arg = args.get(0);
 2076|   235k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   235k|    }
 2078|       |
 2079|   903k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 903k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   903k|    SCN_UNLIKELY_ATTR
 2087|   903k|    {
 2088|   903k|        auto handler = format_handler<false, CharT>{
 2089|   903k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   903k|    static_cast<    \
  |  |  929|   903k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   903k|    static_cast<    \
  |  |  929|   903k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   903k|        return vscan_parse_format_string(format, handler);
 2091|   903k|    }
 2092|   903k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.13M|{
 1625|  2.13M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.68M, False: 453k]
  ------------------
 1626|  1.68M|        return false;
 1627|  1.68M|    }
 1628|   453k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 453k, False: 0]
  |  Branch (1628:39): [True: 453k, False: 0]
  ------------------
 1629|  2.13M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   353k|{
 1658|   353k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 353k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   353k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   353k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 353k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   353k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   353k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   353k|    static_cast<    \
  |  |  929|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   353k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   353k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.9k, False: 332k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  20.9k|    }                                                  \
  |  |  |  | 3671|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   332k|    return it.position();
 1675|   353k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   782k|    {
 1903|   782k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  2.49M|    {
 1722|  2.49M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.49M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   782k|    {
 1853|   782k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   782k|{
 2038|   782k|    const auto beg = handler.get_ctx().begin();
 2039|   782k|    detail::parse_format_string<false>(format, handler);
 2040|   782k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.8k, False: 712k]
  |  |  ------------------
  ------------------
 2041|  69.8k|        return unexpected(handler.error);
 2042|  69.8k|    }
 2043|   712k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   782k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  5.33M|    {
 2022|  5.33M|        return ctx.get();
 2023|  5.33M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  5.33M|    {
 1857|  5.33M|        return contiguous_ctx;
 1858|  5.33M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.49M|    {
 1907|  1.49M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.49M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.49M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   782k|{
 1681|   782k|    auto arg = ctx.arg(id);
 1682|   782k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   782k|    return arg;
 1686|   782k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.49M|    {
 1797|  2.49M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.49M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.49M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.49M|            visited_args_lower64 |= (1ull << id);
 1808|  2.49M|            return;
 1809|  2.49M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.49M|    {
 1782|  2.49M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.49M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.49M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.49M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.49M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   419k|    {
 1766|   419k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 419k, False: 0]
  |  |  ------------------
  ------------------
 1767|   419k|            error = err;
 1768|   419k|        }
 1769|   419k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   782k|    {
 1944|   782k|        return parse_ctx.next_arg_id();
 1945|   782k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   782k|    {
 1985|   782k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   782k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   782k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 782k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   782k|        auto specs = detail::format_specs{};
 1998|   782k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   782k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   782k|            arg.type()};
 2001|       |
 2002|   782k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   782k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 782k]
  |  Branch (2003:29): [True: 0, False: 782k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   782k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   782k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   782k|        on_visit_scan_arg(
 2014|   782k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   782k|                                           get_ctx().locale()},
 2016|   782k|            arg);
 2017|   782k|        return parse_ctx.begin();
 2018|   782k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   782k|    {
 1701|   782k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   782k|    {
 1956|   782k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 782k]
  |  Branch (1956:23): [True: 0, False: 782k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   782k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   782k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   782k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.8k, False: 712k]
  |  |  ------------------
  ------------------
 1963|  69.8k|            on_error(r.error());
 1964|  69.8k|        }
 1965|   712k|        else {
 1966|   712k|            get_ctx().advance_to(*r);
 1967|   712k|        }
 1968|   782k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.49M|    {
 1729|  2.49M|        {
 1730|  2.49M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.49M]
  ------------------
 1731|  2.49M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.49M]
  ------------------
 1732|  2.49M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.49M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.49M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.49M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.49M|        }
 1739|       |
 1740|  2.49M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.49M, False: 0]
  ------------------
 1741|  2.49M|            return;
 1742|  2.49M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.49M|    {
 1777|  2.49M|        return error;
 1778|  2.49M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  7.47M|    {
 1773|  7.47M|        return static_cast<bool>(error);
 1774|  7.47M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|   903k|    {
 1903|   903k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   903k|    {
 1830|   903k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   903k|{
 2038|   903k|    const auto beg = handler.get_ctx().begin();
 2039|   903k|    detail::parse_format_string<false>(format, handler);
 2040|   903k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.8k, False: 833k]
  |  |  ------------------
  ------------------
 2041|  69.8k|        return unexpected(handler.error);
 2042|  69.8k|    }
 2043|   833k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   903k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  6.18M|    {
 2022|  6.18M|        return ctx.get();
 2023|  6.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  6.18M|    {
 1834|  6.18M|        return ctx;
 1835|  6.18M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.73M|    {
 1907|  1.73M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.73M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   903k|{
 1681|   903k|    auto arg = ctx.arg(id);
 1682|   903k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 903k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   903k|    return arg;
 1686|   903k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   903k|    {
 1944|   903k|        return parse_ctx.next_arg_id();
 1945|   903k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   903k|    {
 1985|   903k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   903k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   903k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 903k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   903k|        auto specs = detail::format_specs{};
 1998|   903k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   903k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   903k|            arg.type()};
 2001|       |
 2002|   903k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   903k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 903k]
  |  Branch (2003:29): [True: 0, False: 903k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   903k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 903k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   903k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   903k|        on_visit_scan_arg(
 2014|   903k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   903k|                                           get_ctx().locale()},
 2016|   903k|            arg);
 2017|   903k|        return parse_ctx.begin();
 2018|   903k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   903k|    {
 1701|   903k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   903k|    {
 1956|   903k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 903k]
  |  Branch (1956:23): [True: 0, False: 903k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   903k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   903k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   903k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.8k, False: 833k]
  |  |  ------------------
  ------------------
 1963|  69.8k|            on_error(r.error());
 1964|  69.8k|        }
 1965|   833k|        else {
 1966|   833k|            get_ctx().advance_to(*r);
 1967|   833k|        }
 1968|   903k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   999k|{
 2053|   999k|    const auto argcount = args.size();
 2054|   999k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 217k, False: 782k]
  |  Branch (2054:60): [True: 217k, False: 0]
  ------------------
 2055|   217k|        auto arg = args.get(0);
 2056|   217k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   217k|    }
 2058|       |
 2059|   782k|    auto handler = format_handler<true, CharT>{
 2060|   782k|        ranges::subrange<const CharT*>{source.data(),
 2061|   782k|                                       source.data() + source.size()},
 2062|   782k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   782k|    static_cast<    \
  |  |  929|   782k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   782k|    static_cast<    \
  |  |  929|   782k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   782k|    return vscan_parse_format_string(format, handler);
 2064|   999k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   326k|{
 1638|   326k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   326k|    auto reader =
 1644|   326k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   326k|            ranges::subrange<const CharT*>{source.data(),
 1646|   326k|                                           source.data() + source.size()},
 1647|   326k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   326k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.9k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  20.9k|    }                                                  \
  |  |  |  | 3671|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   305k|    return ranges::distance(source.data(), it);
 1650|   326k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   497k|{
 2053|   497k|    const auto argcount = args.size();
 2054|   497k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 95.0k, False: 402k]
  |  Branch (2054:60): [True: 95.0k, False: 0]
  ------------------
 2055|  95.0k|        auto arg = args.get(0);
 2056|  95.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  95.0k|    static_cast<    \
  |  |  929|  95.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  95.0k|    }
 2058|       |
 2059|   402k|    auto handler = format_handler<true, CharT>{
 2060|   402k|        ranges::subrange<const CharT*>{source.data(),
 2061|   402k|                                       source.data() + source.size()},
 2062|   402k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   402k|    static_cast<    \
  |  |  929|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   402k|    static_cast<    \
  |  |  929|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   402k|    return vscan_parse_format_string(format, handler);
 2064|   497k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   995k|{
 1625|   995k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 805k, False: 190k]
  ------------------
 1626|   805k|        return false;
 1627|   805k|    }
 1628|   190k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 190k, False: 0]
  |  Branch (1628:39): [True: 190k, False: 0]
  ------------------
 1629|   995k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   142k|{
 1638|   142k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   142k|    auto reader =
 1644|   142k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   142k|            ranges::subrange<const CharT*>{source.data(),
 1646|   142k|                                           source.data() + source.size()},
 1647|   142k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   142k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.9k|    }                                                  \
  |  |  |  | 3671|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   100k|    return ranges::distance(source.data(), it);
 1650|   142k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   402k|    {
 1903|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   402k|    {
 1853|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   402k|{
 2038|   402k|    const auto beg = handler.get_ctx().begin();
 2039|   402k|    detail::parse_format_string<false>(format, handler);
 2040|   402k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 139k, False: 263k]
  |  |  ------------------
  ------------------
 2041|   139k|        return unexpected(handler.error);
 2042|   139k|    }
 2043|   263k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   402k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.54M|    {
 2022|  2.54M|        return ctx.get();
 2023|  2.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.54M|    {
 1857|  2.54M|        return contiguous_ctx;
 1858|  2.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   665k|    {
 1907|   665k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 665k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   665k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   402k|{
 1681|   402k|    auto arg = ctx.arg(id);
 1682|   402k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   402k|    return arg;
 1686|   402k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   402k|    {
 1944|   402k|        return parse_ctx.next_arg_id();
 1945|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   402k|    {
 1985|   402k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   402k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   402k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 402k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   402k|        auto specs = detail::format_specs{};
 1998|   402k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   402k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   402k|            arg.type()};
 2001|       |
 2002|   402k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   402k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 402k]
  |  Branch (2003:29): [True: 0, False: 402k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   402k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   402k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   402k|        on_visit_scan_arg(
 2014|   402k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   402k|                                           get_ctx().locale()},
 2016|   402k|            arg);
 2017|   402k|        return parse_ctx.begin();
 2018|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   402k|    {
 1701|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   402k|    {
 1956|   402k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 402k]
  |  Branch (1956:23): [True: 0, False: 402k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   402k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   402k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 139k, False: 263k]
  |  |  ------------------
  ------------------
 1963|   139k|            on_error(r.error());
 1964|   139k|        }
 1965|   263k|        else {
 1966|   263k|            get_ctx().advance_to(*r);
 1967|   263k|        }
 1968|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   497k|{
 2073|   497k|    const auto argcount = args.size();
 2074|   497k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 94.9k, False: 402k]
  |  Branch (2074:60): [True: 94.9k, False: 0]
  ------------------
 2075|  94.9k|        auto arg = args.get(0);
 2076|  94.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  94.9k|    static_cast<    \
  |  |  929|  94.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  94.9k|    }
 2078|       |
 2079|   402k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 402k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   402k|    SCN_UNLIKELY_ATTR
 2087|   402k|    {
 2088|   402k|        auto handler = format_handler<false, CharT>{
 2089|   402k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   402k|    static_cast<    \
  |  |  929|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   402k|    static_cast<    \
  |  |  929|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   402k|        return vscan_parse_format_string(format, handler);
 2091|   402k|    }
 2092|   402k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   142k|{
 1658|   142k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   142k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   142k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   142k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   142k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   142k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  41.9k|    }                                                  \
  |  |  |  | 3671|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   100k|    return it.position();
 1675|   142k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   402k|    {
 1903|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   402k|    {
 1830|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   402k|{
 2038|   402k|    const auto beg = handler.get_ctx().begin();
 2039|   402k|    detail::parse_format_string<false>(format, handler);
 2040|   402k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 139k, False: 262k]
  |  |  ------------------
  ------------------
 2041|   139k|        return unexpected(handler.error);
 2042|   139k|    }
 2043|   262k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   402k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.53M|    {
 2022|  2.53M|        return ctx.get();
 2023|  2.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.53M|    {
 1834|  2.53M|        return ctx;
 1835|  2.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   665k|    {
 1907|   665k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 665k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   665k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   402k|{
 1681|   402k|    auto arg = ctx.arg(id);
 1682|   402k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   402k|    return arg;
 1686|   402k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   402k|    {
 1944|   402k|        return parse_ctx.next_arg_id();
 1945|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   402k|    {
 1985|   402k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   402k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   402k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 402k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   402k|        auto specs = detail::format_specs{};
 1998|   402k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   402k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   402k|            arg.type()};
 2001|       |
 2002|   402k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   402k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 402k]
  |  Branch (2003:29): [True: 0, False: 402k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   402k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   402k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   402k|        on_visit_scan_arg(
 2014|   402k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   402k|                                           get_ctx().locale()},
 2016|   402k|            arg);
 2017|   402k|        return parse_ctx.begin();
 2018|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   402k|    {
 1701|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   402k|    {
 1956|   402k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 402k]
  |  Branch (1956:23): [True: 0, False: 402k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   402k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   402k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 139k, False: 262k]
  |  |  ------------------
  ------------------
 1963|   139k|            on_error(r.error());
 1964|   139k|        }
 1965|   262k|        else {
 1966|   262k|            get_ctx().advance_to(*r);
 1967|   262k|        }
 1968|   402k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   108k|{
 2099|   108k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   108k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   117k|{
 2099|   117k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   117k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  47.5k|{
 2099|  47.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  47.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  47.4k|{
 2099|  47.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  47.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  47.4k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.32k|{
 1363|  2.32k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.32k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.32k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.32k|            std::u32string tmp;
 1368|  2.32k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.32k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.32k|                std::u32string_view{tmp}, dest);
 1371|  2.32k|        }
 1372|  2.32k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.32k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.32k|        }
 1375|  2.32k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.32k|{
 1256|  2.32k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.32k|    auto it = src.begin();
 1259|   652k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 650k, False: 2.32k]
  ------------------
 1260|   650k|        auto res = get_next_code_point(
 1261|   650k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   650k|                                                                 src.end()));
 1263|   650k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   650k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.18k, False: 648k]
  |  |  ------------------
  ------------------
 1264|  2.18k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.18k|        }
 1266|   648k|        else {
 1267|   648k|            dest.push_back(res.value);
 1268|   648k|        }
 1269|   650k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   650k|    }
 1271|  2.32k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   960k|{
 1169|   960k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   960k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   960k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   960k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   960k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   960k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.9k, False: 934k]
  |  |  ------------------
  ------------------
 1173|  25.9k|        return {get_start_for_next_code_point(input),
 1174|  25.9k|                detail::invalid_code_point};
 1175|  25.9k|    }
 1176|   934k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   934k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.05k, False: 930k]
  |  |  ------------------
  ------------------
 1177|  4.05k|        return {input.end(), detail::invalid_code_point};
 1178|  4.05k|    }
 1179|       |
 1180|   930k|    return {input.begin() + len,
 1181|   930k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   934k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  25.9k|{
 1155|  25.9k|    auto it = input.begin();
 1156|   178k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 171k, False: 6.65k]
  ------------------
 1157|   171k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 19.2k, False: 152k]
  ------------------
 1158|  19.2k|            break;
 1159|  19.2k|        }
 1160|   171k|    }
 1161|  25.9k|    return it;
 1162|  25.9k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  27.1M|    {
  809|  27.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  27.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  27.1M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  10.2M|    {
  823|  10.2M|        return a.m_code == b.m_code;
  824|  10.2M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  1.40M|    {
 1728|  1.40M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.40M|        std::strcpy(m_locbuf, loc);
 1730|  1.40M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.40M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.40M|        std::setlocale(m_category, m_locbuf);
 1735|  1.40M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  1.40M|    {
 1757|  1.40M|        std::setlocale(cat, "C");
 1758|  1.40M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  2.49M|    {
 2936|  2.49M|        return m_msg == nullptr;
 2937|  2.49M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  2.45M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  17.8M|{
  458|  17.8M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  17.8M|        static_cast<unsigned char>(ch))];
  460|  17.8M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  43.6k|{
  469|  43.6k|    return static_cast<unsigned char>(ch) <= 127;
  470|  43.6k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  4.08M|{
  539|  4.08M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  4.08M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  11.5M|{
  784|  11.5M|    return e != eof_error::good;
  785|  11.5M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  42.4k|{
  798|  42.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  42.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  42.4k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  42.4k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   203k|{
  845|   203k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   203k|    return parse_error::eof;
  847|   203k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.61M|{
  854|  3.61M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.61M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.61M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 75.1k, False: 3.54M]
  ------------------
  859|  75.1k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  75.1k|    }
  861|       |
  862|  3.54M|    return scan_error{code, msg};
  863|  3.61M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.61M|{
  868|  3.61M|    return [code, msg](parse_error err) {
  869|  3.61M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.61M|    };
  871|  3.61M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  4.87M|{
 1200|       |    // Pattern_White_Space property
 1201|  4.87M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 4.66M, False: 213k]
  |  Branch (1201:27): [True: 981k, False: 3.68M]
  ------------------
 1202|  4.87M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 60.9k, False: 3.83M]
  ------------------
 1203|  4.87M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 49.0k, False: 3.78M]
  ------------------
 1204|  4.87M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.85k, False: 3.78M]
  ------------------
 1205|  4.87M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 22.9k, False: 3.75M]
  ------------------
 1206|  4.87M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 848k, False: 2.91M]
  ------------------
 1207|  4.87M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 2.90M]
  ------------------
 1208|  4.87M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  2.87M|{
 2220|  2.87M|    unsigned char running_diff{0};
 2221|  10.8M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 7.92M, False: 2.87M]
  ------------------
 2222|  7.92M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  7.92M|    }
 2224|  2.87M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 88.0k, False: 2.78M]
  |  Branch (2224:33): [True: 16.1k, False: 2.77M]
  ------------------
 2225|  2.87M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  20.3M|{
 3123|  20.3M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  20.3M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  2.84M|{
 3127|  2.84M|#if WCHAR_MIN < 0
 3128|  2.84M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 2.82M, False: 14.0k]
  |  Branch (3128:20): [True: 1.74M, False: 1.08M]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.74M|        return char_to_int(static_cast<char>(ch));
 3133|  1.74M|    }
 3134|  1.09M|    return 255;
 3135|  2.84M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  2.07M|{
 6008|  2.07M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 2.07M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  2.07M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 2.07M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  2.07M|    return {};
 6023|  2.07M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.21M|    {
  304|  3.21M|        ranges::advance(x, n);
  305|  3.21M|        return x;
  306|  3.21M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.21M|    {
  268|  3.21M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.21M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.21M|    {
  151|  3.21M|        i += n;
  152|  3.21M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.80M|    {
  108|  3.80M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.80M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.80M|    {
   87|  3.80M|        return s - i;
   88|  3.80M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.73M|    {
  304|  1.73M|        ranges::advance(x, n);
  305|  1.73M|        return x;
  306|  1.73M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.73M|    {
  268|  1.73M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.73M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.73M|    {
  151|  1.73M|        i += n;
  152|  1.73M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   490k|    {
  108|   490k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   490k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   490k|    {
   87|   490k|        return s - i;
   88|   490k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.25M|{
  981|  1.25M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  1.25M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  1.25M|        return true;
  984|  1.25M|    }
  985|  1.25M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  1.25M|                           ranges::const_iterator_t<Range>,
  987|  1.25M|                           typename detail::basic_scan_buffer<
  988|  1.25M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.25M|        auto beg = r.begin();
  990|  1.25M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.25M, False: 0]
  ------------------
  991|  1.25M|            return false;
  992|  1.25M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  1.25M|    else {
 1006|  1.25M|        return false;
 1007|  1.25M|    }
 1008|  1.25M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  32.2M|    {
  763|  32.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  32.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  32.2M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  3.30M|{
 1857|  3.30M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.30M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.30M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.30M|        if (sz < count) {
 1862|  3.30M|            return unexpected(eof_error::eof);
 1863|  3.30M|        }
 1864|       |
 1865|  3.30M|        return ranges::next(range.begin(), count);
 1866|  3.30M|    }
 1867|  3.30M|    else {
 1868|  3.30M|        auto it = range.begin();
 1869|  3.30M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 2.03M, False: 1.26M]
  ------------------
 1870|  2.03M|            return ranges::next(it, count);
 1871|  2.03M|        }
 1872|       |
 1873|  5.03M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.80M, False: 1.23M]
  ------------------
 1874|  3.80M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 35.9k, False: 3.76M]
  ------------------
 1875|  35.9k|                return unexpected(eof_error::eof);
 1876|  35.9k|            }
 1877|  3.80M|        }
 1878|       |
 1879|  1.23M|        return it;
 1880|  1.26M|    }
 1881|  3.30M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.30M|{
 1095|  3.30M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.30M|        return r.size();
 1097|  3.30M|    }
 1098|  3.30M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.30M|                           ranges::const_iterator_t<Range>,
 1100|  3.30M|                           typename detail::basic_scan_buffer<
 1101|  3.30M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.30M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  3.30M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.30M|        }
 1105|  3.30M|        else {
 1106|  3.30M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.30M, False: 0]
  ------------------
 1107|  3.30M|                return static_cast<size_t>(
 1108|  3.30M|                    r.begin().parent()->chars_available() -
 1109|  3.30M|                    r.begin().position());
 1110|  3.30M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.30M|        }
 1113|  3.30M|    }
 1114|  3.30M|    else {
 1115|  3.30M|        return 0;
 1116|  3.30M|    }
 1117|  3.30M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.03M|    {
  754|  3.03M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  16.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.1M|              cvref<T> obj = *get<T>(fn);
  745|  16.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.1M|              }
  748|  16.1M|              else {
  749|  16.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.1M|              }
  751|  16.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  16.1M|    {
  684|  16.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.1M|            return static_cast<T*>(s.m_cp);
  686|  16.1M|        }
  687|  16.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.1M|            return static_cast<T*>(s.m_p);
  689|  16.1M|        }
  690|  16.1M|        else {
  691|  16.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.1M|        }
  693|  16.1M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  3.03M|        {
  662|  3.03M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  8.48M|    {
  763|  8.48M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.48M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.20M|    {
  754|  2.20M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  3.92M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.92M|              cvref<T> obj = *get<T>(fn);
  745|  3.92M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.92M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.92M|              }
  748|  3.92M|              else {
  749|  3.92M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.92M|              }
  751|  3.92M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.92M|    {
  684|  3.92M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.92M|            return static_cast<T*>(s.m_cp);
  686|  3.92M|        }
  687|  3.92M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.92M|            return static_cast<T*>(s.m_p);
  689|  3.92M|        }
  690|  3.92M|        else {
  691|  3.92M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.92M|        }
  693|  3.92M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.20M|        {
  662|  2.20M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   903k|    {
 6037|   903k|        const bool need_skipped_width =
 6038|   903k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 903k]
  |  Branch (6038:33): [True: 0, False: 903k]
  ------------------
 6039|   903k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   903k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 903k]
  ------------------
 6043|   903k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 903k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   903k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 903k, False: 0]
  |  Branch (6047:56): [True: 903k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   903k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 903k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.79M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   903k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   903k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   903k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.4k, False: 888k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.4k|    }                                                  \
  |  |  |  | 3671|   903k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   888k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.79M|                            make_eof_scan_error));
 6058|       |
 6059|  1.79M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 888k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   888k|            return result_type{it, 0};
 6067|  1.79M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   903k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.41M|{
 1976|  2.41M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.41M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.41M|{
 1957|  2.41M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.41M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.41M|    }
 1960|  2.41M|    else {
 1961|  2.41M|        auto first = range.begin();
 1962|  12.9M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 12.9M, False: 26.6k]
  ------------------
 1963|  12.9M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.39M, False: 10.5M]
  ------------------
 1964|  2.39M|                return first;
 1965|  2.39M|            }
 1966|  12.9M|        }
 1967|  26.6k|        return first;
 1968|  2.41M|    }
 1969|  2.41M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.15M|    {
  108|  2.15M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.15M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.15M|    {
   94|  2.15M|        iter_difference_t<I> counter{0};
   95|  20.9M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 18.8M, False: 2.15M]
  ------------------
   96|  18.8M|            ++i;
   97|  18.8M|            ++counter;
   98|  18.8M|        }
   99|  2.15M|        return counter;
  100|  2.15M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.61M|    return [code, msg](parse_error err) {
  869|  3.61M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.61M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   466k|    {
 1780|   466k|        auto stdloc = loc.get<std::locale>();
 1781|   466k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   466k|        grouping = numpunct.grouping();
 1783|   466k|        thousands_sep =
 1784|   466k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 466k]
  ------------------
 1785|   466k|        decimal_point = numpunct.decimal_point();
 1786|   466k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   466k|{
 1717|   466k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 466k, False: 0]
  ------------------
 1718|   466k|        return std::use_facet<Facet>(stdloc);
 1719|   466k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   466k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  3.53M|{
 1846|  3.53M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.3k, False: 3.51M]
  |  |  ------------------
  ------------------
 1847|  19.3k|        return unexpected(e);
 1848|  19.3k|    }
 1849|       |
 1850|  3.51M|    return ranges::next(range.begin());
 1851|  3.53M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  5.14M|{
  950|  5.14M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.5k, False: 5.10M]
  |  |  ------------------
  ------------------
  951|  38.5k|        return eof_error::eof;
  952|  38.5k|    }
  953|  5.10M|    return eof_error::good;
  954|  5.14M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  7.23M|{
  944|  7.23M|    return is_range_eof(r.begin(), r.end());
  945|  7.23M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  7.23M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.23M|    {
  937|  7.23M|        return begin == end;
  938|  7.23M|    }
  939|  7.23M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.51M|    {
  296|  3.51M|        ++x;
  297|  3.51M|        return x;
  298|  3.51M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.35M|{
 3141|  1.35M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.35M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.04M, False: 310k]
  ------------------
 3143|  1.04M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.04M, False: 309]
  ------------------
 3144|  1.04M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.04M|        }
 3146|    309|        return unexpected(eof_error::eof);
 3147|  1.04M|    }
 3148|       |
 3149|   310k|    auto& it = *r;
 3150|   310k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 128k, False: 181k]
  ------------------
 3151|   128k|        return std::pair{it, sign_type::minus_sign};
 3152|   128k|    }
 3153|   181k|    return std::pair{it, sign_type::plus_sign};
 3154|   310k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.36M|{
 2272|  2.36M|    auto it = read_code_unit(range);
 2273|  2.36M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.2k, False: 2.35M]
  |  |  ------------------
  ------------------
 2274|  11.2k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  11.2k|    }
 2276|       |
 2277|  4.44M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.44M, False: 1.92M]
  ------------------
 2278|  4.44M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 426k, False: 4.02M]
  ------------------
 2279|   426k|            return *it;
 2280|   426k|        }
 2281|  4.44M|    }
 2282|       |
 2283|  1.92M|    return unexpected(parse_error::error);
 2284|  2.35M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  3.30M|{
 2231|  3.30M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.30M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.30M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.30M|        if (range.size() < str.size()) {
 2236|  3.30M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.30M|        }
 2238|  3.30M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.30M|            return unexpected(parse_error::error);
 2240|  3.30M|        }
 2241|  3.30M|        return ranges::next(range.begin(), str.size());
 2242|  3.30M|    }
 2243|  3.30M|    else {
 2244|  3.30M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.30M|            if (ch < 'A' || ch > 'Z') {
 2246|  3.30M|                return ch;
 2247|  3.30M|            }
 2248|  3.30M|            return static_cast<char_type>(ch +
 2249|  3.30M|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.30M|        };
 2251|       |
 2252|  3.30M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.30M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.9k, False: 3.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.9k|    }                                                  \
  |  |  |  | 3671|  3.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.26M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.26M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.26M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.15M, False: 106k]
  |  |  ------------------
  ------------------
 2257|  3.26M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.26M|                    return ascii_tolower(a) ==
 2259|  3.26M|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.26M|                }))) {
 2261|  3.15M|            return unexpected(parse_error::error);
 2262|  3.15M|        }
 2263|       |
 2264|   106k|        return it;
 2265|  3.26M|    }
 2266|  3.30M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  3.76M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.76M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.41M, False: 352k]
  |  Branch (2245:29): [True: 295k, False: 57.0k]
  ------------------
 2246|  3.70M|                return ch;
 2247|  3.70M|            }
 2248|  57.0k|            return static_cast<char_type>(ch +
 2249|  57.0k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.76M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.17M|{
 2146|  1.17M|    auto it = read_code_unit(range);
 2147|  1.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.06k, False: 1.16M]
  |  |  ------------------
  ------------------
 2148|  8.06k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  8.06k|    }
 2150|       |
 2151|  1.16M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 950k, False: 215k]
  |  |  ------------------
  ------------------
 2152|  1.16M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   950k|        return unexpected(parse_error::error);
 2154|   950k|    }
 2155|       |
 2156|   215k|    return *it;
 2157|  1.16M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.41M|{
 1996|  2.41M|    auto it = read_while_code_unit(range, pred);
 1997|  2.41M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 981k, False: 1.43M]
  ------------------
 1998|   981k|        return unexpected(parse_error::error);
 1999|   981k|    }
 2000|  1.43M|    return it;
 2001|  2.41M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.11M|    {
 1621|  1.11M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.11M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.11M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.11M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.11M|            m_storage.reset();
 1627|  1.11M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.11M|        }
 1629|  1.11M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.11M|                                          std::basic_string<CharT>>) {
 1631|  1.11M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.11M|            m_view = string_view_type{*m_storage};
 1633|  1.11M|        }
 1634|  1.11M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.11M|                                          typename detail::basic_scan_buffer<
 1636|  1.11M|                                              value_t>::forward_iterator> &&
 1637|  1.11M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.11M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.11M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.11M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 153k, False: 960k]
  |  |  ------------------
  ------------------
 1641|  1.11M|                             detail::to_address(end_seg.end()))) {
 1642|   153k|                auto& str = m_storage.emplace();
 1643|   153k|                str.reserve(range.end().position() - range.begin().position());
 1644|   153k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   153k|                m_view = string_view_type{str};
 1646|   153k|                return;
 1647|   153k|            }
 1648|       |
 1649|   960k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   960k|                                                            end_seg.data());
 1651|   960k|            m_storage.reset();
 1652|   960k|        }
 1653|  1.11M|        else {
 1654|  1.11M|            auto& str = m_storage.emplace();
 1655|  1.11M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.11M|                str.reserve(range.size());
 1657|  1.11M|            }
 1658|  1.11M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.11M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.11M|                          std::back_inserter(str));
 1661|  1.11M|            }
 1662|  1.11M|            else {
 1663|  1.11M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.11M|                     ++it) {
 1665|  1.11M|                    str.push_back(*it);
 1666|  1.11M|                }
 1667|  1.11M|            }
 1668|  1.11M|            m_view = string_view_type{str};
 1669|  1.11M|        }
 1670|  1.11M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  7.66M|    {
 1582|  7.66M|        return m_view;
 1583|  7.66M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.66M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   821k|    {
 6079|   821k|        const bool need_skipped_width =
 6080|   821k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 821k]
  |  Branch (6080:33): [True: 0, False: 821k]
  ------------------
 6081|   821k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   821k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 821k]
  ------------------
 6084|   821k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 821k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   821k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 821k, False: 0]
  ------------------
 6093|   821k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 821k]
  ------------------
 6094|   821k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   821k|        return result_type{rng.begin(), 0};
 6118|   821k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.63M|{
 1846|  1.63M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.87k, False: 1.63M]
  |  |  ------------------
  ------------------
 1847|  4.87k|        return unexpected(e);
 1848|  4.87k|    }
 1849|       |
 1850|  1.63M|    return ranges::next(range.begin());
 1851|  1.63M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  3.06M|{
  950|  3.06M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.0k, False: 3.04M]
  |  |  ------------------
  ------------------
  951|  21.0k|        return eof_error::eof;
  952|  21.0k|    }
  953|  3.04M|    return eof_error::good;
  954|  3.06M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  3.06M|{
  944|  3.06M|    return is_range_eof(r.begin(), r.end());
  945|  3.06M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  3.06M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.06M|    {
  937|  3.06M|        return begin == end;
  938|  3.06M|    }
  939|  3.06M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.63M|    {
  296|  1.63M|        ++x;
  297|  1.63M|        return x;
  298|  1.63M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.12M|{
 3141|  1.12M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.12M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 859k, False: 262k]
  ------------------
 3143|   859k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 859k, False: 102]
  ------------------
 3144|   859k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   859k|        }
 3146|    102|        return unexpected(eof_error::eof);
 3147|   859k|    }
 3148|       |
 3149|   262k|    auto& it = *r;
 3150|   262k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 118k, False: 143k]
  ------------------
 3151|   118k|        return std::pair{it, sign_type::minus_sign};
 3152|   118k|    }
 3153|   143k|    return std::pair{it, sign_type::plus_sign};
 3154|   262k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.30M|{
 2272|  1.30M|    auto it = read_code_unit(range);
 2273|  1.30M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 1.29M]
  |  |  ------------------
  ------------------
 2274|  2.06k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.06k|    }
 2276|       |
 2277|  2.43M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.43M, False: 1.00M]
  ------------------
 2278|  2.43M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 290k, False: 2.14M]
  ------------------
 2279|   290k|            return *it;
 2280|   290k|        }
 2281|  2.43M|    }
 2282|       |
 2283|  1.00M|    return unexpected(parse_error::error);
 2284|  1.29M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.91M|{
 2231|  2.91M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.91M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.91M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.91M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 35.6k, False: 2.87M]
  ------------------
 2236|  35.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  35.6k|        }
 2238|  2.87M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 2.77M, False: 104k]
  ------------------
 2239|  2.77M|            return unexpected(parse_error::error);
 2240|  2.77M|        }
 2241|   104k|        return ranges::next(range.begin(), str.size());
 2242|  2.87M|    }
 2243|  2.91M|    else {
 2244|  2.91M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.91M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.91M|                return ch;
 2247|  2.91M|            }
 2248|  2.91M|            return static_cast<char_type>(ch +
 2249|  2.91M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.91M|        };
 2251|       |
 2252|  2.91M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  2.91M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.91M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.91M|        if (SCN_UNLIKELY(!std::equal(
 2257|  2.91M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.91M|                    return ascii_tolower(a) ==
 2259|  2.91M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.91M|                }))) {
 2261|  2.91M|            return unexpected(parse_error::error);
 2262|  2.91M|        }
 2263|       |
 2264|  2.91M|        return it;
 2265|  2.91M|    }
 2266|  2.91M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   334k|{
 2146|   334k|    auto it = read_code_unit(range);
 2147|   334k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.80k, False: 331k]
  |  |  ------------------
  ------------------
 2148|  2.80k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.80k|    }
 2150|       |
 2151|   331k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 275k, False: 56.4k]
  |  |  ------------------
  ------------------
 2152|   331k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   275k|        return unexpected(parse_error::error);
 2154|   275k|    }
 2155|       |
 2156|  56.4k|    return *it;
 2157|   331k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  4.19M|    {
 1503|  4.19M|        return sv;
 1504|  4.19M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   622k|{
 1976|   622k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   622k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   622k|{
 1957|   622k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   622k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   622k|    }
 1960|   622k|    else {
 1961|   622k|        auto first = range.begin();
 1962|   622k|        for (; first != range.end(); ++first) {
 1963|   622k|            if (pred(*first)) {
 1964|   622k|                return first;
 1965|   622k|            }
 1966|   622k|        }
 1967|   622k|        return first;
 1968|   622k|    }
 1969|   622k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.10M|{
 2951|  1.10M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.10M, False: 0]
  ------------------
 2952|  1.10M|        auto it = read_while_classic_space(range);
 2953|  1.10M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.10M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 1.09M]
  |  |  ------------------
  ------------------
 2955|  12.1k|            return unexpected(e);
 2956|  12.1k|        }
 2957|       |
 2958|  1.09M|        return it;
 2959|  1.10M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.10M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.10M|{
 2117|  1.10M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.10M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.10M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.10M|        auto buf = make_contiguous_buffer(range);
 2121|  1.10M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.10M|        return ranges::next(range.begin(),
 2123|  1.10M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.10M|    }
 2125|  1.10M|    else {
 2126|  1.10M|        auto it = range.begin();
 2127|       |
 2128|  1.10M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.10M|            auto seg = get_contiguous_beginning(range);
 2130|  1.10M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.10M|                seg_it != seg.end()) {
 2132|  1.10M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.10M|            }
 2134|  1.10M|            ranges::advance(it, seg.size());
 2135|  1.10M|        }
 2136|       |
 2137|  1.10M|        return read_while_code_point(
 2138|  1.10M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.10M|    }
 2140|  1.10M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.10M|{
 1683|  1.10M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.10M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.10M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.10M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.10M|    }
 1688|  1.10M|    else {
 1689|  1.10M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.10M|    }
 1691|  1.10M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.10M|    {
 1490|  1.10M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.34M|    {
  304|  3.34M|        ranges::advance(x, n);
  305|  3.34M|        return x;
  306|  3.34M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.45M|    {
  268|  4.45M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.45M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.45M|    {
  181|  20.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 16.3M, False: 4.45M]
  ------------------
  182|  16.3M|            ++i;
  183|  16.3M|        }
  184|  4.45M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   292k|    {
 6193|   292k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   292k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   292k|            auto rd = make_reader<T, char_type>();
 6198|   292k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   292k|                return unexpected(e);
 6200|   292k|            }
 6201|       |
 6202|   292k|            return impl(rd, range, value);
 6203|   292k|        }
 6204|   292k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   292k|            auto rd = make_reader<T, char_type>();
 6206|   292k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   292k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 292k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   292k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   292k|                return impl(rd, range, value);
 6213|   292k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   292k|        else {
 6221|   292k|            SCN_EXPECT(false);
 6222|   292k|            SCN_UNREACHABLE;
 6223|   292k|        }
 6224|   292k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.68M|    {
 3040|  1.68M|        reader_error_handler eh{};
 3041|  1.68M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.68M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.68M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.68M|        return {};
 3046|  1.68M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  1.68M|    {
 3051|  1.68M|        return static_cast<Derived&>(*this);
 3052|  1.68M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.68M|    {
 4145|  1.68M|        detail::check_float_type_specs(specs, eh);
 4146|  1.68M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   292k|    {
 6124|   292k|        const bool need_skipped_width =
 6125|   292k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 292k]
  |  Branch (6125:33): [True: 0, False: 292k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   292k|        auto it = rng.begin();
 6129|   292k|        std::ptrdiff_t prefix_width = 0;
 6130|   292k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 292k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   292k|        else {
 6138|   292k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   292k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   292k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   292k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.35k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.35k|    }                                                  \
  |  |  |  | 3671|   292k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   288k|            std::tie(it, prefix_width) = prefix_result;
 6140|   288k|        }
 6141|   288k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   288k|        std::ptrdiff_t value_width = 0;
 6145|   288k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 288k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   288k|        else {
 6161|   288k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.9k, False: 269k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  18.9k|    }                                                  \
  |  | 3671|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   269k|                                             specs, value, loc));
 6163|       |
 6164|   269k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 269k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   269k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   269k|        std::ptrdiff_t postfix_width = 0;
 6173|   269k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 266k, False: 3.52k]
  ------------------
 6174|   266k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   266k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   266k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   266k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   266k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   266k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   266k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   266k|                                 value_width));
 6178|   266k|            std::tie(it, postfix_width) = postfix_result;
 6179|   266k|        }
 6180|       |
 6181|   269k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   269k|                                                 value_width, postfix_width);
 6183|   269k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 269k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   269k|        return it;
 6188|   269k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  3.88M|    {
 3035|  3.88M|        return true;
 3036|  3.88M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.65M|    {
 4217|  1.65M|        unsigned options{};
 4218|  1.65M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 466k, False: 1.19M]
  ------------------
 4219|   466k|            options |= float_reader_base::allow_thsep;
 4220|   466k|        }
 4221|       |
 4222|  1.65M|        SCN_GCC_COMPAT_PUSH
 4223|  1.65M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.65M|        switch (specs.type) {
 4226|   249k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 249k, False: 1.41M]
  ------------------
 4227|   249k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  42.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 42.1k, False: 1.61M]
  ------------------
 4230|  42.1k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   503k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 503k, False: 1.15M]
  ------------------
 4233|   503k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   397k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 397k, False: 1.26M]
  ------------------
 4236|   397k|                return options | float_reader_base::allow_scientific |
 4237|   397k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   466k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 466k, False: 1.19M]
  ------------------
 4240|   466k|                return options | float_reader_base::allow_scientific |
 4241|   466k|                       float_reader_base::allow_fixed |
 4242|   466k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.65M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.65M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.65M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.65M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  1.65M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.33M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  4.66M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   722k|    {
 3691|   722k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   722k|        const std::ptrdiff_t sign_len =
 3694|   722k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 169k, False: 553k]
  ------------------
 3695|       |
 3696|   722k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   722k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   722k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   722k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.4k, False: 706k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.4k|    }                                                  \
  |  |  |  | 3671|   722k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   706k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   706k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   722k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.22M|    {
 4057|  2.22M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.22M, False: 0]
  ------------------
 4058|  2.22M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.22M, False: 0]
  ------------------
 4059|  2.22M|            return;
 4060|  2.22M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  2.53M|    {
 1587|  2.53M|        return m_storage.has_value();
 1588|  2.53M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.48M|    {
 1592|  1.48M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.48M|        return *m_storage;
 1594|  1.48M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   288k|    {
 4170|   288k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   288k|#if !SCN_DISABLE_LOCALE
 4173|   288k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 81.0k, False: 207k]
  ------------------
 4174|  81.0k|            return read_impl<Range>(
 4175|  81.0k|                range, rd,
 4176|  81.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  81.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  81.0k|                },
 4179|  81.0k|                value, loc);
 4180|  81.0k|        }
 4181|   207k|#endif
 4182|       |
 4183|   207k|        return read_impl<Range>(
 4184|   207k|            range, rd,
 4185|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   207k|                return r.read_source(SCN_FWD(args)...);
 4187|   207k|            },
 4188|   207k|            value);
 4189|   288k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   401k|    {
 4206|   401k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   401k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 379k]
  |  |  ------------------
  ------------------
 4208|  21.3k|            return unexpected(r.error());
 4209|  21.3k|        }
 4210|       |
 4211|   379k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   379k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   379k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   379k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 376k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|   379k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   376k|        return ranges::next(range.begin(), n);
 4213|   379k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.23M|    {
  763|  1.23M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.23M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  81.0k|    {
  754|  81.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  81.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  81.0k|              cvref<T> obj = *get<T>(fn);
  745|  81.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  81.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  81.0k|              }
  748|  81.0k|              else {
  749|  81.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  81.0k|              }
  751|  81.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  81.0k|    {
  684|  81.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  81.0k|            return static_cast<T*>(s.m_cp);
  686|  81.0k|        }
  687|  81.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  81.0k|            return static_cast<T*>(s.m_p);
  689|  81.0k|        }
  690|  81.0k|        else {
  691|  81.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  81.0k|        }
  693|  81.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  81.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  81.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  81.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  81.0k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   252k|    {
 3679|   252k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   252k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   252k|        return read_source_impl(range);
 3685|   252k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.23M|    {
 3705|  1.23M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.23M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.23M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.23M|        auto it = sign_result.first;
 3708|  1.23M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.23M|        auto digits_begin = it;
 3711|  1.23M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.23M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.23M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.23M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  1.23M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  1.23M|                SCN_TRY_ASSIGN(
 3717|  1.23M|                    it,
 3718|  1.23M|                    do_read_source_impl(
 3719|  1.23M|                        r,
 3720|  1.23M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  1.23M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  1.23M|            }
 3723|  1.23M|            else {
 3724|  1.23M|                auto cb = [&](const auto& rr)
 3725|  1.23M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.23M|                    auto res = read_all(rr);
 3727|  1.23M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.23M|                        return unexpected_scan_error(
 3729|  1.23M|                            scan_error::invalid_scanned_value,
 3730|  1.23M|                            "Invalid float value");
 3731|  1.23M|                    }
 3732|  1.23M|                    return res;
 3733|  1.23M|                };
 3734|  1.23M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  1.23M|            }
 3736|  1.23M|        }
 3737|  1.23M|        else {
 3738|  1.23M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 66.4k, False: 1.17M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  66.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  66.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  66.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  66.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  66.4k|    }                                                  \
  |  | 3671|  1.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.17M|                it,
 3740|  1.17M|                do_read_source_impl(
 3741|  1.17M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.17M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.17M|        }
 3744|       |
 3745|  1.17M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.17M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.16M, False: 6.81k]
  |  Branch (3747:48): [True: 1.15M, False: 5.92k]
  ------------------
 3748|  1.17M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.11M, False: 46.0k]
  ------------------
 3749|  1.17M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.11M, False: 1.61k]
  ------------------
 3750|  1.11M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.11M|        }
 3752|       |
 3753|  1.17M|        handle_separators();
 3754|       |
 3755|  1.17M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.17M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.17M|        return it;
 3768|  1.17M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.23M|    {
 4000|  1.23M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.23M|        const bool allowed_nonhex =
 4002|  1.23M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.23M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.23M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.22M, False: 12.7k]
  |  Branch (4005:45): [True: 0, False: 1.22M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.23M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.7k, False: 1.22M]
  ------------------
 4011|  12.7k|            return *r;
 4012|  12.7k|        }
 4013|       |
 4014|  1.22M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.17M, False: 47.6k]
  |  Branch (4014:45): [True: 1.19k, False: 1.17M]
  ------------------
 4015|  1.19k|            return unexpected(r.error());
 4016|  1.19k|        }
 4017|  1.22M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 47.6k, False: 1.17M]
  ------------------
 4018|  47.6k|            return *r;
 4019|  47.6k|        }
 4020|       |
 4021|  1.17M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 827k, False: 348k]
  |  Branch (4021:28): [True: 257k, False: 569k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   257k|            auto it = range.begin();
 4025|       |
 4026|   257k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 11.9k, False: 246k]
  ------------------
 4027|  11.9k|                m_kind = float_kind::hex_with_prefix;
 4028|  11.9k|                it = *r;
 4029|  11.9k|            }
 4030|   246k|            else {
 4031|   246k|                m_kind = float_kind::hex_without_prefix;
 4032|   246k|            }
 4033|       |
 4034|   257k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   257k|        }
 4036|   917k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 348k, False: 569k]
  |  Branch (4036:29): [True: 348k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   348k|            m_kind = float_kind::generic;
 4040|   348k|            return read_regular_float(range);
 4041|   348k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   569k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.0k, False: 542k]
  |  |  ------------------
  ------------------
 4047|  27.0k|            m_kind = float_kind::hex_with_prefix;
 4048|  27.0k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  27.0k|        }
 4050|       |
 4051|   542k|        m_kind = float_kind::generic;
 4052|   542k|        return read_regular(range);
 4053|   569k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.23M|    {
 3811|  1.23M|        auto it = range.begin();
 3812|  1.23M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.22M, False: 12.7k]
  ------------------
 3813|  1.22M|            return unexpected(r.error());
 3814|  1.22M|        }
 3815|  12.7k|        else {
 3816|  12.7k|            it = *r;
 3817|  12.7k|        }
 3818|       |
 3819|  12.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.81k, False: 5.92k]
  ------------------
 3822|  6.81k|            m_kind = float_kind::inf_short;
 3823|  6.81k|            return it;
 3824|  6.81k|        }
 3825|  5.92k|        else {
 3826|  5.92k|            m_kind = float_kind::inf_long;
 3827|  5.92k|            return *r;
 3828|  5.92k|        }
 3829|  12.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.22M|    {
 3834|  1.22M|        auto it = range.begin();
 3835|  1.22M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.17M, False: 48.8k]
  ------------------
 3836|  1.17M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.17M|                scan_error::invalid_scanned_value,
 3838|  1.17M|                "Invalid floating-point NaN value"));
 3839|  1.17M|        }
 3840|  48.8k|        else {
 3841|  48.8k|            it = *r;
 3842|  48.8k|        }
 3843|       |
 3844|  48.8k|        if (auto r =
 3845|  48.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  48.8k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 46.0k, False: 2.81k]
  ------------------
 3847|  46.0k|            m_kind = float_kind::nan_simple;
 3848|  46.0k|            return it;
 3849|  46.0k|        }
 3850|  2.81k|        else {
 3851|  2.81k|            it = *r;
 3852|  2.81k|        }
 3853|       |
 3854|  2.81k|        auto payload_beg_it = it;
 3855|  2.81k|        it = read_while_code_unit(
 3856|  2.81k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.81k|                return is_ascii_char(ch) &&
 3858|  2.81k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.81k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.81k|            });
 3861|  2.81k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.81k|        m_kind = float_kind::nan_with_payload;
 3864|  2.81k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.61k, False: 1.19k]
  ------------------
 3865|  2.81k|                                             ')')) {
 3866|  1.61k|            return *r;
 3867|  1.61k|        }
 3868|  1.19k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.19k|                                     "Invalid floating-point NaN payload");
 3870|  2.81k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  2.81k|    {
  754|  2.81k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  21.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.8k|              cvref<T> obj = *get<T>(fn);
  745|  21.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.8k|              }
  748|  21.8k|              else {
  749|  21.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.8k|              }
  751|  21.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  21.8k|    {
  684|  21.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.8k|            return static_cast<T*>(s.m_cp);
  686|  21.8k|        }
  687|  21.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.8k|            return static_cast<T*>(s.m_p);
  689|  21.8k|        }
  690|  21.8k|        else {
  691|  21.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.8k|        }
  693|  21.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  21.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  21.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 21.7k, False: 89]
  ------------------
 3858|  21.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.0k, False: 1.71k]
  |  Branch (3858:39): [True: 12.2k, False: 7.82k]
  |  Branch (3858:54): [True: 2.58k, False: 6.96k]
  |  Branch (3858:67): [True: 2.50k, False: 83]
  ------------------
 3859|  21.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.71k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.80k]
  ------------------
 3860|  21.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  2.81k|        {
  662|  2.81k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   827k|    {
 3804|   827k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   827k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   284k|    {
 3904|   284k|        auto it = range.begin();
 3905|       |
 3906|   284k|        std::ptrdiff_t digits_count = 0;
 3907|   284k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   284k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.25k, False: 276k]
  |  |  ------------------
  ------------------
 3909|  8.25k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  8.25k|                scan_error::invalid_scanned_value,
 3911|  8.25k|                "Invalid hexadecimal floating-point value"));
 3912|  8.25k|        }
 3913|   276k|        else {
 3914|   276k|            digits_count += ranges::distance(it, *r);
 3915|   276k|            it = *r;
 3916|   276k|        }
 3917|       |
 3918|   276k|        m_integral_part_length = digits_count;
 3919|   276k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 44.1k, False: 232k]
  ------------------
 3920|   276k|                                             m_locale_options.decimal_point)) {
 3921|  44.1k|            it = *r;
 3922|  44.1k|        }
 3923|       |
 3924|   276k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 40.4k, False: 236k]
  ------------------
 3925|   276k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  40.4k|            digits_count += ranges::distance(it, *r);
 3927|  40.4k|            it = *r;
 3928|  40.4k|        }
 3929|       |
 3930|   276k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   276k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   276k|        return it;
 3938|   276k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   561k|    {
 3789|   561k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  |  Branch (859:45): [True: 0, False: 561k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   561k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   561k|        return read_while1_code_unit(
 3798|   561k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   561k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|   561k|    {
  754|   561k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.92M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.92M|              cvref<T> obj = *get<T>(fn);
  745|  2.92M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.92M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.92M|              }
  748|  2.92M|              else {
  749|  2.92M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.92M|              }
  751|  2.92M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.92M|    {
  684|  2.92M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.92M|            return static_cast<T*>(s.m_cp);
  686|  2.92M|        }
  687|  2.92M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.92M|            return static_cast<T*>(s.m_p);
  689|  2.92M|        }
  690|  2.92M|        else {
  691|  2.92M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.92M|        }
  693|  2.92M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  2.92M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|   561k|        {
  662|   561k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.00M|    {
 3876|  1.00M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 116k, False: 891k]
  ------------------
 3877|   116k|            auto beg_exp_it = range.begin();
 3878|   116k|            auto it = *r;
 3879|       |
 3880|   116k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 116k, False: 309]
  ------------------
 3881|   116k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   116k|                it = r_sign->first;
 3883|   116k|            }
 3884|       |
 3885|   116k|            if (auto r_exp = read_while1_code_unit(
 3886|   116k|                    ranges::subrange{it, range.end()},
 3887|   116k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   116k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.96k, False: 114k]
  |  |  ------------------
  ------------------
 3889|  1.96k|                it = beg_exp_it;
 3890|  1.96k|            }
 3891|   114k|            else {
 3892|   114k|                it = *r_exp;
 3893|   114k|            }
 3894|       |
 3895|   116k|            return it;
 3896|   116k|        }
 3897|   891k|        return range.begin();
 3898|  1.00M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   365k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   365k|              cvref<T> obj = *get<T>(fn);
  745|   365k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   365k|                  obj(static_cast<decltype(args)>(args)...);
  747|   365k|              }
  748|   365k|              else {
  749|   365k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   365k|              }
  751|   365k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   365k|    {
  684|   365k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   365k|            return static_cast<T*>(s.m_cp);
  686|   365k|        }
  687|   365k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   365k|            return static_cast<T*>(s.m_p);
  689|   365k|        }
  690|   365k|        else {
  691|   365k|            return reinterpret_cast<T*>(s.m_fp);
  692|   365k|        }
  693|   365k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   365k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   890k|    {
 3944|   890k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   890k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 764k, False: 126k]
  |  Branch (3945:50): [True: 20.9k, False: 743k]
  ------------------
 3946|       |
 3947|   890k|        auto it = ranges::begin(range);
 3948|   890k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   890k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   890k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   890k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.2k, False: 845k]
  |  |  ------------------
  ------------------
 3952|  45.2k|            return r.transform_error(
 3953|  45.2k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  45.2k|                                              "Invalid floating-point value"));
 3955|  45.2k|        }
 3956|   845k|        else {
 3957|   845k|            digits_count += ranges::distance(it, *r);
 3958|   845k|            it = *r;
 3959|   845k|        }
 3960|       |
 3961|   845k|        m_integral_part_length = digits_count;
 3962|   845k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 167k, False: 678k]
  ------------------
 3963|   845k|                                             m_locale_options.decimal_point)) {
 3964|   167k|            it = *r;
 3965|   167k|        }
 3966|       |
 3967|   845k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 155k, False: 690k]
  ------------------
 3968|   845k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   155k|            digits_count += ranges::distance(it, *r);
 3970|   155k|            it = *r;
 3971|   155k|        }
 3972|       |
 3973|   845k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 845k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   845k|        auto beg_exp_it = it;
 3979|   845k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 731k, False: 114k]
  ------------------
 3980|   731k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   731k|        }
 3982|   845k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 20.2k, False: 825k]
  |  Branch (3982:29): [True: 11.8k, False: 8.38k]
  ------------------
 3983|  11.8k|            return unexpected_scan_error(
 3984|  11.8k|                scan_error::invalid_scanned_value,
 3985|  11.8k|                "No exponent given to scientific float");
 3986|  11.8k|        }
 3987|       |
 3988|   833k|        m_kind =
 3989|   833k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 720k, False: 113k]
  ------------------
 3990|       |
 3991|   833k|        return it;
 3992|   845k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.73M|    {
 3774|  1.73M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.73M]
  |  |  |  Branch (859:45): [True: 0, False: 1.73M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.73M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.73M|        return read_while1_code_unit(
 3783|  1.73M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.73M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.73M|    {
  754|  1.73M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  9.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.62M|              cvref<T> obj = *get<T>(fn);
  745|  9.62M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.62M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.62M|              }
  748|  9.62M|              else {
  749|  9.62M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.62M|              }
  751|  9.62M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  9.62M|    {
  684|  9.62M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.62M|            return static_cast<T*>(s.m_cp);
  686|  9.62M|        }
  687|  9.62M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.62M|            return static_cast<T*>(s.m_p);
  689|  9.62M|        }
  690|  9.62M|        else {
  691|  9.62M|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.62M|        }
  693|  9.62M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  9.62M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.73M|        {
  662|  1.73M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  1.11M|    {
 1577|  1.11M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.11M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  81.0k|        {
  662|  81.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   207k|    {
  754|   207k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   207k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   207k|              cvref<T> obj = *get<T>(fn);
  745|   207k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   207k|                  obj(static_cast<decltype(args)>(args)...);
  747|   207k|              }
  748|   207k|              else {
  749|   207k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   207k|              }
  751|   207k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   207k|    {
  684|   207k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   207k|            return static_cast<T*>(s.m_cp);
  686|   207k|        }
  687|   207k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   207k|            return static_cast<T*>(s.m_p);
  689|   207k|        }
  690|   207k|        else {
  691|   207k|            return reinterpret_cast<T*>(s.m_fp);
  692|   207k|        }
  693|   207k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   207k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   207k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   985k|    {
 3665|   985k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   985k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 985k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   985k|        return read_source_impl(range);
 3671|   985k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   207k|        {
  662|   207k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   251k|    {
 4170|   251k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   251k|#if !SCN_DISABLE_LOCALE
 4173|   251k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 69.3k, False: 181k]
  ------------------
 4174|  69.3k|            return read_impl<Range>(
 4175|  69.3k|                range, rd,
 4176|  69.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  69.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  69.3k|                },
 4179|  69.3k|                value, loc);
 4180|  69.3k|        }
 4181|   181k|#endif
 4182|       |
 4183|   181k|        return read_impl<Range>(
 4184|   181k|            range, rd,
 4185|   181k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   181k|                return r.read_source(SCN_FWD(args)...);
 4187|   181k|            },
 4188|   181k|            value);
 4189|   251k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   355k|    {
 4206|   355k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   355k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 343k]
  |  |  ------------------
  ------------------
 4208|  12.1k|            return unexpected(r.error());
 4209|  12.1k|        }
 4210|       |
 4211|   343k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.2k, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.2k|    }                                                  \
  |  |  |  | 3671|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   329k|        return ranges::next(range.begin(), n);
 4213|   343k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.09M|    {
  763|  1.09M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.09M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  69.3k|    {
  754|  69.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  69.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.3k|              cvref<T> obj = *get<T>(fn);
  745|  69.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  69.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  69.3k|              }
  748|  69.3k|              else {
  749|  69.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.3k|              }
  751|  69.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  69.3k|    {
  684|  69.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  69.3k|            return static_cast<T*>(s.m_cp);
  686|  69.3k|        }
  687|  69.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  69.3k|            return static_cast<T*>(s.m_p);
  689|  69.3k|        }
  690|  69.3k|        else {
  691|  69.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  69.3k|        }
  693|  69.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  69.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  69.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  69.3k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   214k|    {
 3679|   214k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   214k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   214k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 214k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   214k|        return read_source_impl(range);
 3685|   214k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.09M|    {
 3705|  1.09M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.09M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.09M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.09M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.09M|        auto it = sign_result.first;
 3708|  1.09M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.09M|        auto digits_begin = it;
 3711|  1.09M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.09M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.09M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.09M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  |  Branch (859:45): [True: 0, False: 1.09M]
  |  |  |  Branch (859:45): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 3715|  1.09M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.09M|            else {
 3724|  1.09M|                auto cb = [&](const auto& rr)
 3725|  1.09M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.09M|                    auto res = read_all(rr);
 3727|  1.09M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.09M|                        return unexpected_scan_error(
 3729|  1.09M|                            scan_error::invalid_scanned_value,
 3730|  1.09M|                            "Invalid float value");
 3731|  1.09M|                    }
 3732|  1.09M|                    return res;
 3733|  1.09M|                };
 3734|  1.09M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.09M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.09M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 37.4k, False: 1.05M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  37.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  37.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  37.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  37.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  37.4k|    }                                                  \
  |  | 3671|  1.09M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.05M|            }
 3736|  1.09M|        }
 3737|  1.05M|        else {
 3738|  1.05M|            SCN_TRY_ASSIGN(
 3739|  1.05M|                it,
 3740|  1.05M|                do_read_source_impl(
 3741|  1.05M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.05M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.05M|        }
 3744|       |
 3745|  1.05M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.05M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.04M, False: 6.63k]
  |  Branch (3747:48): [True: 1.04M, False: 5.64k]
  ------------------
 3748|  1.05M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 997k, False: 45.2k]
  ------------------
 3749|  1.05M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 996k, False: 1.57k]
  ------------------
 3750|   996k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   996k|        }
 3752|       |
 3753|  1.05M|        handle_separators();
 3754|       |
 3755|  1.05M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.05M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.05M|        return it;
 3768|  1.05M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.09M|    {
 3811|  1.09M|        auto it = range.begin();
 3812|  1.09M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.08M, False: 12.2k]
  ------------------
 3813|  1.08M|            return unexpected(r.error());
 3814|  1.08M|        }
 3815|  12.2k|        else {
 3816|  12.2k|            it = *r;
 3817|  12.2k|        }
 3818|       |
 3819|  12.2k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.2k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.2k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.63k, False: 5.64k]
  ------------------
 3822|  6.63k|            m_kind = float_kind::inf_short;
 3823|  6.63k|            return it;
 3824|  6.63k|        }
 3825|  5.64k|        else {
 3826|  5.64k|            m_kind = float_kind::inf_long;
 3827|  5.64k|            return *r;
 3828|  5.64k|        }
 3829|  12.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.08M|    {
 3834|  1.08M|        auto it = range.begin();
 3835|  1.08M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.03M, False: 47.9k]
  ------------------
 3836|  1.03M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.03M|                scan_error::invalid_scanned_value,
 3838|  1.03M|                "Invalid floating-point NaN value"));
 3839|  1.03M|        }
 3840|  47.9k|        else {
 3841|  47.9k|            it = *r;
 3842|  47.9k|        }
 3843|       |
 3844|  47.9k|        if (auto r =
 3845|  47.9k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  47.9k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 45.2k, False: 2.76k]
  ------------------
 3847|  45.2k|            m_kind = float_kind::nan_simple;
 3848|  45.2k|            return it;
 3849|  45.2k|        }
 3850|  2.76k|        else {
 3851|  2.76k|            it = *r;
 3852|  2.76k|        }
 3853|       |
 3854|  2.76k|        auto payload_beg_it = it;
 3855|  2.76k|        it = read_while_code_unit(
 3856|  2.76k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.76k|                return is_ascii_char(ch) &&
 3858|  2.76k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.76k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.76k|            });
 3861|  2.76k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.76k|        m_kind = float_kind::nan_with_payload;
 3864|  2.76k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.57k, False: 1.18k]
  ------------------
 3865|  2.76k|                                             ')')) {
 3866|  1.57k|            return *r;
 3867|  1.57k|        }
 3868|  1.18k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.18k|                                     "Invalid floating-point NaN payload");
 3870|  2.76k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  2.76k|    {
  754|  2.76k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  21.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.7k|              cvref<T> obj = *get<T>(fn);
  745|  21.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.7k|              }
  748|  21.7k|              else {
  749|  21.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.7k|              }
  751|  21.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  21.7k|    {
  684|  21.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.7k|            return static_cast<T*>(s.m_cp);
  686|  21.7k|        }
  687|  21.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.7k|            return static_cast<T*>(s.m_p);
  689|  21.7k|        }
  690|  21.7k|        else {
  691|  21.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.7k|        }
  693|  21.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  21.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  21.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 21.6k, False: 83]
  ------------------
 3858|  21.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.9k, False: 1.67k]
  |  Branch (3858:39): [True: 12.2k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 6.92k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  21.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.67k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.75k]
  ------------------
 3860|  21.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  2.76k|        {
  662|  2.76k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   724k|    {
 3804|   724k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   724k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   619k|{
 1996|   619k|    auto it = read_while_code_unit(range, pred);
 1997|   619k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 260k, False: 359k]
  ------------------
 1998|   260k|        return unexpected(parse_error::error);
 1999|   260k|    }
 2000|   359k|    return it;
 2001|   619k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   179k|    {
 3876|   179k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 28.6k, False: 151k]
  ------------------
 3877|  28.6k|            auto beg_exp_it = range.begin();
 3878|  28.6k|            auto it = *r;
 3879|       |
 3880|  28.6k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 28.5k, False: 102]
  ------------------
 3881|  28.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  28.5k|                it = r_sign->first;
 3883|  28.5k|            }
 3884|       |
 3885|  28.6k|            if (auto r_exp = read_while1_code_unit(
 3886|  28.6k|                    ranges::subrange{it, range.end()},
 3887|  28.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  28.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 688, False: 27.9k]
  |  |  ------------------
  ------------------
 3889|    688|                it = beg_exp_it;
 3890|    688|            }
 3891|  27.9k|            else {
 3892|  27.9k|                it = *r_exp;
 3893|  27.9k|            }
 3894|       |
 3895|  28.6k|            return it;
 3896|  28.6k|        }
 3897|   151k|        return range.begin();
 3898|   179k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  28.6k|    {
  754|  28.6k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|  84.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  84.7k|              cvref<T> obj = *get<T>(fn);
  745|  84.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  84.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  84.7k|              }
  748|  84.7k|              else {
  749|  84.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  84.7k|              }
  751|  84.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  84.7k|    {
  684|  84.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  84.7k|            return static_cast<T*>(s.m_cp);
  686|  84.7k|        }
  687|  84.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  84.7k|            return static_cast<T*>(s.m_p);
  689|  84.7k|        }
  690|  84.7k|        else {
  691|  84.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  84.7k|        }
  693|  84.7k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  84.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  28.6k|        {
  662|  28.6k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   307k|    {
 3944|   307k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   307k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 191k, False: 116k]
  |  Branch (3945:50): [True: 19.0k, False: 172k]
  ------------------
 3946|       |
 3947|   307k|        auto it = ranges::begin(range);
 3948|   307k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   307k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   307k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.8k, False: 283k]
  |  |  ------------------
  ------------------
 3952|  23.8k|            return r.transform_error(
 3953|  23.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  23.8k|                                              "Invalid floating-point value"));
 3955|  23.8k|        }
 3956|   283k|        else {
 3957|   283k|            digits_count += ranges::distance(it, *r);
 3958|   283k|            it = *r;
 3959|   283k|        }
 3960|       |
 3961|   283k|        m_integral_part_length = digits_count;
 3962|   283k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 52.0k, False: 231k]
  ------------------
 3963|   283k|                                             m_locale_options.decimal_point)) {
 3964|  52.0k|            it = *r;
 3965|  52.0k|        }
 3966|       |
 3967|   283k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 47.8k, False: 235k]
  ------------------
 3968|   283k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  47.8k|            digits_count += ranges::distance(it, *r);
 3970|  47.8k|            it = *r;
 3971|  47.8k|        }
 3972|       |
 3973|   283k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 283k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   283k|        auto beg_exp_it = it;
 3979|   283k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 179k, False: 103k]
  ------------------
 3980|   179k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   179k|        }
 3982|   283k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 17.8k, False: 265k]
  |  Branch (3982:29): [True: 11.5k, False: 6.27k]
  ------------------
 3983|  11.5k|            return unexpected_scan_error(
 3984|  11.5k|                scan_error::invalid_scanned_value,
 3985|  11.5k|                "No exponent given to scientific float");
 3986|  11.5k|        }
 3987|       |
 3988|   272k|        m_kind =
 3989|   272k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 244k, False: 27.9k]
  ------------------
 3990|       |
 3991|   272k|        return it;
 3992|   283k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   591k|    {
 3774|   591k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 591k]
  |  |  |  Branch (859:45): [True: 0, False: 591k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   591k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   591k|        return read_while1_code_unit(
 3783|   591k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   591k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|   591k|    {
  754|   591k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  3.09M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.09M|              cvref<T> obj = *get<T>(fn);
  745|  3.09M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.09M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.09M|              }
  748|  3.09M|              else {
  749|  3.09M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.09M|              }
  751|  3.09M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  3.09M|    {
  684|  3.09M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.09M|            return static_cast<T*>(s.m_cp);
  686|  3.09M|        }
  687|  3.09M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.09M|            return static_cast<T*>(s.m_p);
  689|  3.09M|        }
  690|  3.09M|        else {
  691|  3.09M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.09M|        }
  693|  3.09M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  3.09M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|   591k|        {
  662|   591k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.09M|    {
 4000|  1.09M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.09M|        const bool allowed_nonhex =
 4002|  1.09M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.09M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.09M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.08M, False: 12.2k]
  |  Branch (4005:45): [True: 0, False: 1.08M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.09M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.2k, False: 1.08M]
  ------------------
 4011|  12.2k|            return *r;
 4012|  12.2k|        }
 4013|       |
 4014|  1.08M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.03M, False: 46.7k]
  |  Branch (4014:45): [True: 1.18k, False: 1.03M]
  ------------------
 4015|  1.18k|            return unexpected(r.error());
 4016|  1.18k|        }
 4017|  1.07M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 46.7k, False: 1.03M]
  ------------------
 4018|  46.7k|            return *r;
 4019|  46.7k|        }
 4020|       |
 4021|  1.03M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 724k, False: 307k]
  |  Branch (4021:28): [True: 218k, False: 506k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   218k|            auto it = range.begin();
 4025|       |
 4026|   218k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 11.1k, False: 207k]
  ------------------
 4027|  11.1k|                m_kind = float_kind::hex_with_prefix;
 4028|  11.1k|                it = *r;
 4029|  11.1k|            }
 4030|   207k|            else {
 4031|   207k|                m_kind = float_kind::hex_without_prefix;
 4032|   207k|            }
 4033|       |
 4034|   218k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   218k|        }
 4036|   813k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 307k, False: 506k]
  |  Branch (4036:29): [True: 307k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   307k|            m_kind = float_kind::generic;
 4040|   307k|            return read_regular_float(range);
 4041|   307k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   506k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.2k, False: 478k]
  |  |  ------------------
  ------------------
 4047|  27.2k|            m_kind = float_kind::hex_with_prefix;
 4048|  27.2k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  27.2k|        }
 4050|       |
 4051|   478k|        m_kind = float_kind::generic;
 4052|   478k|        return read_regular(range);
 4053|   506k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   724k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   724k|                    auto res = read_all(rr);
 3727|   724k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 837, False: 724k]
  |  |  ------------------
  ------------------
 3728|    837|                        return unexpected_scan_error(
 3729|    837|                            scan_error::invalid_scanned_value,
 3730|    837|                            "Invalid float value");
 3731|    837|                    }
 3732|   724k|                    return res;
 3733|   724k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   724k|{
 1839|   724k|    return ranges::next(range.begin(), range.end());
 1840|   724k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   724k|    {
  313|   724k|        ranges::advance(x, bound);
  314|   724k|        return x;
  315|   724k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   724k|    {
  275|   724k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   724k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   724k|    {
  190|   724k|        i = std::move(bound);
  191|   724k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|   998k|    {
 1577|   998k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   998k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   998k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|   998k|    {
 1621|   998k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   998k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   998k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   998k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   998k|            m_storage.reset();
 1627|   998k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   998k|        }
 1629|   998k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   998k|                                          std::basic_string<CharT>>) {
 1631|   998k|            m_storage.emplace(SCN_FWD(range));
 1632|   998k|            m_view = string_view_type{*m_storage};
 1633|   998k|        }
 1634|   998k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   998k|                                          typename detail::basic_scan_buffer<
 1636|   998k|                                              value_t>::forward_iterator> &&
 1637|   998k|                           ranges::common_range<Range>) {
 1638|   998k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   998k|            auto end_seg = range.end().contiguous_segment();
 1640|   998k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   998k|                             detail::to_address(end_seg.end()))) {
 1642|   998k|                auto& str = m_storage.emplace();
 1643|   998k|                str.reserve(range.end().position() - range.begin().position());
 1644|   998k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   998k|                m_view = string_view_type{str};
 1646|   998k|                return;
 1647|   998k|            }
 1648|       |
 1649|   998k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   998k|                                                            end_seg.data());
 1651|   998k|            m_storage.reset();
 1652|   998k|        }
 1653|   998k|        else {
 1654|   998k|            auto& str = m_storage.emplace();
 1655|   998k|            if constexpr (ranges::sized_range<Range>) {
 1656|   998k|                str.reserve(range.size());
 1657|   998k|            }
 1658|   998k|            if constexpr (ranges::common_range<Range>) {
 1659|   998k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   998k|                          std::back_inserter(str));
 1661|   998k|            }
 1662|   998k|            else {
 1663|   998k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   998k|                     ++it) {
 1665|   998k|                    str.push_back(*it);
 1666|   998k|                }
 1667|   998k|            }
 1668|   998k|            m_view = string_view_type{str};
 1669|   998k|        }
 1670|   998k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  69.3k|        {
  662|  69.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   181k|    {
  754|   181k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   181k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   181k|              cvref<T> obj = *get<T>(fn);
  745|   181k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   181k|                  obj(static_cast<decltype(args)>(args)...);
  747|   181k|              }
  748|   181k|              else {
  749|   181k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   181k|              }
  751|   181k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   181k|    {
  684|   181k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   181k|            return static_cast<T*>(s.m_cp);
  686|   181k|        }
  687|   181k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   181k|            return static_cast<T*>(s.m_p);
  689|   181k|        }
  690|   181k|        else {
  691|   181k|            return reinterpret_cast<T*>(s.m_fp);
  692|   181k|        }
  693|   181k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   181k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   181k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   181k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   877k|    {
 3665|   877k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 877k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   877k|        return read_source_impl(range);
 3671|   877k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   181k|        {
  662|   181k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   303k|    {
 6193|   303k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   303k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   303k|            auto rd = make_reader<T, char_type>();
 6198|   303k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   303k|                return unexpected(e);
 6200|   303k|            }
 6201|       |
 6202|   303k|            return impl(rd, range, value);
 6203|   303k|        }
 6204|   303k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   303k|            auto rd = make_reader<T, char_type>();
 6206|   303k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   303k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 303k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   303k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   303k|                return impl(rd, range, value);
 6213|   303k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   303k|        else {
 6221|   303k|            SCN_EXPECT(false);
 6222|   303k|            SCN_UNREACHABLE;
 6223|   303k|        }
 6224|   303k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   303k|    {
 6124|   303k|        const bool need_skipped_width =
 6125|   303k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 303k]
  |  Branch (6125:33): [True: 0, False: 303k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   303k|        auto it = rng.begin();
 6129|   303k|        std::ptrdiff_t prefix_width = 0;
 6130|   303k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 303k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   303k|        else {
 6138|   303k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.89k, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.89k|    }                                                  \
  |  |  |  | 3671|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   298k|            std::tie(it, prefix_width) = prefix_result;
 6140|   298k|        }
 6141|   298k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   298k|        std::ptrdiff_t value_width = 0;
 6145|   298k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 298k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   298k|        else {
 6161|   298k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.3k, False: 280k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  18.3k|    }                                                  \
  |  | 3671|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   280k|                                             specs, value, loc));
 6163|       |
 6164|   280k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 280k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   280k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   280k|        std::ptrdiff_t postfix_width = 0;
 6173|   280k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 276k, False: 3.95k]
  ------------------
 6174|   276k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   276k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   276k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   276k|                                 value_width));
 6178|   276k|            std::tie(it, postfix_width) = postfix_result;
 6179|   276k|        }
 6180|       |
 6181|   280k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   280k|                                                 value_width, postfix_width);
 6183|   280k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 280k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   280k|        return it;
 6188|   280k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   748k|    {
 3691|   748k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   748k|        const std::ptrdiff_t sign_len =
 3694|   748k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 177k, False: 571k]
  ------------------
 3695|       |
 3696|   748k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   748k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   748k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   748k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 734k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.8k|    }                                                  \
  |  |  |  | 3671|   748k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   734k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   734k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   748k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   298k|    {
 4170|   298k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   298k|#if !SCN_DISABLE_LOCALE
 4173|   298k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 84.9k, False: 213k]
  ------------------
 4174|  84.9k|            return read_impl<Range>(
 4175|  84.9k|                range, rd,
 4176|  84.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  84.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  84.9k|                },
 4179|  84.9k|                value, loc);
 4180|  84.9k|        }
 4181|   213k|#endif
 4182|       |
 4183|   213k|        return read_impl<Range>(
 4184|   213k|            range, rd,
 4185|   213k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   213k|                return r.read_source(SCN_FWD(args)...);
 4187|   213k|            },
 4188|   213k|            value);
 4189|   298k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   416k|    {
 4206|   416k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   416k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.2k, False: 393k]
  |  |  ------------------
  ------------------
 4208|  22.2k|            return unexpected(r.error());
 4209|  22.2k|        }
 4210|       |
 4211|   393k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   393k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   393k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   393k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.52k, False: 392k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.52k|    }                                                  \
  |  |  |  | 3671|   393k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   392k|        return ranges::next(range.begin(), n);
 4213|   393k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  84.9k|    {
  754|  84.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  84.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  84.9k|              cvref<T> obj = *get<T>(fn);
  745|  84.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  84.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  84.9k|              }
  748|  84.9k|              else {
  749|  84.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  84.9k|              }
  751|  84.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  84.9k|    {
  684|  84.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  84.9k|            return static_cast<T*>(s.m_cp);
  686|  84.9k|        }
  687|  84.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  84.9k|            return static_cast<T*>(s.m_p);
  689|  84.9k|        }
  690|  84.9k|        else {
  691|  84.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  84.9k|        }
  693|  84.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  84.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  84.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  84.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  84.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  84.9k|        {
  662|  84.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   213k|    {
  754|   213k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   213k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   213k|              cvref<T> obj = *get<T>(fn);
  745|   213k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   213k|                  obj(static_cast<decltype(args)>(args)...);
  747|   213k|              }
  748|   213k|              else {
  749|   213k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   213k|              }
  751|   213k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   213k|    {
  684|   213k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   213k|            return static_cast<T*>(s.m_cp);
  686|   213k|        }
  687|   213k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   213k|            return static_cast<T*>(s.m_p);
  689|   213k|        }
  690|   213k|        else {
  691|   213k|            return reinterpret_cast<T*>(s.m_fp);
  692|   213k|        }
  693|   213k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   213k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   213k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   213k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   213k|        {
  662|   213k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   258k|    {
 4170|   258k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   258k|#if !SCN_DISABLE_LOCALE
 4173|   258k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 72.1k, False: 186k]
  ------------------
 4174|  72.1k|            return read_impl<Range>(
 4175|  72.1k|                range, rd,
 4176|  72.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  72.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  72.1k|                },
 4179|  72.1k|                value, loc);
 4180|  72.1k|        }
 4181|   186k|#endif
 4182|       |
 4183|   186k|        return read_impl<Range>(
 4184|   186k|            range, rd,
 4185|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   186k|                return r.read_source(SCN_FWD(args)...);
 4187|   186k|            },
 4188|   186k|            value);
 4189|   258k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   366k|    {
 4206|   366k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   366k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 354k]
  |  |  ------------------
  ------------------
 4208|  12.4k|            return unexpected(r.error());
 4209|  12.4k|        }
 4210|       |
 4211|   354k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   354k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   354k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   354k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 341k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.3k|    }                                                  \
  |  |  |  | 3671|   354k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   341k|        return ranges::next(range.begin(), n);
 4213|   354k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  72.1k|    {
  754|  72.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  72.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.1k|              cvref<T> obj = *get<T>(fn);
  745|  72.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  72.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  72.1k|              }
  748|  72.1k|              else {
  749|  72.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.1k|              }
  751|  72.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  72.1k|    {
  684|  72.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  72.1k|            return static_cast<T*>(s.m_cp);
  686|  72.1k|        }
  687|  72.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  72.1k|            return static_cast<T*>(s.m_p);
  689|  72.1k|        }
  690|  72.1k|        else {
  691|  72.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  72.1k|        }
  693|  72.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  72.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  72.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  72.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  72.1k|        {
  662|  72.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   186k|    {
  754|   186k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|   186k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   186k|                  obj(static_cast<decltype(args)>(args)...);
  747|   186k|              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   186k|    {
  684|   186k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   186k|            return static_cast<T*>(s.m_cp);
  686|   186k|        }
  687|   186k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   186k|            return static_cast<T*>(s.m_p);
  689|   186k|        }
  690|   186k|        else {
  691|   186k|            return reinterpret_cast<T*>(s.m_fp);
  692|   186k|        }
  693|   186k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   186k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   186k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   186k|        {
  662|   186k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   306k|    {
 6193|   306k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   306k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   306k|            auto rd = make_reader<T, char_type>();
 6198|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   306k|                return unexpected(e);
 6200|   306k|            }
 6201|       |
 6202|   306k|            return impl(rd, range, value);
 6203|   306k|        }
 6204|   306k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   306k|            auto rd = make_reader<T, char_type>();
 6206|   306k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   306k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 306k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   306k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   306k|                return impl(rd, range, value);
 6213|   306k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   306k|        else {
 6221|   306k|            SCN_EXPECT(false);
 6222|   306k|            SCN_UNREACHABLE;
 6223|   306k|        }
 6224|   306k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   306k|    {
 6124|   306k|        const bool need_skipped_width =
 6125|   306k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 306k]
  |  Branch (6125:33): [True: 0, False: 306k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   306k|        auto it = rng.begin();
 6129|   306k|        std::ptrdiff_t prefix_width = 0;
 6130|   306k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 306k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   306k|        else {
 6138|   306k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.21k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.21k|    }                                                  \
  |  |  |  | 3671|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   301k|            std::tie(it, prefix_width) = prefix_result;
 6140|   301k|        }
 6141|   301k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   301k|        std::ptrdiff_t value_width = 0;
 6145|   301k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 301k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   301k|        else {
 6161|   301k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.0k, False: 283k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  18.0k|    }                                                  \
  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   283k|                                             specs, value, loc));
 6163|       |
 6164|   283k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 283k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   283k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   283k|        std::ptrdiff_t postfix_width = 0;
 6173|   283k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 279k, False: 4.21k]
  ------------------
 6174|   279k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   279k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   279k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   279k|                                 value_width));
 6178|   279k|            std::tie(it, postfix_width) = postfix_result;
 6179|   279k|        }
 6180|       |
 6181|   283k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   283k|                                                 value_width, postfix_width);
 6183|   283k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 283k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   283k|        return it;
 6188|   283k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   755k|    {
 3691|   755k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   755k|        const std::ptrdiff_t sign_len =
 3694|   755k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 181k, False: 574k]
  ------------------
 3695|       |
 3696|   755k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   755k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   755k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   755k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.0k, False: 743k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.0k|    }                                                  \
  |  |  |  | 3671|   755k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   743k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   755k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   301k|    {
 4170|   301k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   301k|#if !SCN_DISABLE_LOCALE
 4173|   301k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 86.1k, False: 215k]
  ------------------
 4174|  86.1k|            return read_impl<Range>(
 4175|  86.1k|                range, rd,
 4176|  86.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  86.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  86.1k|                },
 4179|  86.1k|                value, loc);
 4180|  86.1k|        }
 4181|   215k|#endif
 4182|       |
 4183|   215k|        return read_impl<Range>(
 4184|   215k|            range, rd,
 4185|   215k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   215k|                return r.read_source(SCN_FWD(args)...);
 4187|   215k|            },
 4188|   215k|            value);
 4189|   301k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   420k|    {
 4206|   420k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   420k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.9k, False: 397k]
  |  |  ------------------
  ------------------
 4208|  22.9k|            return unexpected(r.error());
 4209|  22.9k|        }
 4210|       |
 4211|   397k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   397k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   397k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   397k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 402, False: 396k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    402|    }                                                  \
  |  |  |  | 3671|   397k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   396k|        return ranges::next(range.begin(), n);
 4213|   397k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  86.1k|    {
  754|  86.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  86.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.1k|              cvref<T> obj = *get<T>(fn);
  745|  86.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  86.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.1k|              }
  748|  86.1k|              else {
  749|  86.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.1k|              }
  751|  86.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  86.1k|    {
  684|  86.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  86.1k|            return static_cast<T*>(s.m_cp);
  686|  86.1k|        }
  687|  86.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  86.1k|            return static_cast<T*>(s.m_p);
  689|  86.1k|        }
  690|  86.1k|        else {
  691|  86.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  86.1k|        }
  693|  86.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  86.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  86.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  86.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  86.1k|        {
  662|  86.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   215k|    {
  754|   215k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|   215k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   215k|                  obj(static_cast<decltype(args)>(args)...);
  747|   215k|              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   215k|    {
  684|   215k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   215k|            return static_cast<T*>(s.m_cp);
  686|   215k|        }
  687|   215k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   215k|            return static_cast<T*>(s.m_p);
  689|   215k|        }
  690|   215k|        else {
  691|   215k|            return reinterpret_cast<T*>(s.m_fp);
  692|   215k|        }
  693|   215k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   215k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   215k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   215k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   215k|        {
  662|   215k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   260k|    {
 4170|   260k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   260k|#if !SCN_DISABLE_LOCALE
 4173|   260k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 73.2k, False: 187k]
  ------------------
 4174|  73.2k|            return read_impl<Range>(
 4175|  73.2k|                range, rd,
 4176|  73.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  73.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  73.2k|                },
 4179|  73.2k|                value, loc);
 4180|  73.2k|        }
 4181|   187k|#endif
 4182|       |
 4183|   187k|        return read_impl<Range>(
 4184|   187k|            range, rd,
 4185|   187k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   187k|                return r.read_source(SCN_FWD(args)...);
 4187|   187k|            },
 4188|   187k|            value);
 4189|   260k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   370k|    {
 4206|   370k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   370k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 358k]
  |  |  ------------------
  ------------------
 4208|  12.7k|            return unexpected(r.error());
 4209|  12.7k|        }
 4210|       |
 4211|   358k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   358k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   358k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   358k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 346k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.6k|    }                                                  \
  |  |  |  | 3671|   358k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   346k|        return ranges::next(range.begin(), n);
 4213|   358k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  73.2k|    {
  754|  73.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  73.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.2k|              cvref<T> obj = *get<T>(fn);
  745|  73.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  73.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.2k|              }
  748|  73.2k|              else {
  749|  73.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.2k|              }
  751|  73.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  73.2k|    {
  684|  73.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  73.2k|            return static_cast<T*>(s.m_cp);
  686|  73.2k|        }
  687|  73.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  73.2k|            return static_cast<T*>(s.m_p);
  689|  73.2k|        }
  690|  73.2k|        else {
  691|  73.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  73.2k|        }
  693|  73.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  73.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  73.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  73.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  73.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  73.2k|        {
  662|  73.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   187k|    {
  754|   187k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   187k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   187k|              cvref<T> obj = *get<T>(fn);
  745|   187k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   187k|                  obj(static_cast<decltype(args)>(args)...);
  747|   187k|              }
  748|   187k|              else {
  749|   187k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   187k|              }
  751|   187k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   187k|    {
  684|   187k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   187k|            return static_cast<T*>(s.m_cp);
  686|   187k|        }
  687|   187k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   187k|            return static_cast<T*>(s.m_p);
  689|   187k|        }
  690|   187k|        else {
  691|   187k|            return reinterpret_cast<T*>(s.m_fp);
  692|   187k|        }
  693|   187k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   187k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   187k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   187k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   187k|        {
  662|   187k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.25M|{
 1039|  1.25M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.25M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.25M|        return r;
 1042|  1.25M|    }
 1043|  1.25M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.25M|                           ranges::const_iterator_t<Range>,
 1045|  1.25M|                           typename detail::basic_scan_buffer<
 1046|  1.25M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.25M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  1.25M|            auto seg = r.begin().contiguous_segment();
 1049|  1.25M|            auto dist =
 1050|  1.25M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.25M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.25M|        }
 1053|  1.25M|        else {
 1054|  1.25M|            return r.begin().contiguous_segment();
 1055|  1.25M|        }
 1056|  1.25M|    }
 1057|  1.25M|    else {
 1058|  1.25M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.25M|    }
 1060|  1.25M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.11M|{
 2061|  1.11M|    auto it = range.begin();
 2062|  2.11M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.09M, False: 14.9k]
  ------------------
 2063|  2.09M|        const auto val =
 2064|  2.09M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.09M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.08M, False: 11.9k]
  |  |  ------------------
  ------------------
 2066|  2.08M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.08M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.08M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.09M, False: 989k]
  ------------------
 2069|  1.09M|                return it;
 2070|  1.09M|            }
 2071|  2.08M|        }
 2072|  1.00M|        it = val.iterator;
 2073|  1.00M|    }
 2074|       |
 2075|  14.9k|    return it;
 2076|  1.11M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.09M|{
 1899|  2.09M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.09M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.09M|    auto it = range.begin();
 1903|  2.09M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.09M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 2.08M]
  |  |  ------------------
  ------------------
 1906|  11.9k|        ++it;
 1907|  11.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  11.9k|        return {it, {}};
 1909|  11.9k|    }
 1910|       |
 1911|  2.08M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.06M, False: 18.9k]
  ------------------
 1912|  2.06M|        ++it;
 1913|  2.06M|        return {it, string_type(1, *range.begin())};
 1914|  2.06M|    }
 1915|       |
 1916|  18.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  18.9k|    return {it, string_type{range.begin(), it}};
 1918|  2.08M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  11.9k|{
 1155|  11.9k|    auto it = input.begin();
 1156|   109k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 107k, False: 1.25k]
  ------------------
 1157|   107k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 10.7k, False: 97.1k]
  ------------------
 1158|  10.7k|            break;
 1159|  10.7k|        }
 1160|   107k|    }
 1161|  11.9k|    return it;
 1162|  11.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.9k|    {
  283|  18.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.9k|    {
  252|  18.9k|        constexpr iter_difference_t<I> zero{0};
  253|  18.9k|        iter_difference_t<I> counter{0};
  254|       |
  255|  57.3k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 39.3k, False: 17.9k]
  |  Branch (255:30): [True: 38.4k, False: 965]
  ------------------
  256|  38.4k|            ++i;
  257|  38.4k|            ++counter;
  258|  38.4k|        }
  259|       |
  260|  18.9k|        return counter;
  261|  18.9k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.09M|    {
 1890|  2.09M|        return !codepoint.empty();
 1891|  2.09M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.11M|{
 2082|  1.11M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.11M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.25M|{
 2951|  1.25M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.25M, False: 0]
  ------------------
 2952|  1.25M|        auto it = read_while_classic_space(range);
 2953|  1.25M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.25M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 1.23M]
  |  |  ------------------
  ------------------
 2955|  14.9k|            return unexpected(e);
 2956|  14.9k|        }
 2957|       |
 2958|  1.23M|        return it;
 2959|  1.25M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.25M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.25M|{
 2117|  1.25M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.25M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.25M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.25M|        auto buf = make_contiguous_buffer(range);
 2121|  1.25M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.25M|        return ranges::next(range.begin(),
 2123|  1.25M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.25M|    }
 2125|  1.25M|    else {
 2126|  1.25M|        auto it = range.begin();
 2127|       |
 2128|  1.25M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.25M|            auto seg = get_contiguous_beginning(range);
 2130|  1.25M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.25M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 141k, False: 1.11M]
  ------------------
 2132|   141k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   141k|            }
 2134|  1.11M|            ranges::advance(it, seg.size());
 2135|  1.11M|        }
 2136|       |
 2137|  1.11M|        return read_while_code_point(
 2138|  1.11M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.25M|    }
 2140|  1.25M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.11M|    {
  754|  1.11M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  2.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.08M|              cvref<T> obj = *get<T>(fn);
  745|  2.08M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.08M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.08M|              }
  748|  2.08M|              else {
  749|  2.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.08M|              }
  751|  2.08M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.08M|    {
  684|  2.08M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.08M|            return static_cast<T*>(s.m_cp);
  686|  2.08M|        }
  687|  2.08M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.08M|            return static_cast<T*>(s.m_p);
  689|  2.08M|        }
  690|  2.08M|        else {
  691|  2.08M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.08M|        }
  693|  2.08M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.08M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.11M|        {
  662|  1.11M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   545k|{
  981|   545k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   545k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   545k|        return true;
  984|   545k|    }
  985|   545k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   545k|                           ranges::const_iterator_t<Range>,
  987|   545k|                           typename detail::basic_scan_buffer<
  988|   545k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   545k|        auto beg = r.begin();
  990|   545k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 545k, False: 0]
  ------------------
  991|   545k|            return false;
  992|   545k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   545k|    else {
 1006|   545k|        return false;
 1007|   545k|    }
 1008|   545k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  3.74M|    {
  763|  3.74M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.74M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.41M|{
 1857|  1.41M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.41M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.41M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.41M|        if (sz < count) {
 1862|  1.41M|            return unexpected(eof_error::eof);
 1863|  1.41M|        }
 1864|       |
 1865|  1.41M|        return ranges::next(range.begin(), count);
 1866|  1.41M|    }
 1867|  1.41M|    else {
 1868|  1.41M|        auto it = range.begin();
 1869|  1.41M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 848k, False: 571k]
  ------------------
 1870|   848k|            return ranges::next(it, count);
 1871|   848k|        }
 1872|       |
 1873|  2.20M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.68M, False: 518k]
  ------------------
 1874|  1.68M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 52.6k, False: 1.62M]
  ------------------
 1875|  52.6k|                return unexpected(eof_error::eof);
 1876|  52.6k|            }
 1877|  1.68M|        }
 1878|       |
 1879|   518k|        return it;
 1880|   571k|    }
 1881|  1.41M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.41M|{
 1095|  1.41M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.41M|        return r.size();
 1097|  1.41M|    }
 1098|  1.41M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.41M|                           ranges::const_iterator_t<Range>,
 1100|  1.41M|                           typename detail::basic_scan_buffer<
 1101|  1.41M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.41M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.41M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.41M|        }
 1105|  1.41M|        else {
 1106|  1.41M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.41M, False: 0]
  ------------------
 1107|  1.41M|                return static_cast<size_t>(
 1108|  1.41M|                    r.begin().parent()->chars_available() -
 1109|  1.41M|                    r.begin().position());
 1110|  1.41M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.41M|        }
 1113|  1.41M|    }
 1114|  1.41M|    else {
 1115|  1.41M|        return 0;
 1116|  1.41M|    }
 1117|  1.41M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.25M|    {
  754|  1.25M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.87M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.87M|              cvref<T> obj = *get<T>(fn);
  745|  1.87M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.87M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.87M|              }
  748|  1.87M|              else {
  749|  1.87M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.87M|              }
  751|  1.87M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.87M|    {
  684|  1.87M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.87M|            return static_cast<T*>(s.m_cp);
  686|  1.87M|        }
  687|  1.87M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.87M|            return static_cast<T*>(s.m_p);
  689|  1.87M|        }
  690|  1.87M|        else {
  691|  1.87M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.87M|        }
  693|  1.87M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.25M|        {
  662|  1.25M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   402k|    {
 6037|   402k|        const bool need_skipped_width =
 6038|   402k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 402k]
  |  Branch (6038:33): [True: 0, False: 402k]
  ------------------
 6039|   402k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   402k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 402k]
  ------------------
 6043|   402k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 402k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   402k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 402k, False: 0]
  |  Branch (6047:56): [True: 402k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   402k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 402k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   802k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   402k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   402k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   402k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 399k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|   402k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   802k|                            make_eof_scan_error));
 6058|       |
 6059|   802k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 399k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   399k|            return result_type{it, 0};
 6067|   802k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   402k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   921k|{
 1976|   921k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   921k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   921k|{
 1957|   921k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   921k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   921k|    }
 1960|   921k|    else {
 1961|   921k|        auto first = range.begin();
 1962|  1.38M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.37M, False: 2.89k]
  ------------------
 1963|  1.37M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 918k, False: 461k]
  ------------------
 1964|   918k|                return first;
 1965|   918k|            }
 1966|  1.37M|        }
 1967|  2.89k|        return first;
 1968|   921k|    }
 1969|   921k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   633k|    {
  108|   633k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   633k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   633k|    {
   94|   633k|        iter_difference_t<I> counter{0};
   95|  1.66M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.02M, False: 633k]
  ------------------
   96|  1.02M|            ++i;
   97|  1.02M|            ++counter;
   98|  1.02M|        }
   99|   633k|        return counter;
  100|   633k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   188k|    {
 1780|   188k|        auto stdloc = loc.get<std::locale>();
 1781|   188k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   188k|        grouping = numpunct.grouping();
 1783|   188k|        thousands_sep =
 1784|   188k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 188k]
  ------------------
 1785|   188k|        decimal_point = numpunct.decimal_point();
 1786|   188k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   188k|{
 1717|   188k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 188k, False: 0]
  ------------------
 1718|   188k|        return std::use_facet<Facet>(stdloc);
 1719|   188k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   188k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  1.23M|{
 1846|  1.23M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.87k, False: 1.23M]
  |  |  ------------------
  ------------------
 1847|  1.87k|        return unexpected(e);
 1848|  1.87k|    }
 1849|       |
 1850|  1.23M|    return ranges::next(range.begin());
 1851|  1.23M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.92M|{
  950|  1.92M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.38k, False: 1.91M]
  |  |  ------------------
  ------------------
  951|  5.38k|        return eof_error::eof;
  952|  5.38k|    }
  953|  1.91M|    return eof_error::good;
  954|  1.92M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.83M|{
  944|  2.83M|    return is_range_eof(r.begin(), r.end());
  945|  2.83M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.83M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.83M|    {
  937|  2.83M|        return begin == end;
  938|  2.83M|    }
  939|  2.83M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.23M|    {
  296|  1.23M|        ++x;
  297|  1.23M|        return x;
  298|  1.23M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   551k|{
 3141|   551k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   551k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 547k, False: 4.71k]
  ------------------
 3143|   547k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 547k, False: 70]
  ------------------
 3144|   547k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   547k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   547k|    }
 3148|       |
 3149|  4.71k|    auto& it = *r;
 3150|  4.71k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 3.90k, False: 816]
  ------------------
 3151|  3.90k|        return std::pair{it, sign_type::minus_sign};
 3152|  3.90k|    }
 3153|    816|    return std::pair{it, sign_type::plus_sign};
 3154|  4.71k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   864k|{
 2272|   864k|    auto it = read_code_unit(range);
 2273|   864k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 863k]
  |  |  ------------------
  ------------------
 2274|  1.00k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  1.00k|    }
 2276|       |
 2277|  1.72M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.72M, False: 848k]
  ------------------
 2278|  1.72M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 15.1k, False: 1.71M]
  ------------------
 2279|  15.1k|            return *it;
 2280|  15.1k|        }
 2281|  1.72M|    }
 2282|       |
 2283|   848k|    return unexpected(parse_error::error);
 2284|   863k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.41M|{
 2231|  1.41M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.41M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.41M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.41M|        if (range.size() < str.size()) {
 2236|  1.41M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.41M|        }
 2238|  1.41M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.41M|            return unexpected(parse_error::error);
 2240|  1.41M|        }
 2241|  1.41M|        return ranges::next(range.begin(), str.size());
 2242|  1.41M|    }
 2243|  1.41M|    else {
 2244|  1.41M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.41M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.41M|                return ch;
 2247|  1.41M|            }
 2248|  1.41M|            return static_cast<char_type>(ch +
 2249|  1.41M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.41M|        };
 2251|       |
 2252|  1.41M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.41M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.41M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.41M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 52.6k, False: 1.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  52.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  52.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  52.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  52.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  52.6k|    }                                                  \
  |  |  |  | 3671|  1.41M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.36M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.36M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.36M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36M, False: 689]
  |  |  ------------------
  ------------------
 2257|  1.36M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.36M|                    return ascii_tolower(a) ==
 2259|  1.36M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.36M|                }))) {
 2261|  1.36M|            return unexpected(parse_error::error);
 2262|  1.36M|        }
 2263|       |
 2264|    689|        return it;
 2265|  1.36M|    }
 2266|  1.41M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.58M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.58M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.23M, False: 350k]
  |  Branch (2245:29): [True: 339k, False: 11.2k]
  ------------------
 2246|  1.57M|                return ch;
 2247|  1.57M|            }
 2248|  11.2k|            return static_cast<char_type>(ch +
 2249|  11.2k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.58M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   369k|{
 2146|   369k|    auto it = read_code_unit(range);
 2147|   369k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 868, False: 368k]
  |  |  ------------------
  ------------------
 2148|    868|        return unexpected(make_eof_parse_error(it.error()));
 2149|    868|    }
 2150|       |
 2151|   368k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 366k, False: 1.65k]
  |  |  ------------------
  ------------------
 2152|   368k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   366k|        return unexpected(parse_error::error);
 2154|   366k|    }
 2155|       |
 2156|  1.65k|    return *it;
 2157|   368k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   921k|{
 1996|   921k|    auto it = read_while_code_unit(range, pred);
 1997|   921k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 541k, False: 379k]
  ------------------
 1998|   541k|        return unexpected(parse_error::error);
 1999|   541k|    }
 2000|   379k|    return it;
 2001|   921k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   365k|    {
 1621|   365k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   365k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   365k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   365k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   365k|            m_storage.reset();
 1627|   365k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   365k|        }
 1629|   365k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   365k|                                          std::basic_string<CharT>>) {
 1631|   365k|            m_storage.emplace(SCN_FWD(range));
 1632|   365k|            m_view = string_view_type{*m_storage};
 1633|   365k|        }
 1634|   365k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   365k|                                          typename detail::basic_scan_buffer<
 1636|   365k|                                              value_t>::forward_iterator> &&
 1637|   365k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   365k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   365k|            auto end_seg = range.end().contiguous_segment();
 1640|   365k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 353k]
  |  |  ------------------
  ------------------
 1641|   365k|                             detail::to_address(end_seg.end()))) {
 1642|  12.4k|                auto& str = m_storage.emplace();
 1643|  12.4k|                str.reserve(range.end().position() - range.begin().position());
 1644|  12.4k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  12.4k|                m_view = string_view_type{str};
 1646|  12.4k|                return;
 1647|  12.4k|            }
 1648|       |
 1649|   353k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   353k|                                                            end_seg.data());
 1651|   353k|            m_storage.reset();
 1652|   353k|        }
 1653|   365k|        else {
 1654|   365k|            auto& str = m_storage.emplace();
 1655|   365k|            if constexpr (ranges::sized_range<Range>) {
 1656|   365k|                str.reserve(range.size());
 1657|   365k|            }
 1658|   365k|            if constexpr (ranges::common_range<Range>) {
 1659|   365k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   365k|                          std::back_inserter(str));
 1661|   365k|            }
 1662|   365k|            else {
 1663|   365k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   365k|                     ++it) {
 1665|   365k|                    str.push_back(*it);
 1666|   365k|                }
 1667|   365k|            }
 1668|   365k|            m_view = string_view_type{str};
 1669|   365k|        }
 1670|   365k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  3.25M|    {
 1582|  3.25M|        return m_view;
 1583|  3.25M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.16M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   261k|    {
 6079|   261k|        const bool need_skipped_width =
 6080|   261k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 261k]
  |  Branch (6080:33): [True: 0, False: 261k]
  ------------------
 6081|   261k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   261k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 261k]
  ------------------
 6084|   261k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 261k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   261k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 261k, False: 0]
  ------------------
 6093|   261k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 261k]
  ------------------
 6094|   261k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   261k|        return result_type{rng.begin(), 0};
 6118|   261k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.42M|{
 1857|  1.42M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.42M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.42M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.42M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 52.8k, False: 1.36M]
  ------------------
 1862|  52.8k|            return unexpected(eof_error::eof);
 1863|  52.8k|        }
 1864|       |
 1865|  1.36M|        return ranges::next(range.begin(), count);
 1866|  1.42M|    }
 1867|  1.42M|    else {
 1868|  1.42M|        auto it = range.begin();
 1869|  1.42M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.42M|            return ranges::next(it, count);
 1871|  1.42M|        }
 1872|       |
 1873|  1.42M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.42M|            if (it == range.end()) {
 1875|  1.42M|                return unexpected(eof_error::eof);
 1876|  1.42M|            }
 1877|  1.42M|        }
 1878|       |
 1879|  1.42M|        return it;
 1880|  1.42M|    }
 1881|  1.42M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.56M|{
 1899|  1.56M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.56M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.56M|    auto it = range.begin();
 1903|  1.56M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.56M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.56M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.56M, False: 0]
  ------------------
 1912|  1.56M|        ++it;
 1913|  1.56M|        return {it, string_type(1, *range.begin())};
 1914|  1.56M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.56M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.99M|{
  944|  2.99M|    return is_range_eof(r.begin(), r.end());
  945|  2.99M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  2.99M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.99M|    {
  937|  2.99M|        return begin == end;
  938|  2.99M|    }
  939|  2.99M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   336k|    {
  190|   336k|        i = std::move(bound);
  191|   336k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.56M|    {
 1890|  1.56M|        return !codepoint.empty();
 1891|  1.56M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.42M|{
  950|  1.42M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.98k, False: 1.42M]
  |  |  ------------------
  ------------------
  951|  3.98k|        return eof_error::eof;
  952|  3.98k|    }
  953|  1.42M|    return eof_error::good;
  954|  1.42M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   742k|{
 1846|   742k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 472, False: 741k]
  |  |  ------------------
  ------------------
 1847|    472|        return unexpected(e);
 1848|    472|    }
 1849|       |
 1850|   741k|    return ranges::next(range.begin());
 1851|   742k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   741k|    {
  296|   741k|        ++x;
  297|   741k|        return x;
  298|   741k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   545k|{
 3141|   545k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   545k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 542k, False: 2.92k]
  ------------------
 3143|   542k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 542k, False: 24]
  ------------------
 3144|   542k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   542k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   542k|    }
 3148|       |
 3149|  2.92k|    auto& it = *r;
 3150|  2.92k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.27k, False: 655]
  ------------------
 3151|  2.27k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.27k|    }
 3153|    655|    return std::pair{it, sign_type::plus_sign};
 3154|  2.92k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   615k|{
 2272|   615k|    auto it = read_code_unit(range);
 2273|   615k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 615k]
  |  |  ------------------
  ------------------
 2274|    224|        return unexpected(make_eof_parse_error(it.error()));
 2275|    224|    }
 2276|       |
 2277|  1.23M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.23M, False: 608k]
  ------------------
 2278|  1.23M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 6.55k, False: 1.22M]
  ------------------
 2279|  6.55k|            return *it;
 2280|  6.55k|        }
 2281|  1.23M|    }
 2282|       |
 2283|   608k|    return unexpected(parse_error::error);
 2284|   615k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.42M|{
 2231|  1.42M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.42M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.42M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.42M|        if (range.size() < str.size()) {
 2236|  1.42M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.42M|        }
 2238|  1.42M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.42M|            return unexpected(parse_error::error);
 2240|  1.42M|        }
 2241|  1.42M|        return ranges::next(range.begin(), str.size());
 2242|  1.42M|    }
 2243|  1.42M|    else {
 2244|  1.42M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.42M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.42M|                return ch;
 2247|  1.42M|            }
 2248|  1.42M|            return static_cast<char_type>(ch +
 2249|  1.42M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.42M|        };
 2251|       |
 2252|  1.42M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 52.8k, False: 1.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  52.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  52.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  52.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  52.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  52.8k|    }                                                  \
  |  |  |  | 3671|  1.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.36M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.36M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.36M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36M, False: 689]
  |  |  ------------------
  ------------------
 2257|  1.36M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.36M|                    return ascii_tolower(a) ==
 2259|  1.36M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.36M|                }))) {
 2261|  1.36M|            return unexpected(parse_error::error);
 2262|  1.36M|        }
 2263|       |
 2264|    689|        return it;
 2265|  1.36M|    }
 2266|  1.42M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.58M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.58M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.23M, False: 351k]
  |  Branch (2245:29): [True: 340k, False: 11.3k]
  ------------------
 2246|  1.57M|                return ch;
 2247|  1.57M|            }
 2248|  11.3k|            return static_cast<char_type>(ch +
 2249|  11.3k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.58M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   126k|{
 2146|   126k|    auto it = read_code_unit(range);
 2147|   126k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248, False: 126k]
  |  |  ------------------
  ------------------
 2148|    248|        return unexpected(make_eof_parse_error(it.error()));
 2149|    248|    }
 2150|       |
 2151|   126k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 646]
  |  |  ------------------
  ------------------
 2152|   126k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   125k|        return unexpected(parse_error::error);
 2154|   125k|    }
 2155|       |
 2156|    646|    return *it;
 2157|   126k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   335k|{
 1976|   335k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   335k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   335k|{
 1957|   335k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   335k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   335k|    }
 1960|   335k|    else {
 1961|   335k|        auto first = range.begin();
 1962|   335k|        for (; first != range.end(); ++first) {
 1963|   335k|            if (pred(*first)) {
 1964|   335k|                return first;
 1965|   335k|            }
 1966|   335k|        }
 1967|   335k|        return first;
 1968|   335k|    }
 1969|   335k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   545k|{
 2951|   545k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 545k, False: 0]
  ------------------
 2952|   545k|        auto it = read_while_classic_space(range);
 2953|   545k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   545k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.10k, False: 541k]
  |  |  ------------------
  ------------------
 2955|  3.10k|            return unexpected(e);
 2956|  3.10k|        }
 2957|       |
 2958|   541k|        return it;
 2959|   545k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   545k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   545k|{
 2117|   545k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   545k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   545k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   545k|        auto buf = make_contiguous_buffer(range);
 2121|   545k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   545k|        return ranges::next(range.begin(),
 2123|   545k|                            ranges::distance(buf.view().begin(), it));
 2124|   545k|    }
 2125|   545k|    else {
 2126|   545k|        auto it = range.begin();
 2127|       |
 2128|   545k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   545k|            auto seg = get_contiguous_beginning(range);
 2130|   545k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   545k|                seg_it != seg.end()) {
 2132|   545k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   545k|            }
 2134|   545k|            ranges::advance(it, seg.size());
 2135|   545k|        }
 2136|       |
 2137|   545k|        return read_while_code_point(
 2138|   545k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   545k|    }
 2140|   545k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   545k|{
 2082|   545k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   545k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   894k|{
 2061|   894k|    auto it = range.begin();
 2062|  1.78M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.56M, False: 222k]
  ------------------
 2063|  1.56M|        const auto val =
 2064|  1.56M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.56M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.56M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.56M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.56M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.56M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.56M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 672k, False: 891k]
  ------------------
 2069|   672k|                return it;
 2070|   672k|            }
 2071|  1.56M|        }
 2072|   891k|        it = val.iterator;
 2073|   891k|    }
 2074|       |
 2075|   222k|    return it;
 2076|   894k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   545k|    {
  754|   545k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   917k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   917k|              cvref<T> obj = *get<T>(fn);
  745|   917k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   917k|                  obj(static_cast<decltype(args)>(args)...);
  747|   917k|              }
  748|   917k|              else {
  749|   917k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   917k|              }
  751|   917k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   917k|    {
  684|   917k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   917k|            return static_cast<T*>(s.m_cp);
  686|   917k|        }
  687|   917k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   917k|            return static_cast<T*>(s.m_p);
  689|   917k|        }
  690|   917k|        else {
  691|   917k|            return reinterpret_cast<T*>(s.m_fp);
  692|   917k|        }
  693|   917k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   917k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   545k|        {
  662|   545k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.21M|    {
  304|  1.21M|        ranges::advance(x, n);
  305|  1.21M|        return x;
  306|  1.21M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.21M|    {
  268|  1.21M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.21M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.21M|    {
  181|  3.88M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.66M, False: 1.21M]
  ------------------
  182|  2.66M|            ++i;
  183|  2.66M|        }
  184|  1.21M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   129k|    {
 6193|   129k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   129k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   129k|            auto rd = make_reader<T, char_type>();
 6198|   129k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   129k|                return unexpected(e);
 6200|   129k|            }
 6201|       |
 6202|   129k|            return impl(rd, range, value);
 6203|   129k|        }
 6204|   129k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   129k|            auto rd = make_reader<T, char_type>();
 6206|   129k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   129k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 129k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   129k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   129k|                return impl(rd, range, value);
 6213|   129k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   129k|        else {
 6221|   129k|            SCN_EXPECT(false);
 6222|   129k|            SCN_UNREACHABLE;
 6223|   129k|        }
 6224|   129k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   805k|    {
 3040|   805k|        reader_error_handler eh{};
 3041|   805k|        get_derived().check_specs_impl(specs, eh);
 3042|   805k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   805k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 805k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   805k|        return {};
 3046|   805k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   805k|    {
 3051|   805k|        return static_cast<Derived&>(*this);
 3052|   805k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   805k|    {
 4145|   805k|        detail::check_float_type_specs(specs, eh);
 4146|   805k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   129k|    {
 6124|   129k|        const bool need_skipped_width =
 6125|   129k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 129k]
  |  Branch (6125:33): [True: 0, False: 129k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   129k|        auto it = rng.begin();
 6129|   129k|        std::ptrdiff_t prefix_width = 0;
 6130|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 129k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   129k|        else {
 6138|   129k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 822, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    822|    }                                                  \
  |  |  |  | 3671|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   129k|            std::tie(it, prefix_width) = prefix_result;
 6140|   129k|        }
 6141|   129k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   129k|        std::ptrdiff_t value_width = 0;
 6145|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 129k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   129k|        else {
 6161|   129k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 45.7k, False: 83.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  45.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  45.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  45.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  45.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  45.7k|    }                                                  \
  |  | 3671|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  83.3k|                                             specs, value, loc));
 6163|       |
 6164|  83.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 83.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  83.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  83.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  83.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 83.0k, False: 344]
  ------------------
 6174|  83.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  83.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  83.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  83.0k|                                 value_width));
 6178|  83.0k|            std::tie(it, postfix_width) = postfix_result;
 6179|  83.0k|        }
 6180|       |
 6181|  83.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  83.3k|                                                 value_width, postfix_width);
 6183|  83.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 83.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  83.3k|        return it;
 6188|  83.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.61M|    {
 3035|  1.61M|        return true;
 3036|  1.61M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   800k|    {
 4217|   800k|        unsigned options{};
 4218|   800k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 188k, False: 611k]
  ------------------
 4219|   188k|            options |= float_reader_base::allow_thsep;
 4220|   188k|        }
 4221|       |
 4222|   800k|        SCN_GCC_COMPAT_PUSH
 4223|   800k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   800k|        switch (specs.type) {
 4226|   168k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 168k, False: 632k]
  ------------------
 4227|   168k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  56.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 56.8k, False: 743k]
  ------------------
 4230|  56.8k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   201k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 201k, False: 598k]
  ------------------
 4233|   201k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   185k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 185k, False: 615k]
  ------------------
 4236|   185k|                return options | float_reader_base::allow_scientific |
 4237|   185k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   188k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 188k, False: 611k]
  ------------------
 4240|   188k|                return options | float_reader_base::allow_scientific |
 4241|   188k|                       float_reader_base::allow_fixed |
 4242|   188k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 800k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   800k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   800k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   800k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   800k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.08M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.16M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   261k|    {
 3691|   261k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   261k|        const std::ptrdiff_t sign_len =
 3694|   261k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.05k, False: 260k]
  ------------------
 3695|       |
 3696|   261k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34.0k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  34.0k|    }                                                  \
  |  |  |  | 3671|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   227k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   261k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   825k|    {
 4057|   825k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 825k, False: 0]
  ------------------
 4058|   825k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 825k, False: 0]
  ------------------
 4059|   825k|            return;
 4060|   825k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   861k|    {
 1587|   861k|        return m_storage.has_value();
 1588|   861k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   504k|    {
 1592|   504k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   504k|        return *m_storage;
 1594|   504k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   129k|    {
 4170|   129k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   129k|#if !SCN_DISABLE_LOCALE
 4173|   129k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 29.3k, False: 99.7k]
  ------------------
 4174|  29.3k|            return read_impl<Range>(
 4175|  29.3k|                range, rd,
 4176|  29.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  29.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  29.3k|                },
 4179|  29.3k|                value, loc);
 4180|  29.3k|        }
 4181|  99.7k|#endif
 4182|       |
 4183|  99.7k|        return read_impl<Range>(
 4184|  99.7k|            range, rd,
 4185|  99.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  99.7k|            },
 4188|  99.7k|            value);
 4189|   129k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   173k|    {
 4206|   173k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   173k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.7k, False: 115k]
  |  |  ------------------
  ------------------
 4208|  57.7k|            return unexpected(r.error());
 4209|  57.7k|        }
 4210|       |
 4211|   115k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.66k|    }                                                  \
  |  |  |  | 3671|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   113k|        return ranges::next(range.begin(), n);
 4213|   115k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   541k|    {
  763|   541k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   541k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  29.3k|    {
  754|  29.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  29.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.3k|              cvref<T> obj = *get<T>(fn);
  745|  29.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.3k|              }
  748|  29.3k|              else {
  749|  29.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.3k|              }
  751|  29.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.3k|    {
  684|  29.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.3k|            return static_cast<T*>(s.m_cp);
  686|  29.3k|        }
  687|  29.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.3k|            return static_cast<T*>(s.m_p);
  689|  29.3k|        }
  690|  29.3k|        else {
  691|  29.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.3k|        }
  693|  29.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  29.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  29.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  29.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  94.3k|    {
 3679|  94.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  94.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  94.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 94.3k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  94.3k|        return read_source_impl(range);
 3685|  94.3k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   541k|    {
 3705|   541k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   541k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   541k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   541k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 541k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   541k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   541k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   541k|        auto it = sign_result.first;
 3708|   541k|        m_sign = sign_result.second;
 3709|       |
 3710|   541k|        auto digits_begin = it;
 3711|   541k|        auto r = ranges::subrange{it, range.end()};
 3712|   541k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   541k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   541k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   541k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   541k|                SCN_TRY_ASSIGN(
 3717|   541k|                    it,
 3718|   541k|                    do_read_source_impl(
 3719|   541k|                        r,
 3720|   541k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   541k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   541k|            }
 3723|   541k|            else {
 3724|   541k|                auto cb = [&](const auto& rr)
 3725|   541k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   541k|                    auto res = read_all(rr);
 3727|   541k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   541k|                        return unexpected_scan_error(
 3729|   541k|                            scan_error::invalid_scanned_value,
 3730|   541k|                            "Invalid float value");
 3731|   541k|                    }
 3732|   541k|                    return res;
 3733|   541k|                };
 3734|   541k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   541k|            }
 3736|   541k|        }
 3737|   541k|        else {
 3738|   541k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   541k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   541k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 175k, False: 365k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   175k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   175k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   175k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   175k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   175k|    }                                                  \
  |  | 3671|   541k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   365k|                it,
 3740|   365k|                do_read_source_impl(
 3741|   365k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   365k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   365k|        }
 3744|       |
 3745|   365k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   365k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 365k, False: 0]
  |  Branch (3747:48): [True: 365k, False: 0]
  ------------------
 3748|   365k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 365k, False: 0]
  ------------------
 3749|   365k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 365k, False: 0]
  ------------------
 3750|   365k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   365k|        }
 3752|       |
 3753|   365k|        handle_separators();
 3754|       |
 3755|   365k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 365k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   365k|        return it;
 3768|   365k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   541k|    {
 4000|   541k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   541k|        const bool allowed_nonhex =
 4002|   541k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   541k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   541k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 541k, False: 0]
  |  Branch (4005:45): [True: 0, False: 541k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   541k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 541k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   541k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 541k, False: 0]
  |  Branch (4014:45): [True: 0, False: 541k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   541k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 541k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   541k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 336k, False: 204k]
  |  Branch (4021:28): [True: 100k, False: 235k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   100k|            auto it = range.begin();
 4025|       |
 4026|   100k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 204, False: 100k]
  ------------------
 4027|    204|                m_kind = float_kind::hex_with_prefix;
 4028|    204|                it = *r;
 4029|    204|            }
 4030|   100k|            else {
 4031|   100k|                m_kind = float_kind::hex_without_prefix;
 4032|   100k|            }
 4033|       |
 4034|   100k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   100k|        }
 4036|   440k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 204k, False: 235k]
  |  Branch (4036:29): [True: 204k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   204k|            m_kind = float_kind::generic;
 4040|   204k|            return read_regular_float(range);
 4041|   204k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   235k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 485, False: 235k]
  |  |  ------------------
  ------------------
 4047|    485|            m_kind = float_kind::hex_with_prefix;
 4048|    485|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    485|        }
 4050|       |
 4051|   235k|        m_kind = float_kind::generic;
 4052|   235k|        return read_regular(range);
 4053|   235k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   541k|    {
 3811|   541k|        auto it = range.begin();
 3812|   541k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 541k, False: 0]
  ------------------
 3813|   541k|            return unexpected(r.error());
 3814|   541k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   541k|    {
 3834|   541k|        auto it = range.begin();
 3835|   541k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 541k, False: 0]
  ------------------
 3836|   541k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   541k|                scan_error::invalid_scanned_value,
 3838|   541k|                "Invalid floating-point NaN value"));
 3839|   541k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   336k|    {
 3804|   336k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   336k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   101k|    {
 3904|   101k|        auto it = range.begin();
 3905|       |
 3906|   101k|        std::ptrdiff_t digits_count = 0;
 3907|   101k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   101k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.2k, False: 73.8k]
  |  |  ------------------
  ------------------
 3909|  27.2k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  27.2k|                scan_error::invalid_scanned_value,
 3911|  27.2k|                "Invalid hexadecimal floating-point value"));
 3912|  27.2k|        }
 3913|  73.8k|        else {
 3914|  73.8k|            digits_count += ranges::distance(it, *r);
 3915|  73.8k|            it = *r;
 3916|  73.8k|        }
 3917|       |
 3918|  73.8k|        m_integral_part_length = digits_count;
 3919|  73.8k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 306, False: 73.5k]
  ------------------
 3920|  73.8k|                                             m_locale_options.decimal_point)) {
 3921|    306|            it = *r;
 3922|    306|        }
 3923|       |
 3924|  73.8k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 240, False: 73.6k]
  ------------------
 3925|  73.8k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|    240|            digits_count += ranges::distance(it, *r);
 3927|    240|            it = *r;
 3928|    240|        }
 3929|       |
 3930|  73.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  73.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 73.8k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  73.8k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  73.8k|        return it;
 3938|  73.8k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   175k|    {
 3789|   175k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 175k]
  |  |  |  Branch (859:45): [True: 0, False: 175k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   175k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   175k|        return read_while1_code_unit(
 3798|   175k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   175k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   175k|    {
  754|   175k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   268k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   268k|              cvref<T> obj = *get<T>(fn);
  745|   268k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   268k|                  obj(static_cast<decltype(args)>(args)...);
  747|   268k|              }
  748|   268k|              else {
  749|   268k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   268k|              }
  751|   268k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   268k|    {
  684|   268k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   268k|            return static_cast<T*>(s.m_cp);
  686|   268k|        }
  687|   268k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   268k|            return static_cast<T*>(s.m_p);
  689|   268k|        }
  690|   268k|        else {
  691|   268k|            return reinterpret_cast<T*>(s.m_fp);
  692|   268k|        }
  693|   268k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   268k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   175k|        {
  662|   175k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   312k|    {
 3876|   312k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 10.4k, False: 302k]
  ------------------
 3877|  10.4k|            auto beg_exp_it = range.begin();
 3878|  10.4k|            auto it = *r;
 3879|       |
 3880|  10.4k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 10.3k, False: 70]
  ------------------
 3881|  10.4k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  10.3k|                it = r_sign->first;
 3883|  10.3k|            }
 3884|       |
 3885|  10.4k|            if (auto r_exp = read_while1_code_unit(
 3886|  10.4k|                    ranges::subrange{it, range.end()},
 3887|  10.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  10.4k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.22k, False: 9.22k]
  |  |  ------------------
  ------------------
 3889|  1.22k|                it = beg_exp_it;
 3890|  1.22k|            }
 3891|  9.22k|            else {
 3892|  9.22k|                it = *r_exp;
 3893|  9.22k|            }
 3894|       |
 3895|  10.4k|            return it;
 3896|  10.4k|        }
 3897|   302k|        return range.begin();
 3898|   312k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  10.4k|    {
  754|  10.4k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  35.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.3k|              cvref<T> obj = *get<T>(fn);
  745|  35.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.3k|              }
  748|  35.3k|              else {
  749|  35.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.3k|              }
  751|  35.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  35.3k|    {
  684|  35.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.3k|            return static_cast<T*>(s.m_cp);
  686|  35.3k|        }
  687|  35.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.3k|            return static_cast<T*>(s.m_p);
  689|  35.3k|        }
  690|  35.3k|        else {
  691|  35.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.3k|        }
  693|  35.3k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  35.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  10.4k|        {
  662|  10.4k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   440k|    {
 3944|   440k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   440k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 356k, False: 84.0k]
  |  Branch (3945:50): [True: 28.4k, False: 327k]
  ------------------
 3946|       |
 3947|   440k|        auto it = ranges::begin(range);
 3948|   440k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   440k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   440k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144k, False: 295k]
  |  |  ------------------
  ------------------
 3952|   144k|            return r.transform_error(
 3953|   144k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   144k|                                              "Invalid floating-point value"));
 3955|   144k|        }
 3956|   295k|        else {
 3957|   295k|            digits_count += ranges::distance(it, *r);
 3958|   295k|            it = *r;
 3959|   295k|        }
 3960|       |
 3961|   295k|        m_integral_part_length = digits_count;
 3962|   295k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 1.34k, False: 294k]
  ------------------
 3963|   295k|                                             m_locale_options.decimal_point)) {
 3964|  1.34k|            it = *r;
 3965|  1.34k|        }
 3966|       |
 3967|   295k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 1.03k, False: 294k]
  ------------------
 3968|   295k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  1.03k|            digits_count += ranges::distance(it, *r);
 3970|  1.03k|            it = *r;
 3971|  1.03k|        }
 3972|       |
 3973|   295k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   295k|        auto beg_exp_it = it;
 3979|   295k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 239k, False: 56.4k]
  ------------------
 3980|   239k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   239k|        }
 3982|   295k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 4.20k, False: 291k]
  |  Branch (3982:29): [True: 3.43k, False: 762]
  ------------------
 3983|  3.43k|            return unexpected_scan_error(
 3984|  3.43k|                scan_error::invalid_scanned_value,
 3985|  3.43k|                "No exponent given to scientific float");
 3986|  3.43k|        }
 3987|       |
 3988|   292k|        m_kind =
 3989|   292k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 282k, False: 9.12k]
  ------------------
 3990|       |
 3991|   292k|        return it;
 3992|   295k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   735k|    {
 3774|   735k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 735k]
  |  |  |  Branch (859:45): [True: 0, False: 735k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   735k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   735k|        return read_while1_code_unit(
 3783|   735k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   735k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   735k|    {
  754|   735k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.07M|              cvref<T> obj = *get<T>(fn);
  745|  1.07M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.07M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.07M|              }
  748|  1.07M|              else {
  749|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.07M|              }
  751|  1.07M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.07M|    {
  684|  1.07M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.07M|            return static_cast<T*>(s.m_cp);
  686|  1.07M|        }
  687|  1.07M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.07M|            return static_cast<T*>(s.m_p);
  689|  1.07M|        }
  690|  1.07M|        else {
  691|  1.07M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.07M|        }
  693|  1.07M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|  1.07M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   735k|        {
  662|   735k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   365k|    {
 1577|   365k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   365k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  29.3k|        {
  662|  29.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  99.7k|    {
  754|  99.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  99.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.7k|              cvref<T> obj = *get<T>(fn);
  745|  99.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  99.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.7k|              }
  748|  99.7k|              else {
  749|  99.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.7k|              }
  751|  99.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  99.7k|    {
  684|  99.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  99.7k|            return static_cast<T*>(s.m_cp);
  686|  99.7k|        }
  687|  99.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  99.7k|            return static_cast<T*>(s.m_p);
  689|  99.7k|        }
  690|  99.7k|        else {
  691|  99.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  99.7k|        }
  693|  99.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  99.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  99.7k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   447k|    {
 3665|   447k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   447k|        return read_source_impl(range);
 3671|   447k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  99.7k|        {
  662|  99.7k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   129k|    {
 4170|   129k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   129k|#if !SCN_DISABLE_LOCALE
 4173|   129k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 29.3k, False: 99.7k]
  ------------------
 4174|  29.3k|            return read_impl<Range>(
 4175|  29.3k|                range, rd,
 4176|  29.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  29.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  29.3k|                },
 4179|  29.3k|                value, loc);
 4180|  29.3k|        }
 4181|  99.7k|#endif
 4182|       |
 4183|  99.7k|        return read_impl<Range>(
 4184|  99.7k|            range, rd,
 4185|  99.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  99.7k|            },
 4188|  99.7k|            value);
 4189|   129k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   173k|    {
 4206|   173k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   173k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.1k, False: 146k]
  |  |  ------------------
  ------------------
 4208|  27.1k|            return unexpected(r.error());
 4209|  27.1k|        }
 4210|       |
 4211|   146k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.3k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  32.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  32.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  32.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  32.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  32.3k|    }                                                  \
  |  |  |  | 3671|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   113k|        return ranges::next(range.begin(), n);
 4213|   146k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   541k|    {
  763|   541k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   541k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  29.3k|    {
  754|  29.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  29.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.3k|              cvref<T> obj = *get<T>(fn);
  745|  29.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.3k|              }
  748|  29.3k|              else {
  749|  29.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.3k|              }
  751|  29.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.3k|    {
  684|  29.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.3k|            return static_cast<T*>(s.m_cp);
  686|  29.3k|        }
  687|  29.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.3k|            return static_cast<T*>(s.m_p);
  689|  29.3k|        }
  690|  29.3k|        else {
  691|  29.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.3k|        }
  693|  29.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  29.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  29.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  29.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  94.4k|    {
 3679|  94.4k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  94.4k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  94.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 94.4k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  94.4k|        return read_source_impl(range);
 3685|  94.4k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   541k|    {
 3705|   541k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   541k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   541k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   541k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 541k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   541k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   541k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   541k|        auto it = sign_result.first;
 3708|   541k|        m_sign = sign_result.second;
 3709|       |
 3710|   541k|        auto digits_begin = it;
 3711|   541k|        auto r = ranges::subrange{it, range.end()};
 3712|   541k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   541k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   541k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 541k]
  |  |  |  Branch (859:45): [True: 0, False: 541k]
  |  |  |  Branch (859:45): [True: 0, False: 541k]
  |  |  ------------------
  ------------------
 3715|   541k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   541k|            else {
 3724|   541k|                auto cb = [&](const auto& rr)
 3725|   541k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   541k|                    auto res = read_all(rr);
 3727|   541k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   541k|                        return unexpected_scan_error(
 3729|   541k|                            scan_error::invalid_scanned_value,
 3730|   541k|                            "Invalid float value");
 3731|   541k|                    }
 3732|   541k|                    return res;
 3733|   541k|                };
 3734|   541k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   541k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   541k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 82.0k, False: 459k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  82.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  82.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  82.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  82.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  82.0k|    }                                                  \
  |  | 3671|   541k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   459k|            }
 3736|   541k|        }
 3737|   459k|        else {
 3738|   459k|            SCN_TRY_ASSIGN(
 3739|   459k|                it,
 3740|   459k|                do_read_source_impl(
 3741|   459k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   459k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   459k|        }
 3744|       |
 3745|   459k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   459k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   459k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   459k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 459k, False: 0]
  |  Branch (3747:48): [True: 459k, False: 0]
  ------------------
 3748|   459k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 459k, False: 0]
  ------------------
 3749|   459k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 459k, False: 0]
  ------------------
 3750|   459k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   459k|        }
 3752|       |
 3753|   459k|        handle_separators();
 3754|       |
 3755|   459k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 459k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   459k|        return it;
 3768|   459k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   541k|    {
 3811|   541k|        auto it = range.begin();
 3812|   541k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 541k, False: 0]
  ------------------
 3813|   541k|            return unexpected(r.error());
 3814|   541k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   541k|    {
 3834|   541k|        auto it = range.begin();
 3835|   541k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 541k, False: 0]
  ------------------
 3836|   541k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   541k|                scan_error::invalid_scanned_value,
 3838|   541k|                "Invalid floating-point NaN value"));
 3839|   541k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   336k|    {
 3804|   336k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   336k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   335k|{
 1996|   335k|    auto it = read_while_code_unit(range, pred);
 1997|   335k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 204k, False: 130k]
  ------------------
 1998|   204k|        return unexpected(parse_error::error);
 1999|   204k|    }
 2000|   130k|    return it;
 2001|   335k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  70.0k|    {
 3876|  70.0k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 3.62k, False: 66.4k]
  ------------------
 3877|  3.62k|            auto beg_exp_it = range.begin();
 3878|  3.62k|            auto it = *r;
 3879|       |
 3880|  3.62k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 3.59k, False: 24]
  ------------------
 3881|  3.62k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  3.59k|                it = r_sign->first;
 3883|  3.59k|            }
 3884|       |
 3885|  3.62k|            if (auto r_exp = read_while1_code_unit(
 3886|  3.62k|                    ranges::subrange{it, range.end()},
 3887|  3.62k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  3.62k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  3.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 476, False: 3.14k]
  |  |  ------------------
  ------------------
 3889|    476|                it = beg_exp_it;
 3890|    476|            }
 3891|  3.14k|            else {
 3892|  3.14k|                it = *r_exp;
 3893|  3.14k|            }
 3894|       |
 3895|  3.62k|            return it;
 3896|  3.62k|        }
 3897|  66.4k|        return range.begin();
 3898|  70.0k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  3.62k|    {
  754|  3.62k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  12.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.1k|              cvref<T> obj = *get<T>(fn);
  745|  12.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.1k|              }
  748|  12.1k|              else {
  749|  12.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.1k|              }
  751|  12.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  12.1k|    {
  684|  12.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.1k|            return static_cast<T*>(s.m_cp);
  686|  12.1k|        }
  687|  12.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.1k|            return static_cast<T*>(s.m_p);
  689|  12.1k|        }
  690|  12.1k|        else {
  691|  12.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.1k|        }
  693|  12.1k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  12.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  3.62k|        {
  662|  3.62k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   204k|    {
 3944|   204k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   204k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 120k, False: 84.0k]
  |  Branch (3945:50): [True: 28.4k, False: 92.5k]
  ------------------
 3946|       |
 3947|   204k|        auto it = ranges::begin(range);
 3948|   204k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   204k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   204k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.4k, False: 126k]
  |  |  ------------------
  ------------------
 3952|  78.4k|            return r.transform_error(
 3953|  78.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  78.4k|                                              "Invalid floating-point value"));
 3955|  78.4k|        }
 3956|   126k|        else {
 3957|   126k|            digits_count += ranges::distance(it, *r);
 3958|   126k|            it = *r;
 3959|   126k|        }
 3960|       |
 3961|   126k|        m_integral_part_length = digits_count;
 3962|   126k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 646, False: 125k]
  ------------------
 3963|   126k|                                             m_locale_options.decimal_point)) {
 3964|    646|            it = *r;
 3965|    646|        }
 3966|       |
 3967|   126k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 484, False: 126k]
  ------------------
 3968|   126k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    484|            digits_count += ranges::distance(it, *r);
 3970|    484|            it = *r;
 3971|    484|        }
 3972|       |
 3973|   126k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   126k|        auto beg_exp_it = it;
 3979|   126k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 70.0k, False: 56.4k]
  ------------------
 3980|  70.0k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  70.0k|        }
 3982|   126k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 4.20k, False: 122k]
  |  Branch (3982:29): [True: 3.43k, False: 762]
  ------------------
 3983|  3.43k|            return unexpected_scan_error(
 3984|  3.43k|                scan_error::invalid_scanned_value,
 3985|  3.43k|                "No exponent given to scientific float");
 3986|  3.43k|        }
 3987|       |
 3988|   123k|        m_kind =
 3989|   123k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 119k, False: 3.14k]
  ------------------
 3990|       |
 3991|   123k|        return it;
 3992|   126k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   331k|    {
 3774|   331k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 331k]
  |  |  |  Branch (859:45): [True: 0, False: 331k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   331k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   331k|        return read_while1_code_unit(
 3783|   331k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   331k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   331k|    {
  754|   331k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   478k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   478k|              cvref<T> obj = *get<T>(fn);
  745|   478k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   478k|                  obj(static_cast<decltype(args)>(args)...);
  747|   478k|              }
  748|   478k|              else {
  749|   478k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   478k|              }
  751|   478k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   478k|    {
  684|   478k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   478k|            return static_cast<T*>(s.m_cp);
  686|   478k|        }
  687|   478k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   478k|            return static_cast<T*>(s.m_p);
  689|   478k|        }
  690|   478k|        else {
  691|   478k|            return reinterpret_cast<T*>(s.m_fp);
  692|   478k|        }
  693|   478k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   478k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   331k|        {
  662|   331k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   541k|    {
 4000|   541k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   541k|        const bool allowed_nonhex =
 4002|   541k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   541k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   541k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 541k, False: 0]
  |  Branch (4005:45): [True: 0, False: 541k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   541k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 541k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   541k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 541k, False: 0]
  |  Branch (4014:45): [True: 0, False: 541k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   541k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 541k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   541k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 336k, False: 204k]
  |  Branch (4021:28): [True: 100k, False: 236k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   100k|            auto it = range.begin();
 4025|       |
 4026|   100k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 204, False: 100k]
  ------------------
 4027|    204|                m_kind = float_kind::hex_with_prefix;
 4028|    204|                it = *r;
 4029|    204|            }
 4030|   100k|            else {
 4031|   100k|                m_kind = float_kind::hex_without_prefix;
 4032|   100k|            }
 4033|       |
 4034|   100k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   100k|        }
 4036|   441k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 204k, False: 236k]
  |  Branch (4036:29): [True: 204k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   204k|            m_kind = float_kind::generic;
 4040|   204k|            return read_regular_float(range);
 4041|   204k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   236k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 485, False: 235k]
  |  |  ------------------
  ------------------
 4047|    485|            m_kind = float_kind::hex_with_prefix;
 4048|    485|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    485|        }
 4050|       |
 4051|   235k|        m_kind = float_kind::generic;
 4052|   235k|        return read_regular(range);
 4053|   236k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   336k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   336k|                    auto res = read_all(rr);
 3727|   336k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151, False: 336k]
  |  |  ------------------
  ------------------
 3728|    151|                        return unexpected_scan_error(
 3729|    151|                            scan_error::invalid_scanned_value,
 3730|    151|                            "Invalid float value");
 3731|    151|                    }
 3732|   336k|                    return res;
 3733|   336k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   336k|{
 1839|   336k|    return ranges::next(range.begin(), range.end());
 1840|   336k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   336k|    {
  313|   336k|        ranges::advance(x, bound);
  314|   336k|        return x;
  315|   336k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   336k|    {
  275|   336k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   336k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   459k|    {
 1577|   459k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   459k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   459k|    {
 1621|   459k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   459k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   459k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   459k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   459k|            m_storage.reset();
 1627|   459k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   459k|        }
 1629|   459k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   459k|                                          std::basic_string<CharT>>) {
 1631|   459k|            m_storage.emplace(SCN_FWD(range));
 1632|   459k|            m_view = string_view_type{*m_storage};
 1633|   459k|        }
 1634|   459k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   459k|                                          typename detail::basic_scan_buffer<
 1636|   459k|                                              value_t>::forward_iterator> &&
 1637|   459k|                           ranges::common_range<Range>) {
 1638|   459k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   459k|            auto end_seg = range.end().contiguous_segment();
 1640|   459k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   459k|                             detail::to_address(end_seg.end()))) {
 1642|   459k|                auto& str = m_storage.emplace();
 1643|   459k|                str.reserve(range.end().position() - range.begin().position());
 1644|   459k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   459k|                m_view = string_view_type{str};
 1646|   459k|                return;
 1647|   459k|            }
 1648|       |
 1649|   459k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   459k|                                                            end_seg.data());
 1651|   459k|            m_storage.reset();
 1652|   459k|        }
 1653|   459k|        else {
 1654|   459k|            auto& str = m_storage.emplace();
 1655|   459k|            if constexpr (ranges::sized_range<Range>) {
 1656|   459k|                str.reserve(range.size());
 1657|   459k|            }
 1658|   459k|            if constexpr (ranges::common_range<Range>) {
 1659|   459k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   459k|                          std::back_inserter(str));
 1661|   459k|            }
 1662|   459k|            else {
 1663|   459k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   459k|                     ++it) {
 1665|   459k|                    str.push_back(*it);
 1666|   459k|                }
 1667|   459k|            }
 1668|   459k|            m_view = string_view_type{str};
 1669|   459k|        }
 1670|   459k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  29.3k|        {
  662|  29.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  99.7k|    {
  754|  99.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  99.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.7k|              cvref<T> obj = *get<T>(fn);
  745|  99.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  99.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.7k|              }
  748|  99.7k|              else {
  749|  99.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.7k|              }
  751|  99.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  99.7k|    {
  684|  99.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  99.7k|            return static_cast<T*>(s.m_cp);
  686|  99.7k|        }
  687|  99.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  99.7k|            return static_cast<T*>(s.m_p);
  689|  99.7k|        }
  690|  99.7k|        else {
  691|  99.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  99.7k|        }
  693|  99.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  99.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  99.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  99.7k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   447k|    {
 3665|   447k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   447k|        return read_source_impl(range);
 3671|   447k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  99.7k|        {
  662|  99.7k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   135k|    {
 6193|   135k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   135k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   135k|            auto rd = make_reader<T, char_type>();
 6198|   135k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   135k|                return unexpected(e);
 6200|   135k|            }
 6201|       |
 6202|   135k|            return impl(rd, range, value);
 6203|   135k|        }
 6204|   135k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   135k|            auto rd = make_reader<T, char_type>();
 6206|   135k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   135k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 135k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   135k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   135k|                return impl(rd, range, value);
 6213|   135k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   135k|        else {
 6221|   135k|            SCN_EXPECT(false);
 6222|   135k|            SCN_UNREACHABLE;
 6223|   135k|        }
 6224|   135k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   135k|    {
 6124|   135k|        const bool need_skipped_width =
 6125|   135k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 135k]
  |  Branch (6125:33): [True: 0, False: 135k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   135k|        auto it = rng.begin();
 6129|   135k|        std::ptrdiff_t prefix_width = 0;
 6130|   135k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 135k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   135k|        else {
 6138|   135k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 882, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    882|    }                                                  \
  |  |  |  | 3671|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   134k|            std::tie(it, prefix_width) = prefix_result;
 6140|   134k|        }
 6141|   134k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   134k|        std::ptrdiff_t value_width = 0;
 6145|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 134k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   134k|        else {
 6161|   134k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 45.6k, False: 88.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  45.6k|    }                                                  \
  |  | 3671|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  88.6k|                                             specs, value, loc));
 6163|       |
 6164|  88.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 88.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  88.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  88.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  88.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 88.2k, False: 374]
  ------------------
 6174|  88.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  88.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  88.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  88.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 88.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  88.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  88.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  88.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  88.2k|                                 value_width));
 6178|  88.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  88.2k|        }
 6180|       |
 6181|  88.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  88.6k|                                                 value_width, postfix_width);
 6183|  88.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 88.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  88.6k|        return it;
 6188|  88.6k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   278k|    {
 3691|   278k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   278k|        const std::ptrdiff_t sign_len =
 3694|   278k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.11k, False: 277k]
  ------------------
 3695|       |
 3696|   278k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.8k, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  32.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  32.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  32.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  32.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  32.8k|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   245k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   278k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   134k|    {
 4170|   134k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   134k|#if !SCN_DISABLE_LOCALE
 4173|   134k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 31.9k, False: 102k]
  ------------------
 4174|  31.9k|            return read_impl<Range>(
 4175|  31.9k|                range, rd,
 4176|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  31.9k|                },
 4179|  31.9k|                value, loc);
 4180|  31.9k|        }
 4181|   102k|#endif
 4182|       |
 4183|   102k|        return read_impl<Range>(
 4184|   102k|            range, rd,
 4185|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   102k|                return r.read_source(SCN_FWD(args)...);
 4187|   102k|            },
 4188|   102k|            value);
 4189|   134k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   182k|    {
 4206|   182k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   182k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.5k, False: 123k]
  |  |  ------------------
  ------------------
 4208|  58.5k|            return unexpected(r.error());
 4209|  58.5k|        }
 4210|       |
 4211|   123k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 799, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    799|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    799|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    799|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    799|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    799|    }                                                  \
  |  |  |  | 3671|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   122k|        return ranges::next(range.begin(), n);
 4213|   123k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  31.9k|    {
  754|  31.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|  31.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  31.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.9k|              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.9k|    {
  684|  31.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  31.9k|            return static_cast<T*>(s.m_cp);
  686|  31.9k|        }
  687|  31.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  31.9k|            return static_cast<T*>(s.m_p);
  689|  31.9k|        }
  690|  31.9k|        else {
  691|  31.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  31.9k|        }
  693|  31.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  31.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  31.9k|        {
  662|  31.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   102k|    {
  684|   102k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   102k|            return static_cast<T*>(s.m_cp);
  686|   102k|        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   102k|            return static_cast<T*>(s.m_p);
  689|   102k|        }
  690|   102k|        else {
  691|   102k|            return reinterpret_cast<T*>(s.m_fp);
  692|   102k|        }
  693|   102k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   102k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   134k|    {
 4170|   134k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   134k|#if !SCN_DISABLE_LOCALE
 4173|   134k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 31.9k, False: 102k]
  ------------------
 4174|  31.9k|            return read_impl<Range>(
 4175|  31.9k|                range, rd,
 4176|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  31.9k|                },
 4179|  31.9k|                value, loc);
 4180|  31.9k|        }
 4181|   102k|#endif
 4182|       |
 4183|   102k|        return read_impl<Range>(
 4184|   102k|            range, rd,
 4185|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   102k|                return r.read_source(SCN_FWD(args)...);
 4187|   102k|            },
 4188|   102k|            value);
 4189|   134k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   182k|    {
 4206|   182k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   182k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.3k, False: 155k]
  |  |  ------------------
  ------------------
 4208|  27.3k|            return unexpected(r.error());
 4209|  27.3k|        }
 4210|       |
 4211|   155k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.0k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  32.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  32.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  32.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  32.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  32.0k|    }                                                  \
  |  |  |  | 3671|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   123k|        return ranges::next(range.begin(), n);
 4213|   155k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  31.9k|    {
  754|  31.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|  31.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  31.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.9k|              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.9k|    {
  684|  31.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  31.9k|            return static_cast<T*>(s.m_cp);
  686|  31.9k|        }
  687|  31.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  31.9k|            return static_cast<T*>(s.m_p);
  689|  31.9k|        }
  690|  31.9k|        else {
  691|  31.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  31.9k|        }
  693|  31.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  31.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  31.9k|        {
  662|  31.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   102k|    {
  684|   102k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   102k|            return static_cast<T*>(s.m_cp);
  686|   102k|        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   102k|            return static_cast<T*>(s.m_p);
  689|   102k|        }
  690|   102k|        else {
  691|   102k|            return reinterpret_cast<T*>(s.m_fp);
  692|   102k|        }
  693|   102k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   102k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   137k|    {
 6193|   137k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   137k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   137k|            auto rd = make_reader<T, char_type>();
 6198|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   137k|                return unexpected(e);
 6200|   137k|            }
 6201|       |
 6202|   137k|            return impl(rd, range, value);
 6203|   137k|        }
 6204|   137k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   137k|            auto rd = make_reader<T, char_type>();
 6206|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   137k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 137k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   137k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   137k|                return impl(rd, range, value);
 6213|   137k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   137k|        else {
 6221|   137k|            SCN_EXPECT(false);
 6222|   137k|            SCN_UNREACHABLE;
 6223|   137k|        }
 6224|   137k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   137k|    {
 6124|   137k|        const bool need_skipped_width =
 6125|   137k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 137k]
  |  Branch (6125:33): [True: 0, False: 137k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   137k|        auto it = rng.begin();
 6129|   137k|        std::ptrdiff_t prefix_width = 0;
 6130|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 137k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   137k|        else {
 6138|   137k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 910, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    910|    }                                                  \
  |  |  |  | 3671|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   136k|            std::tie(it, prefix_width) = prefix_result;
 6140|   136k|        }
 6141|   136k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   136k|        std::ptrdiff_t value_width = 0;
 6145|   136k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 136k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   136k|        else {
 6161|   136k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 45.6k, False: 90.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  45.6k|    }                                                  \
  |  | 3671|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  90.8k|                                             specs, value, loc));
 6163|       |
 6164|  90.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 90.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  90.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  90.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  90.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 90.4k, False: 388]
  ------------------
 6174|  90.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  90.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  90.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  90.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  90.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  90.4k|                                 value_width));
 6178|  90.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  90.4k|        }
 6180|       |
 6181|  90.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  90.8k|                                                 value_width, postfix_width);
 6183|  90.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 90.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  90.8k|        return it;
 6188|  90.8k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   285k|    {
 3691|   285k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   285k|        const std::ptrdiff_t sign_len =
 3694|   285k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.13k, False: 284k]
  ------------------
 3695|       |
 3696|   285k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   285k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   285k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   285k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.8k, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  31.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  31.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  31.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  31.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  31.8k|    }                                                  \
  |  |  |  | 3671|   285k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   253k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   285k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   136k|    {
 4170|   136k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   136k|#if !SCN_DISABLE_LOCALE
 4173|   136k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 33.0k, False: 103k]
  ------------------
 4174|  33.0k|            return read_impl<Range>(
 4175|  33.0k|                range, rd,
 4176|  33.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  33.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  33.0k|                },
 4179|  33.0k|                value, loc);
 4180|  33.0k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   136k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   186k|    {
 4206|   186k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   186k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.2k, False: 126k]
  |  |  ------------------
  ------------------
 4208|  59.2k|            return unexpected(r.error());
 4209|  59.2k|        }
 4210|       |
 4211|   126k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 94, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     94|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     94|    }                                                  \
  |  |  |  | 3671|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   126k|        return ranges::next(range.begin(), n);
 4213|   126k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  33.0k|    {
  754|  33.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  33.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.0k|              cvref<T> obj = *get<T>(fn);
  745|  33.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.0k|              }
  748|  33.0k|              else {
  749|  33.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.0k|              }
  751|  33.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.0k|    {
  684|  33.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.0k|            return static_cast<T*>(s.m_cp);
  686|  33.0k|        }
  687|  33.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.0k|            return static_cast<T*>(s.m_p);
  689|  33.0k|        }
  690|  33.0k|        else {
  691|  33.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.0k|        }
  693|  33.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  33.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  33.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  33.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  33.0k|        {
  662|  33.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   136k|    {
 4170|   136k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   136k|#if !SCN_DISABLE_LOCALE
 4173|   136k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 33.0k, False: 103k]
  ------------------
 4174|  33.0k|            return read_impl<Range>(
 4175|  33.0k|                range, rd,
 4176|  33.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  33.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  33.0k|                },
 4179|  33.0k|                value, loc);
 4180|  33.0k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   136k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   186k|    {
 4206|   186k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   186k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.5k, False: 158k]
  |  |  ------------------
  ------------------
 4208|  27.5k|            return unexpected(r.error());
 4209|  27.5k|        }
 4210|       |
 4211|   158k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.7k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  31.7k|    }                                                  \
  |  |  |  | 3671|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   126k|        return ranges::next(range.begin(), n);
 4213|   158k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  33.0k|    {
  754|  33.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  33.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.0k|              cvref<T> obj = *get<T>(fn);
  745|  33.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.0k|              }
  748|  33.0k|              else {
  749|  33.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.0k|              }
  751|  33.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.0k|    {
  684|  33.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.0k|            return static_cast<T*>(s.m_cp);
  686|  33.0k|        }
  687|  33.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.0k|            return static_cast<T*>(s.m_p);
  689|  33.0k|        }
  690|  33.0k|        else {
  691|  33.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.0k|        }
  693|  33.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  33.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  33.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  33.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  33.0k|        {
  662|  33.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   544k|{
 2061|   544k|    auto it = range.begin();
 2062|   920k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 917k, False: 3.10k]
  ------------------
 2063|   917k|        const auto val =
 2064|   917k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   917k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   917k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 917k, False: 0]
  |  |  ------------------
  ------------------
 2066|   917k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   917k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   917k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 541k, False: 376k]
  ------------------
 2069|   541k|                return it;
 2070|   541k|            }
 2071|   917k|        }
 2072|   376k|        it = val.iterator;
 2073|   376k|    }
 2074|       |
 2075|  3.10k|    return it;
 2076|   544k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   917k|{
 1899|   917k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   917k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   917k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   917k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   917k|    auto it = range.begin();
 1903|   917k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   917k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   917k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 917k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   917k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 917k, False: 0]
  ------------------
 1912|   917k|        ++it;
 1913|   917k|        return {it, string_type(1, *range.begin())};
 1914|   917k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   917k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   917k|    {
 1890|   917k|        return !codepoint.empty();
 1891|   917k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   544k|{
 2082|   544k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   544k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   544k|{
 2951|   544k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 544k, False: 0]
  ------------------
 2952|   544k|        auto it = read_while_classic_space(range);
 2953|   544k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   544k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.10k, False: 541k]
  |  |  ------------------
  ------------------
 2955|  3.10k|            return unexpected(e);
 2956|  3.10k|        }
 2957|       |
 2958|   541k|        return it;
 2959|   544k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   544k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   544k|{
 2117|   544k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   544k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   544k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   544k|        auto buf = make_contiguous_buffer(range);
 2121|   544k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   544k|        return ranges::next(range.begin(),
 2123|   544k|                            ranges::distance(buf.view().begin(), it));
 2124|   544k|    }
 2125|   544k|    else {
 2126|   544k|        auto it = range.begin();
 2127|       |
 2128|   544k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   544k|            auto seg = get_contiguous_beginning(range);
 2130|   544k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   544k|                seg_it != seg.end()) {
 2132|   544k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   544k|            }
 2134|   544k|            ranges::advance(it, seg.size());
 2135|   544k|        }
 2136|       |
 2137|   544k|        return read_while_code_point(
 2138|   544k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   544k|    }
 2140|   544k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   544k|    {
  754|   544k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   917k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   917k|              cvref<T> obj = *get<T>(fn);
  745|   917k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   917k|                  obj(static_cast<decltype(args)>(args)...);
  747|   917k|              }
  748|   917k|              else {
  749|   917k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   917k|              }
  751|   917k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   917k|    {
  684|   917k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   917k|            return static_cast<T*>(s.m_cp);
  686|   917k|        }
  687|   917k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   917k|            return static_cast<T*>(s.m_p);
  689|   917k|        }
  690|   917k|        else {
  691|   917k|            return reinterpret_cast<T*>(s.m_fp);
  692|   917k|        }
  693|   917k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   917k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   544k|        {
  662|   544k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   991k|{
 2088|   991k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   991k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   991k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   991k|        auto buf = make_contiguous_buffer(range);
 2092|   991k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   991k|        return ranges::next(range.begin(),
 2094|   991k|                            ranges::distance(buf.view().begin(), it));
 2095|   991k|    }
 2096|   991k|    else {
 2097|   991k|        auto it = range.begin();
 2098|       |
 2099|   991k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   991k|            auto seg = get_contiguous_beginning(range);
 2101|   991k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   991k|                seg_it != seg.end()) {
 2103|   991k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   991k|            }
 2105|   991k|            ranges::advance(it, seg.size());
 2106|   991k|        }
 2107|       |
 2108|   991k|        return read_until_code_point(
 2109|   991k|            ranges::subrange{it, range.end()},
 2110|   991k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   991k|    }
 2112|   991k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|   991k|{
 1683|   991k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   991k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   991k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   991k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   991k|    }
 1688|   991k|    else {
 1689|   991k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   991k|    }
 1691|   991k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|   991k|    {
 1490|   991k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|   991k|    {
 1577|   991k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   991k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|   991k|    {
 1621|   991k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   991k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   991k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   991k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   991k|            m_storage.reset();
 1627|   991k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   991k|        }
 1629|   991k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   991k|                                          std::basic_string<CharT>>) {
 1631|   991k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   991k|            m_view = string_view_type{*m_storage};
 1633|   991k|        }
 1634|   991k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   991k|                                          typename detail::basic_scan_buffer<
 1636|   991k|                                              value_t>::forward_iterator> &&
 1637|   991k|                           ranges::common_range<Range>) {
 1638|   991k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   991k|            auto end_seg = range.end().contiguous_segment();
 1640|   991k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   991k|                             detail::to_address(end_seg.end()))) {
 1642|   991k|                auto& str = m_storage.emplace();
 1643|   991k|                str.reserve(range.end().position() - range.begin().position());
 1644|   991k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   991k|                m_view = string_view_type{str};
 1646|   991k|                return;
 1647|   991k|            }
 1648|       |
 1649|   991k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   991k|                                                            end_seg.data());
 1651|   991k|            m_storage.reset();
 1652|   991k|        }
 1653|   991k|        else {
 1654|   991k|            auto& str = m_storage.emplace();
 1655|   991k|            if constexpr (ranges::sized_range<Range>) {
 1656|   991k|                str.reserve(range.size());
 1657|   991k|            }
 1658|   991k|            if constexpr (ranges::common_range<Range>) {
 1659|   991k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   991k|                          std::back_inserter(str));
 1661|   991k|            }
 1662|   991k|            else {
 1663|   991k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   991k|                     ++it) {
 1665|   991k|                    str.push_back(*it);
 1666|   991k|                }
 1667|   991k|            }
 1668|   991k|            m_view = string_view_type{str};
 1669|   991k|        }
 1670|   991k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   722k|    {
 4100|   722k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 76.3k, False: 646k]
  ------------------
 4101|  76.3k|            return std::copysign(value, T{-1.0});
 4102|  76.3k|        }
 4103|   646k|        return std::copysign(value, T{1.0});
 4104|   722k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   349k|{
 2088|   349k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   349k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   349k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   349k|        auto buf = make_contiguous_buffer(range);
 2092|   349k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   349k|        return ranges::next(range.begin(),
 2094|   349k|                            ranges::distance(buf.view().begin(), it));
 2095|   349k|    }
 2096|   349k|    else {
 2097|   349k|        auto it = range.begin();
 2098|       |
 2099|   349k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   349k|            auto seg = get_contiguous_beginning(range);
 2101|   349k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   349k|                seg_it != seg.end()) {
 2103|   349k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   349k|            }
 2105|   349k|            ranges::advance(it, seg.size());
 2106|   349k|        }
 2107|       |
 2108|   349k|        return read_until_code_point(
 2109|   349k|            ranges::subrange{it, range.end()},
 2110|   349k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   349k|    }
 2112|   349k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   349k|    {
  754|   349k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   645k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   645k|              cvref<T> obj = *get<T>(fn);
  745|   645k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   645k|                  obj(static_cast<decltype(args)>(args)...);
  747|   645k|              }
  748|   645k|              else {
  749|   645k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   645k|              }
  751|   645k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   645k|    {
  684|   645k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   645k|            return static_cast<T*>(s.m_cp);
  686|   645k|        }
  687|   645k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   645k|            return static_cast<T*>(s.m_p);
  689|   645k|        }
  690|   645k|        else {
  691|   645k|            return reinterpret_cast<T*>(s.m_fp);
  692|   645k|        }
  693|   645k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   645k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   349k|        {
  662|   349k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   349k|    {
 1577|   349k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   349k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   349k|    {
 1621|   349k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   349k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   349k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   349k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   349k|            m_storage.reset();
 1627|   349k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   349k|        }
 1629|   349k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   349k|                                          std::basic_string<CharT>>) {
 1631|   349k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   349k|            m_view = string_view_type{*m_storage};
 1633|   349k|        }
 1634|   349k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   349k|                                          typename detail::basic_scan_buffer<
 1636|   349k|                                              value_t>::forward_iterator> &&
 1637|   349k|                           ranges::common_range<Range>) {
 1638|   349k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   349k|            auto end_seg = range.end().contiguous_segment();
 1640|   349k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   349k|                             detail::to_address(end_seg.end()))) {
 1642|   349k|                auto& str = m_storage.emplace();
 1643|   349k|                str.reserve(range.end().position() - range.begin().position());
 1644|   349k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   349k|                m_view = string_view_type{str};
 1646|   349k|                return;
 1647|   349k|            }
 1648|       |
 1649|   349k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   349k|                                                            end_seg.data());
 1651|   349k|            m_storage.reset();
 1652|   349k|        }
 1653|   349k|        else {
 1654|   349k|            auto& str = m_storage.emplace();
 1655|   349k|            if constexpr (ranges::sized_range<Range>) {
 1656|   349k|                str.reserve(range.size());
 1657|   349k|            }
 1658|   349k|            if constexpr (ranges::common_range<Range>) {
 1659|   349k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   349k|                          std::back_inserter(str));
 1661|   349k|            }
 1662|   349k|            else {
 1663|   349k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   349k|                     ++it) {
 1665|   349k|                    str.push_back(*it);
 1666|   349k|                }
 1667|   349k|            }
 1668|   349k|            m_view = string_view_type{str};
 1669|   349k|        }
 1670|   349k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   261k|    {
 4100|   261k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 823, False: 260k]
  ------------------
 4101|    823|            return std::copysign(value, T{-1.0});
 4102|    823|        }
 4103|   260k|        return std::copysign(value, T{1.0});
 4104|   261k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   748k|    {
 4100|   748k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 78.9k, False: 669k]
  ------------------
 4101|  78.9k|            return std::copysign(value, T{-1.0});
 4102|  78.9k|        }
 4103|   669k|        return std::copysign(value, T{1.0});
 4104|   748k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   278k|    {
 4100|   278k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 851, False: 277k]
  ------------------
 4101|    851|            return std::copysign(value, T{-1.0});
 4102|    851|        }
 4103|   277k|        return std::copysign(value, T{1.0});
 4104|   278k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   755k|    {
 4100|   755k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 81.1k, False: 674k]
  ------------------
 4101|  81.1k|            return std::copysign(value, T{-1.0});
 4102|  81.1k|        }
 4103|   674k|        return std::copysign(value, T{1.0});
 4104|   755k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   285k|    {
 4100|   285k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 865, False: 284k]
  ------------------
 4101|    865|            return std::copysign(value, T{-1.0});
 4102|    865|        }
 4103|   284k|        return std::copysign(value, T{1.0});
 4104|   285k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   326k|{
 5795|   326k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.06k, False: 322k]
  |  |  ------------------
  ------------------
 5796|  4.06k|        return unexpected(e);
 5797|  4.06k|    }
 5798|       |
 5799|   322k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 322k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   322k|    return skip_classic_whitespace(range);
 5804|   322k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   105k|    {
 5871|   105k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   105k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   105k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   105k|            auto rd = make_reader<T, char_type>();
 5876|   105k|            return impl(rd, range, value);
 5877|   105k|        }
 5878|   105k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   105k|            auto rd = make_reader<T, char_type>();
 5880|   105k|            if (!is_segment_contiguous(range)) {
 5881|   105k|                return impl(rd, range, value);
 5882|   105k|            }
 5883|   105k|            auto crange = get_as_contiguous(range);
 5884|   105k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   105k|            return ranges::next(range.begin(),
 5886|   105k|                                ranges::distance(crange.begin(), it));
 5887|   105k|        }
 5888|   105k|        else {
 5889|   105k|            SCN_EXPECT(false);
 5890|   105k|            SCN_UNREACHABLE;
 5891|   105k|        }
 5892|   105k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   105k|    {
 5863|   105k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.34k|    }                                                  \
  |  |  |  | 3671|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   104k|                        .transform_error(make_eof_scan_error));
 5865|   104k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   105k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   104k|    {
 4152|   104k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   104k|        float_reader<CharT> rd{};
 4155|   104k|        return read_impl<Range>(
 4156|   104k|            range, rd,
 4157|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   104k|                return r.read_source(SCN_FWD(args)...);
 4159|   104k|            },
 4160|   104k|            value);
 4161|   104k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   670k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|   953k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   104k|    {
  684|   104k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   104k|            return static_cast<T*>(s.m_cp);
  686|   104k|        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   104k|            return static_cast<T*>(s.m_p);
  689|   104k|        }
  690|   104k|        else {
  691|   104k|            return reinterpret_cast<T*>(s.m_fp);
  692|   104k|        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   104k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   109k|    {
 5871|   109k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   109k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   109k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   109k|            auto rd = make_reader<T, char_type>();
 5876|   109k|            return impl(rd, range, value);
 5877|   109k|        }
 5878|   109k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   109k|            auto rd = make_reader<T, char_type>();
 5880|   109k|            if (!is_segment_contiguous(range)) {
 5881|   109k|                return impl(rd, range, value);
 5882|   109k|            }
 5883|   109k|            auto crange = get_as_contiguous(range);
 5884|   109k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   109k|            return ranges::next(range.begin(),
 5886|   109k|                                ranges::distance(crange.begin(), it));
 5887|   109k|        }
 5888|   109k|        else {
 5889|   109k|            SCN_EXPECT(false);
 5890|   109k|            SCN_UNREACHABLE;
 5891|   109k|        }
 5892|   109k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   109k|    {
 5863|   109k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.53k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.53k|    }                                                  \
  |  |  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   108k|                        .transform_error(make_eof_scan_error));
 5865|   108k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   109k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   108k|    {
 4152|   108k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   108k|        float_reader<CharT> rd{};
 4155|   108k|        return read_impl<Range>(
 4156|   108k|            range, rd,
 4157|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   108k|                return r.read_source(SCN_FWD(args)...);
 4159|   108k|            },
 4160|   108k|            value);
 4161|   108k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   108k|    {
  684|   108k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   108k|            return static_cast<T*>(s.m_cp);
  686|   108k|        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   108k|            return static_cast<T*>(s.m_p);
  689|   108k|        }
  690|   108k|        else {
  691|   108k|            return reinterpret_cast<T*>(s.m_fp);
  692|   108k|        }
  693|   108k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   108k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   111k|    {
 5871|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   111k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   111k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   111k|            auto rd = make_reader<T, char_type>();
 5876|   111k|            return impl(rd, range, value);
 5877|   111k|        }
 5878|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   111k|            auto rd = make_reader<T, char_type>();
 5880|   111k|            if (!is_segment_contiguous(range)) {
 5881|   111k|                return impl(rd, range, value);
 5882|   111k|            }
 5883|   111k|            auto crange = get_as_contiguous(range);
 5884|   111k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   111k|            return ranges::next(range.begin(),
 5886|   111k|                                ranges::distance(crange.begin(), it));
 5887|   111k|        }
 5888|   111k|        else {
 5889|   111k|            SCN_EXPECT(false);
 5890|   111k|            SCN_UNREACHABLE;
 5891|   111k|        }
 5892|   111k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   111k|    {
 5863|   111k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.66k|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   109k|                        .transform_error(make_eof_scan_error));
 5865|   109k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   109k|    {
 4152|   109k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   109k|        float_reader<CharT> rd{};
 4155|   109k|        return read_impl<Range>(
 4156|   109k|            range, rd,
 4157|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   109k|                return r.read_source(SCN_FWD(args)...);
 4159|   109k|            },
 4160|   109k|            value);
 4161|   109k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   109k|    {
  684|   109k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   109k|            return static_cast<T*>(s.m_cp);
  686|   109k|        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   109k|            return static_cast<T*>(s.m_p);
  689|   109k|        }
  690|   109k|        else {
  691|   109k|            return reinterpret_cast<T*>(s.m_fp);
  692|   109k|        }
  693|   109k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   109k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   353k|{
 5795|   353k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.19k, False: 348k]
  |  |  ------------------
  ------------------
 5796|  4.19k|        return unexpected(e);
 5797|  4.19k|    }
 5798|       |
 5799|   348k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 348k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   348k|    return skip_classic_whitespace(range);
 5804|   348k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   113k|    {
 5871|   113k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   113k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   113k|            auto rd = make_reader<T, char_type>();
 5876|   113k|            return impl(rd, range, value);
 5877|   113k|        }
 5878|   113k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   113k|            auto rd = make_reader<T, char_type>();
 5880|   113k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 113k, False: 0]
  ------------------
 5881|   113k|                return impl(rd, range, value);
 5882|   113k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   113k|        else {
 5889|   113k|            SCN_EXPECT(false);
 5890|   113k|            SCN_UNREACHABLE;
 5891|   113k|        }
 5892|   113k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   113k|    {
 5863|   113k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.40k|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   112k|                        .transform_error(make_eof_scan_error));
 5865|   112k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   113k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   112k|    {
 4152|   112k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   112k|        float_reader<CharT> rd{};
 4155|   112k|        return read_impl<Range>(
 4156|   112k|            range, rd,
 4157|   112k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   112k|                return r.read_source(SCN_FWD(args)...);
 4159|   112k|            },
 4160|   112k|            value);
 4161|   112k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   112k|    {
  754|   112k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   112k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   112k|              cvref<T> obj = *get<T>(fn);
  745|   112k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   112k|                  obj(static_cast<decltype(args)>(args)...);
  747|   112k|              }
  748|   112k|              else {
  749|   112k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   112k|              }
  751|   112k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   112k|    {
  684|   112k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   112k|            return static_cast<T*>(s.m_cp);
  686|   112k|        }
  687|   112k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   112k|            return static_cast<T*>(s.m_p);
  689|   112k|        }
  690|   112k|        else {
  691|   112k|            return reinterpret_cast<T*>(s.m_fp);
  692|   112k|        }
  693|   112k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   112k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   112k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   112k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   112k|        {
  662|   112k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   118k|    {
 5871|   118k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   118k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   118k|            auto rd = make_reader<T, char_type>();
 5876|   118k|            return impl(rd, range, value);
 5877|   118k|        }
 5878|   118k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   118k|            auto rd = make_reader<T, char_type>();
 5880|   118k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 118k, False: 0]
  ------------------
 5881|   118k|                return impl(rd, range, value);
 5882|   118k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   118k|        else {
 5889|   118k|            SCN_EXPECT(false);
 5890|   118k|            SCN_UNREACHABLE;
 5891|   118k|        }
 5892|   118k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   118k|    {
 5863|   118k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.60k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.60k|    }                                                  \
  |  |  |  | 3671|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   117k|                        .transform_error(make_eof_scan_error));
 5865|   117k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   118k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   117k|    {
 4152|   117k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   117k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   117k|        float_reader<CharT> rd{};
 4155|   117k|        return read_impl<Range>(
 4156|   117k|            range, rd,
 4157|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   117k|                return r.read_source(SCN_FWD(args)...);
 4159|   117k|            },
 4160|   117k|            value);
 4161|   117k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   117k|    {
  684|   117k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   117k|            return static_cast<T*>(s.m_cp);
  686|   117k|        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   117k|            return static_cast<T*>(s.m_p);
  689|   117k|        }
  690|   117k|        else {
  691|   117k|            return reinterpret_cast<T*>(s.m_fp);
  692|   117k|        }
  693|   117k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   117k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   117k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   120k|    {
 5871|   120k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   120k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   120k|            auto rd = make_reader<T, char_type>();
 5876|   120k|            return impl(rd, range, value);
 5877|   120k|        }
 5878|   120k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   120k|            auto rd = make_reader<T, char_type>();
 5880|   120k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 120k, False: 0]
  ------------------
 5881|   120k|                return impl(rd, range, value);
 5882|   120k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   120k|        else {
 5889|   120k|            SCN_EXPECT(false);
 5890|   120k|            SCN_UNREACHABLE;
 5891|   120k|        }
 5892|   120k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   120k|    {
 5863|   120k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.72k|    }                                                  \
  |  |  |  | 3671|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   118k|                        .transform_error(make_eof_scan_error));
 5865|   118k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   120k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   118k|    {
 4152|   118k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   118k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   118k|        float_reader<CharT> rd{};
 4155|   118k|        return read_impl<Range>(
 4156|   118k|            range, rd,
 4157|   118k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   118k|                return r.read_source(SCN_FWD(args)...);
 4159|   118k|            },
 4160|   118k|            value);
 4161|   118k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   118k|    {
  754|   118k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   118k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   118k|              cvref<T> obj = *get<T>(fn);
  745|   118k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   118k|                  obj(static_cast<decltype(args)>(args)...);
  747|   118k|              }
  748|   118k|              else {
  749|   118k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   118k|              }
  751|   118k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   118k|    {
  684|   118k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   118k|            return static_cast<T*>(s.m_cp);
  686|   118k|        }
  687|   118k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   118k|            return static_cast<T*>(s.m_p);
  689|   118k|        }
  690|   118k|        else {
  691|   118k|            return reinterpret_cast<T*>(s.m_fp);
  692|   118k|        }
  693|   118k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   118k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   118k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   118k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   118k|        {
  662|   118k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   782k|    {
 2879|   782k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.27M|    {
 2883|  2.27M|        return m_current;
 2884|  2.27M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.49M|    {
 2888|  1.49M|        return m_range.end();
 2889|  1.49M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   712k|    {
 2903|   712k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   712k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   712k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   712k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   712k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 712k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   712k|        }
 2909|   712k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   712k|    static_cast<    \
  |  |  929|   712k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   712k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   782k|    {
 2893|   782k|        return ranges::subrange{begin(), end()};
 2894|   782k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   782k|    {
 6037|   782k|        const bool need_skipped_width =
 6038|   782k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 782k]
  |  Branch (6038:33): [True: 0, False: 782k]
  ------------------
 6039|   782k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   782k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 782k]
  ------------------
 6043|   782k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 782k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   782k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 782k, False: 0]
  |  Branch (6047:56): [True: 782k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   782k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 782k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.55M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   782k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   782k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   782k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 770k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.6k|    }                                                  \
  |  |  |  | 3671|   782k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   770k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.55M|                            make_eof_scan_error));
 6058|       |
 6059|  1.55M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 770k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   770k|            return result_type{it, 0};
 6067|  1.55M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   782k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   701k|    {
 6079|   701k|        const bool need_skipped_width =
 6080|   701k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 701k]
  |  Branch (6080:33): [True: 0, False: 701k]
  ------------------
 6081|   701k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   701k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 701k]
  ------------------
 6084|   701k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 701k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   701k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 701k, False: 0]
  ------------------
 6093|   701k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 701k]
  ------------------
 6094|   701k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   701k|        return result_type{rng.begin(), 0};
 6118|   701k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   254k|    {
 6193|   254k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   254k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   254k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   254k|            auto rd = make_reader<T, char_type>();
 6198|   254k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 254k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   254k|            return impl(rd, range, value);
 6203|   254k|        }
 6204|   254k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   254k|            auto rd = make_reader<T, char_type>();
 6206|   254k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   254k|                return unexpected(e);
 6208|   254k|            }
 6209|       |
 6210|   254k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   254k|                specs.width != 0) {
 6212|   254k|                return impl(rd, range, value);
 6213|   254k|            }
 6214|       |
 6215|   254k|            auto crange = get_as_contiguous(range);
 6216|   254k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   254k|            return ranges::next(range.begin(),
 6218|   254k|                                ranges::distance(crange.begin(), it));
 6219|   254k|        }
 6220|   254k|        else {
 6221|   254k|            SCN_EXPECT(false);
 6222|   254k|            SCN_UNREACHABLE;
 6223|   254k|        }
 6224|   254k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   254k|    {
 6124|   254k|        const bool need_skipped_width =
 6125|   254k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 254k]
  |  Branch (6125:33): [True: 0, False: 254k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   254k|        auto it = rng.begin();
 6129|   254k|        std::ptrdiff_t prefix_width = 0;
 6130|   254k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 254k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   254k|        else {
 6138|   254k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.53k, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.53k|    }                                                  \
  |  |  |  | 3671|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   251k|            std::tie(it, prefix_width) = prefix_result;
 6140|   251k|        }
 6141|   251k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   251k|        std::ptrdiff_t value_width = 0;
 6145|   251k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 251k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   251k|        else {
 6161|   251k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 19.7k, False: 231k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  19.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  19.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  19.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  19.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  19.7k|    }                                                  \
  |  | 3671|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   231k|                                             specs, value, loc));
 6163|       |
 6164|   231k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 231k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   231k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   231k|        std::ptrdiff_t postfix_width = 0;
 6173|   231k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 228k, False: 3.13k]
  ------------------
 6174|   228k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   228k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   228k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   228k|                                 value_width));
 6178|   228k|            std::tie(it, postfix_width) = postfix_result;
 6179|   228k|        }
 6180|       |
 6181|   231k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   231k|                                                 value_width, postfix_width);
 6183|   231k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 231k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   231k|        return it;
 6188|   231k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   262k|    {
 6193|   262k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   262k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   262k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   262k|            auto rd = make_reader<T, char_type>();
 6198|   262k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   262k|            return impl(rd, range, value);
 6203|   262k|        }
 6204|   262k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   262k|            auto rd = make_reader<T, char_type>();
 6206|   262k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   262k|                return unexpected(e);
 6208|   262k|            }
 6209|       |
 6210|   262k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   262k|                specs.width != 0) {
 6212|   262k|                return impl(rd, range, value);
 6213|   262k|            }
 6214|       |
 6215|   262k|            auto crange = get_as_contiguous(range);
 6216|   262k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   262k|            return ranges::next(range.begin(),
 6218|   262k|                                ranges::distance(crange.begin(), it));
 6219|   262k|        }
 6220|   262k|        else {
 6221|   262k|            SCN_EXPECT(false);
 6222|   262k|            SCN_UNREACHABLE;
 6223|   262k|        }
 6224|   262k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   262k|    {
 6124|   262k|        const bool need_skipped_width =
 6125|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 262k]
  |  Branch (6125:33): [True: 0, False: 262k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   262k|        auto it = rng.begin();
 6129|   262k|        std::ptrdiff_t prefix_width = 0;
 6130|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 262k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   262k|        else {
 6138|   262k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.92k, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.92k|    }                                                  \
  |  |  |  | 3671|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   258k|            std::tie(it, prefix_width) = prefix_result;
 6140|   258k|        }
 6141|   258k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   258k|        std::ptrdiff_t value_width = 0;
 6145|   258k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 258k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   258k|        else {
 6161|   258k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 19.3k, False: 239k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  19.3k|    }                                                  \
  |  | 3671|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   239k|                                             specs, value, loc));
 6163|       |
 6164|   239k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 239k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   239k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   239k|        std::ptrdiff_t postfix_width = 0;
 6173|   239k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 235k, False: 3.47k]
  ------------------
 6174|   235k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   235k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   235k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   235k|                                 value_width));
 6178|   235k|            std::tie(it, postfix_width) = postfix_result;
 6179|   235k|        }
 6180|       |
 6181|   239k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   239k|                                                 value_width, postfix_width);
 6183|   239k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 239k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   239k|        return it;
 6188|   239k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   265k|    {
 6193|   265k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   265k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   265k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   265k|            auto rd = make_reader<T, char_type>();
 6198|   265k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 265k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   265k|            return impl(rd, range, value);
 6203|   265k|        }
 6204|   265k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   265k|            auto rd = make_reader<T, char_type>();
 6206|   265k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   265k|                return unexpected(e);
 6208|   265k|            }
 6209|       |
 6210|   265k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   265k|                specs.width != 0) {
 6212|   265k|                return impl(rd, range, value);
 6213|   265k|            }
 6214|       |
 6215|   265k|            auto crange = get_as_contiguous(range);
 6216|   265k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   265k|            return ranges::next(range.begin(),
 6218|   265k|                                ranges::distance(crange.begin(), it));
 6219|   265k|        }
 6220|   265k|        else {
 6221|   265k|            SCN_EXPECT(false);
 6222|   265k|            SCN_UNREACHABLE;
 6223|   265k|        }
 6224|   265k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   265k|    {
 6124|   265k|        const bool need_skipped_width =
 6125|   265k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 265k]
  |  Branch (6125:33): [True: 0, False: 265k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   265k|        auto it = rng.begin();
 6129|   265k|        std::ptrdiff_t prefix_width = 0;
 6130|   265k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 265k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   265k|        else {
 6138|   265k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   265k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   265k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   265k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|   265k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   260k|            std::tie(it, prefix_width) = prefix_result;
 6140|   260k|        }
 6141|   260k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   260k|        std::ptrdiff_t value_width = 0;
 6145|   260k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 260k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   260k|        else {
 6161|   260k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   260k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   260k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 19.1k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  19.1k|    }                                                  \
  |  | 3671|   260k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   241k|                                             specs, value, loc));
 6163|       |
 6164|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 241k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   241k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   241k|        std::ptrdiff_t postfix_width = 0;
 6173|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 238k, False: 3.70k]
  ------------------
 6174|   238k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   238k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   238k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   238k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   238k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   238k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   238k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   238k|                                 value_width));
 6178|   238k|            std::tie(it, postfix_width) = postfix_result;
 6179|   238k|        }
 6180|       |
 6181|   241k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   241k|                                                 value_width, postfix_width);
 6183|   241k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 241k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   241k|        return it;
 6188|   241k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   142k|{
 5795|   142k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 405, False: 142k]
  |  |  ------------------
  ------------------
 5796|    405|        return unexpected(e);
 5797|    405|    }
 5798|       |
 5799|   142k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 142k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   142k|    return skip_classic_whitespace(range);
 5804|   142k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  44.3k|    {
 5871|  44.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  44.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  44.3k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  44.3k|            auto rd = make_reader<T, char_type>();
 5876|  44.3k|            return impl(rd, range, value);
 5877|  44.3k|        }
 5878|  44.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  44.3k|            auto rd = make_reader<T, char_type>();
 5880|  44.3k|            if (!is_segment_contiguous(range)) {
 5881|  44.3k|                return impl(rd, range, value);
 5882|  44.3k|            }
 5883|  44.3k|            auto crange = get_as_contiguous(range);
 5884|  44.3k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  44.3k|            return ranges::next(range.begin(),
 5886|  44.3k|                                ranges::distance(crange.begin(), it));
 5887|  44.3k|        }
 5888|  44.3k|        else {
 5889|  44.3k|            SCN_EXPECT(false);
 5890|  44.3k|            SCN_UNREACHABLE;
 5891|  44.3k|        }
 5892|  44.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  44.3k|    {
 5863|  44.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    270|    }                                                  \
  |  |  |  | 3671|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  44.0k|                        .transform_error(make_eof_scan_error));
 5865|  44.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  44.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  44.0k|    {
 4152|  44.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  44.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  44.0k|        float_reader<CharT> rd{};
 4155|  44.0k|        return read_impl<Range>(
 4156|  44.0k|            range, rd,
 4157|  44.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  44.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  44.0k|            },
 4160|  44.0k|            value);
 4161|  44.0k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   283k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  44.0k|    {
  754|  44.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  44.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.0k|              cvref<T> obj = *get<T>(fn);
  745|  44.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  44.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.0k|              }
  748|  44.0k|              else {
  749|  44.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.0k|              }
  751|  44.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  44.0k|    {
  684|  44.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  44.0k|            return static_cast<T*>(s.m_cp);
  686|  44.0k|        }
  687|  44.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  44.0k|            return static_cast<T*>(s.m_p);
  689|  44.0k|        }
  690|  44.0k|        else {
  691|  44.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  44.0k|        }
  693|  44.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  44.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  44.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  44.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  44.0k|        {
  662|  44.0k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  48.2k|    {
 5871|  48.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  48.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  48.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  48.2k|            auto rd = make_reader<T, char_type>();
 5876|  48.2k|            return impl(rd, range, value);
 5877|  48.2k|        }
 5878|  48.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  48.2k|            auto rd = make_reader<T, char_type>();
 5880|  48.2k|            if (!is_segment_contiguous(range)) {
 5881|  48.2k|                return impl(rd, range, value);
 5882|  48.2k|            }
 5883|  48.2k|            auto crange = get_as_contiguous(range);
 5884|  48.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  48.2k|            return ranges::next(range.begin(),
 5886|  48.2k|                                ranges::distance(crange.begin(), it));
 5887|  48.2k|        }
 5888|  48.2k|        else {
 5889|  48.2k|            SCN_EXPECT(false);
 5890|  48.2k|            SCN_UNREACHABLE;
 5891|  48.2k|        }
 5892|  48.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  48.2k|    {
 5863|  48.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  48.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  48.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  48.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 47.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    306|    }                                                  \
  |  |  |  | 3671|  48.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  47.9k|                        .transform_error(make_eof_scan_error));
 5865|  47.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  48.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  47.9k|    {
 4152|  47.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  47.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  47.9k|        float_reader<CharT> rd{};
 4155|  47.9k|        return read_impl<Range>(
 4156|  47.9k|            range, rd,
 4157|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  47.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  47.9k|            },
 4160|  47.9k|            value);
 4161|  47.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  47.9k|    {
  754|  47.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  47.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.9k|              cvref<T> obj = *get<T>(fn);
  745|  47.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.9k|              }
  748|  47.9k|              else {
  749|  47.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.9k|              }
  751|  47.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.9k|    {
  684|  47.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.9k|            return static_cast<T*>(s.m_cp);
  686|  47.9k|        }
  687|  47.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.9k|            return static_cast<T*>(s.m_p);
  689|  47.9k|        }
  690|  47.9k|        else {
  691|  47.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.9k|        }
  693|  47.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  47.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  47.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  47.9k|        {
  662|  47.9k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  49.9k|    {
 5871|  49.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  49.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  49.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  49.9k|            auto rd = make_reader<T, char_type>();
 5876|  49.9k|            return impl(rd, range, value);
 5877|  49.9k|        }
 5878|  49.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  49.9k|            auto rd = make_reader<T, char_type>();
 5880|  49.9k|            if (!is_segment_contiguous(range)) {
 5881|  49.9k|                return impl(rd, range, value);
 5882|  49.9k|            }
 5883|  49.9k|            auto crange = get_as_contiguous(range);
 5884|  49.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  49.9k|            return ranges::next(range.begin(),
 5886|  49.9k|                                ranges::distance(crange.begin(), it));
 5887|  49.9k|        }
 5888|  49.9k|        else {
 5889|  49.9k|            SCN_EXPECT(false);
 5890|  49.9k|            SCN_UNREACHABLE;
 5891|  49.9k|        }
 5892|  49.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  49.9k|    {
 5863|  49.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  49.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  49.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  49.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 324, False: 49.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    324|    }                                                  \
  |  |  |  | 3671|  49.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  49.6k|                        .transform_error(make_eof_scan_error));
 5865|  49.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  49.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  49.6k|    {
 4152|  49.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  49.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  49.6k|        float_reader<CharT> rd{};
 4155|  49.6k|        return read_impl<Range>(
 4156|  49.6k|            range, rd,
 4157|  49.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  49.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  49.6k|            },
 4160|  49.6k|            value);
 4161|  49.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  49.6k|    {
  754|  49.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  49.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.6k|              cvref<T> obj = *get<T>(fn);
  745|  49.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  49.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  49.6k|              }
  748|  49.6k|              else {
  749|  49.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.6k|              }
  751|  49.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  49.6k|    {
  684|  49.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  49.6k|            return static_cast<T*>(s.m_cp);
  686|  49.6k|        }
  687|  49.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  49.6k|            return static_cast<T*>(s.m_p);
  689|  49.6k|        }
  690|  49.6k|        else {
  691|  49.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  49.6k|        }
  693|  49.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  49.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  49.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  49.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  49.6k|        {
  662|  49.6k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   402k|    {
 2879|   402k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.06M|    {
 2883|  1.06M|        return m_current;
 2884|  1.06M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   665k|    {
 2888|   665k|        return m_range.end();
 2889|   665k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   263k|    {
 2903|   263k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   263k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   263k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 263k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   263k|        }
 2909|   263k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   263k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   402k|    {
 2893|   402k|        return ranges::subrange{begin(), end()};
 2894|   402k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   402k|    {
 6037|   402k|        const bool need_skipped_width =
 6038|   402k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 402k]
  |  Branch (6038:33): [True: 0, False: 402k]
  ------------------
 6039|   402k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   402k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 402k]
  ------------------
 6043|   402k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 402k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   402k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 402k, False: 0]
  |  Branch (6047:56): [True: 402k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   402k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 402k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   803k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   402k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   402k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   402k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 400k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|   402k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   803k|                            make_eof_scan_error));
 6058|       |
 6059|   803k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 400k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   400k|            return result_type{it, 0};
 6067|   803k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   402k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   261k|    {
 6079|   261k|        const bool need_skipped_width =
 6080|   261k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 261k]
  |  Branch (6080:33): [True: 0, False: 261k]
  ------------------
 6081|   261k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   261k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 261k]
  ------------------
 6084|   261k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 261k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   261k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 261k, False: 0]
  ------------------
 6093|   261k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 261k]
  ------------------
 6094|   261k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   261k|        return result_type{rng.begin(), 0};
 6118|   261k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   130k|    {
 6193|   130k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   130k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   130k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   130k|            auto rd = make_reader<T, char_type>();
 6198|   130k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   130k|            return impl(rd, range, value);
 6203|   130k|        }
 6204|   130k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   130k|            auto rd = make_reader<T, char_type>();
 6206|   130k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   130k|                return unexpected(e);
 6208|   130k|            }
 6209|       |
 6210|   130k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   130k|                specs.width != 0) {
 6212|   130k|                return impl(rd, range, value);
 6213|   130k|            }
 6214|       |
 6215|   130k|            auto crange = get_as_contiguous(range);
 6216|   130k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   130k|            return ranges::next(range.begin(),
 6218|   130k|                                ranges::distance(crange.begin(), it));
 6219|   130k|        }
 6220|   130k|        else {
 6221|   130k|            SCN_EXPECT(false);
 6222|   130k|            SCN_UNREACHABLE;
 6223|   130k|        }
 6224|   130k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   130k|    {
 6124|   130k|        const bool need_skipped_width =
 6125|   130k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 130k]
  |  Branch (6125:33): [True: 0, False: 130k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   130k|        auto it = rng.begin();
 6129|   130k|        std::ptrdiff_t prefix_width = 0;
 6130|   130k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 130k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   130k|        else {
 6138|   130k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 822, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    822|    }                                                  \
  |  |  |  | 3671|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   129k|            std::tie(it, prefix_width) = prefix_result;
 6140|   129k|        }
 6141|   129k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   129k|        std::ptrdiff_t value_width = 0;
 6145|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 129k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   129k|        else {
 6161|   129k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 45.7k, False: 83.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  45.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  45.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  45.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  45.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  45.7k|    }                                                  \
  |  | 3671|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  83.4k|                                             specs, value, loc));
 6163|       |
 6164|  83.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 83.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  83.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  83.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  83.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 83.0k, False: 344]
  ------------------
 6174|  83.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  83.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  83.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  83.0k|                                 value_width));
 6178|  83.0k|            std::tie(it, postfix_width) = postfix_result;
 6179|  83.0k|        }
 6180|       |
 6181|  83.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  83.4k|                                                 value_width, postfix_width);
 6183|  83.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 83.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  83.4k|        return it;
 6188|  83.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   135k|    {
 6193|   135k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   135k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   135k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   135k|            auto rd = make_reader<T, char_type>();
 6198|   135k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   135k|            return impl(rd, range, value);
 6203|   135k|        }
 6204|   135k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   135k|            auto rd = make_reader<T, char_type>();
 6206|   135k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   135k|                return unexpected(e);
 6208|   135k|            }
 6209|       |
 6210|   135k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   135k|                specs.width != 0) {
 6212|   135k|                return impl(rd, range, value);
 6213|   135k|            }
 6214|       |
 6215|   135k|            auto crange = get_as_contiguous(range);
 6216|   135k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   135k|            return ranges::next(range.begin(),
 6218|   135k|                                ranges::distance(crange.begin(), it));
 6219|   135k|        }
 6220|   135k|        else {
 6221|   135k|            SCN_EXPECT(false);
 6222|   135k|            SCN_UNREACHABLE;
 6223|   135k|        }
 6224|   135k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   135k|    {
 6124|   135k|        const bool need_skipped_width =
 6125|   135k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 135k]
  |  Branch (6125:33): [True: 0, False: 135k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   135k|        auto it = rng.begin();
 6129|   135k|        std::ptrdiff_t prefix_width = 0;
 6130|   135k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 135k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   135k|        else {
 6138|   135k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 882, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    882|    }                                                  \
  |  |  |  | 3671|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   134k|            std::tie(it, prefix_width) = prefix_result;
 6140|   134k|        }
 6141|   134k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   134k|        std::ptrdiff_t value_width = 0;
 6145|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 134k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   134k|        else {
 6161|   134k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 45.6k, False: 88.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  45.6k|    }                                                  \
  |  | 3671|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  88.7k|                                             specs, value, loc));
 6163|       |
 6164|  88.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 88.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  88.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  88.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  88.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 88.3k, False: 374]
  ------------------
 6174|  88.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  88.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  88.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  88.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 88.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  88.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  88.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  88.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  88.3k|                                 value_width));
 6178|  88.3k|            std::tie(it, postfix_width) = postfix_result;
 6179|  88.3k|        }
 6180|       |
 6181|  88.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  88.7k|                                                 value_width, postfix_width);
 6183|  88.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 88.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  88.7k|        return it;
 6188|  88.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   137k|    {
 6193|   137k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   137k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   137k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   137k|            auto rd = make_reader<T, char_type>();
 6198|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   137k|            return impl(rd, range, value);
 6203|   137k|        }
 6204|   137k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   137k|            auto rd = make_reader<T, char_type>();
 6206|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   137k|                return unexpected(e);
 6208|   137k|            }
 6209|       |
 6210|   137k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   137k|                specs.width != 0) {
 6212|   137k|                return impl(rd, range, value);
 6213|   137k|            }
 6214|       |
 6215|   137k|            auto crange = get_as_contiguous(range);
 6216|   137k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   137k|            return ranges::next(range.begin(),
 6218|   137k|                                ranges::distance(crange.begin(), it));
 6219|   137k|        }
 6220|   137k|        else {
 6221|   137k|            SCN_EXPECT(false);
 6222|   137k|            SCN_UNREACHABLE;
 6223|   137k|        }
 6224|   137k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   137k|    {
 6124|   137k|        const bool need_skipped_width =
 6125|   137k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 137k]
  |  Branch (6125:33): [True: 0, False: 137k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   137k|        auto it = rng.begin();
 6129|   137k|        std::ptrdiff_t prefix_width = 0;
 6130|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 137k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   137k|        else {
 6138|   137k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 910, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    910|    }                                                  \
  |  |  |  | 3671|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   136k|            std::tie(it, prefix_width) = prefix_result;
 6140|   136k|        }
 6141|   136k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   136k|        std::ptrdiff_t value_width = 0;
 6145|   136k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 136k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   136k|        else {
 6161|   136k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 45.6k, False: 90.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  45.6k|    }                                                  \
  |  | 3671|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  90.9k|                                             specs, value, loc));
 6163|       |
 6164|  90.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 90.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  90.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  90.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  90.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 90.5k, False: 388]
  ------------------
 6174|  90.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  90.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  90.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  90.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  90.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  90.5k|                                 value_width));
 6178|  90.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  90.5k|        }
 6180|       |
 6181|  90.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  90.9k|                                                 value_width, postfix_width);
 6183|  90.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 90.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  90.9k|        return it;
 6188|  90.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   142k|{
 5795|   142k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 405, False: 142k]
  |  |  ------------------
  ------------------
 5796|    405|        return unexpected(e);
 5797|    405|    }
 5798|       |
 5799|   142k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 142k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   142k|    return skip_classic_whitespace(range);
 5804|   142k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  44.3k|    {
 5871|  44.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  44.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  44.3k|            auto rd = make_reader<T, char_type>();
 5876|  44.3k|            return impl(rd, range, value);
 5877|  44.3k|        }
 5878|  44.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  44.3k|            auto rd = make_reader<T, char_type>();
 5880|  44.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 44.3k, False: 0]
  ------------------
 5881|  44.3k|                return impl(rd, range, value);
 5882|  44.3k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  44.3k|        else {
 5889|  44.3k|            SCN_EXPECT(false);
 5890|  44.3k|            SCN_UNREACHABLE;
 5891|  44.3k|        }
 5892|  44.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  44.3k|    {
 5863|  44.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    270|    }                                                  \
  |  |  |  | 3671|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  44.0k|                        .transform_error(make_eof_scan_error));
 5865|  44.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  44.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  44.0k|    {
 4152|  44.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  44.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  44.0k|        float_reader<CharT> rd{};
 4155|  44.0k|        return read_impl<Range>(
 4156|  44.0k|            range, rd,
 4157|  44.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  44.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  44.0k|            },
 4160|  44.0k|            value);
 4161|  44.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  44.0k|    {
  754|  44.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  44.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.0k|              cvref<T> obj = *get<T>(fn);
  745|  44.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  44.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.0k|              }
  748|  44.0k|              else {
  749|  44.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.0k|              }
  751|  44.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  44.0k|    {
  684|  44.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  44.0k|            return static_cast<T*>(s.m_cp);
  686|  44.0k|        }
  687|  44.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  44.0k|            return static_cast<T*>(s.m_p);
  689|  44.0k|        }
  690|  44.0k|        else {
  691|  44.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  44.0k|        }
  693|  44.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  44.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  44.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  44.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  44.0k|        {
  662|  44.0k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  48.2k|    {
 5871|  48.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  48.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  48.2k|            auto rd = make_reader<T, char_type>();
 5876|  48.2k|            return impl(rd, range, value);
 5877|  48.2k|        }
 5878|  48.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  48.2k|            auto rd = make_reader<T, char_type>();
 5880|  48.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 48.2k, False: 0]
  ------------------
 5881|  48.2k|                return impl(rd, range, value);
 5882|  48.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  48.2k|        else {
 5889|  48.2k|            SCN_EXPECT(false);
 5890|  48.2k|            SCN_UNREACHABLE;
 5891|  48.2k|        }
 5892|  48.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  48.2k|    {
 5863|  48.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  48.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  48.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  48.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 47.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    306|    }                                                  \
  |  |  |  | 3671|  48.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  47.9k|                        .transform_error(make_eof_scan_error));
 5865|  47.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  48.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  47.9k|    {
 4152|  47.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  47.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  47.9k|        float_reader<CharT> rd{};
 4155|  47.9k|        return read_impl<Range>(
 4156|  47.9k|            range, rd,
 4157|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  47.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  47.9k|            },
 4160|  47.9k|            value);
 4161|  47.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  47.9k|    {
  754|  47.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  47.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.9k|              cvref<T> obj = *get<T>(fn);
  745|  47.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.9k|              }
  748|  47.9k|              else {
  749|  47.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.9k|              }
  751|  47.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.9k|    {
  684|  47.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.9k|            return static_cast<T*>(s.m_cp);
  686|  47.9k|        }
  687|  47.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.9k|            return static_cast<T*>(s.m_p);
  689|  47.9k|        }
  690|  47.9k|        else {
  691|  47.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.9k|        }
  693|  47.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  47.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  47.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  47.9k|        {
  662|  47.9k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  49.8k|    {
 5871|  49.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  49.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  49.8k|            auto rd = make_reader<T, char_type>();
 5876|  49.8k|            return impl(rd, range, value);
 5877|  49.8k|        }
 5878|  49.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  49.8k|            auto rd = make_reader<T, char_type>();
 5880|  49.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 49.8k, False: 0]
  ------------------
 5881|  49.8k|                return impl(rd, range, value);
 5882|  49.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  49.8k|        else {
 5889|  49.8k|            SCN_EXPECT(false);
 5890|  49.8k|            SCN_UNREACHABLE;
 5891|  49.8k|        }
 5892|  49.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  49.8k|    {
 5863|  49.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  49.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  49.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  49.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 324, False: 49.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    324|    }                                                  \
  |  |  |  | 3671|  49.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  49.5k|                        .transform_error(make_eof_scan_error));
 5865|  49.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  49.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  49.5k|    {
 4152|  49.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  49.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  49.5k|        float_reader<CharT> rd{};
 4155|  49.5k|        return read_impl<Range>(
 4156|  49.5k|            range, rd,
 4157|  49.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  49.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  49.5k|            },
 4160|  49.5k|            value);
 4161|  49.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  49.5k|    {
  754|  49.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  49.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.5k|              cvref<T> obj = *get<T>(fn);
  745|  49.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  49.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  49.5k|              }
  748|  49.5k|              else {
  749|  49.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.5k|              }
  751|  49.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  49.5k|    {
  684|  49.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  49.5k|            return static_cast<T*>(s.m_cp);
  686|  49.5k|        }
  687|  49.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  49.5k|            return static_cast<T*>(s.m_p);
  689|  49.5k|        }
  690|  49.5k|        else {
  691|  49.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  49.5k|        }
  693|  49.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  49.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  49.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  49.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  49.5k|        {
  662|  49.5k|        }

LLVMFuzzerTestOneInput:
   54|  2.32k|{
   55|  2.32k|    scn::fuzz::run(data, size);
   56|  2.32k|    return 0;
   57|  2.32k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.32k|{
   33|  2.32k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.32k]
  |  Branch (33:35): [True: 0, False: 2.32k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.32k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.32k|    const auto& f =
   40|  2.32k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.32k|    do_basic_run(sv, f);
   42|       |
   43|  2.32k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.32k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.32k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.32k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.32k, False: 0]
  ------------------
   47|  2.32k|        do_basic_run(wsv_transcode, wf);
   48|  2.32k|    }
   49|  2.32k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.32k|{
   25|  2.32k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.32k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.32k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.32k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.32k|{
   25|  2.32k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.32k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.32k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.32k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.65k|{
   25|  4.65k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.65k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.65k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.65k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.65k|{
   25|  4.65k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.65k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.65k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.65k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.32k|{
   52|  2.32k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.32k|    string_buffer.resize(size);
   56|  2.32k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.32k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.32k|    const auto wsv_reinterpret_size =
   61|  2.32k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 65, False: 2.26k]
  ------------------
   62|  2.32k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.32k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.32k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.32k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.32k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.32k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.32k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.32k|{
  122|  2.32k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.32k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.32k|    buf.resize(sizeof...(Args));
  125|  2.32k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.32k|    return buf;
  127|  2.32k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.32k|{
  108|  2.32k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.32k|        return format_string_view_buffer;
  110|  2.32k|    }
  111|  2.32k|    else {
  112|  2.32k|        return wformat_string_view_buffer;
  113|  2.32k|    }
  114|  2.32k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.32k|{
  185|  2.32k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.32k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.32k|                                   format_strings);
  188|  2.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.32k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 2.32k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|   162k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   162k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   162k|            auto result = scn::scan<T>(
  139|   162k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   162k|                scn::runtime_format(f));
  141|   162k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 148k]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|   148k|            it = result->begin();
  145|   148k|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 2.32k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|   162k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   162k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   162k|            auto result = scn::scan<T>(
  154|   162k|                global_locale,
  155|   162k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   162k|                scn::runtime_format(f));
  157|   162k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 148k]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|   148k|            it = result->begin();
  161|   148k|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  2.32k|    {
  166|  2.32k|        auto it = scn::ranges::begin(source);
  167|  35.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.1k|            auto result = scn::scan_value<T>(
  170|  35.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.32k, False: 32.8k]
  ------------------
  172|  2.32k|                break;
  173|  2.32k|            }
  174|  32.8k|            it = result->begin();
  175|  32.8k|        }
  176|  2.32k|    }
  177|  2.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.32k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 2.32k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|   167k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   167k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   167k|            auto result = scn::scan<T>(
  139|   167k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   167k|                scn::runtime_format(f));
  141|   167k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 153k]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|   153k|            it = result->begin();
  145|   153k|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 2.32k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|   167k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   167k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   167k|            auto result = scn::scan<T>(
  154|   167k|                global_locale,
  155|   167k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   167k|                scn::runtime_format(f));
  157|   167k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 153k]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|   153k|            it = result->begin();
  161|   153k|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  2.32k|    {
  166|  2.32k|        auto it = scn::ranges::begin(source);
  167|  36.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.5k|            auto result = scn::scan_value<T>(
  170|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.32k, False: 34.2k]
  ------------------
  172|  2.32k|                break;
  173|  2.32k|            }
  174|  34.2k|            it = result->begin();
  175|  34.2k|        }
  176|  2.32k|    }
  177|  2.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.32k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 2.32k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|   169k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   169k|            auto result = scn::scan<T>(
  139|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   169k|                scn::runtime_format(f));
  141|   169k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 155k]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|   155k|            it = result->begin();
  145|   155k|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 2.32k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|   169k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   169k|            auto result = scn::scan<T>(
  154|   169k|                global_locale,
  155|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   169k|                scn::runtime_format(f));
  157|   169k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 155k]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|   155k|            it = result->begin();
  161|   155k|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  2.32k|    {
  166|  2.32k|        auto it = scn::ranges::begin(source);
  167|  37.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.1k|            auto result = scn::scan_value<T>(
  170|  37.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.32k, False: 34.8k]
  ------------------
  172|  2.32k|                break;
  173|  2.32k|            }
  174|  34.8k|            it = result->begin();
  175|  34.8k|        }
  176|  2.32k|    }
  177|  2.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.32k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 2.32k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|   184k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   184k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   184k|            auto result = scn::scan<T>(
  139|   184k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   184k|                scn::runtime_format(f));
  141|   184k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 170k]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|   170k|            it = result->begin();
  145|   170k|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 2.32k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|   184k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   184k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   184k|            auto result = scn::scan<T>(
  154|   184k|                global_locale,
  155|   184k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   184k|                scn::runtime_format(f));
  157|   184k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 170k]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|   170k|            it = result->begin();
  161|   170k|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  2.32k|    {
  166|  2.32k|        auto it = scn::ranges::begin(source);
  167|  37.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.9k|            auto result = scn::scan_value<T>(
  170|  37.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.32k, False: 35.6k]
  ------------------
  172|  2.32k|                break;
  173|  2.32k|            }
  174|  35.6k|            it = result->begin();
  175|  35.6k|        }
  176|  2.32k|    }
  177|  2.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.32k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 2.32k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|   191k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   191k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   191k|            auto result = scn::scan<T>(
  139|   191k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   191k|                scn::runtime_format(f));
  141|   191k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 177k]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|   177k|            it = result->begin();
  145|   177k|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 2.32k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|   191k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   191k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   191k|            auto result = scn::scan<T>(
  154|   191k|                global_locale,
  155|   191k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   191k|                scn::runtime_format(f));
  157|   191k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 177k]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|   177k|            it = result->begin();
  161|   177k|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  2.32k|    {
  166|  2.32k|        auto it = scn::ranges::begin(source);
  167|  39.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  39.6k|            auto result = scn::scan_value<T>(
  170|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  39.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.32k, False: 37.3k]
  ------------------
  172|  2.32k|                break;
  173|  2.32k|            }
  174|  37.3k|            it = result->begin();
  175|  37.3k|        }
  176|  2.32k|    }
  177|  2.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.32k|{
  133|       |    // Regular scan
  134|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.9k, False: 2.32k]
  ------------------
  135|  13.9k|        auto it = scn::ranges::begin(source);
  136|   193k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   193k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   193k|            auto result = scn::scan<T>(
  139|   193k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   193k|                scn::runtime_format(f));
  141|   193k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.9k, False: 179k]
  ------------------
  142|  13.9k|                break;
  143|  13.9k|            }
  144|   179k|            it = result->begin();
  145|   179k|        }
  146|  13.9k|    }
  147|       |
  148|       |    // scan localized
  149|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.9k, False: 2.32k]
  ------------------
  150|  13.9k|        auto it = scn::ranges::begin(source);
  151|   193k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   193k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   193k|            auto result = scn::scan<T>(
  154|   193k|                global_locale,
  155|   193k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   193k|                scn::runtime_format(f));
  157|   193k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.9k, False: 179k]
  ------------------
  158|  13.9k|                break;
  159|  13.9k|            }
  160|   179k|            it = result->begin();
  161|   179k|        }
  162|  13.9k|    }
  163|       |
  164|       |    // scan_value
  165|  2.32k|    {
  166|  2.32k|        auto it = scn::ranges::begin(source);
  167|  40.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  40.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  40.0k|            auto result = scn::scan_value<T>(
  170|  40.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  40.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.32k, False: 37.7k]
  ------------------
  172|  2.32k|                break;
  173|  2.32k|            }
  174|  37.7k|            it = result->begin();
  175|  37.7k|        }
  176|  2.32k|    }
  177|  2.32k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.32k|{
   90|  2.32k|    using char_type = ranges::range_value_t<Source>;
   91|  2.32k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.32k|    deque.clear();
   93|  2.32k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.32k|              std::back_inserter(deque));
   95|  2.32k|    return deque;
   96|  2.32k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.32k|{
   79|  2.32k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.32k|        return noncontiguous_buffer;
   81|  2.32k|    }
   82|  2.32k|    else {
   83|  2.32k|        return wnoncontiguous_buffer;
   84|  2.32k|    }
   85|  2.32k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.32k|{
  122|  2.32k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.32k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.32k|    buf.resize(sizeof...(Args));
  125|  2.32k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.32k|    return buf;
  127|  2.32k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.32k|{
  108|  2.32k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.32k|        return format_string_view_buffer;
  110|  2.32k|    }
  111|  2.32k|    else {
  112|  2.32k|        return wformat_string_view_buffer;
  113|  2.32k|    }
  114|  2.32k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.65k|{
  185|  4.65k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.65k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.65k|                                   format_strings);
  188|  4.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.65k|{
  133|       |    // Regular scan
  134|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.9k, False: 4.65k]
  ------------------
  135|  27.9k|        auto it = scn::ranges::begin(source);
  136|  79.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  79.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  79.7k|            auto result = scn::scan<T>(
  139|  79.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  79.7k|                scn::runtime_format(f));
  141|  79.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.9k, False: 51.8k]
  ------------------
  142|  27.9k|                break;
  143|  27.9k|            }
  144|  51.8k|            it = result->begin();
  145|  51.8k|        }
  146|  27.9k|    }
  147|       |
  148|       |    // scan localized
  149|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.9k, False: 4.65k]
  ------------------
  150|  27.9k|        auto it = scn::ranges::begin(source);
  151|  79.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  79.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  79.7k|            auto result = scn::scan<T>(
  154|  79.7k|                global_locale,
  155|  79.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  79.7k|                scn::runtime_format(f));
  157|  79.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.9k, False: 51.8k]
  ------------------
  158|  27.9k|                break;
  159|  27.9k|            }
  160|  51.8k|            it = result->begin();
  161|  51.8k|        }
  162|  27.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.65k|    {
  166|  4.65k|        auto it = scn::ranges::begin(source);
  167|  14.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.7k|            auto result = scn::scan_value<T>(
  170|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.65k, False: 10.1k]
  ------------------
  172|  4.65k|                break;
  173|  4.65k|            }
  174|  10.1k|            it = result->begin();
  175|  10.1k|        }
  176|  4.65k|    }
  177|  4.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.65k|{
  133|       |    // Regular scan
  134|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.9k, False: 4.65k]
  ------------------
  135|  27.9k|        auto it = scn::ranges::begin(source);
  136|  83.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  83.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  83.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  83.7k|            auto result = scn::scan<T>(
  139|  83.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  83.7k|                scn::runtime_format(f));
  141|  83.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.9k, False: 55.7k]
  ------------------
  142|  27.9k|                break;
  143|  27.9k|            }
  144|  55.7k|            it = result->begin();
  145|  55.7k|        }
  146|  27.9k|    }
  147|       |
  148|       |    // scan localized
  149|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.9k, False: 4.65k]
  ------------------
  150|  27.9k|        auto it = scn::ranges::begin(source);
  151|  83.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  83.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  83.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  83.7k|            auto result = scn::scan<T>(
  154|  83.7k|                global_locale,
  155|  83.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  83.7k|                scn::runtime_format(f));
  157|  83.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.9k, False: 55.7k]
  ------------------
  158|  27.9k|                break;
  159|  27.9k|            }
  160|  55.7k|            it = result->begin();
  161|  55.7k|        }
  162|  27.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.65k|    {
  166|  4.65k|        auto it = scn::ranges::begin(source);
  167|  16.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  16.0k|            auto result = scn::scan_value<T>(
  170|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  16.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.65k, False: 11.4k]
  ------------------
  172|  4.65k|                break;
  173|  4.65k|            }
  174|  11.4k|            it = result->begin();
  175|  11.4k|        }
  176|  4.65k|    }
  177|  4.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.65k|{
  133|       |    // Regular scan
  134|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.9k, False: 4.65k]
  ------------------
  135|  27.9k|        auto it = scn::ranges::begin(source);
  136|  85.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  85.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  85.4k|            auto result = scn::scan<T>(
  139|  85.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  85.4k|                scn::runtime_format(f));
  141|  85.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.9k, False: 57.4k]
  ------------------
  142|  27.9k|                break;
  143|  27.9k|            }
  144|  57.4k|            it = result->begin();
  145|  57.4k|        }
  146|  27.9k|    }
  147|       |
  148|       |    // scan localized
  149|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.9k, False: 4.65k]
  ------------------
  150|  27.9k|        auto it = scn::ranges::begin(source);
  151|  85.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  85.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  85.4k|            auto result = scn::scan<T>(
  154|  85.4k|                global_locale,
  155|  85.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  85.4k|                scn::runtime_format(f));
  157|  85.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.9k, False: 57.4k]
  ------------------
  158|  27.9k|                break;
  159|  27.9k|            }
  160|  57.4k|            it = result->begin();
  161|  57.4k|        }
  162|  27.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.65k|    {
  166|  4.65k|        auto it = scn::ranges::begin(source);
  167|  16.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  16.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  16.6k|            auto result = scn::scan_value<T>(
  170|  16.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  16.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.65k, False: 11.9k]
  ------------------
  172|  4.65k|                break;
  173|  4.65k|            }
  174|  11.9k|            it = result->begin();
  175|  11.9k|        }
  176|  4.65k|    }
  177|  4.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.65k|{
  133|       |    // Regular scan
  134|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.9k, False: 4.65k]
  ------------------
  135|  27.9k|        auto it = scn::ranges::begin(source);
  136|  79.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  79.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  79.7k|            auto result = scn::scan<T>(
  139|  79.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  79.7k|                scn::runtime_format(f));
  141|  79.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.9k, False: 51.7k]
  ------------------
  142|  27.9k|                break;
  143|  27.9k|            }
  144|  51.7k|            it = result->begin();
  145|  51.7k|        }
  146|  27.9k|    }
  147|       |
  148|       |    // scan localized
  149|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.9k, False: 4.65k]
  ------------------
  150|  27.9k|        auto it = scn::ranges::begin(source);
  151|  79.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  79.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  79.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  79.7k|            auto result = scn::scan<T>(
  154|  79.7k|                global_locale,
  155|  79.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  79.7k|                scn::runtime_format(f));
  157|  79.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.9k, False: 51.7k]
  ------------------
  158|  27.9k|                break;
  159|  27.9k|            }
  160|  51.7k|            it = result->begin();
  161|  51.7k|        }
  162|  27.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.65k|    {
  166|  4.65k|        auto it = scn::ranges::begin(source);
  167|  14.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.7k|            auto result = scn::scan_value<T>(
  170|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.65k, False: 10.1k]
  ------------------
  172|  4.65k|                break;
  173|  4.65k|            }
  174|  10.1k|            it = result->begin();
  175|  10.1k|        }
  176|  4.65k|    }
  177|  4.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.65k|{
  133|       |    // Regular scan
  134|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.9k, False: 4.65k]
  ------------------
  135|  27.9k|        auto it = scn::ranges::begin(source);
  136|  83.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  83.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  83.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  83.6k|            auto result = scn::scan<T>(
  139|  83.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  83.6k|                scn::runtime_format(f));
  141|  83.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.9k, False: 55.7k]
  ------------------
  142|  27.9k|                break;
  143|  27.9k|            }
  144|  55.7k|            it = result->begin();
  145|  55.7k|        }
  146|  27.9k|    }
  147|       |
  148|       |    // scan localized
  149|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.9k, False: 4.65k]
  ------------------
  150|  27.9k|        auto it = scn::ranges::begin(source);
  151|  83.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  83.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  83.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  83.6k|            auto result = scn::scan<T>(
  154|  83.6k|                global_locale,
  155|  83.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  83.6k|                scn::runtime_format(f));
  157|  83.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.9k, False: 55.7k]
  ------------------
  158|  27.9k|                break;
  159|  27.9k|            }
  160|  55.7k|            it = result->begin();
  161|  55.7k|        }
  162|  27.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.65k|    {
  166|  4.65k|        auto it = scn::ranges::begin(source);
  167|  16.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  16.0k|            auto result = scn::scan_value<T>(
  170|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  16.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.65k, False: 11.4k]
  ------------------
  172|  4.65k|                break;
  173|  4.65k|            }
  174|  11.4k|            it = result->begin();
  175|  11.4k|        }
  176|  4.65k|    }
  177|  4.65k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.65k|{
  133|       |    // Regular scan
  134|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.9k, False: 4.65k]
  ------------------
  135|  27.9k|        auto it = scn::ranges::begin(source);
  136|  85.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  85.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  85.3k|            auto result = scn::scan<T>(
  139|  85.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  85.3k|                scn::runtime_format(f));
  141|  85.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.9k, False: 57.4k]
  ------------------
  142|  27.9k|                break;
  143|  27.9k|            }
  144|  57.4k|            it = result->begin();
  145|  57.4k|        }
  146|  27.9k|    }
  147|       |
  148|       |    // scan localized
  149|  27.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.9k, False: 4.65k]
  ------------------
  150|  27.9k|        auto it = scn::ranges::begin(source);
  151|  85.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  85.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  85.3k|            auto result = scn::scan<T>(
  154|  85.3k|                global_locale,
  155|  85.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  85.3k|                scn::runtime_format(f));
  157|  85.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.9k, False: 57.4k]
  ------------------
  158|  27.9k|                break;
  159|  27.9k|            }
  160|  57.4k|            it = result->begin();
  161|  57.4k|        }
  162|  27.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.65k|    {
  166|  4.65k|        auto it = scn::ranges::begin(source);
  167|  16.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  16.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  16.6k|            auto result = scn::scan_value<T>(
  170|  16.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  16.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.65k, False: 11.9k]
  ------------------
  172|  4.65k|                break;
  173|  4.65k|            }
  174|  11.9k|            it = result->begin();
  175|  11.9k|        }
  176|  4.65k|    }
  177|  4.65k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.65k|{
   90|  4.65k|    using char_type = ranges::range_value_t<Source>;
   91|  4.65k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.65k|    deque.clear();
   93|  4.65k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.65k|              std::back_inserter(deque));
   95|  4.65k|    return deque;
   96|  4.65k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.65k|{
   79|  4.65k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.65k|        return noncontiguous_buffer;
   81|  4.65k|    }
   82|  4.65k|    else {
   83|  4.65k|        return wnoncontiguous_buffer;
   84|  4.65k|    }
   85|  4.65k|}

