_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|  1.53M|                    parse_options_t<UC> options) noexcept {
  286|  1.53M|  chars_format const fmt = options.format;
  287|  1.53M|  UC const decimal_point = options.decimal_point;
  288|       |
  289|  1.53M|  parsed_number_string_t<UC> answer;
  290|  1.53M|  answer.valid = false;
  291|  1.53M|  answer.too_many_digits = false;
  292|  1.53M|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|  1.53M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 1.53M]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|  1.53M|  UC const *const start_digits = p;
  318|       |
  319|  1.53M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  8.68M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 7.91M, False: 774k]
  |  Branch (321:25): [True: 7.15M, False: 757k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|  7.15M|    i = 10 * i +
  325|  7.15M|        uint64_t(*p -
  326|  7.15M|                 UC('0')); // might overflow, we will handle the overflow later
  327|  7.15M|    ++p;
  328|  7.15M|  }
  329|  1.53M|  UC const *const end_of_integer_part = p;
  330|  1.53M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|  1.53M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|  1.53M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.53M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 1.53M]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|  1.53M|  int64_t exponent = 0;
  344|  1.53M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 757k, False: 774k]
  |  Branch (344:49): [True: 293k, False: 463k]
  ------------------
  345|  1.53M|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 293k, False: 1.23M]
  ------------------
  346|   293k|    ++p;
  347|   293k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|   293k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  1.20M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 1.01M, False: 185k]
  |  Branch (352:27): [True: 911k, False: 107k]
  ------------------
  353|   911k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|   911k|      ++p;
  355|   911k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|   911k|    }
  357|   293k|    exponent = before - p;
  358|   293k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|   293k|    digit_count -= exponent;
  360|   293k|  }
  361|  1.53M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.53M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 1.53M]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|  1.53M|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 1.53M]
  ------------------
  368|  1.53M|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|  1.53M|  int64_t exp_number = 0; // explicit exponential part
  372|  1.53M|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 1.31M, False: 218k]
  |  Branch (372:44): [True: 571k, False: 742k]
  ------------------
  373|  1.53M|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 118k, False: 453k]
  |  Branch (373:28): [True: 68.7k, False: 384k]
  ------------------
  374|  1.53M|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|  1.34M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 1.34M]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|  1.34M|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|   187k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|   187k|    UC const *location_of_e = p;
  378|   187k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 118k, False: 68.7k]
  |  Branch (378:28): [True: 68.7k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|   187k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|   187k|      ++p;
  381|   187k|    }
  382|   187k|    bool neg_exp = false;
  383|   187k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 186k, False: 125]
  |  Branch (383:24): [True: 14.1k, False: 172k]
  ------------------
  384|  14.1k|      neg_exp = true;
  385|  14.1k|      ++p;
  386|   172k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 172k, False: 125]
  ------------------
  387|   172k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 41.5k, False: 131k]
  ------------------
  388|   172k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|  41.5k|      ++p;
  390|  41.5k|    }
  391|   187k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 175, False: 186k]
  |  Branch (391:24): [True: 750, False: 186k]
  ------------------
  392|    925|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 925]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    925|      p = location_of_e;
  400|   186k|    } else {
  401|   594k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 456k, False: 137k]
  |  Branch (401:29): [True: 408k, False: 48.5k]
  ------------------
  402|   408k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|   408k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 374k, False: 33.2k]
  ------------------
  404|   374k|          exp_number = 10 * exp_number + digit;
  405|   374k|        }
  406|   408k|        ++p;
  407|   408k|      }
  408|   186k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 14.0k, False: 172k]
  ------------------
  409|  14.0k|        exp_number = -exp_number;
  410|  14.0k|      }
  411|   186k|      exponent += exp_number;
  412|   186k|    }
  413|  1.34M|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|  1.34M|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 1.12M, False: 218k]
  |  Branch (415:45): [True: 0, False: 1.12M]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|  1.34M|  }
  419|  1.53M|  answer.lastmatch = p;
  420|  1.53M|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|  1.53M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 277k, False: 1.25M]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|   277k|    UC const *start = start_digits;
  433|  1.12M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 1.12M, False: 2.45k]
  |  Branch (433:32): [True: 839k, False: 285k]
  |  Branch (433:53): [True: 10.8k, False: 274k]
  ------------------
  434|   850k|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 839k, False: 10.8k]
  ------------------
  435|   839k|        digit_count--;
  436|   839k|      }
  437|   850k|      start++;
  438|   850k|    }
  439|       |
  440|   277k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 262k, False: 14.9k]
  ------------------
  441|   262k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|   262k|      i = 0;
  446|   262k|      p = answer.integer.ptr;
  447|   262k|      UC const *int_end = p + answer.integer.len();
  448|   262k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  2.93M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 2.85M, False: 81.2k]
  |  Branch (449:54): [True: 2.67M, False: 180k]
  ------------------
  450|  2.67M|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  2.67M|        ++p;
  452|  2.67M|      }
  453|   262k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 81.2k, False: 180k]
  ------------------
  454|  81.2k|        exponent = end_of_integer_part - p + exp_number;
  455|   180k|      } else { // We have a value with a fractional component.
  456|   180k|        p = answer.fraction.ptr;
  457|   180k|        UC const *frac_end = p + answer.fraction.len();
  458|  3.08M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 2.90M, False: 180k]
  |  Branch (458:56): [True: 2.90M, False: 0]
  ------------------
  459|  2.90M|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  2.90M|          ++p;
  461|  2.90M|        }
  462|   180k|        exponent = answer.fraction.ptr - p + exp_number;
  463|   180k|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|   262k|    }
  466|   277k|  }
  467|  1.53M|  answer.exponent = exponent;
  468|  1.53M|  answer.mantissa = i;
  469|  1.53M|  return answer;
  470|  1.53M|}
_ZN10fast_float10is_integerIcEEbT_:
   34|  9.57M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  9.57M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 213k, False: 9.36M]
  |  Branch (35:27): [True: 700k, False: 8.66M]
  ------------------
   36|  9.57M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  224|   293k|                           uint64_t &i) {
  225|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  226|  1.04M|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (226:10): [True: 837k, False: 205k]
  ------------------
  227|  1.04M|         is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (227:10): [True: 749k, False: 88.0k]
  ------------------
  228|   749k|    i = i * 100000000 +
  229|   749k|        parse_eight_digits_unrolled(read8_to_u64(
  230|   749k|            p)); // in rare cases, this will overflow, but that's ok
  231|   749k|    p += 8;
  232|   749k|  }
  233|   293k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  142|   837k|is_made_of_eight_digits_fast(uint64_t val) noexcept {
  143|   837k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  144|   837k|            0x8080808080808080));
  145|   837k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   48|  1.89M|read8_to_u64(const UC *chars) {
   49|  1.89M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|      0|    uint64_t val = 0;
   51|      0|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 0, False: 0]
  ------------------
   52|      0|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|      0|      ++chars;
   54|      0|    }
   55|      0|    return val;
   56|      0|  }
   57|  1.89M|  uint64_t val;
   58|  1.89M|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|  1.89M|  return val;
   64|  1.89M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  120|  1.05M|parse_eight_digits_unrolled(uint64_t val) {
  121|  1.05M|  const uint64_t mask = 0x000000FF000000FF;
  122|  1.05M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  123|  1.05M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  124|  1.05M|  val -= 0x3030303030303030;
  125|  1.05M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  126|  1.05M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  127|  1.05M|  return uint32_t(val);
  128|  1.05M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  133|   310k|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|   310k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|   310k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|   310k|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|   310k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   659k|                    parse_options_t<UC> options) noexcept {
  286|   659k|  chars_format const fmt = options.format;
  287|   659k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   659k|  parsed_number_string_t<UC> answer;
  290|   659k|  answer.valid = false;
  291|   659k|  answer.too_many_digits = false;
  292|   659k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   659k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 659k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   659k|  UC const *const start_digits = p;
  318|       |
  319|   659k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  1.42M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 978k, False: 444k]
  |  Branch (321:25): [True: 763k, False: 214k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|   763k|    i = 10 * i +
  325|   763k|        uint64_t(*p -
  326|   763k|                 UC('0')); // might overflow, we will handle the overflow later
  327|   763k|    ++p;
  328|   763k|  }
  329|   659k|  UC const *const end_of_integer_part = p;
  330|   659k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   659k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   659k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   659k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 659k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   659k|  int64_t exponent = 0;
  344|   659k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 214k, False: 444k]
  |  Branch (344:49): [True: 3.53k, False: 211k]
  ------------------
  345|   659k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 3.53k, False: 655k]
  ------------------
  346|  3.53k|    ++p;
  347|  3.53k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|  3.53k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  23.6k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 21.4k, False: 2.23k]
  |  Branch (352:27): [True: 20.1k, False: 1.30k]
  ------------------
  353|  20.1k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|  20.1k|      ++p;
  355|  20.1k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|  20.1k|    }
  357|  3.53k|    exponent = before - p;
  358|  3.53k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|  3.53k|    digit_count -= exponent;
  360|  3.53k|  }
  361|   659k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   659k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 659k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   659k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 659k]
  ------------------
  368|   659k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   659k|  int64_t exp_number = 0; // explicit exponential part
  372|   659k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 542k, False: 116k]
  |  Branch (372:44): [True: 212k, False: 330k]
  ------------------
  373|   659k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 425, False: 212k]
  |  Branch (373:28): [True: 22.6k, False: 189k]
  ------------------
  374|   659k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   636k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 636k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   636k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|  23.0k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|  23.0k|    UC const *location_of_e = p;
  378|  23.0k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 425, False: 22.6k]
  |  Branch (378:28): [True: 22.6k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|  23.0k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|  23.0k|      ++p;
  381|  23.0k|    }
  382|  23.0k|    bool neg_exp = false;
  383|  23.0k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 23.0k, False: 30]
  |  Branch (383:24): [True: 6.22k, False: 16.8k]
  ------------------
  384|  6.22k|      neg_exp = true;
  385|  6.22k|      ++p;
  386|  16.8k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 16.8k, False: 30]
  ------------------
  387|  16.8k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 351, False: 16.4k]
  ------------------
  388|  16.8k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|    351|      ++p;
  390|    351|    }
  391|  23.0k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 50, False: 23.0k]
  |  Branch (391:24): [True: 580, False: 22.4k]
  ------------------
  392|    630|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 630]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    630|      p = location_of_e;
  400|  22.4k|    } else {
  401|  83.1k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 67.7k, False: 15.3k]
  |  Branch (401:29): [True: 60.6k, False: 7.09k]
  ------------------
  402|  60.6k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|  60.6k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 57.1k, False: 3.58k]
  ------------------
  404|  57.1k|          exp_number = 10 * exp_number + digit;
  405|  57.1k|        }
  406|  60.6k|        ++p;
  407|  60.6k|      }
  408|  22.4k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 6.18k, False: 16.2k]
  ------------------
  409|  6.18k|        exp_number = -exp_number;
  410|  6.18k|      }
  411|  22.4k|      exponent += exp_number;
  412|  22.4k|    }
  413|   636k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   636k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 519k, False: 116k]
  |  Branch (415:45): [True: 0, False: 519k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   636k|  }
  419|   659k|  answer.lastmatch = p;
  420|   659k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   659k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 2.22k, False: 656k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|  2.22k|    UC const *start = start_digits;
  433|  2.79k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 2.79k, False: 0]
  |  Branch (433:32): [True: 576, False: 2.22k]
  |  Branch (433:53): [True: 0, False: 2.22k]
  ------------------
  434|    576|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 576, False: 0]
  ------------------
  435|    576|        digit_count--;
  436|    576|      }
  437|    576|      start++;
  438|    576|    }
  439|       |
  440|  2.22k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 1.94k, False: 272]
  ------------------
  441|  1.94k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|  1.94k|      i = 0;
  446|  1.94k|      p = answer.integer.ptr;
  447|  1.94k|      UC const *int_end = p + answer.integer.len();
  448|  1.94k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  30.7k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 29.7k, False: 1.02k]
  |  Branch (449:54): [True: 28.8k, False: 920]
  ------------------
  450|  28.8k|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  28.8k|        ++p;
  452|  28.8k|      }
  453|  1.94k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 1.02k, False: 920]
  ------------------
  454|  1.02k|        exponent = end_of_integer_part - p + exp_number;
  455|  1.02k|      } else { // We have a value with a fractional component.
  456|    920|        p = answer.fraction.ptr;
  457|    920|        UC const *frac_end = p + answer.fraction.len();
  458|  9.31k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 8.39k, False: 920]
  |  Branch (458:56): [True: 8.39k, False: 0]
  ------------------
  459|  8.39k|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  8.39k|          ++p;
  461|  8.39k|        }
  462|    920|        exponent = answer.fraction.ptr - p + exp_number;
  463|    920|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|  1.94k|    }
  466|  2.22k|  }
  467|   659k|  answer.exponent = exponent;
  468|   659k|  answer.mantissa = i;
  469|   659k|  return answer;
  470|   659k|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|  1.09M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  1.09M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 218k, False: 871k]
  |  Branch (35:27): [True: 4.96k, False: 866k]
  ------------------
   36|  1.09M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  211|  3.53k|loop_parse_if_eight_digits(const UC *&p, const UC *const pend, uint64_t &i) {
  212|  3.53k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (212:7): [Folded - Ignored]
  ------------------
  213|  3.53k|    return;
  214|  3.53k|  }
  215|      0|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (215:10): [True: 0, False: 0]
  ------------------
  216|      0|         simd_parse_if_eight_digits_unrolled(
  ------------------
  |  Branch (216:10): [True: 0, False: 0]
  ------------------
  217|      0|             p, i)) { // in rare cases, this will overflow, but that's ok
  218|      0|    p += 8;
  219|      0|  }
  220|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  133|    108|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|    108|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   48|    108|read8_to_u64(const UC *chars) {
   49|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|    108|    uint64_t val = 0;
   51|    972|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 864, False: 108]
  ------------------
   52|    864|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|    864|      ++chars;
   54|    864|    }
   55|    108|    return val;
   56|    108|  }
   57|      0|  uint64_t val;
   58|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|      0|  return val;
   64|    108|}

_ZN10fast_float6bigintC2Ev:
  425|  84.0k|  FASTFLOAT_CONSTEXPR20 bigint() : vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   45|   177k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  577|   279k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept { return small_mul(vec, y); }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   409k|                                            limb y) noexcept {
  276|   409k|  limb carry = 0;
  277|  1.51M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (277:26): [True: 1.10M, False: 409k]
  ------------------
  278|  1.10M|    vec[index] = scalar_mul(vec[index], y, carry);
  279|  1.10M|  }
  280|   409k|  if (carry != 0) {
  ------------------
  |  Branch (280:7): [True: 234k, False: 175k]
  ------------------
  281|   234k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   234k|  {                                                                            \
  |  |  179|   234k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 234k]
  |  |  ------------------
  |  |  180|   234k|      return false;                                                            \
  |  |  181|   234k|  }
  ------------------
  282|   234k|  }
  283|   409k|  return true;
  284|   409k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   75|  3.01M|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float10scalar_mulEmmRm:
  222|  1.10M|scalar_mul(limb x, limb y, limb &carry) noexcept {
  223|  1.10M|#ifdef FASTFLOAT_64BIT_LIMB
  224|  1.10M|#if defined(__SIZEOF_INT128__)
  225|       |  // GCC and clang both define it as an extension.
  226|  1.10M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  227|  1.10M|  carry = limb(z >> limb_bits);
  228|  1.10M|  return limb(z);
  229|       |#else
  230|       |  // fallback, no native 128-bit integer multiplication with carry.
  231|       |  // on msvc, this optimizes identically, somehow.
  232|       |  value128 z = full_multiplication(x, y);
  233|       |  bool overflow;
  234|       |  z.low = scalar_add(z.low, carry, overflow);
  235|       |  z.high += uint64_t(overflow); // cannot overflow
  236|       |  carry = z.high;
  237|       |  return z.low;
  238|       |#endif
  239|       |#else
  240|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  241|       |  carry = limb(z >> limb_bits);
  242|       |  return limb(z);
  243|       |#endif
  244|  1.10M|}
_ZN10fast_float8stackvecILt62EEixEm:
   56|  3.09M|  FASTFLOAT_CONSTEXPR14 limb &operator[](size_t index) noexcept {
   57|  3.09M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  3.09M|  { ((void)(x)); }
  ------------------
   58|  3.09M|    return data[index];
   59|  3.09M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   84|   337k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   85|   337k|    if (len() < capacity()) {
  ------------------
  |  Branch (85:9): [True: 337k, False: 0]
  ------------------
   86|   337k|      push_unchecked(value);
   87|   337k|      return true;
   88|   337k|    } else {
   89|      0|      return false;
   90|      0|    }
   91|   337k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   77|   383k|  constexpr size_t capacity() const noexcept { return size; }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   79|   414k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   80|   414k|    data[length] = value;
   81|   414k|    length++;
   82|   414k|  }
_ZN10fast_float6bigint3addEm:
  579|   279k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept { return small_add(vec, y); }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  268|   279k|small_add(stackvec<size> &vec, limb y) noexcept {
  269|   279k|  return small_add_from(vec, y, 0);
  270|   279k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  250|   279k|                                                 size_t start) noexcept {
  251|   279k|  size_t index = start;
  252|   279k|  limb carry = y;
  253|   279k|  bool overflow;
  254|   427k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (254:10): [True: 232k, False: 195k]
  |  Branch (254:24): [True: 148k, False: 84.0k]
  ------------------
  255|   148k|    vec[index] = scalar_add(vec[index], carry, overflow);
  256|   148k|    carry = limb(overflow);
  257|   148k|    index += 1;
  258|   148k|  }
  259|   279k|  if (carry != 0) {
  ------------------
  |  Branch (259:7): [True: 84.0k, False: 195k]
  ------------------
  260|  84.0k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  84.0k|  {                                                                            \
  |  |  179|  84.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 84.0k]
  |  |  ------------------
  |  |  180|  84.0k|      return false;                                                            \
  |  |  181|  84.0k|  }
  ------------------
  261|  84.0k|  }
  262|   279k|  return true;
  263|   279k|}
_ZN10fast_float10scalar_addEmmRb:
  202|   311k|scalar_add(limb x, limb y, bool &overflow) noexcept {
  203|   311k|  limb z;
  204|       |// gcc and clang
  205|   311k|#if defined(__has_builtin)
  206|   311k|#if __has_builtin(__builtin_add_overflow)
  207|   311k|  if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (207:7): [Folded - Ignored]
  ------------------
  208|   311k|    overflow = __builtin_add_overflow(x, y, &z);
  209|   311k|    return z;
  210|   311k|  }
  211|      0|#endif
  212|      0|#endif
  213|       |
  214|       |  // generic, this still optimizes correctly on MSVC.
  215|      0|  z = x + y;
  216|      0|  overflow = z < x;
  217|      0|  return z;
  218|   311k|}
_ZN10fast_float6bigint5pow10Ej:
  616|  6.86k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  617|  6.86k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  6.86k|  {                                                                            \
  |  |  179|  6.86k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 6.86k]
  |  |  ------------------
  |  |  180|  6.86k|      return false;                                                            \
  |  |  181|  6.86k|  }
  ------------------
  618|  6.86k|    return pow2(exp);
  619|  6.86k|  }
_ZN10fast_float6bigint4pow5Ej:
  585|  84.0k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  586|       |    // multiply by a power of 5
  587|  84.0k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  588|  84.0k|    limb_span large = limb_span(large_power_of_5, large_length);
  589|  88.1k|    while (exp >= large_step) {
  ------------------
  |  Branch (589:12): [True: 4.10k, False: 84.0k]
  ------------------
  590|  4.10k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  4.10k|  {                                                                            \
  |  |  179|  4.10k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 4.10k]
  |  |  ------------------
  |  |  180|  4.10k|      return false;                                                            \
  |  |  181|  4.10k|  }
  ------------------
  591|  4.10k|      exp -= large_step;
  592|  4.10k|    }
  593|  84.0k|#ifdef FASTFLOAT_64BIT_LIMB
  594|  84.0k|    uint32_t small_step = 27;
  595|  84.0k|    limb max_native = 7450580596923828125UL;
  596|       |#else
  597|       |    uint32_t small_step = 13;
  598|       |    limb max_native = 1220703125U;
  599|       |#endif
  600|   121k|    while (exp >= small_step) {
  ------------------
  |  Branch (600:12): [True: 37.1k, False: 84.0k]
  ------------------
  601|  37.1k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  37.1k|  {                                                                            \
  |  |  179|  37.1k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 37.1k]
  |  |  ------------------
  |  |  180|  37.1k|      return false;                                                            \
  |  |  181|  37.1k|  }
  ------------------
  602|  37.1k|      exp -= small_step;
  603|  37.1k|    }
  604|  84.0k|    if (exp != 0) {
  ------------------
  |  Branch (604:9): [True: 72.4k, False: 11.5k]
  ------------------
  605|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  606|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  607|       |      // except the workaround described there don't work here
  608|  72.4k|      FASTFLOAT_TRY(small_mul(
  ------------------
  |  |  178|  72.4k|  {                                                                            \
  |  |  179|  72.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 72.4k]
  |  |  ------------------
  |  |  180|  72.4k|      return false;                                                            \
  |  |  181|  72.4k|  }
  ------------------
  609|  72.4k|          vec, limb(((void)small_power_of_5[0], small_power_of_5[exp]))));
  610|  72.4k|    }
  611|       |
  612|  84.0k|    return true;
  613|  84.0k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  355|  4.10k|FASTFLOAT_CONSTEXPR20 bool large_mul(stackvec<size> &x, limb_span y) noexcept {
  356|  4.10k|  if (y.len() == 1) {
  ------------------
  |  Branch (356:7): [True: 0, False: 4.10k]
  ------------------
  357|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  358|  4.10k|  } else {
  359|  4.10k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  4.10k|  {                                                                            \
  |  |  179|  4.10k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 4.10k]
  |  |  ------------------
  |  |  180|  4.10k|      return false;                                                            \
  |  |  181|  4.10k|  }
  ------------------
  360|  4.10k|  }
  361|  4.10k|  return true;
  362|  4.10k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  327|  4.10k|FASTFLOAT_CONSTEXPR20 bool long_mul(stackvec<size> &x, limb_span y) noexcept {
  328|  4.10k|  limb_span xs = limb_span(x.data, x.len());
  329|  4.10k|  stackvec<size> z(xs);
  330|  4.10k|  limb_span zs = limb_span(z.data, z.len());
  331|       |
  332|  4.10k|  if (y.len() != 0) {
  ------------------
  |  Branch (332:7): [True: 4.10k, False: 0]
  ------------------
  333|  4.10k|    limb y0 = y[0];
  334|  4.10k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  4.10k|  {                                                                            \
  |  |  179|  4.10k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 4.10k]
  |  |  ------------------
  |  |  180|  4.10k|      return false;                                                            \
  |  |  181|  4.10k|  }
  ------------------
  335|  20.5k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (335:28): [True: 16.4k, False: 4.10k]
  ------------------
  336|  16.4k|      limb yi = y[index];
  337|  16.4k|      stackvec<size> zi;
  338|  16.4k|      if (yi != 0) {
  ------------------
  |  Branch (338:11): [True: 16.4k, False: 0]
  ------------------
  339|       |        // re-use the same buffer throughout
  340|  16.4k|        zi.set_len(0);
  341|  16.4k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  16.4k|  {                                                                            \
  |  |  179|  16.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 16.4k]
  |  |  ------------------
  |  |  180|  16.4k|      return false;                                                            \
  |  |  181|  16.4k|  }
  ------------------
  342|  16.4k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  16.4k|  {                                                                            \
  |  |  179|  16.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 16.4k]
  |  |  ------------------
  |  |  180|  16.4k|      return false;                                                            \
  |  |  181|  16.4k|  }
  ------------------
  343|  16.4k|        limb_span zis = limb_span(zi.data, zi.len());
  344|  16.4k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  16.4k|  {                                                                            \
  |  |  179|  16.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 16.4k]
  |  |  ------------------
  |  |  180|  16.4k|      return false;                                                            \
  |  |  181|  16.4k|  }
  ------------------
  345|  16.4k|      }
  346|  16.4k|    }
  347|  4.10k|  }
  348|       |
  349|  4.10k|  x.normalize();
  350|  4.10k|  return true;
  351|  4.10k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   52|  4.10k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   53|  4.10k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  168|  4.10k|  { ((void)(x)); }
  ------------------
   54|  4.10k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   72|  62.6k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   73|  62.6k|    length = uint16_t(len);
   74|  62.6k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
   99|  20.5k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  100|  20.5k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (100:9): [True: 20.5k, False: 0]
  ------------------
  101|  20.5k|      extend_unchecked(s);
  102|  20.5k|      return true;
  103|  20.5k|    } else {
  104|      0|      return false;
  105|      0|    }
  106|  20.5k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
   93|  20.5k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
   94|  20.5k|    limb *ptr = data + length;
   95|  20.5k|    std::copy_n(s.ptr, s.len(), ptr);
   96|  20.5k|    set_len(len() + s.len());
   97|  20.5k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  290|  16.4k|                                          size_t start) noexcept {
  291|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  292|       |  // if we can't get that current range.
  293|  16.4k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (293:7): [True: 0, False: 16.4k]
  |  Branch (293:26): [True: 16.1k, False: 288]
  ------------------
  294|  16.1k|    FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  16.1k|  {                                                                            \
  |  |  179|  16.1k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 16.1k]
  |  |  ------------------
  |  |  180|  16.1k|      return false;                                                            \
  |  |  181|  16.1k|  }
  ------------------
  295|  16.1k|  }
  296|       |
  297|  16.4k|  bool carry = false;
  298|   135k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (298:26): [True: 119k, False: 16.4k]
  ------------------
  299|   119k|    limb xi = x[index + start];
  300|   119k|    limb yi = y[index];
  301|   119k|    bool c1 = false;
  302|   119k|    bool c2 = false;
  303|   119k|    xi = scalar_add(xi, yi, c1);
  304|   119k|    if (carry) {
  ------------------
  |  Branch (304:9): [True: 44.4k, False: 74.6k]
  ------------------
  305|  44.4k|      xi = scalar_add(xi, 1, c2);
  306|  44.4k|    }
  307|   119k|    x[index + start] = xi;
  308|   119k|    carry = c1 | c2;
  309|   119k|  }
  310|       |
  311|       |  // handle overflow
  312|  16.4k|  if (carry) {
  ------------------
  |  Branch (312:7): [True: 0, False: 16.4k]
  ------------------
  313|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  314|      0|  }
  315|  16.4k|  return true;
  316|  16.4k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  123|  16.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  124|  16.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (124:9): [True: 0, False: 16.1k]
  ------------------
  125|      0|      return false;
  126|  16.1k|    } else {
  127|  16.1k|      resize_unchecked(new_len, value);
  128|  16.1k|      return true;
  129|  16.1k|    }
  130|  16.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  111|  16.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  112|  16.1k|    if (new_len > len()) {
  ------------------
  |  Branch (112:9): [True: 16.1k, False: 0]
  ------------------
  113|  16.1k|      size_t count = new_len - len();
  114|  16.1k|      limb *first = data + len();
  115|  16.1k|      limb *last = first + count;
  116|  16.1k|      ::std::fill(first, last, value);
  117|  16.1k|      set_len(new_len);
  118|  16.1k|    } else {
  119|      0|      set_len(new_len);
  120|      0|    }
  121|  16.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  144|  81.2k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  145|  81.2k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (145:12): [True: 81.2k, False: 0]
  |  Branch (145:25): [True: 0, False: 81.2k]
  ------------------
  146|      0|      length--;
  147|      0|    }
  148|  81.2k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   65|   101k|  FASTFLOAT_CONSTEXPR14 const limb &rindex(size_t index) const noexcept {
   66|   101k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   101k|  { ((void)(x)); }
  ------------------
   67|   101k|    size_t rindex = length - index - 1;
   68|   101k|    return data[rindex];
   69|   101k|  }
_ZN10fast_float6bigint4pow2Ej:
  582|  83.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept { return shl(exp); }
_ZN10fast_float6bigint3shlEm:
  544|  83.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  545|  83.9k|    size_t rem = n % limb_bits;
  546|  83.9k|    size_t div = n / limb_bits;
  547|  83.9k|    if (rem != 0) {
  ------------------
  |  Branch (547:9): [True: 77.3k, False: 6.62k]
  ------------------
  548|  77.3k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  77.3k|  {                                                                            \
  |  |  179|  77.3k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 77.3k]
  |  |  ------------------
  |  |  180|  77.3k|      return false;                                                            \
  |  |  181|  77.3k|  }
  ------------------
  549|  77.3k|    }
  550|  83.9k|    if (div != 0) {
  ------------------
  |  Branch (550:9): [True: 9.63k, False: 74.3k]
  ------------------
  551|  9.63k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  9.63k|  {                                                                            \
  |  |  179|  9.63k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 9.63k]
  |  |  ------------------
  |  |  180|  9.63k|      return false;                                                            \
  |  |  181|  9.63k|  }
  ------------------
  552|  9.63k|    }
  553|  83.9k|    return true;
  554|  83.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  497|  77.3k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  498|       |    // Internally, for each item, we shift left by n, and add the previous
  499|       |    // right shifted limb-bits.
  500|       |    // For example, we transform (for u8) shifted left 2, to:
  501|       |    //      b10100100 b01000010
  502|       |    //      b10 b10010001 b00001000
  503|  77.3k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  77.3k|  { ((void)(x)); }
  ------------------
  504|  77.3k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  173|  77.3k|  { ((void)(x)); }
  ------------------
  505|       |
  506|  77.3k|    size_t shl = n;
  507|  77.3k|    size_t shr = limb_bits - shl;
  508|  77.3k|    limb prev = 0;
  509|   250k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (509:28): [True: 173k, False: 77.3k]
  ------------------
  510|   173k|      limb xi = vec[index];
  511|   173k|      vec[index] = (xi << shl) | (prev >> shr);
  512|   173k|      prev = xi;
  513|   173k|    }
  514|       |
  515|  77.3k|    limb carry = prev >> shr;
  516|  77.3k|    if (carry != 0) {
  ------------------
  |  Branch (516:9): [True: 19.2k, False: 58.0k]
  ------------------
  517|  19.2k|      return vec.try_push(carry);
  518|  19.2k|    }
  519|  58.0k|    return true;
  520|  77.3k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  523|  9.63k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  524|  9.63k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  9.63k|  { ((void)(x)); }
  ------------------
  525|  9.63k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (525:9): [True: 0, False: 9.63k]
  ------------------
  526|      0|      return false;
  527|  9.63k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (527:16): [True: 9.63k, False: 0]
  ------------------
  528|       |      // move limbs
  529|  9.63k|      limb *dst = vec.data + n;
  530|  9.63k|      const limb *src = vec.data;
  531|  9.63k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  532|       |      // fill in empty limbs
  533|  9.63k|      limb *first = vec.data;
  534|  9.63k|      limb *last = first + n;
  535|  9.63k|      ::std::fill(first, last, 0);
  536|  9.63k|      vec.set_len(n + vec.len());
  537|  9.63k|      return true;
  538|  9.63k|    } else {
  539|      0|      return true;
  540|      0|    }
  541|  9.63k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   76|  16.4k|  constexpr bool is_empty() const noexcept { return length == 0; }
_ZNK10fast_float6bigint4hi64ERb:
  443|  6.86k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool &truncated) const noexcept {
  444|  6.86k|#ifdef FASTFLOAT_64BIT_LIMB
  445|  6.86k|    if (vec.len() == 0) {
  ------------------
  |  Branch (445:9): [True: 0, False: 6.86k]
  ------------------
  446|      0|      return empty_hi64(truncated);
  447|  6.86k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (447:16): [True: 1.16k, False: 5.69k]
  ------------------
  448|  1.16k|      return uint64_hi64(vec.rindex(0), truncated);
  449|  5.69k|    } else {
  450|  5.69k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  451|  5.69k|      truncated |= vec.nonzero(2);
  452|  5.69k|      return result;
  453|  5.69k|    }
  454|       |#else
  455|       |    if (vec.len() == 0) {
  456|       |      return empty_hi64(truncated);
  457|       |    } else if (vec.len() == 1) {
  458|       |      return uint32_hi64(vec.rindex(0), truncated);
  459|       |    } else if (vec.len() == 2) {
  460|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  461|       |    } else {
  462|       |      uint64_t result =
  463|       |          uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  464|       |      truncated |= vec.nonzero(3);
  465|       |      return result;
  466|       |    }
  467|       |#endif
  468|  6.86k|  }
_ZN10fast_float11uint64_hi64EmRb:
  158|  1.16k|uint64_hi64(uint64_t r0, bool &truncated) noexcept {
  159|  1.16k|  truncated = false;
  160|  1.16k|  int shl = leading_zeroes(r0);
  161|  1.16k|  return r0 << shl;
  162|  1.16k|}
_ZN10fast_float11uint64_hi64EmmRb:
  165|  5.69k|uint64_hi64(uint64_t r0, uint64_t r1, bool &truncated) noexcept {
  166|  5.69k|  int shl = leading_zeroes(r0);
  167|  5.69k|  if (shl == 0) {
  ------------------
  |  Branch (167:7): [True: 36, False: 5.66k]
  ------------------
  168|     36|    truncated = r1 != 0;
  169|     36|    return r0;
  170|  5.66k|  } else {
  171|  5.66k|    int shr = 64 - shl;
  172|  5.66k|    truncated = (r1 << shl) != 0;
  173|  5.66k|    return (r0 << shl) | (r1 >> shr);
  174|  5.66k|  }
  175|  5.69k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  134|  5.69k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  135|  5.73k|    while (index < len()) {
  ------------------
  |  Branch (135:12): [True: 577, False: 5.16k]
  ------------------
  136|    577|      if (rindex(index) != 0) {
  ------------------
  |  Branch (136:11): [True: 537, False: 40]
  ------------------
  137|    537|        return true;
  138|    537|      }
  139|     40|      index++;
  140|     40|    }
  141|  5.16k|    return false;
  142|  5.69k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  572|  6.86k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  573|  6.86k|    int lz = ctlz();
  574|  6.86k|    return int(limb_bits * vec.len()) - lz;
  575|  6.86k|  }
_ZNK10fast_float6bigint4ctlzEv:
  557|  6.86k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  558|  6.86k|    if (vec.is_empty()) {
  ------------------
  |  Branch (558:9): [True: 0, False: 6.86k]
  ------------------
  559|      0|      return 0;
  560|  6.86k|    } else {
  561|  6.86k|#ifdef FASTFLOAT_64BIT_LIMB
  562|  6.86k|      return leading_zeroes(vec.rindex(0));
  563|       |#else
  564|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  565|       |      uint64_t r0 = vec.rindex(0);
  566|       |      return leading_zeroes(r0 << 32);
  567|       |#endif
  568|  6.86k|    }
  569|  6.86k|  }
_ZN10fast_float6bigintC2Em:
  431|  77.1k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value) : vec() {
  432|  77.1k|#ifdef FASTFLOAT_64BIT_LIMB
  433|  77.1k|    vec.push_unchecked(value);
  434|       |#else
  435|       |    vec.push_unchecked(uint32_t(value));
  436|       |    vec.push_unchecked(uint32_t(value >> 32));
  437|       |#endif
  438|  77.1k|    vec.normalize();
  439|  77.1k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  476|  77.1k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint &other) const noexcept {
  477|  77.1k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (477:9): [True: 0, False: 77.1k]
  ------------------
  478|      0|      return 1;
  479|  77.1k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (479:16): [True: 0, False: 77.1k]
  ------------------
  480|      0|      return -1;
  481|  77.1k|    } else {
  482|   151k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (482:38): [True: 146k, False: 4.73k]
  ------------------
  483|   146k|        limb xi = vec[index - 1];
  484|   146k|        limb yi = other.vec[index - 1];
  485|   146k|        if (xi > yi) {
  ------------------
  |  Branch (485:13): [True: 16.9k, False: 129k]
  ------------------
  486|  16.9k|          return 1;
  487|   129k|        } else if (xi < yi) {
  ------------------
  |  Branch (487:20): [True: 55.5k, False: 73.8k]
  ------------------
  488|  55.5k|          return -1;
  489|  55.5k|        }
  490|   146k|      }
  491|  4.73k|      return 0;
  492|  77.1k|    }
  493|  77.1k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   60|   292k|  FASTFLOAT_CONSTEXPR14 const limb &operator[](size_t index) const noexcept {
   61|   292k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   292k|  { ((void)(x)); }
  ------------------
   62|   292k|    return data[index];
   63|   292k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
  103|   360k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   360k|  adjusted_mantissa answer;
  105|   360k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 5.36k, False: 355k]
  |  Branch (105:19): [True: 1.96k, False: 353k]
  ------------------
  106|  7.32k|    answer.power2 = 0;
  107|  7.32k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  7.32k|    return answer;
  110|  7.32k|  }
  111|   353k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 10.4k, False: 343k]
  ------------------
  112|       |    // we want to get infinity:
  113|  10.4k|    answer.power2 = binary::infinite_power();
  114|  10.4k|    answer.mantissa = 0;
  115|  10.4k|    return answer;
  116|  10.4k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   343k|  int lz = leading_zeroes(w);
  122|   343k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   343k|  value128 product =
  131|   343k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   343k|  int upperbit = int(product.high >> 63);
  142|   343k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   343k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   343k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   343k|                          binary::minimum_exponent());
  148|   343k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 1.57k, False: 341k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  1.57k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 1.48k]
  ------------------
  151|  1.57k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  1.48k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|  1.48k|    answer.mantissa += (answer.mantissa & 1); // round up
  163|  1.48k|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|  1.48k|    answer.power2 =
  172|  1.48k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 1.48k, False: 0]
  ------------------
  173|  1.48k|            ? 0
  174|  1.48k|            : 1;
  175|  1.48k|    return answer;
  176|  1.57k|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   341k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 126k, False: 215k]
  |  Branch (181:29): [True: 123k, False: 3.06k]
  ------------------
  182|   341k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 114k, False: 8.93k]
  ------------------
  183|   341k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 12.5k, False: 101k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  12.5k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 5.05k, False: 7.48k]
  ------------------
  190|  5.05k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  5.05k|    }
  192|  12.5k|  }
  193|       |
  194|   341k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   341k|  answer.mantissa >>= 1;
  196|   341k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 27.6k, False: 313k]
  ------------------
  197|  27.6k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  27.6k|    answer.power2++; // undo previous addition
  199|  27.6k|  }
  200|       |
  201|   341k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   341k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 1.44k, False: 340k]
  ------------------
  203|  1.44k|    answer.power2 = binary::infinite_power();
  204|  1.44k|    answer.mantissa = 0;
  205|  1.44k|  }
  206|   341k|  return answer;
  207|   343k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   22|   380k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   380k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   380k|  value128 firstproduct =
   28|   380k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   380k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   380k|                " precision should  be in (0,64]");
   31|   380k|  constexpr uint64_t precision_mask =
   32|   380k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   380k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   380k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 70.6k, False: 309k]
  ------------------
   35|   380k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  70.6k|    value128 secondproduct =
   40|  70.6k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  70.6k|    firstproduct.low += secondproduct.high;
   42|  70.6k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 51.1k, False: 19.5k]
  ------------------
   43|  51.1k|      firstproduct.high++;
   44|  51.1k|    }
   45|  70.6k|  }
   46|   380k|  return firstproduct;
   47|   380k|}
_ZN10fast_float6detail5powerEi:
   65|   745k|constexpr fastfloat_really_inline int32_t power(int32_t q) noexcept {
   66|   745k|  return (((152170 + 65536) * q) >> 16) + 63;
   67|   745k|}
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   88|  37.2k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  37.2k|  int lz = leading_zeroes(w);
   90|  37.2k|  w <<= lz;
   91|  37.2k|  value128 product =
   92|  37.2k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  37.2k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  37.2k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   74|  37.2k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  37.2k|  int hilz = int(w >> 63) ^ 1;
   76|  37.2k|  adjusted_mantissa answer;
   77|  37.2k|  answer.mantissa = w << hilz;
   78|  37.2k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  37.2k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  37.2k|                          invalid_am_bias);
   81|  37.2k|  return answer;
   82|  37.2k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
  103|   329k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   329k|  adjusted_mantissa answer;
  105|   329k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 5.04k, False: 323k]
  |  Branch (105:19): [True: 564, False: 323k]
  ------------------
  106|  5.60k|    answer.power2 = 0;
  107|  5.60k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  5.60k|    return answer;
  110|  5.60k|  }
  111|   323k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 5.37k, False: 318k]
  ------------------
  112|       |    // we want to get infinity:
  113|  5.37k|    answer.power2 = binary::infinite_power();
  114|  5.37k|    answer.mantissa = 0;
  115|  5.37k|    return answer;
  116|  5.37k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   318k|  int lz = leading_zeroes(w);
  122|   318k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   318k|  value128 product =
  131|   318k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   318k|  int upperbit = int(product.high >> 63);
  142|   318k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   318k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   318k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   318k|                          binary::minimum_exponent());
  148|   318k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 7.42k, False: 310k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  7.42k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 118, False: 7.31k]
  ------------------
  151|  7.42k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|    118|      answer.power2 = 0;
  154|    118|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|    118|      return answer;
  157|    118|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  7.31k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|  7.31k|    answer.mantissa += (answer.mantissa & 1); // round up
  163|  7.31k|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|  7.31k|    answer.power2 =
  172|  7.31k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 7.31k, False: 0]
  ------------------
  173|  7.31k|            ? 0
  174|  7.31k|            : 1;
  175|  7.31k|    return answer;
  176|  7.42k|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   310k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 100k, False: 209k]
  |  Branch (181:29): [True: 58.6k, False: 42.1k]
  ------------------
  182|   310k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 51.1k, False: 7.49k]
  ------------------
  183|   310k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 9.65k, False: 41.5k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  9.65k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 7.58k, False: 2.07k]
  ------------------
  190|  7.58k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  7.58k|    }
  192|  9.65k|  }
  193|       |
  194|   310k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   310k|  answer.mantissa >>= 1;
  196|   310k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 27.1k, False: 283k]
  ------------------
  197|  27.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  27.1k|    answer.power2++; // undo previous addition
  199|  27.1k|  }
  200|       |
  201|   310k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   310k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 366, False: 310k]
  ------------------
  203|    366|    answer.power2 = binary::infinite_power();
  204|    366|    answer.mantissa = 0;
  205|    366|  }
  206|   310k|  return answer;
  207|   318k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   22|   364k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   364k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   364k|  value128 firstproduct =
   28|   364k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   364k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   364k|                " precision should  be in (0,64]");
   31|   364k|  constexpr uint64_t precision_mask =
   32|   364k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   364k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   364k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 131k, False: 233k]
  ------------------
   35|   364k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|   131k|    value128 secondproduct =
   40|   131k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|   131k|    firstproduct.low += secondproduct.high;
   42|   131k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 45.8k, False: 85.1k]
  ------------------
   43|  45.8k|      firstproduct.high++;
   44|  45.8k|    }
   45|   131k|  }
   46|   364k|  return firstproduct;
   47|   364k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   88|  46.7k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  46.7k|  int lz = leading_zeroes(w);
   90|  46.7k|  w <<= lz;
   91|  46.7k|  value128 product =
   92|  46.7k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  46.7k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  46.7k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   74|  46.7k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  46.7k|  int hilz = int(w >> 63) ^ 1;
   76|  46.7k|  adjusted_mantissa answer;
   77|  46.7k|  answer.mantissa = w << hilz;
   78|  46.7k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  46.7k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  46.7k|                          invalid_am_bias);
   81|  46.7k|  return answer;
   82|  46.7k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  37.2k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  37.2k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  37.2k|  int32_t sci_exp = scientific_exponent(num);
  440|  37.2k|  size_t max_digits = binary_format<T>::max_digits();
  441|  37.2k|  size_t digits = 0;
  442|  37.2k|  bigint bigmant;
  443|  37.2k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  37.2k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  37.2k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 558, False: 36.7k]
  ------------------
  447|    558|    return positive_digit_comp<T>(bigmant, exponent);
  448|  36.7k|  } else {
  449|  36.7k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  36.7k|  }
  451|  37.2k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   43|  83.9k|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|  83.9k|  uint64_t mantissa = num.mantissa;
   45|  83.9k|  int32_t exponent = int32_t(num.exponent);
   46|   419k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 335k, False: 83.9k]
  ------------------
   47|   335k|    mantissa /= 10000;
   48|   335k|    exponent += 4;
   49|   335k|  }
   50|   167k|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 83.9k, False: 83.9k]
  ------------------
   51|  83.9k|    mantissa /= 100;
   52|  83.9k|    exponent += 2;
   53|  83.9k|  }
   54|  83.9k|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 83.9k]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|  83.9k|  return exponent;
   59|  83.9k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|  83.9k|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|  83.9k|  size_t counter = 0;
  265|  83.9k|  digits = 0;
  266|  83.9k|  limb value = 0;
  267|  83.9k|#ifdef FASTFLOAT_64BIT_LIMB
  268|  83.9k|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|  83.9k|  UC const *p = num.integer.ptr;
  275|  83.9k|  UC const *pend = p + num.integer.len();
  276|  83.9k|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|   184k|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 100k, False: 83.6k]
  ------------------
  279|   166k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 83.5k, False: 83.1k]
  |  Branch (279:45): [True: 66.5k, False: 16.9k]
  ------------------
  280|   166k|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 66.2k, False: 307]
  ------------------
  281|  66.2k|      parse_eight_digits(p, value, counter, digits);
  282|  66.2k|    }
  283|   315k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 295k, False: 19.9k]
  |  Branch (283:30): [True: 215k, False: 80.1k]
  |  Branch (283:43): [True: 215k, False: 307]
  ------------------
  284|   215k|      parse_one_digit(p, value, counter, digits);
  285|   215k|    }
  286|   100k|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 307, False: 100k]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|    307|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|    307|      bool truncated = is_truncated(p, pend);
  290|    307|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 271, False: 36]
  ------------------
  291|    271|        truncated |= is_truncated(num.fraction);
  292|    271|      }
  293|    307|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 199, False: 108]
  ------------------
  294|    199|        round_up_bigint(result, digits);
  295|    199|      }
  296|    307|      return;
  297|   100k|    } else {
  298|   100k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|   100k|      counter = 0;
  300|   100k|      value = 0;
  301|   100k|    }
  302|   100k|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|  83.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 77.3k, False: 6.29k]
  ------------------
  306|  77.3k|    p = num.fraction.ptr;
  307|  77.3k|    pend = p + num.fraction.len();
  308|  77.3k|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 3.47k, False: 73.8k]
  ------------------
  309|  3.47k|      skip_zeros(p, pend);
  310|  3.47k|    }
  311|       |    // process all digits, in increments of step per loop
  312|   247k|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 174k, False: 72.5k]
  ------------------
  313|   419k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 327k, False: 91.2k]
  |  Branch (313:47): [True: 246k, False: 81.0k]
  ------------------
  314|   419k|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 244k, False: 2.33k]
  ------------------
  315|   244k|        parse_eight_digits(p, value, counter, digits);
  316|   244k|      }
  317|   727k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 627k, False: 100k]
  |  Branch (317:32): [True: 557k, False: 70.7k]
  |  Branch (317:45): [True: 553k, False: 3.86k]
  ------------------
  318|   553k|        parse_one_digit(p, value, counter, digits);
  319|   553k|      }
  320|   174k|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 4.84k, False: 169k]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|  4.84k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|  4.84k|        bool truncated = is_truncated(p, pend);
  324|  4.84k|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 3.63k, False: 1.21k]
  ------------------
  325|  3.63k|          round_up_bigint(result, digits);
  326|  3.63k|        }
  327|  4.84k|        return;
  328|   169k|      } else {
  329|   169k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|   169k|        counter = 0;
  331|   169k|        value = 0;
  332|   169k|      }
  333|   174k|    }
  334|  77.3k|  }
  335|       |
  336|  78.8k|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 78.8k]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|  78.8k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  175|  87.4k|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|  87.4k|  uint64_t val;
  177|   105k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|   105k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 53.8k, False: 52.1k]
  ------------------
  179|  53.8k|    ::memcpy(&val, first, sizeof(uint64_t));
  180|  53.8k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 35.3k, False: 18.5k]
  ------------------
  181|  35.3k|      break;
  182|  35.3k|    }
  183|  18.5k|    first += int_cmp_len<UC>();
  184|  18.5k|  }
  185|   178k|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 174k, False: 3.47k]
  ------------------
  186|   174k|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 83.9k, False: 90.9k]
  ------------------
  187|  83.9k|      break;
  188|  83.9k|    }
  189|  90.9k|    first++;
  190|  90.9k|  }
  191|  87.4k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  225|   310k|                   size_t &count) noexcept {
  226|   310k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|   310k|  p += 8;
  228|   310k|  counter += 8;
  229|   310k|  count += 8;
  230|   310k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  235|   768k|                size_t &count) noexcept {
  236|   768k|  value = value * 10 + limb(*p - UC('0'));
  237|   768k|  p++;
  238|   768k|  counter++;
  239|   768k|  count++;
  240|   768k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  243|   279k|add_native(bigint &big, limb power, limb value) noexcept {
  244|   279k|  big.mul(power);
  245|   279k|  big.add(value);
  246|   279k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  197|  5.42k|is_truncated(UC const *first, UC const *last) noexcept {
  198|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  199|  5.42k|  uint64_t val;
  200|  10.1k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (200:10): [Folded - Ignored]
  ------------------
  201|  10.1k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (201:10): [True: 6.49k, False: 3.62k]
  ------------------
  202|  6.49k|    ::memcpy(&val, first, sizeof(uint64_t));
  203|  6.49k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (203:9): [True: 1.80k, False: 4.69k]
  ------------------
  204|  1.80k|      return true;
  205|  1.80k|    }
  206|  4.69k|    first += int_cmp_len<UC>();
  207|  4.69k|  }
  208|  5.29k|  while (first != last) {
  ------------------
  |  Branch (208:10): [True: 3.78k, False: 1.50k]
  ------------------
  209|  3.78k|    if (*first != UC('0')) {
  ------------------
  |  Branch (209:9): [True: 2.12k, False: 1.66k]
  ------------------
  210|  2.12k|      return true;
  211|  2.12k|    }
  212|  1.66k|    ++first;
  213|  1.66k|  }
  214|  1.50k|  return false;
  215|  3.62k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  218|    271|is_truncated(span<const UC> s) noexcept {
  219|    271|  return is_truncated(s.ptr, s.ptr + s.len());
  220|    271|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  249|  3.82k|round_up_bigint(bigint &big, size_t &count) noexcept {
  250|       |  // need to round-up the digits, but need to avoid rounding
  251|       |  // ....9999 to ...10000, which could cause a false halfway point.
  252|  3.82k|  add_native(big, 10, 1);
  253|  3.82k|  count++;
  254|  3.82k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  343|    558|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|    558|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|    558|  { ((void)(x)); }
  ------------------
  345|    558|  adjusted_mantissa answer;
  346|    558|  bool truncated;
  347|    558|  answer.mantissa = bigmant.hi64(truncated);
  348|    558|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|    558|             binary_format<T>::minimum_exponent();
  350|    558|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|    558|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    558|    round_nearest_tie_even(
  354|    558|        a, shift,
  355|    558|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    558|          return is_above || (is_halfway && truncated) ||
  357|    558|                 (is_odd && is_halfway);
  358|    558|        });
  359|    558|  });
  360|       |
  361|    558|  return answer;
  362|    558|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|    558|                                                         callback cb) noexcept {
  111|    558|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|    558|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 558]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|    558|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|    558|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 558]
  ------------------
  129|    558|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|    558|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|    558|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 558]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|    558|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|    558|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    558|    round_nearest_tie_even(
  354|    558|        a, shift,
  355|    558|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    558|          return is_above || (is_halfway && truncated) ||
  357|    558|                 (is_odd && is_halfway);
  358|    558|        });
  359|    558|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|    558|                       callback cb) noexcept {
  146|    558|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 558]
  ------------------
  147|    558|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 558]
  ------------------
  148|    558|  uint64_t truncated_bits = am.mantissa & mask;
  149|    558|  bool is_above = truncated_bits > halfway;
  150|    558|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|    558|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 558]
  ------------------
  154|      0|    am.mantissa = 0;
  155|    558|  } else {
  156|    558|    am.mantissa >>= shift;
  157|    558|  }
  158|    558|  am.power2 += shift;
  159|       |
  160|    558|  bool is_odd = (am.mantissa & 1) == 1;
  161|    558|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|    558|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|    558|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    558|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 74, False: 484]
  |  Branch (356:31): [True: 352, False: 132]
  |  Branch (356:45): [True: 58, False: 294]
  ------------------
  357|    558|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 60, False: 366]
  |  Branch (357:29): [True: 32, False: 28]
  ------------------
  358|    558|        });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  36.7k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  36.7k|  bigint &real_digits = bigmant;
  373|  36.7k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  36.7k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  36.7k|  round<T>(am_b,
  380|  36.7k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  36.7k|  T b;
  382|  36.7k|  to_float(false, am_b, b);
  383|  36.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  36.7k|  bigint theor_digits(theor.mantissa);
  385|  36.7k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  36.7k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  36.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  36.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 36.7k, False: 0]
  ------------------
  391|  36.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  36.7k|  { ((void)(x)); }
  ------------------
  392|  36.7k|  }
  393|  36.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 36.7k, False: 0]
  ------------------
  394|  36.7k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  36.7k|  { ((void)(x)); }
  ------------------
  395|  36.7k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 0, False: 0]
  ------------------
  396|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|      0|  { ((void)(x)); }
  ------------------
  397|      0|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  36.7k|  int ord = real_digits.compare(theor_digits);
  401|  36.7k|  adjusted_mantissa answer = am;
  402|  36.7k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  36.7k|    round_nearest_tie_even(
  404|  36.7k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  36.7k|          (void)_;  // not needed, since we've done our comparison
  406|  36.7k|          (void)__; // not needed, since we've done our comparison
  407|  36.7k|          if (ord > 0) {
  408|  36.7k|            return true;
  409|  36.7k|          } else if (ord < 0) {
  410|  36.7k|            return false;
  411|  36.7k|          } else {
  412|  36.7k|            return is_odd;
  413|  36.7k|          }
  414|  36.7k|        });
  415|  36.7k|  });
  416|       |
  417|  36.7k|  return answer;
  418|  36.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  36.7k|                                                         callback cb) noexcept {
  111|  36.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  36.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 36.7k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  36.7k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  36.7k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 36.7k]
  ------------------
  129|  36.7k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  36.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  36.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 36.7k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  36.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  36.7k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  165|  77.1k|round_down(adjusted_mantissa &am, int32_t shift) noexcept {
  166|  77.1k|  if (shift == 64) {
  ------------------
  |  Branch (166:7): [True: 0, False: 77.1k]
  ------------------
  167|      0|    am.mantissa = 0;
  168|  77.1k|  } else {
  169|  77.1k|    am.mantissa >>= shift;
  170|  77.1k|  }
  171|  77.1k|  am.power2 += shift;
  172|  77.1k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   99|  36.7k|to_extended_halfway(T value) noexcept {
  100|  36.7k|  adjusted_mantissa am = to_extended(value);
  101|  36.7k|  am.mantissa <<= 1;
  102|  36.7k|  am.mantissa += 1;
  103|  36.7k|  am.power2 -= 1;
  104|  36.7k|  return am;
  105|  36.7k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   64|  36.7k|to_extended(T value) noexcept {
   65|  36.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  36.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  36.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  36.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  36.7k|  adjusted_mantissa am;
   71|  36.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  36.7k|                 binary_format<T>::minimum_exponent();
   73|  36.7k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  36.7k|  ::memcpy(&bits, &value, sizeof(T));
   78|  36.7k|#endif
   79|  36.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 0, False: 36.7k]
  ------------------
   80|       |    // denormal
   81|      0|    am.power2 = 1 - bias;
   82|      0|    am.mantissa = bits & mantissa_mask;
   83|  36.7k|  } else {
   84|       |    // normal
   85|  36.7k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  36.7k|                        binary_format<T>::mantissa_explicit_bits());
   87|  36.7k|    am.power2 -= bias;
   88|  36.7k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  36.7k|  }
   90|       |
   91|  36.7k|  return am;
   92|  36.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  36.7k|                                                         callback cb) noexcept {
  111|  36.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  36.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 36.7k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  36.7k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  36.7k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 36.7k]
  ------------------
  129|  36.7k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  36.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  36.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 36.7k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  36.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  36.7k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  36.7k|    round_nearest_tie_even(
  404|  36.7k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  36.7k|          (void)_;  // not needed, since we've done our comparison
  406|  36.7k|          (void)__; // not needed, since we've done our comparison
  407|  36.7k|          if (ord > 0) {
  408|  36.7k|            return true;
  409|  36.7k|          } else if (ord < 0) {
  410|  36.7k|            return false;
  411|  36.7k|          } else {
  412|  36.7k|            return is_odd;
  413|  36.7k|          }
  414|  36.7k|        });
  415|  36.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  36.7k|                       callback cb) noexcept {
  146|  36.7k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 36.7k]
  ------------------
  147|  36.7k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 36.7k]
  ------------------
  148|  36.7k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  36.7k|  bool is_above = truncated_bits > halfway;
  150|  36.7k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  36.7k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 36.7k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  36.7k|  } else {
  156|  36.7k|    am.mantissa >>= shift;
  157|  36.7k|  }
  158|  36.7k|  am.power2 += shift;
  159|       |
  160|  36.7k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  36.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  36.7k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  36.7k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  36.7k|          (void)_;  // not needed, since we've done our comparison
  406|  36.7k|          (void)__; // not needed, since we've done our comparison
  407|  36.7k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 210, False: 36.5k]
  ------------------
  408|    210|            return true;
  409|  36.5k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 32.2k, False: 4.21k]
  ------------------
  410|  32.2k|            return false;
  411|  32.2k|          } else {
  412|  4.21k|            return is_odd;
  413|  4.21k|          }
  414|  36.7k|        });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   43|     72|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|     72|  uint64_t mantissa = num.mantissa;
   45|     72|  int32_t exponent = int32_t(num.exponent);
   46|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 288, False: 72]
  ------------------
   47|    288|    mantissa /= 10000;
   48|    288|    exponent += 4;
   49|    288|  }
   50|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 72, False: 72]
  ------------------
   51|     72|    mantissa /= 100;
   52|     72|    exponent += 2;
   53|     72|  }
   54|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 72]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|     72|  return exponent;
   59|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|     72|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|     72|  size_t counter = 0;
  265|     72|  digits = 0;
  266|     72|  limb value = 0;
  267|     72|#ifdef FASTFLOAT_64BIT_LIMB
  268|     72|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|     72|  UC const *p = num.integer.ptr;
  275|     72|  UC const *pend = p + num.integer.len();
  276|     72|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|    144|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 72, False: 72]
  ------------------
  279|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 0, False: 72]
  |  Branch (279:45): [True: 0, False: 0]
  ------------------
  280|     72|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 0, False: 0]
  ------------------
  281|      0|      parse_eight_digits(p, value, counter, digits);
  282|      0|    }
  283|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 576, False: 0]
  |  Branch (283:30): [True: 504, False: 72]
  |  Branch (283:43): [True: 504, False: 0]
  ------------------
  284|    504|      parse_one_digit(p, value, counter, digits);
  285|    504|    }
  286|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 0, False: 72]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|      0|      bool truncated = is_truncated(p, pend);
  290|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 0, False: 0]
  ------------------
  291|      0|        truncated |= is_truncated(num.fraction);
  292|      0|      }
  293|      0|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        round_up_bigint(result, digits);
  295|      0|      }
  296|      0|      return;
  297|     72|    } else {
  298|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|     72|      counter = 0;
  300|     72|      value = 0;
  301|     72|    }
  302|     72|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 72, False: 0]
  ------------------
  306|     72|    p = num.fraction.ptr;
  307|     72|    pend = p + num.fraction.len();
  308|     72|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 0, False: 72]
  ------------------
  309|      0|      skip_zeros(p, pend);
  310|      0|    }
  311|       |    // process all digits, in increments of step per loop
  312|    162|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 90, False: 72]
  ------------------
  313|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 108, False: 90]
  |  Branch (313:47): [True: 108, False: 0]
  ------------------
  314|    198|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 108, False: 0]
  ------------------
  315|    108|        parse_eight_digits(p, value, counter, digits);
  316|    108|      }
  317|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 414, False: 18]
  |  Branch (317:32): [True: 342, False: 72]
  |  Branch (317:45): [True: 342, False: 0]
  ------------------
  318|    342|        parse_one_digit(p, value, counter, digits);
  319|    342|      }
  320|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 0, False: 90]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|      0|        bool truncated = is_truncated(p, pend);
  324|      0|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 0, False: 0]
  ------------------
  325|      0|          round_up_bigint(result, digits);
  326|      0|        }
  327|      0|        return;
  328|     90|      } else {
  329|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|     90|        counter = 0;
  331|     90|        value = 0;
  332|     90|      }
  333|     90|    }
  334|     72|  }
  335|       |
  336|     72|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 72]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  175|     72|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|     72|  uint64_t val;
  177|     72|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|     72|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 72, False: 0]
  ------------------
  179|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  180|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 72, False: 0]
  ------------------
  181|     72|      break;
  182|     72|    }
  183|      0|    first += int_cmp_len<UC>();
  184|      0|  }
  185|     72|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 72, False: 0]
  ------------------
  186|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 72, False: 0]
  ------------------
  187|     72|      break;
  188|     72|    }
  189|      0|    first++;
  190|      0|  }
  191|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  225|    108|                   size_t &count) noexcept {
  226|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|    108|  p += 8;
  228|    108|  counter += 8;
  229|    108|  count += 8;
  230|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  235|    846|                size_t &count) noexcept {
  236|    846|  value = value * 10 + limb(*p - UC('0'));
  237|    846|  p++;
  238|    846|  counter++;
  239|    846|  count++;
  240|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  46.6k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  46.6k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  46.6k|  int32_t sci_exp = scientific_exponent(num);
  440|  46.6k|  size_t max_digits = binary_format<T>::max_digits();
  441|  46.6k|  size_t digits = 0;
  442|  46.6k|  bigint bigmant;
  443|  46.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  46.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  46.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 6.30k, False: 40.3k]
  ------------------
  447|  6.30k|    return positive_digit_comp<T>(bigmant, exponent);
  448|  40.3k|  } else {
  449|  40.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  40.3k|  }
  451|  46.6k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  343|  6.30k|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|  6.30k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|  6.30k|  { ((void)(x)); }
  ------------------
  345|  6.30k|  adjusted_mantissa answer;
  346|  6.30k|  bool truncated;
  347|  6.30k|  answer.mantissa = bigmant.hi64(truncated);
  348|  6.30k|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|  6.30k|             binary_format<T>::minimum_exponent();
  350|  6.30k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|  6.30k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  6.30k|    round_nearest_tie_even(
  354|  6.30k|        a, shift,
  355|  6.30k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  6.30k|          return is_above || (is_halfway && truncated) ||
  357|  6.30k|                 (is_odd && is_halfway);
  358|  6.30k|        });
  359|  6.30k|  });
  360|       |
  361|  6.30k|  return answer;
  362|  6.30k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|  6.30k|                                                         callback cb) noexcept {
  111|  6.30k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  6.30k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 6.30k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  6.30k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  6.30k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 602, False: 5.70k]
  ------------------
  129|  6.30k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|    602|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|    602|    am.power2++;
  132|    602|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  6.30k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  6.30k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 6.30k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  6.30k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|  6.30k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  6.30k|    round_nearest_tie_even(
  354|  6.30k|        a, shift,
  355|  6.30k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  6.30k|          return is_above || (is_halfway && truncated) ||
  357|  6.30k|                 (is_odd && is_halfway);
  358|  6.30k|        });
  359|  6.30k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|  6.30k|                       callback cb) noexcept {
  146|  6.30k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 6.30k]
  ------------------
  147|  6.30k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 6.30k]
  ------------------
  148|  6.30k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  6.30k|  bool is_above = truncated_bits > halfway;
  150|  6.30k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  6.30k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 6.30k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  6.30k|  } else {
  156|  6.30k|    am.mantissa >>= shift;
  157|  6.30k|  }
  158|  6.30k|  am.power2 += shift;
  159|       |
  160|  6.30k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  6.30k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  6.30k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|  6.30k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  6.30k|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 710, False: 5.59k]
  |  Branch (356:31): [True: 4.71k, False: 887]
  |  Branch (356:45): [True: 1.02k, False: 3.68k]
  ------------------
  357|  6.30k|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 487, False: 4.08k]
  |  Branch (357:29): [True: 60, False: 427]
  ------------------
  358|  6.30k|        });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  40.4k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  40.4k|  bigint &real_digits = bigmant;
  373|  40.4k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  40.4k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  40.4k|  round<T>(am_b,
  380|  40.4k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  40.4k|  T b;
  382|  40.4k|  to_float(false, am_b, b);
  383|  40.4k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  40.4k|  bigint theor_digits(theor.mantissa);
  385|  40.4k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  40.4k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  40.4k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  40.4k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 40.4k, False: 0]
  ------------------
  391|  40.4k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  40.4k|  { ((void)(x)); }
  ------------------
  392|  40.4k|  }
  393|  40.4k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 3.28k, False: 37.1k]
  ------------------
  394|  3.28k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  3.28k|  { ((void)(x)); }
  ------------------
  395|  37.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 37.0k, False: 102]
  ------------------
  396|  37.0k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|  37.0k|  { ((void)(x)); }
  ------------------
  397|  37.0k|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  40.4k|  int ord = real_digits.compare(theor_digits);
  401|  40.4k|  adjusted_mantissa answer = am;
  402|  40.4k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  40.4k|    round_nearest_tie_even(
  404|  40.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  40.4k|          (void)_;  // not needed, since we've done our comparison
  406|  40.4k|          (void)__; // not needed, since we've done our comparison
  407|  40.4k|          if (ord > 0) {
  408|  40.4k|            return true;
  409|  40.4k|          } else if (ord < 0) {
  410|  40.4k|            return false;
  411|  40.4k|          } else {
  412|  40.4k|            return is_odd;
  413|  40.4k|          }
  414|  40.4k|        });
  415|  40.4k|  });
  416|       |
  417|  40.4k|  return answer;
  418|  40.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  40.4k|                                                         callback cb) noexcept {
  111|  40.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  40.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 118, False: 40.3k]
  ------------------
  113|       |    // have a denormal float
  114|    118|    int32_t shift = -am.power2 + 1;
  115|    118|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    118|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 118, False: 0]
  ------------------
  118|    118|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    118|                    ? 0
  120|    118|                    : 1;
  121|    118|    return;
  122|    118|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  40.3k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  40.3k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 40.3k]
  ------------------
  129|  40.3k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  40.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  40.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 40.3k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  40.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  40.4k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   99|  40.4k|to_extended_halfway(T value) noexcept {
  100|  40.4k|  adjusted_mantissa am = to_extended(value);
  101|  40.4k|  am.mantissa <<= 1;
  102|  40.4k|  am.mantissa += 1;
  103|  40.4k|  am.power2 -= 1;
  104|  40.4k|  return am;
  105|  40.4k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   64|  40.4k|to_extended(T value) noexcept {
   65|  40.4k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  40.4k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  40.4k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  40.4k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  40.4k|  adjusted_mantissa am;
   71|  40.4k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  40.4k|                 binary_format<T>::minimum_exponent();
   73|  40.4k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  40.4k|  ::memcpy(&bits, &value, sizeof(T));
   78|  40.4k|#endif
   79|  40.4k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 118, False: 40.3k]
  ------------------
   80|       |    // denormal
   81|    118|    am.power2 = 1 - bias;
   82|    118|    am.mantissa = bits & mantissa_mask;
   83|  40.3k|  } else {
   84|       |    // normal
   85|  40.3k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  40.3k|                        binary_format<T>::mantissa_explicit_bits());
   87|  40.3k|    am.power2 -= bias;
   88|  40.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  40.3k|  }
   90|       |
   91|  40.4k|  return am;
   92|  40.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  40.4k|                                                         callback cb) noexcept {
  111|  40.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  40.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 118, False: 40.3k]
  ------------------
  113|       |    // have a denormal float
  114|    118|    int32_t shift = -am.power2 + 1;
  115|    118|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    118|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 118, False: 0]
  ------------------
  118|    118|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    118|                    ? 0
  120|    118|                    : 1;
  121|    118|    return;
  122|    118|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  40.3k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  40.3k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 90, False: 40.2k]
  ------------------
  129|  40.3k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|     90|    am.power2++;
  132|     90|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  40.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  40.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 40.3k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  40.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  40.4k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  40.4k|    round_nearest_tie_even(
  404|  40.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  40.4k|          (void)_;  // not needed, since we've done our comparison
  406|  40.4k|          (void)__; // not needed, since we've done our comparison
  407|  40.4k|          if (ord > 0) {
  408|  40.4k|            return true;
  409|  40.4k|          } else if (ord < 0) {
  410|  40.4k|            return false;
  411|  40.4k|          } else {
  412|  40.4k|            return is_odd;
  413|  40.4k|          }
  414|  40.4k|        });
  415|  40.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  40.4k|                       callback cb) noexcept {
  146|  40.4k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 40.4k]
  ------------------
  147|  40.4k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 40.4k]
  ------------------
  148|  40.4k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  40.4k|  bool is_above = truncated_bits > halfway;
  150|  40.4k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  40.4k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 40.4k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  40.4k|  } else {
  156|  40.4k|    am.mantissa >>= shift;
  157|  40.4k|  }
  158|  40.4k|  am.power2 += shift;
  159|       |
  160|  40.4k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  40.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  40.4k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  40.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  40.4k|          (void)_;  // not needed, since we've done our comparison
  406|  40.4k|          (void)__; // not needed, since we've done our comparison
  407|  40.4k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 16.6k, False: 23.7k]
  ------------------
  408|  16.6k|            return true;
  409|  23.7k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 23.2k, False: 518]
  ------------------
  410|  23.2k|            return false;
  411|  23.2k|          } else {
  412|    518|            return is_odd;
  413|    518|          }
  414|  40.4k|        });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|     72|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|     72|  am.power2 -= invalid_am_bias;
  438|       |
  439|     72|  int32_t sci_exp = scientific_exponent(num);
  440|     72|  size_t max_digits = binary_format<T>::max_digits();
  441|     72|  size_t digits = 0;
  442|     72|  bigint bigmant;
  443|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 0, False: 72]
  ------------------
  447|      0|    return positive_digit_comp<T>(bigmant, exponent);
  448|     72|  } else {
  449|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|     72|  }
  451|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  234|  3.06M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  233|  1.82M|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  236|   604k|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  497|  1.04M|inline constexpr int binary_format<float>::min_exponent_fast_path() {
  498|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  499|       |  return 0;
  500|       |#else
  501|  1.04M|  return -10;
  502|  1.04M|#endif
  503|  1.04M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  560|   980k|inline constexpr int binary_format<float>::max_exponent_fast_path() {
  561|   980k|  return 10;
  562|   980k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  578|   859k|inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  579|   859k|  return uint64_t(2) << mantissa_explicit_bits();
  580|   859k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  510|  2.51M|inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  511|  2.51M|  return 23;
  512|  2.51M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  598|   809k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  599|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  600|   809k|  return (void)powers_of_ten[0], powers_of_ten[power];
  601|   809k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  362|   857k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  614|   355k|template <> inline constexpr int binary_format<float>::smallest_power_of_ten() {
  615|   355k|  return -64;
  616|   355k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  606|   353k|template <> inline constexpr int binary_format<float>::largest_power_of_ten() {
  607|   353k|  return 38;
  608|   353k|}
_ZN10fast_float14leading_zeroesEm:
  282|   758k|leading_zeroes(uint64_t input_num) {
  283|   758k|  assert(input_num > 0);
  284|   758k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (284:7): [Folded - Ignored]
  ------------------
  285|      0|    return leading_zeroes_generic(input_num);
  286|      0|  }
  287|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  288|       |#if defined(_M_X64) || defined(_M_ARM64)
  289|       |  unsigned long leading_zero = 0;
  290|       |  // Search the mask data from most significant bit (MSB)
  291|       |  // to least significant bit (LSB) for a set bit (1).
  292|       |  _BitScanReverse64(&leading_zero, input_num);
  293|       |  return (int)(63 - leading_zero);
  294|       |#else
  295|       |  return leading_zeroes_generic(input_num);
  296|       |#endif
  297|       |#else
  298|   758k|  return __builtin_clzll(input_num);
  299|   758k|#endif
  300|   758k|}
_ZN10fast_float19full_multiplicationEmm:
  334|   946k|full_multiplication(uint64_t a, uint64_t b) {
  335|   946k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (335:7): [Folded - Ignored]
  ------------------
  336|      0|    value128 answer;
  337|      0|    answer.low = umul128_generic(a, b, &answer.high);
  338|      0|    return answer;
  339|      0|  }
  340|   946k|  value128 answer;
  341|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  342|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  343|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  344|       |  answer.high = __umulh(a, b);
  345|       |  answer.low = a * b;
  346|       |#elif defined(FASTFLOAT_32BIT) ||                                              \
  347|       |    (defined(_WIN64) && !defined(__clang__) && !defined(_M_ARM64))
  348|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  349|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  350|       |  __uint128_t r = ((__uint128_t)a) * b;
  351|   946k|  answer.low = uint64_t(r);
  352|   946k|  answer.high = uint64_t(r >> 64);
  353|       |#else
  354|       |  answer.low = umul128_generic(a, b, &answer.high);
  355|       |#endif
  356|   946k|  return answer;
  357|   946k|}
_ZN10fast_float8value128C2Ev:
  248|   946k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  537|   417k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  538|   417k|  return -127;
  539|   417k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  530|   126k|inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  531|   126k|  return -17;
  532|   126k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  520|   123k|inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  521|   123k|  return 10;
  522|   123k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  366|   264k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  367|   264k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (367:12): [True: 84.0k, False: 180k]
  |  Branch (367:38): [True: 0, False: 180k]
  ------------------
  368|   264k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  621|  37.2k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  622|  37.2k|  return 114;
  623|  37.2k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  707|   139k|template <typename UC> static constexpr int int_cmp_len() {
  708|   139k|  return sizeof(uint64_t) / sizeof(UC);
  709|   139k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  698|  60.3k|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|  60.3k|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|  60.3k|                "Unsupported character size");
  701|  60.3k|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|  60.3k|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|      0|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|      0|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|  60.3k|}
_ZN10fast_float4spanImEC2EPKmm:
  233|   108k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  236|   258k|  constexpr size_t len() const noexcept { return length; }
_ZNK10fast_float4spanImEixEm:
  238|   139k|  FASTFLOAT_CONSTEXPR14 const T &operator[](size_t index) const noexcept {
  239|   139k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   139k|  { ((void)(x)); }
  ------------------
  240|   139k|    return ptr[index];
  241|   139k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  660|   268k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   268k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   268k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   268k|  word |= fastfloat_uint(am.power2)
  664|   268k|          << binary_format<T>::mantissa_explicit_bits();
  665|   268k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   268k|  ::memcpy(&value, &word, sizeof(T));
  670|   268k|#endif
  671|   268k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  551|   268k|template <> inline constexpr int binary_format<float>::sign_index() {
  552|   268k|  return 31;
  553|   268k|}
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  544|   655k|template <> inline constexpr int binary_format<float>::infinite_power() {
  545|   655k|  return 0xFF;
  546|   655k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   44|  1.53M|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  234|  1.31M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  233|   662k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  236|  3.01k|  constexpr size_t len() const noexcept { return length; }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  707|     72|template <typename UC> static constexpr int int_cmp_len() {
  708|     72|  return sizeof(uint64_t) / sizeof(UC);
  709|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  698|     72|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|     72|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|     72|                "Unsupported character size");
  701|     72|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|     72|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|     72|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|     72|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   44|   659k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  488|  1.14M|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  489|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  490|       |  return 0;
  491|       |#else
  492|  1.14M|  return -22;
  493|  1.14M|#endif
  494|  1.14M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  556|  1.13M|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  557|  1.13M|  return 22;
  558|  1.13M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  565|   966k|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  566|   966k|  return uint64_t(2) << mantissa_explicit_bits();
  567|   966k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  506|  2.57M|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  507|  2.57M|  return 52;
  508|  2.57M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  593|   955k|binary_format<double>::exact_power_of_ten(int64_t power) {
  594|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  595|   955k|  return (void)powers_of_ten[0], powers_of_ten[power];
  596|   955k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  611|   323k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  612|   323k|  return -342;
  613|   323k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  603|   323k|template <> inline constexpr int binary_format<double>::largest_power_of_ten() {
  604|   323k|  return 308;
  605|   323k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  534|   411k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  535|   411k|  return -1023;
  536|   411k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  525|   100k|inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  526|   100k|  return -4;
  527|   100k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  515|  58.6k|inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  516|  58.6k|  return 23;
  517|  58.6k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  618|  46.7k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  619|  46.7k|  return 769;
  620|  46.7k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  660|   234k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   234k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   234k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   234k|  word |= fastfloat_uint(am.power2)
  664|   234k|          << binary_format<T>::mantissa_explicit_bits();
  665|   234k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   234k|  ::memcpy(&value, &word, sizeof(T));
  670|   234k|#endif
  671|   234k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  548|   234k|template <> inline constexpr int binary_format<double>::sign_index() {
  549|   234k|  return 63;
  550|   234k|}
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  541|   597k|template <> inline constexpr int binary_format<double>::infinite_power() {
  542|   597k|  return 0x7FF;
  543|   597k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   748k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   748k|  return from_chars_caller<T>::call(first, last, value,
  191|   748k|                                    parse_options_t<UC>(fmt));
  192|   748k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   748k|       parse_options_t<UC> options) noexcept {
  148|   748k|    return from_chars_advanced(first, last, value, options);
  149|   748k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   748k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   748k|  static_assert(is_supported_float_type<T>(),
  293|   748k|                "only some floating-point types are supported");
  294|   748k|  static_assert(is_supported_char_type<UC>(),
  295|   748k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   748k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   748k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 748k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   748k|  parsed_number_string_t<UC> pns =
  309|   748k|      parse_number_string<UC>(first, last, options);
  310|   748k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 748k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   748k|  return from_chars_advanced(pns, value);
  322|   748k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   748k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   748k|  static_assert(is_supported_float_type<T>(),
  204|   748k|                "only some floating-point types are supported");
  205|   748k|  static_assert(is_supported_char_type<UC>(),
  206|   748k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   748k|  from_chars_result_t<UC> answer;
  209|       |
  210|   748k|  answer.ec = std::errc(); // be optimistic
  211|   748k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   748k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 689k, False: 58.5k]
  ------------------
  218|   748k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 652k, False: 37.4k]
  ------------------
  219|   748k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 575k, False: 77.5k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   575k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 575k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   575k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 525k, False: 49.0k]
  ------------------
  231|   525k|        value = T(pns.mantissa);
  232|   525k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 13.0k, False: 512k]
  ------------------
  233|  13.0k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   512k|        } else {
  235|   512k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   512k|        }
  237|   525k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 525k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   525k|        return answer;
  241|   525k|      }
  242|   575k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   575k|  }
  265|   222k|  adjusted_mantissa am =
  266|   222k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   222k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 128k, False: 93.9k]
  |  Branch (267:30): [True: 128k, False: 0]
  ------------------
  268|   128k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 37.2k, False: 91.3k]
  ------------------
  269|  37.2k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  37.2k|    }
  271|   128k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   222k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 37.2k, False: 185k]
  ------------------
  276|  37.2k|    am = digit_comp<T>(pns, am);
  277|  37.2k|  }
  278|   222k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   222k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 217k, False: 4.65k]
  |  Branch (280:29): [True: 25.5k, False: 192k]
  |  Branch (280:49): [True: 1.27k, False: 24.2k]
  ------------------
  281|   222k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 5.40k, False: 215k]
  ------------------
  282|  6.68k|    answer.ec = std::errc::result_out_of_range;
  283|  6.68k|  }
  284|   222k|  return answer;
  285|   748k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   81|  1.82M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   82|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   83|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   84|       |  return false;
   85|       |#endif
   86|       |  // See
   87|       |  // A fast function to check your floating-point rounding mode
   88|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   89|       |  //
   90|       |  // This function is meant to be equivalent to :
   91|       |  // prior: #include <cfenv>
   92|       |  //  return fegetround() == FE_TONEAREST;
   93|       |  // However, it is expected to be much faster than the fegetround()
   94|       |  // function call.
   95|       |  //
   96|       |  // The volatile keywoard prevents the compiler from computing the function
   97|       |  // at compile-time.
   98|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   99|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
  100|       |  // small value so that 1 + x should round to 1 would do (after accounting for
  101|       |  // excess precision, as in 387 instructions).
  102|  1.82M|  static volatile float fmin = std::numeric_limits<float>::min();
  103|  1.82M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  104|       |//
  105|       |// Explanation:
  106|       |// Only when fegetround() == FE_TONEAREST do we have that
  107|       |// fmin + 1.0f == 1.0f - fmin.
  108|       |//
  109|       |// FE_UPWARD:
  110|       |//  fmin + 1.0f > 1
  111|       |//  1.0f - fmin == 1
  112|       |//
  113|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  114|       |//  fmin + 1.0f == 1
  115|       |//  1.0f - fmin < 1
  116|       |//
  117|       |// Note: This may fail to be accurate if fast-math has been
  118|       |// enabled, as rounding conventions may not apply.
  119|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  120|       |#pragma warning(push)
  121|       |//  todo: is there a VS warning?
  122|       |//  see
  123|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  124|       |#elif defined(__clang__)
  125|       |#pragma clang diagnostic push
  126|  1.82M|#pragma clang diagnostic ignored "-Wfloat-equal"
  127|       |#elif defined(__GNUC__)
  128|       |#pragma GCC diagnostic push
  129|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  130|       |#endif
  131|  1.82M|  return (fmini + 1.0f == 1.0f - fmini);
  132|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  133|       |#pragma warning(pop)
  134|       |#elif defined(__clang__)
  135|       |#pragma clang diagnostic pop
  136|       |#elif defined(__GNUC__)
  137|       |#pragma GCC diagnostic pop
  138|       |#endif
  139|  1.82M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   292k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   292k|  return from_chars_caller<T>::call(first, last, value,
  191|   292k|                                    parse_options_t<UC>(fmt));
  192|   292k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   292k|       parse_options_t<UC> options) noexcept {
  148|   292k|    return from_chars_advanced(first, last, value, options);
  149|   292k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   292k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   292k|  static_assert(is_supported_float_type<T>(),
  293|   292k|                "only some floating-point types are supported");
  294|   292k|  static_assert(is_supported_char_type<UC>(),
  295|   292k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   292k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   292k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 292k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   292k|  parsed_number_string_t<UC> pns =
  309|   292k|      parse_number_string<UC>(first, last, options);
  310|   292k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 292k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   292k|  return from_chars_advanced(pns, value);
  322|   292k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   292k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   292k|  static_assert(is_supported_float_type<T>(),
  204|   292k|                "only some floating-point types are supported");
  205|   292k|  static_assert(is_supported_char_type<UC>(),
  206|   292k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   292k|  from_chars_result_t<UC> answer;
  209|       |
  210|   292k|  answer.ec = std::errc(); // be optimistic
  211|   292k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   292k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 290k, False: 2.46k]
  ------------------
  218|   292k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 285k, False: 5.14k]
  ------------------
  219|   292k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 284k, False: 494]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   284k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 284k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   284k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 283k, False: 664]
  ------------------
  231|   283k|        value = T(pns.mantissa);
  232|   283k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 728, False: 283k]
  ------------------
  233|    728|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   283k|        } else {
  235|   283k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   283k|        }
  237|   283k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 283k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   283k|        return answer;
  241|   283k|      }
  242|   284k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   284k|  }
  265|  8.75k|  adjusted_mantissa am =
  266|  8.75k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  8.75k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 960, False: 7.79k]
  |  Branch (267:30): [True: 960, False: 0]
  ------------------
  268|    960|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 0, False: 960]
  ------------------
  269|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|      0|    }
  271|    960|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  8.75k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 0, False: 8.75k]
  ------------------
  276|      0|    am = digit_comp<T>(pns, am);
  277|      0|  }
  278|  8.75k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  8.75k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 8.05k, False: 708]
  |  Branch (280:29): [True: 5.81k, False: 2.23k]
  |  Branch (280:49): [True: 1.60k, False: 4.20k]
  ------------------
  281|  8.75k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 4.20k, False: 2.94k]
  ------------------
  282|  5.81k|    answer.ec = std::errc::result_out_of_range;
  283|  5.81k|  }
  284|  8.75k|  return answer;
  285|   292k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   783k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   783k|  return from_chars_caller<T>::call(first, last, value,
  191|   783k|                                    parse_options_t<UC>(fmt));
  192|   783k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   783k|       parse_options_t<UC> options) noexcept {
  148|   783k|    return from_chars_advanced(first, last, value, options);
  149|   783k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   783k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   783k|  static_assert(is_supported_float_type<T>(),
  293|   783k|                "only some floating-point types are supported");
  294|   783k|  static_assert(is_supported_char_type<UC>(),
  295|   783k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   783k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   783k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 783k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   783k|  parsed_number_string_t<UC> pns =
  309|   783k|      parse_number_string<UC>(first, last, options);
  310|   783k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 783k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   783k|  return from_chars_advanced(pns, value);
  322|   783k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   783k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   783k|  static_assert(is_supported_float_type<T>(),
  204|   783k|                "only some floating-point types are supported");
  205|   783k|  static_assert(is_supported_char_type<UC>(),
  206|   783k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   783k|  from_chars_result_t<UC> answer;
  209|       |
  210|   783k|  answer.ec = std::errc(); // be optimistic
  211|   783k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   783k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 771k, False: 11.8k]
  ------------------
  218|   783k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 735k, False: 35.5k]
  ------------------
  219|   783k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 610k, False: 124k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   610k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 610k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   610k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 600k, False: 10.8k]
  ------------------
  231|   600k|        value = T(pns.mantissa);
  232|   600k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 37.6k, False: 562k]
  ------------------
  233|  37.6k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   562k|        } else {
  235|   562k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   562k|        }
  237|   600k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 600k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   600k|        return answer;
  241|   600k|      }
  242|   610k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   610k|  }
  265|   183k|  adjusted_mantissa am =
  266|   183k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   183k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 133k, False: 49.6k]
  |  Branch (267:30): [True: 133k, False: 0]
  ------------------
  268|   133k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 46.6k, False: 86.9k]
  ------------------
  269|  46.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  46.6k|    }
  271|   133k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   183k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 46.6k, False: 136k]
  ------------------
  276|  46.6k|    am = digit_comp<T>(pns, am);
  277|  46.6k|  }
  278|   183k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   183k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 179k, False: 4.22k]
  |  Branch (280:29): [True: 17.0k, False: 161k]
  |  Branch (280:49): [True: 262, False: 16.7k]
  ------------------
  281|   183k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.79k, False: 180k]
  ------------------
  282|  3.05k|    answer.ec = std::errc::result_out_of_range;
  283|  3.05k|  }
  284|   183k|  return answer;
  285|   783k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   366k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   366k|  return from_chars_caller<T>::call(first, last, value,
  191|   366k|                                    parse_options_t<UC>(fmt));
  192|   366k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   366k|       parse_options_t<UC> options) noexcept {
  148|   366k|    return from_chars_advanced(first, last, value, options);
  149|   366k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   366k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   366k|  static_assert(is_supported_float_type<T>(),
  293|   366k|                "only some floating-point types are supported");
  294|   366k|  static_assert(is_supported_char_type<UC>(),
  295|   366k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   366k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   366k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 366k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   366k|  parsed_number_string_t<UC> pns =
  309|   366k|      parse_number_string<UC>(first, last, options);
  310|   366k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 366k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   366k|  return from_chars_advanced(pns, value);
  322|   366k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   366k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   366k|  static_assert(is_supported_float_type<T>(),
  204|   366k|                "only some floating-point types are supported");
  205|   366k|  static_assert(is_supported_char_type<UC>(),
  206|   366k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   366k|  from_chars_result_t<UC> answer;
  209|       |
  210|   366k|  answer.ec = std::errc(); // be optimistic
  211|   366k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   366k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 362k, False: 3.56k]
  ------------------
  218|   366k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 356k, False: 6.50k]
  ------------------
  219|   366k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 355k, False: 834]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   355k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 355k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   355k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 355k, False: 262]
  ------------------
  231|   355k|        value = T(pns.mantissa);
  232|   355k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 1.05k, False: 354k]
  ------------------
  233|  1.05k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   354k|        } else {
  235|   354k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   354k|        }
  237|   355k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 355k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   355k|        return answer;
  241|   355k|      }
  242|   355k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   355k|  }
  265|  11.1k|  adjusted_mantissa am =
  266|  11.1k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  11.1k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 988, False: 10.1k]
  |  Branch (267:30): [True: 988, False: 0]
  ------------------
  268|    988|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 72, False: 916]
  ------------------
  269|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|     72|    }
  271|    988|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  11.1k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 72, False: 11.0k]
  ------------------
  276|     72|    am = digit_comp<T>(pns, am);
  277|     72|  }
  278|  11.1k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  11.1k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 10.3k, False: 820]
  |  Branch (280:29): [True: 2.66k, False: 7.67k]
  |  Branch (280:49): [True: 366, False: 2.30k]
  ------------------
  281|  11.1k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.30k, False: 8.49k]
  ------------------
  282|  2.66k|    answer.ec = std::errc::result_out_of_range;
  283|  2.66k|  }
  284|  11.1k|  return answer;
  285|   366k|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|  5.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  5.33M|{
 4068|  5.33M|    if constexpr (sizeof(U) == 1) {
 4069|  5.33M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  5.33M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  5.33M|{
 4032|  5.33M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  5.33M|    SCN_GCC_COMPAT_PUSH
 4035|  5.33M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  5.33M|    constexpr char lengths[] =
 4037|  5.33M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  5.33M|        "\1\1\1\1\1\1\1\1"
 4039|  5.33M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  5.33M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  5.33M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  5.33M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  5.33M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  5.33M|    SCN_GCC_COMPAT_POP
 4046|  5.33M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  4.70M|{
 4274|  4.70M|    if constexpr (sizeof(CharT) == 1) {
 4275|  4.70M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  4.70M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  4.70M|{
 4087|  4.70M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  4.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  4.70M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  4.70M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  4.70M|    };
 4092|       |
 4093|  4.70M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 4.61M, False: 92.2k]
  ------------------
 4094|  4.61M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 810, False: 4.61M]
  ------------------
 4095|    810|            SCN_UNLIKELY_ATTR
 4096|    810|            return invalid_code_point;
 4097|    810|        }
 4098|  4.61M|        return static_cast<char32_t>(input[0]);
 4099|  4.61M|    }
 4100|       |
 4101|  92.2k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 85.2k, False: 7.04k]
  ------------------
 4102|  85.2k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 184, False: 85.0k]
  ------------------
 4103|    184|            SCN_UNLIKELY_ATTR
 4104|    184|            return invalid_code_point;
 4105|    184|        }
 4106|  85.0k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 9.99k, False: 75.0k]
  ------------------
 4107|  9.99k|            SCN_UNLIKELY_ATTR
 4108|  9.99k|            return invalid_code_point;
 4109|  9.99k|        }
 4110|       |
 4111|  75.0k|        char32_t cp{};
 4112|  75.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  75.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  75.0k|        return cp;
 4115|  85.0k|    }
 4116|       |
 4117|  7.04k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 4.03k, False: 3.01k]
  ------------------
 4118|  4.03k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 113, False: 3.91k]
  ------------------
 4119|    113|            SCN_UNLIKELY_ATTR
 4120|    113|            return invalid_code_point;
 4121|    113|        }
 4122|  3.91k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 1.85k, False: 2.05k]
  ------------------
 4123|  3.91k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 618, False: 1.44k]
  ------------------
 4124|  2.47k|            SCN_UNLIKELY_ATTR
 4125|  2.47k|            return invalid_code_point;
 4126|  2.47k|        }
 4127|       |
 4128|  1.44k|        char32_t cp{};
 4129|  1.44k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  1.44k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  1.44k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  1.44k|        return cp;
 4133|  3.91k|    }
 4134|       |
 4135|  3.01k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 3.01k, False: 0]
  ------------------
 4136|  3.01k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 3.01k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  3.01k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 580, False: 2.43k]
  ------------------
 4141|    580|            SCN_UNLIKELY_ATTR
 4142|    580|            return invalid_code_point;
 4143|    580|        }
 4144|  2.43k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 793, False: 1.63k]
  ------------------
 4145|  2.43k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 774, False: 863]
  ------------------
 4146|  2.43k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 544, False: 319]
  ------------------
 4147|  2.11k|            SCN_UNLIKELY_ATTR
 4148|  2.11k|            return invalid_code_point;
 4149|  2.11k|        }
 4150|       |
 4151|    319|        char32_t cp{};
 4152|    319|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    319|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    319|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    319|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    319|        return cp;
 4157|  2.43k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  95.9k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  95.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  95.9k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  7.55M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  7.55M|    else {
 3966|  7.55M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  7.55M|                                       to_address(first), to_address(last)))};
 3968|  7.55M|    }
 3969|  7.55M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  22.9M|{
  316|  22.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  22.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  22.9M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  37.5M|{
  294|  37.5M|    return p;
  295|  37.5M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  12.0M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  12.0M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  12.0M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  12.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  12.0M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  12.0M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   134k|    {
 2869|   134k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   134k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   134k|    {
 2850|   134k|        return decay_copy(t.begin());
 2851|   134k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  19.4M|{
 2094|  19.4M|    return SCN_FWD(t);
  ------------------
  |  |  936|  19.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  19.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.23M|    {
 2926|  3.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.23M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.23M|    {
 2908|  3.23M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.23M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   236k|{
 9375|   236k|    auto result = make_scan_result<Source, Args...>();
 9376|   236k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   236k|                                   make_scan_args(result->values())));
 9378|   236k|    return result;
 9379|   236k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9330|   524k|{
 9331|   524k|    return scan_result_type<Source, Args...>();
 9332|   524k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   524k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   524k|        : m_value(T{}), m_has_value(true)
  427|   524k|    {
  428|   524k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6264|   524k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6107|  1.61M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  1.61M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6038|  1.68M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   524k|{
 9316|   524k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.8k, False: 480k]
  |  |  ------------------
  ------------------
 9317|  43.8k|        out = unexpected(in.error());
 9318|  43.8k|    }
 9319|   480k|    else {
 9320|   480k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   480k|    static_cast<    \
  |  |  935|   480k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   480k|    }
 9322|   524k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.61M|    {
 1740|  1.61M|        return has_value();
 1741|  1.61M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.23M|    {
  490|  3.23M|        return m_has_value;
  491|  3.23M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|   131k|    {
 1746|   131k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   131k|        return this->get_unexpected().error();
 1748|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   131k|    {
  473|   131k|        return m_unexpected;
  474|   131k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  22.1M|    {
  365|  22.1M|        return m_unexpected;
  366|  22.1M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  5.13M|        : m_unexpected(std::forward<Err>(e))
  350|  5.13M|    {
  351|  5.13M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  5.13M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  5.13M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.8k|        : base(unexpect, std::move(e.error())),
 1616|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.8k|    {
 1618|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.8k|          m_has_value(false)
  451|  43.8k|    {
  452|  43.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  16.6M|        : m_unexpected(std::forward<Args>(args)...)
  359|  16.6M|    {
  360|  16.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  16.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  16.6M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.8k|    {
 1316|  43.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.8k|    {
  903|  43.8k|        assign_common(std::move(other));
  904|  43.8k|        return *this;
  905|  43.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.8k|    {
  950|  43.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.8k, False: 0]
  ------------------
  951|  43.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.09M|    {
  490|  2.09M|        return m_has_value;
  491|  2.09M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.48M|    {
  456|  1.48M|        return m_value;
  457|  1.48M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.8k|    {
 1046|  43.8k|        this->destroy_value();
 1047|  43.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.8k|    {
  504|  43.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.8k|                                  std::forward<Args>(args)...);
  506|  43.8k|        m_has_value = false;
  507|  43.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   789k|{
  396|   789k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   789k|        T(std::forward<Args>(args)...);
  398|   789k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.8k|    {
  473|  43.8k|        return m_unexpected;
  474|  43.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.8k|    {
  481|  43.8k|        return std::move(m_unexpected);
  482|  43.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6138|  1.48M|    {
 6139|  1.48M|        m_range = std::forward<Other>(r);
 6140|  1.48M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.48M|    {
 1795|  1.48M|        return value();
 1796|  1.48M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.48M|    {
 1769|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.48M|        return this->get_value();
 1771|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.48M|    {
  456|  1.48M|        return m_value;
  457|  1.48M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9154|   729k|{
 9155|   729k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   729k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9156|   729k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9091|   729k|{
 9092|   729k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   729k|    auto result = vscan_impl(buffer, format, args);
 9095|   729k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 669k]
  |  |  ------------------
  ------------------
 9096|  60.6k|        return unexpected(result.error());
 9097|  60.6k|    }
 9098|   669k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   729k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5074|  1.61M|{
 5075|  1.61M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|  1.61M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|  1.61M|                  "\n"
 5079|  1.61M|                  "Unsupported range type given as input to a scanning "
 5080|  1.61M|                  "function.\n"
 5081|  1.61M|                  "A range needs to have a character type (value type) "
 5082|  1.61M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|  1.61M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|  1.61M|                  "to be included.\n"
 5085|  1.61M|                  "See the scnlib documentation for more details.");
 5086|  1.61M|    static_assert(
 5087|  1.61M|        !std::is_same_v<T, custom_char_traits>,
 5088|  1.61M|        "\n"
 5089|  1.61M|        "Unsupported range type given as input to a scanning "
 5090|  1.61M|        "function.\n"
 5091|  1.61M|        "String types (std::basic_string, and std::basic_string_view) "
 5092|  1.61M|        "need to use std::char_traits. Strings with custom Traits are "
 5093|  1.61M|        "not supported.");
 5094|  1.61M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|  1.61M|                  "\n"
 5096|  1.61M|                  "Unsupported range type given as input to a scanning "
 5097|  1.61M|                  "function.\n"
 5098|  1.61M|                  "file_marker_found cannot be used as an "
 5099|  1.61M|                  "source range type to scn::scan.\n"
 5100|  1.61M|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|  1.61M|                  "and do not provide an explicit source range, "
 5102|  1.61M|                  "or use scn::scan with a FILE* directly.");
 5103|  1.61M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|  1.61M|                  "\n"
 5105|  1.61M|                  "Unsupported range type given as input to a scanning "
 5106|  1.61M|                  "function.\n"
 5107|  1.61M|                  "In order to be scannable, a range needs to satisfy "
 5108|  1.61M|                  "`forward_range`. `input_range` is not sufficient.");
 5109|  1.61M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|  1.61M|                  "\n"
 5111|  1.61M|                  "Unsupported range type given as input to a scanning "
 5112|  1.61M|                  "function.\n"
 5113|  1.61M|                  "A range needs to model forward_range and have a valid "
 5114|  1.61M|                  "character type (char or wchar_t) to be scannable.\n"
 5115|  1.61M|                  "Examples of scannable ranges are std::string, "
 5116|  1.61M|                  "std::string_view, "
 5117|  1.61M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|  1.61M|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|  1.61M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|  1.61M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5013|  1.61M|{
 5014|  1.61M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5015|  1.61M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5016|       |    }
 5017|       |    else {
 5018|       |        return invalid_char_type{};
 5019|       |    }
 5020|  1.61M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.61M|    {
 3000|  1.61M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.61M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.61M|    {
 2981|  1.61M|        return t.data();
 2982|  1.61M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  1.61M|    {
 3383|  1.61M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.61M|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  14.5M|{
  316|  14.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  14.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  14.5M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.10M|    {
 2869|  3.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.10M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.10M|    {
 2850|  3.10M|        return decay_copy(t.begin());
 2851|  3.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  41.4M|    {
 3480|  41.4M|        return m_iterator;
 3481|  41.4M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  1.61M|    {
 3339|  1.61M|        return static_cast<const D&>(*this);
 3340|  1.61M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.61M|    {
 3075|  1.61M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.61M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.61M|    {
 3041|  1.61M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.61M|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  8.90M|{
 2094|  8.90M|    return SCN_FWD(t);
  ------------------
  |  |  936|  8.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  8.90M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  10.1M|    {
 3496|  10.1M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  10.1M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  22.4M|    {
 1740|  22.4M|        return has_value();
 1741|  22.4M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  40.1M|    {
  490|  40.1M|        return m_has_value;
  491|  40.1M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  1.62M|    {
 1746|  1.62M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.62M|        return this->get_unexpected().error();
 1748|  1.62M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.62M|    {
  473|  1.62M|        return m_unexpected;
  474|  1.62M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   131k|        : base(unexpect, std::move(e.error())),
 1616|   131k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   131k|    {
 1618|   131k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   131k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   131k|          m_has_value(false)
  451|   131k|    {
  452|   131k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.61M|    {
 1316|  1.61M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6368|  1.48M|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  1.48M|                      ranges::iterator_t<SourceRange>>) {
 6371|  1.48M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  1.48M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  11.5M|    {
 2869|  11.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  11.5M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  11.5M|    {
 2850|  11.5M|        return decay_copy(t.begin());
 2851|  11.5M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6355|  1.48M|{
 6356|  1.48M|    return ranges::end(source);
 6357|  1.48M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.48M|    {
 2926|  1.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.48M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.48M|    {
 2908|  1.48M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.48M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  19.1M|    {
 3484|  19.1M|        return m_sentinel;
 3485|  19.1M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  6.96M|    {
 1795|  6.96M|        return value();
 1796|  6.96M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  16.0M|    {
 1769|  16.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  16.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  16.0M|        return this->get_value();
 1771|  16.0M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  16.0M|    {
  456|  16.0M|        return m_value;
  457|  16.0M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.48M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.48M|    {
 1572|  1.48M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.48M|    {
  442|  1.48M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   473k|    {
 8462|   473k|        return m_str;
 8463|   473k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  1.02M|{
 5804|  1.02M|    detail::check_scan_arg_types<Args...>();
 5805|  1.02M|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  1.02M|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5518|  1.68M|{
 5519|  1.68M|    constexpr bool default_constructible_constraint =
 5520|  1.68M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  1.68M|    static_assert(default_constructible_constraint,
 5522|  1.68M|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  1.68M|    constexpr bool destructible_constraint =
 5525|  1.68M|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  1.68M|    static_assert(destructible_constraint,
 5527|  1.68M|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  1.68M|    constexpr bool non_reference_constraint =
 5530|  1.68M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  1.68M|    static_assert(non_reference_constraint,
 5532|  1.68M|                  "Scan argument types must not be references");
 5533|       |
 5534|  1.68M|    constexpr bool movable_constraint =
 5535|  1.68M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  1.68M|    static_assert(movable_constraint,
 5537|  1.68M|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  1.68M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  1.68M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  1.68M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 5779|  1.02M|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  1.02M|    {
 5781|  1.02M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  1.02M|    {
 5789|  1.02M|        return {detail::make_arg<
 5790|  1.02M|            kind, Context,
 5791|  1.02M|            mapped_type_constant<remove_cvref_t<A>,
 5792|  1.02M|                                 typename Context::char_type>::value>(args)...};
 5793|  1.02M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5568|  1.02M|{
 5569|  1.02M|    return make_value<Context>(value).ref_value;
 5570|  1.02M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5503|  1.13M|{
 5504|  1.13M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  1.13M|                                  needs_context_tag>) {
 5508|  1.13M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  1.13M|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5342|  1.13M|    {                                                                        \
 5343|  1.13M|        return val;                                                          \
 5344|  1.13M|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5472|  1.68M|{
 5473|  1.68M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  1.68M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  1.68M|    constexpr bool scannable_char =
 5477|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  1.68M|    static_assert(scannable_char,
 5479|  1.68M|                  "Cannot scan an argument of an unsupported character "
 5480|  1.68M|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  1.68M|    constexpr bool scannable_const =
 5483|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  1.68M|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  1.68M|    constexpr bool scannable_disabled =
 5487|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  1.68M|    static_assert(scannable_disabled,
 5489|  1.68M|                  "Cannot scan an argument that has been disabled by "
 5490|  1.68M|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  1.68M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  1.68M|    static_assert(
 5494|  1.68M|        scannable,
 5495|  1.68M|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  1.68M|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  1.68M|    return arg_value{arg};
 5499|  1.68M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5256|  1.68M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  1.68M|    {
 5258|  1.68M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6047|  1.53M|    {
 6048|  1.53M|        return m_values;
 6049|  1.53M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  1.02M|        : basic_scan_args(store.desc, store.args.data())
 5830|  1.02M|    {
 5831|  1.02M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 5881|  3.17M|        : m_desc(desc), m_builtin_values(data)
 5882|  3.17M|    {
 5883|  3.17M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  16.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  16.4M|    static_cast<    \
  |  |  935|  16.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  16.4M|    static_cast<    \
  |  |  935|  16.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  16.4M|    {
 3466|  16.4M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8134|  3.17M|{
 8135|  3.17M|    return s;
 8136|  3.17M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8111|  3.17M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   473k|        : m_str(r.str)
 8457|   473k|    {
 8458|   473k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   524k|    {
 1740|   524k|        return has_value();
 1741|   524k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|  1.48M|    {
 1815|  1.48M|        return &value();
 1816|  1.48M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.48M|    {
 1769|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.48M|        return this->get_value();
 1771|  1.48M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6127|  1.48M|    {
 6128|  1.48M|        return ranges::begin(m_range);
 6129|  1.48M|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   236k|{
 9444|   236k|    auto result = make_scan_result<Source, Args...>();
 9445|   236k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   236k|                                   make_scan_args(result->values())));
 9447|   236k|    return result;
 9448|   236k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9172|   729k|{
 9173|   729k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   729k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9174|   729k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9107|   729k|{
 9108|   729k|#if !SCN_DISABLE_LOCALE
 9109|   729k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   729k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   729k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   729k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   729k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 669k]
  |  |  ------------------
  ------------------
 9116|  60.6k|        return unexpected(result.error());
 9117|  60.6k|    }
 9118|   669k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   729k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  50.9k|{
 9485|  50.9k|    auto result = make_scan_result<Source, T>();
 9486|  50.9k|    fill_scan_result(
 9487|  50.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  50.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  50.9k|                            detail::make_arg<scan_context>(result->value())));
 9489|  50.9k|    return result;
 9490|  50.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9185|   158k|{
 9186|   158k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9187|   158k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|   158k|{
 9132|   158k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|   158k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|   158k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 148k]
  |  |  ------------------
  ------------------
 9136|  10.1k|        return unexpected(result.error());
 9137|  10.1k|    }
 9138|   148k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|   158k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5553|   106k|{
 5554|   106k|    check_scan_arg_types<T>();
 5555|       |
 5556|   106k|    basic_scan_arg<Context> arg;
 5557|   106k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|   106k|    arg.m_value = make_value<Context>(value);
 5559|   106k|    return arg;
 5560|   106k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5648|  3.50M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5253|  5.34M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|   153k|    {
 6070|   153k|        return std::get<0>(m_values);
 6071|   153k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   245k|{
 9375|   245k|    auto result = make_scan_result<Source, Args...>();
 9376|   245k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   245k|                                   make_scan_args(result->values())));
 9378|   245k|    return result;
 9379|   245k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9330|   543k|{
 9331|   543k|    return scan_result_type<Source, Args...>();
 9332|   543k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   543k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   543k|        : m_value(T{}), m_has_value(true)
  427|   543k|    {
  428|   543k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6264|   543k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6038|  1.81M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   543k|{
 9316|   543k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.8k, False: 499k]
  |  |  ------------------
  ------------------
 9317|  43.8k|        out = unexpected(in.error());
 9318|  43.8k|    }
 9319|   499k|    else {
 9320|   499k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   499k|    static_cast<    \
  |  |  935|   499k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   499k|    }
 9322|   543k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.8k|        : base(unexpect, std::move(e.error())),
 1616|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.8k|    {
 1618|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.8k|          m_has_value(false)
  451|  43.8k|    {
  452|  43.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.8k|    {
 1316|  43.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.8k|    {
  903|  43.8k|        assign_common(std::move(other));
  904|  43.8k|        return *this;
  905|  43.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.8k|    {
  950|  43.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.8k, False: 0]
  ------------------
  951|  43.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.17M|    {
  490|  2.17M|        return m_has_value;
  491|  2.17M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.54M|    {
  456|  1.54M|        return m_value;
  457|  1.54M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.8k|    {
 1046|  43.8k|        this->destroy_value();
 1047|  43.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.8k|    {
  504|  43.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.8k|                                  std::forward<Args>(args)...);
  506|  43.8k|        m_has_value = false;
  507|  43.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.8k|    {
  473|  43.8k|        return m_unexpected;
  474|  43.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.8k|    {
  481|  43.8k|        return std::move(m_unexpected);
  482|  43.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   490k|    {
 8462|   490k|        return m_str;
 8463|   490k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  1.06M|{
 5804|  1.06M|    detail::check_scan_arg_types<Args...>();
 5805|  1.06M|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  1.06M|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5518|  1.81M|{
 5519|  1.81M|    constexpr bool default_constructible_constraint =
 5520|  1.81M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  1.81M|    static_assert(default_constructible_constraint,
 5522|  1.81M|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  1.81M|    constexpr bool destructible_constraint =
 5525|  1.81M|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  1.81M|    static_assert(destructible_constraint,
 5527|  1.81M|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  1.81M|    constexpr bool non_reference_constraint =
 5530|  1.81M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  1.81M|    static_assert(non_reference_constraint,
 5532|  1.81M|                  "Scan argument types must not be references");
 5533|       |
 5534|  1.81M|    constexpr bool movable_constraint =
 5535|  1.81M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  1.81M|    static_assert(movable_constraint,
 5537|  1.81M|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  1.81M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  1.81M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  1.81M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 5779|  1.06M|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  1.06M|    {
 5781|  1.06M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  1.06M|    {
 5789|  1.06M|        return {detail::make_arg<
 5790|  1.06M|            kind, Context,
 5791|  1.06M|            mapped_type_constant<remove_cvref_t<A>,
 5792|  1.06M|                                 typename Context::char_type>::value>(args)...};
 5793|  1.06M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5568|  1.06M|{
 5569|  1.06M|    return make_value<Context>(value).ref_value;
 5570|  1.06M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5503|  1.18M|{
 5504|  1.18M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  1.18M|                                  needs_context_tag>) {
 5508|  1.18M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  1.18M|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5342|  1.18M|    {                                                                        \
 5343|  1.18M|        return val;                                                          \
 5344|  1.18M|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5472|  1.81M|{
 5473|  1.81M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  1.81M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  1.81M|    constexpr bool scannable_char =
 5477|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  1.81M|    static_assert(scannable_char,
 5479|  1.81M|                  "Cannot scan an argument of an unsupported character "
 5480|  1.81M|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  1.81M|    constexpr bool scannable_const =
 5483|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  1.81M|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  1.81M|    constexpr bool scannable_disabled =
 5487|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  1.81M|    static_assert(scannable_disabled,
 5489|  1.81M|                  "Cannot scan an argument that has been disabled by "
 5490|  1.81M|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  1.81M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  1.81M|    static_assert(
 5494|  1.81M|        scannable,
 5495|  1.81M|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  1.81M|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  1.81M|    return arg_value{arg};
 5499|  1.81M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5256|  1.81M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  1.81M|    {
 5258|  1.81M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6047|  1.64M|    {
 6048|  1.64M|        return m_values;
 6049|  1.64M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  1.06M|        : basic_scan_args(store.desc, store.args.data())
 5830|  1.06M|    {
 5831|  1.06M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   490k|        : m_str(r.str)
 8457|   490k|    {
 8458|   490k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   543k|    {
 1740|   543k|        return has_value();
 1741|   543k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.54M|    {
 1815|  1.54M|        return &value();
 1816|  1.54M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.54M|    {
 1769|  1.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.54M|        return this->get_value();
 1771|  1.54M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   245k|{
 9444|   245k|    auto result = make_scan_result<Source, Args...>();
 9445|   245k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   245k|                                   make_scan_args(result->values())));
 9447|   245k|    return result;
 9448|   245k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  53.2k|{
 9485|  53.2k|    auto result = make_scan_result<Source, T>();
 9486|  53.2k|    fill_scan_result(
 9487|  53.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  53.2k|                            detail::make_arg<scan_context>(result->value())));
 9489|  53.2k|    return result;
 9490|  53.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5553|   112k|{
 5554|   112k|    check_scan_arg_types<T>();
 5555|       |
 5556|   112k|    basic_scan_arg<Context> arg;
 5557|   112k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|   112k|    arg.m_value = make_value<Context>(value);
 5559|   112k|    return arg;
 5560|   112k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|   170k|    {
 6070|   170k|        return std::get<0>(m_values);
 6071|   170k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   248k|{
 9375|   248k|    auto result = make_scan_result<Source, Args...>();
 9376|   248k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   248k|                                   make_scan_args(result->values())));
 9378|   248k|    return result;
 9379|   248k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9330|   550k|{
 9331|   550k|    return scan_result_type<Source, Args...>();
 9332|   550k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   550k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   550k|        : m_value(T{}), m_has_value(true)
  427|   550k|    {
  428|   550k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6264|   550k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6038|  1.84M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   550k|{
 9316|   550k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.8k, False: 506k]
  |  |  ------------------
  ------------------
 9317|  43.8k|        out = unexpected(in.error());
 9318|  43.8k|    }
 9319|   506k|    else {
 9320|   506k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   506k|    static_cast<    \
  |  |  935|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   506k|    }
 9322|   550k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.8k|        : base(unexpect, std::move(e.error())),
 1616|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.8k|    {
 1618|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.8k|          m_has_value(false)
  451|  43.8k|    {
  452|  43.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.8k|    {
 1316|  43.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.8k|    {
  903|  43.8k|        assign_common(std::move(other));
  904|  43.8k|        return *this;
  905|  43.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.8k|    {
  950|  43.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.8k, False: 0]
  ------------------
  951|  43.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.20M|    {
  490|  2.20M|        return m_has_value;
  491|  2.20M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.56M|    {
  456|  1.56M|        return m_value;
  457|  1.56M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.8k|    {
 1046|  43.8k|        this->destroy_value();
 1047|  43.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.8k|    {
  504|  43.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.8k|                                  std::forward<Args>(args)...);
  506|  43.8k|        m_has_value = false;
  507|  43.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.8k|    {
  473|  43.8k|        return m_unexpected;
  474|  43.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.8k|    {
  481|  43.8k|        return std::move(m_unexpected);
  482|  43.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   496k|    {
 8462|   496k|        return m_str;
 8463|   496k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|  1.08M|{
 5804|  1.08M|    detail::check_scan_arg_types<Args...>();
 5805|  1.08M|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  1.08M|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5518|  1.84M|{
 5519|  1.84M|    constexpr bool default_constructible_constraint =
 5520|  1.84M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  1.84M|    static_assert(default_constructible_constraint,
 5522|  1.84M|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  1.84M|    constexpr bool destructible_constraint =
 5525|  1.84M|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  1.84M|    static_assert(destructible_constraint,
 5527|  1.84M|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  1.84M|    constexpr bool non_reference_constraint =
 5530|  1.84M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  1.84M|    static_assert(non_reference_constraint,
 5532|  1.84M|                  "Scan argument types must not be references");
 5533|       |
 5534|  1.84M|    constexpr bool movable_constraint =
 5535|  1.84M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  1.84M|    static_assert(movable_constraint,
 5537|  1.84M|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  1.84M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  1.84M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  1.84M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 5779|  1.08M|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  1.08M|    {
 5781|  1.08M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|  1.08M|    {
 5789|  1.08M|        return {detail::make_arg<
 5790|  1.08M|            kind, Context,
 5791|  1.08M|            mapped_type_constant<remove_cvref_t<A>,
 5792|  1.08M|                                 typename Context::char_type>::value>(args)...};
 5793|  1.08M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EevEEPvRT2_:
 5568|  1.08M|{
 5569|  1.08M|    return make_value<Context>(value).ref_value;
 5570|  1.08M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5503|  1.19M|{
 5504|  1.19M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  1.19M|                                  needs_context_tag>) {
 5508|  1.19M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  1.19M|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5342|  1.19M|    {                                                                        \
 5343|  1.19M|        return val;                                                          \
 5344|  1.19M|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5472|  1.84M|{
 5473|  1.84M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  1.84M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  1.84M|    constexpr bool scannable_char =
 5477|  1.84M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  1.84M|    static_assert(scannable_char,
 5479|  1.84M|                  "Cannot scan an argument of an unsupported character "
 5480|  1.84M|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  1.84M|    constexpr bool scannable_const =
 5483|  1.84M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  1.84M|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  1.84M|    constexpr bool scannable_disabled =
 5487|  1.84M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  1.84M|    static_assert(scannable_disabled,
 5489|  1.84M|                  "Cannot scan an argument that has been disabled by "
 5490|  1.84M|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  1.84M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  1.84M|    static_assert(
 5494|  1.84M|        scannable,
 5495|  1.84M|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  1.84M|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  1.84M|    return arg_value{arg};
 5499|  1.84M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5256|  1.84M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  1.84M|    {
 5258|  1.84M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6047|  1.66M|    {
 6048|  1.66M|        return m_values;
 6049|  1.66M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  1.08M|        : basic_scan_args(store.desc, store.args.data())
 5830|  1.08M|    {
 5831|  1.08M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   496k|        : m_str(r.str)
 8457|   496k|    {
 8458|   496k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   550k|    {
 1740|   550k|        return has_value();
 1741|   550k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.56M|    {
 1815|  1.56M|        return &value();
 1816|  1.56M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.56M|    {
 1769|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.56M|        return this->get_value();
 1771|  1.56M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   248k|{
 9444|   248k|    auto result = make_scan_result<Source, Args...>();
 9445|   248k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   248k|                                   make_scan_args(result->values())));
 9447|   248k|    return result;
 9448|   248k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  54.1k|{
 9485|  54.1k|    auto result = make_scan_result<Source, T>();
 9486|  54.1k|    fill_scan_result(
 9487|  54.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  54.1k|                            detail::make_arg<scan_context>(result->value())));
 9489|  54.1k|    return result;
 9490|  54.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5553|   113k|{
 5554|   113k|    check_scan_arg_types<T>();
 5555|       |
 5556|   113k|    basic_scan_arg<Context> arg;
 5557|   113k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|   113k|    arg.m_value = make_value<Context>(value);
 5559|   113k|    return arg;
 5560|   113k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|   173k|    {
 6070|   173k|        return std::get<0>(m_values);
 6071|   173k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   131k|    {
 2869|   131k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   131k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   131k|    {
 2850|   131k|        return decay_copy(t.begin());
 2851|   131k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  83.2M|{
 2094|  83.2M|    return SCN_FWD(t);
  ------------------
  |  |  936|  83.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  83.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.77M|    {
 2926|  3.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.77M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.77M|    {
 2908|  3.77M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.77M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   275k|{
 9375|   275k|    auto result = make_scan_result<Source, Args...>();
 9376|   275k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   275k|                                   make_scan_args(result->values())));
 9378|   275k|    return result;
 9379|   275k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9330|   606k|{
 9331|   606k|    return scan_result_type<Source, Args...>();
 9332|   606k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   606k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   606k|        : m_value(T{}), m_has_value(true)
  427|   606k|    {
  428|   606k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6264|   606k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6107|  1.88M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  1.88M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   606k|{
 9316|   606k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.8k, False: 562k]
  |  |  ------------------
  ------------------
 9317|  43.8k|        out = unexpected(in.error());
 9318|  43.8k|    }
 9319|   562k|    else {
 9320|   562k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   562k|    static_cast<    \
  |  |  935|   562k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   562k|    }
 9322|   606k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  1.88M|    {
 1740|  1.88M|        return has_value();
 1741|  1.88M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.77M|    {
  490|  3.77M|        return m_has_value;
  491|  3.77M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   131k|    {
 1746|   131k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   131k|        return this->get_unexpected().error();
 1748|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   131k|    {
  473|   131k|        return m_unexpected;
  474|   131k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.8k|        : base(unexpect, std::move(e.error())),
 1616|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.8k|    {
 1618|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.8k|          m_has_value(false)
  451|  43.8k|    {
  452|  43.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.8k|    {
 1316|  43.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.8k|    {
  903|  43.8k|        assign_common(std::move(other));
  904|  43.8k|        return *this;
  905|  43.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.8k|    {
  950|  43.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.8k, False: 0]
  ------------------
  951|  43.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.42M|    {
  490|  2.42M|        return m_has_value;
  491|  2.42M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.73M|    {
  456|  1.73M|        return m_value;
  457|  1.73M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.8k|    {
 1046|  43.8k|        this->destroy_value();
 1047|  43.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.8k|    {
  504|  43.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.8k|                                  std::forward<Args>(args)...);
  506|  43.8k|        m_has_value = false;
  507|  43.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.8k|    {
  473|  43.8k|        return m_unexpected;
  474|  43.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.8k|    {
  481|  43.8k|        return std::move(m_unexpected);
  482|  43.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6138|  1.75M|    {
 6139|  1.75M|        m_range = std::forward<Other>(r);
 6140|  1.75M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  1.75M|    {
 1795|  1.75M|        return value();
 1796|  1.75M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  1.75M|    {
 1769|  1.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.75M|        return this->get_value();
 1771|  1.75M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.75M|    {
  456|  1.75M|        return m_value;
  457|  1.75M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9154|   856k|{
 9155|   856k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   856k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9156|   856k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9091|   856k|{
 9092|   856k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   856k|    auto result = vscan_impl(buffer, format, args);
 9095|   856k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 795k]
  |  |  ------------------
  ------------------
 9096|  60.6k|        return unexpected(result.error());
 9097|  60.6k|    }
 9098|   795k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   856k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5074|  1.88M|{
 5075|  1.88M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|  1.88M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|  1.88M|                  "\n"
 5079|  1.88M|                  "Unsupported range type given as input to a scanning "
 5080|  1.88M|                  "function.\n"
 5081|  1.88M|                  "A range needs to have a character type (value type) "
 5082|  1.88M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|  1.88M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|  1.88M|                  "to be included.\n"
 5085|  1.88M|                  "See the scnlib documentation for more details.");
 5086|  1.88M|    static_assert(
 5087|  1.88M|        !std::is_same_v<T, custom_char_traits>,
 5088|  1.88M|        "\n"
 5089|  1.88M|        "Unsupported range type given as input to a scanning "
 5090|  1.88M|        "function.\n"
 5091|  1.88M|        "String types (std::basic_string, and std::basic_string_view) "
 5092|  1.88M|        "need to use std::char_traits. Strings with custom Traits are "
 5093|  1.88M|        "not supported.");
 5094|  1.88M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|  1.88M|                  "\n"
 5096|  1.88M|                  "Unsupported range type given as input to a scanning "
 5097|  1.88M|                  "function.\n"
 5098|  1.88M|                  "file_marker_found cannot be used as an "
 5099|  1.88M|                  "source range type to scn::scan.\n"
 5100|  1.88M|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|  1.88M|                  "and do not provide an explicit source range, "
 5102|  1.88M|                  "or use scn::scan with a FILE* directly.");
 5103|  1.88M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|  1.88M|                  "\n"
 5105|  1.88M|                  "Unsupported range type given as input to a scanning "
 5106|  1.88M|                  "function.\n"
 5107|  1.88M|                  "In order to be scannable, a range needs to satisfy "
 5108|  1.88M|                  "`forward_range`. `input_range` is not sufficient.");
 5109|  1.88M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|  1.88M|                  "\n"
 5111|  1.88M|                  "Unsupported range type given as input to a scanning "
 5112|  1.88M|                  "function.\n"
 5113|  1.88M|                  "A range needs to model forward_range and have a valid "
 5114|  1.88M|                  "character type (char or wchar_t) to be scannable.\n"
 5115|  1.88M|                  "Examples of scannable ranges are std::string, "
 5116|  1.88M|                  "std::string_view, "
 5117|  1.88M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|  1.88M|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|  1.88M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|  1.88M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5044|  1.88M|{
 5045|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5046|       |        return file_marker_found{};
 5047|       |    }
 5048|       |    else if constexpr (!ranges::forward_range<Range>) {
 5049|       |        if constexpr (ranges::range<Range>) {
 5050|       |            return insufficient_range{};
 5051|       |        }
 5052|       |        else {
 5053|       |            return invalid_input_range{};
 5054|       |        }
 5055|       |    }
 5056|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5057|       |        return invalid_char_type{};
 5058|       |    }
 5059|  1.88M|    else {
 5060|  1.88M|        return make_forward_scan_buffer(r);
 5061|  1.88M|    }
 5062|  1.88M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4878|  1.88M|{
 4879|  1.88M|    return basic_scan_forward_buffer_impl(range);
 4880|  1.88M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|  1.88M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  1.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|  1.88M|          m_cursor(ranges::begin(*m_range))
 4765|  1.88M|    {
 4766|  1.88M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|  1.88M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|  1.88M|    {
 4737|  1.88M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|  1.88M|        : m_current_view(sv), m_is_contiguous(false)
 4427|  1.88M|    {
 4428|  1.88M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|  1.88M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.64M|    {
 2869|  3.64M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.64M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.64M|    {
 2850|  3.64M|        return decay_copy(t.begin());
 2851|  3.64M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  5.39M|    {
 3480|  5.39M|        return m_iterator;
 3481|  5.39M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|  24.2M|    {
 4770|  24.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 339k, False: 23.9M]
  ------------------
 4771|   339k|            return false;
 4772|   339k|        }
 4773|  23.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  23.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  23.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  23.9M|        }
 4776|  23.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 22.0M, False: 1.86M]
  ------------------
 4777|  22.0M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  22.0M|                                          this->m_current_view.begin(),
 4779|  22.0M|                                          this->m_current_view.end());
 4780|  22.0M|        }
 4781|  23.9M|        m_latest = *m_cursor;
 4782|  23.9M|        ++m_cursor;
 4783|  23.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  23.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  23.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  23.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  23.9M|        }
 4787|  23.9M|        return true;
 4788|  24.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  72.2M|    {
 2926|  72.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  72.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  72.2M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  72.2M|    {
 2908|  72.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  72.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  72.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  73.9M|    {
 3484|  73.9M|        return m_sentinel;
 3485|  73.9M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  1.88M|    {
 4346|  1.88M|        SCN_UNUSED(position);
  ------------------
  |  |  915|  1.88M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  1.88M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   131k|        : base(unexpect, std::move(e.error())),
 1616|   131k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   131k|    {
 1618|   131k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   131k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   131k|          m_has_value(false)
  451|   131k|    {
  452|   131k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.88M|    {
 1316|  1.88M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6368|  1.75M|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  1.75M|                      ranges::iterator_t<SourceRange>>) {
 6371|  1.75M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  1.75M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.75M|    {
 2869|  1.75M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.75M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.75M|    {
 2850|  1.75M|        return decay_copy(t.begin());
 2851|  1.75M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6355|  1.75M|{
 6356|  1.75M|    return ranges::end(source);
 6357|  1.75M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.75M|    {
 2926|  1.75M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.75M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.75M|    {
 2908|  1.75M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.75M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  1.75M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.75M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.75M|    {
 1572|  1.75M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  1.75M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.75M|    {
  442|  1.75M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   550k|    {
 8462|   550k|        return m_str;
 8463|   550k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  3.64M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.64M|    static_cast<    \
  |  |  935|  3.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.64M|    static_cast<    \
  |  |  935|  3.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  3.64M|    {
 3466|  3.64M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   550k|        : m_str(r.str)
 8457|   550k|    {
 8458|   550k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   606k|    {
 1740|   606k|        return has_value();
 1741|   606k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|  1.73M|    {
 1815|  1.73M|        return &value();
 1816|  1.73M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.73M|    {
 1769|  1.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.73M|        return this->get_value();
 1771|  1.73M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6127|  1.75M|    {
 6128|  1.75M|        return ranges::begin(m_range);
 6129|  1.75M|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   275k|{
 9444|   275k|    auto result = make_scan_result<Source, Args...>();
 9445|   275k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   275k|                                   make_scan_args(result->values())));
 9447|   275k|    return result;
 9448|   275k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9172|   856k|{
 9173|   856k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   856k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9174|   856k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9107|   856k|{
 9108|   856k|#if !SCN_DISABLE_LOCALE
 9109|   856k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   856k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   856k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   856k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   856k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.6k, False: 795k]
  |  |  ------------------
  ------------------
 9116|  60.6k|        return unexpected(result.error());
 9117|  60.6k|    }
 9118|   795k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   856k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  55.7k|{
 9485|  55.7k|    auto result = make_scan_result<Source, T>();
 9486|  55.7k|    fill_scan_result(
 9487|  55.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  55.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  55.7k|                            detail::make_arg<scan_context>(result->value())));
 9489|  55.7k|    return result;
 9490|  55.7k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9185|   174k|{
 9186|   174k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9187|   174k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|   174k|{
 9132|   174k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|   174k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|   174k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 163k]
  |  |  ------------------
  ------------------
 9136|  10.1k|        return unexpected(result.error());
 9137|  10.1k|    }
 9138|   163k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|   174k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   289k|{
 9375|   289k|    auto result = make_scan_result<Source, Args...>();
 9376|   289k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   289k|                                   make_scan_args(result->values())));
 9378|   289k|    return result;
 9379|   289k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9330|   637k|{
 9331|   637k|    return scan_result_type<Source, Args...>();
 9332|   637k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   637k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   637k|        : m_value(T{}), m_has_value(true)
  427|   637k|    {
  428|   637k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6264|   637k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   637k|{
 9316|   637k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.8k, False: 593k]
  |  |  ------------------
  ------------------
 9317|  43.8k|        out = unexpected(in.error());
 9318|  43.8k|    }
 9319|   593k|    else {
 9320|   593k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   593k|    static_cast<    \
  |  |  935|   593k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   593k|    }
 9322|   637k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.8k|        : base(unexpect, std::move(e.error())),
 1616|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.8k|    {
 1618|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.8k|          m_has_value(false)
  451|  43.8k|    {
  452|  43.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.8k|    {
 1316|  43.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.8k|    {
  903|  43.8k|        assign_common(std::move(other));
  904|  43.8k|        return *this;
  905|  43.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.8k|    {
  950|  43.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.8k, False: 0]
  ------------------
  951|  43.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.54M|    {
  490|  2.54M|        return m_has_value;
  491|  2.54M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.82M|    {
  456|  1.82M|        return m_value;
  457|  1.82M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.8k|    {
 1046|  43.8k|        this->destroy_value();
 1047|  43.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.8k|    {
  504|  43.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.8k|                                  std::forward<Args>(args)...);
  506|  43.8k|        m_has_value = false;
  507|  43.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.8k|    {
  473|  43.8k|        return m_unexpected;
  474|  43.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.8k|    {
  481|  43.8k|        return std::move(m_unexpected);
  482|  43.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   578k|    {
 8462|   578k|        return m_str;
 8463|   578k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   578k|        : m_str(r.str)
 8457|   578k|    {
 8458|   578k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   637k|    {
 1740|   637k|        return has_value();
 1741|   637k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.82M|    {
 1815|  1.82M|        return &value();
 1816|  1.82M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.82M|    {
 1769|  1.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.82M|        return this->get_value();
 1771|  1.82M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   289k|{
 9444|   289k|    auto result = make_scan_result<Source, Args...>();
 9445|   289k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   289k|                                   make_scan_args(result->values())));
 9447|   289k|    return result;
 9448|   289k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  58.8k|{
 9485|  58.8k|    auto result = make_scan_result<Source, T>();
 9486|  58.8k|    fill_scan_result(
 9487|  58.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  58.8k|                            detail::make_arg<scan_context>(result->value())));
 9489|  58.8k|    return result;
 9490|  58.8k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   291k|{
 9375|   291k|    auto result = make_scan_result<Source, Args...>();
 9376|   291k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   291k|                                   make_scan_args(result->values())));
 9378|   291k|    return result;
 9379|   291k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9330|   643k|{
 9331|   643k|    return scan_result_type<Source, Args...>();
 9332|   643k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   643k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   643k|        : m_value(T{}), m_has_value(true)
  427|   643k|    {
  428|   643k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6264|   643k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   643k|{
 9316|   643k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.8k, False: 599k]
  |  |  ------------------
  ------------------
 9317|  43.8k|        out = unexpected(in.error());
 9318|  43.8k|    }
 9319|   599k|    else {
 9320|   599k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   599k|    static_cast<    \
  |  |  935|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   599k|    }
 9322|   643k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.8k|        : base(unexpect, std::move(e.error())),
 1616|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.8k|    {
 1618|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.8k|          m_has_value(false)
  451|  43.8k|    {
  452|  43.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.8k|    {
 1316|  43.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.8k|    {
  903|  43.8k|        assign_common(std::move(other));
  904|  43.8k|        return *this;
  905|  43.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.8k|    {
  950|  43.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.8k, False: 0]
  ------------------
  951|  43.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.57M|    {
  490|  2.57M|        return m_has_value;
  491|  2.57M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.84M|    {
  456|  1.84M|        return m_value;
  457|  1.84M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.8k|    {
 1046|  43.8k|        this->destroy_value();
 1047|  43.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.8k|    {
  504|  43.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.8k|                                  std::forward<Args>(args)...);
  506|  43.8k|        m_has_value = false;
  507|  43.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.8k|    {
  473|  43.8k|        return m_unexpected;
  474|  43.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.8k|    {
  481|  43.8k|        return std::move(m_unexpected);
  482|  43.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   583k|    {
 8462|   583k|        return m_str;
 8463|   583k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   583k|        : m_str(r.str)
 8457|   583k|    {
 8458|   583k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   643k|    {
 1740|   643k|        return has_value();
 1741|   643k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.84M|    {
 1815|  1.84M|        return &value();
 1816|  1.84M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.84M|    {
 1769|  1.84M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.84M|        return this->get_value();
 1771|  1.84M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   291k|{
 9444|   291k|    auto result = make_scan_result<Source, Args...>();
 9445|   291k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   291k|                                   make_scan_args(result->values())));
 9447|   291k|    return result;
 9448|   291k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  59.4k|{
 9485|  59.4k|    auto result = make_scan_result<Source, T>();
 9486|  59.4k|    fill_scan_result(
 9487|  59.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  59.4k|                            detail::make_arg<scan_context>(result->value())));
 9489|  59.4k|    return result;
 9490|  59.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   269k|    {
 2869|   269k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   269k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   269k|    {
 2850|   269k|        return decay_copy(t.begin());
 2851|   269k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  7.46M|{
 2094|  7.46M|    return SCN_FWD(t);
  ------------------
  |  |  936|  7.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  7.46M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.84M|    {
 2926|  1.84M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.84M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.84M|    {
 2908|  1.84M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.84M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9330|   278k|{
 9331|   278k|    return scan_result_type<Source, Args...>();
 9332|   278k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   278k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   278k|        : m_value(T{}), m_has_value(true)
  427|   278k|    {
  428|   278k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6264|   278k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6107|   919k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   919k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   278k|{
 9316|   278k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.6k, False: 191k]
  |  |  ------------------
  ------------------
 9317|  87.6k|        out = unexpected(in.error());
 9318|  87.6k|    }
 9319|   191k|    else {
 9320|   191k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   191k|    static_cast<    \
  |  |  935|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   191k|    }
 9322|   278k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   919k|    {
 1740|   919k|        return has_value();
 1741|   919k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.83M|    {
  490|  1.83M|        return m_has_value;
  491|  1.83M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   263k|    {
 1746|   263k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   263k|        return this->get_unexpected().error();
 1748|   263k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   263k|    {
  473|   263k|        return m_unexpected;
  474|   263k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.6k|        : base(unexpect, std::move(e.error())),
 1616|  87.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.6k|    {
 1618|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.6k|          m_has_value(false)
  451|  87.6k|    {
  452|  87.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.6k|    {
 1316|  87.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.6k|    {
  903|  87.6k|        assign_common(std::move(other));
  904|  87.6k|        return *this;
  905|  87.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.6k|    {
  950|  87.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.6k, False: 0]
  ------------------
  951|  87.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.11M|    {
  490|  1.11M|        return m_has_value;
  491|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   661k|    {
  456|   661k|        return m_value;
  457|   661k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.6k|    {
 1046|  87.6k|        this->destroy_value();
 1047|  87.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.6k|    {
  504|  87.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.6k|                                  std::forward<Args>(args)...);
  506|  87.6k|        m_has_value = false;
  507|  87.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.6k|    {
  473|  87.6k|        return m_unexpected;
  474|  87.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.6k|    {
  481|  87.6k|        return std::move(m_unexpected);
  482|  87.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6138|   656k|    {
 6139|   656k|        m_range = std::forward<Other>(r);
 6140|   656k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   656k|    {
 1795|   656k|        return value();
 1796|   656k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   656k|    {
 1769|   656k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   656k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   656k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   656k|        return this->get_value();
 1771|   656k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   656k|    {
  456|   656k|        return m_value;
  457|   656k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9091|   418k|{
 9092|   418k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   418k|    auto result = vscan_impl(buffer, format, args);
 9095|   418k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 121k, False: 297k]
  |  |  ------------------
  ------------------
 9096|   121k|        return unexpected(result.error());
 9097|   121k|    }
 9098|   297k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   418k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5074|   919k|{
 5075|   919k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|   919k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|   919k|                  "\n"
 5079|   919k|                  "Unsupported range type given as input to a scanning "
 5080|   919k|                  "function.\n"
 5081|   919k|                  "A range needs to have a character type (value type) "
 5082|   919k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|   919k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|   919k|                  "to be included.\n"
 5085|   919k|                  "See the scnlib documentation for more details.");
 5086|   919k|    static_assert(
 5087|   919k|        !std::is_same_v<T, custom_char_traits>,
 5088|   919k|        "\n"
 5089|   919k|        "Unsupported range type given as input to a scanning "
 5090|   919k|        "function.\n"
 5091|   919k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|   919k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|   919k|        "not supported.");
 5094|   919k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|   919k|                  "\n"
 5096|   919k|                  "Unsupported range type given as input to a scanning "
 5097|   919k|                  "function.\n"
 5098|   919k|                  "file_marker_found cannot be used as an "
 5099|   919k|                  "source range type to scn::scan.\n"
 5100|   919k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|   919k|                  "and do not provide an explicit source range, "
 5102|   919k|                  "or use scn::scan with a FILE* directly.");
 5103|   919k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|   919k|                  "\n"
 5105|   919k|                  "Unsupported range type given as input to a scanning "
 5106|   919k|                  "function.\n"
 5107|   919k|                  "In order to be scannable, a range needs to satisfy "
 5108|   919k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|   919k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|   919k|                  "\n"
 5111|   919k|                  "Unsupported range type given as input to a scanning "
 5112|   919k|                  "function.\n"
 5113|   919k|                  "A range needs to model forward_range and have a valid "
 5114|   919k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|   919k|                  "Examples of scannable ranges are std::string, "
 5116|   919k|                  "std::string_view, "
 5117|   919k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|   919k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|   919k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|   919k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5013|   919k|{
 5014|   919k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5015|   919k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5016|       |    }
 5017|       |    else {
 5018|       |        return invalid_char_type{};
 5019|       |    }
 5020|   919k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   919k|    {
 3000|   919k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   919k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   919k|    {
 2981|   919k|        return t.data();
 2982|   919k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   919k|    {
 3383|   919k|        return detail::to_address(ranges::begin(derived()));
 3384|   919k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  4.38M|{
  316|  4.38M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  4.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  4.38M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  4.38M|{
  294|  4.38M|    return p;
  295|  4.38M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.57M|    {
 2869|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.57M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.57M|    {
 2850|  1.57M|        return decay_copy(t.begin());
 2851|  1.57M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  34.2M|    {
 3480|  34.2M|        return m_iterator;
 3481|  34.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   919k|    {
 3339|   919k|        return static_cast<const D&>(*this);
 3340|   919k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   919k|    {
 3075|   919k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   919k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   919k|    {
 3041|   919k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   919k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  4.81M|    {
 3496|  4.81M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  4.81M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   263k|        : base(unexpect, std::move(e.error())),
 1616|   263k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   263k|    {
 1618|   263k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   263k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   263k|          m_has_value(false)
  451|   263k|    {
  452|   263k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   919k|    {
 1316|   919k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6368|   656k|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|   656k|                      ranges::iterator_t<SourceRange>>) {
 6371|   656k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|   656k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.12M|    {
 2869|  3.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.12M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.12M|    {
 2850|  3.12M|        return decay_copy(t.begin());
 2851|  3.12M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6355|   656k|{
 6356|   656k|    return ranges::end(source);
 6357|   656k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   656k|    {
 2926|   656k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   656k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   656k|    {
 2908|   656k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   656k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  19.0M|    {
 3484|  19.0M|        return m_sentinel;
 3485|  19.0M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   656k|        : base(std::in_place, std::forward<U>(val)),
 1570|   656k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   656k|    {
 1572|   656k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   656k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   656k|    {
  442|   656k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|   255k|    {
 8462|   255k|        return m_str;
 8463|   255k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   510k|{
 5804|   510k|    detail::check_scan_arg_types<Args...>();
 5805|   510k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   510k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 5779|   510k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   510k|    {
 5781|   510k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   510k|    {
 5789|   510k|        return {detail::make_arg<
 5790|   510k|            kind, Context,
 5791|   510k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   510k|                                 typename Context::char_type>::value>(args)...};
 5793|   510k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5568|   510k|{
 5569|   510k|    return make_value<Context>(value).ref_value;
 5570|   510k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5503|   557k|{
 5504|   557k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   557k|                                  needs_context_tag>) {
 5508|   557k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   557k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5342|   557k|    {                                                                        \
 5343|   557k|        return val;                                                          \
 5344|   557k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   510k|        : basic_scan_args(store.desc, store.args.data())
 5830|   510k|    {
 5831|   510k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 5881|  1.67M|        : m_desc(desc), m_builtin_values(data)
 5882|  1.67M|    {
 5883|  1.67M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  12.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  12.4M|    static_cast<    \
  |  |  935|  12.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  12.4M|    static_cast<    \
  |  |  935|  12.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  12.4M|    {
 3466|  12.4M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8139|  1.67M|{
 8140|  1.67M|    return s;
 8141|  1.67M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8111|  1.67M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|   255k|        : m_str(r.str)
 8457|   255k|    {
 8458|   255k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   278k|    {
 1740|   278k|        return has_value();
 1741|   278k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   661k|    {
 1815|   661k|        return &value();
 1816|   661k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   661k|    {
 1769|   661k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   661k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   661k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   661k|        return this->get_value();
 1771|   661k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6127|   656k|    {
 6128|   656k|        return ranges::begin(m_range);
 6129|   656k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9107|   418k|{
 9108|   418k|#if !SCN_DISABLE_LOCALE
 9109|   418k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   418k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   418k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   418k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   418k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 121k, False: 297k]
  |  |  ------------------
  ------------------
 9116|   121k|        return unexpected(result.error());
 9117|   121k|    }
 9118|   297k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   418k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|  82.5k|{
 9132|  82.5k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|  82.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|  82.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.2k, False: 62.3k]
  |  |  ------------------
  ------------------
 9136|  20.2k|        return unexpected(result.error());
 9137|  20.2k|    }
 9138|  62.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|  82.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5553|  47.1k|{
 5554|  47.1k|    check_scan_arg_types<T>();
 5555|       |
 5556|  47.1k|    basic_scan_arg<Context> arg;
 5557|  47.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  47.1k|    arg.m_value = make_value<Context>(value);
 5559|  47.1k|    return arg;
 5560|  47.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5648|  1.83M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9330|   317k|{
 9331|   317k|    return scan_result_type<Source, Args...>();
 9332|   317k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   317k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   317k|        : m_value(T{}), m_has_value(true)
  427|   317k|    {
  428|   317k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6264|   317k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   317k|{
 9316|   317k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.6k, False: 229k]
  |  |  ------------------
  ------------------
 9317|  87.6k|        out = unexpected(in.error());
 9318|  87.6k|    }
 9319|   229k|    else {
 9320|   229k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   229k|    static_cast<    \
  |  |  935|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   229k|    }
 9322|   317k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.6k|        : base(unexpect, std::move(e.error())),
 1616|  87.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.6k|    {
 1618|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.6k|          m_has_value(false)
  451|  87.6k|    {
  452|  87.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.6k|    {
 1316|  87.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.6k|    {
  903|  87.6k|        assign_common(std::move(other));
  904|  87.6k|        return *this;
  905|  87.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.6k|    {
  950|  87.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.6k, False: 0]
  ------------------
  951|  87.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.26M|    {
  490|  1.26M|        return m_has_value;
  491|  1.26M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   776k|    {
  456|   776k|        return m_value;
  457|   776k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.6k|    {
 1046|  87.6k|        this->destroy_value();
 1047|  87.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.6k|    {
  504|  87.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.6k|                                  std::forward<Args>(args)...);
  506|  87.6k|        m_has_value = false;
  507|  87.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.6k|    {
  473|  87.6k|        return m_unexpected;
  474|  87.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.6k|    {
  481|  87.6k|        return std::move(m_unexpected);
  482|  87.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|   288k|    {
 8462|   288k|        return m_str;
 8463|   288k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   576k|{
 5804|   576k|    detail::check_scan_arg_types<Args...>();
 5805|   576k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   576k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 5779|   576k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   576k|    {
 5781|   576k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   576k|    {
 5789|   576k|        return {detail::make_arg<
 5790|   576k|            kind, Context,
 5791|   576k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   576k|                                 typename Context::char_type>::value>(args)...};
 5793|   576k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5568|   576k|{
 5569|   576k|    return make_value<Context>(value).ref_value;
 5570|   576k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5503|   634k|{
 5504|   634k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   634k|                                  needs_context_tag>) {
 5508|   634k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   634k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   634k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5342|   634k|    {                                                                        \
 5343|   634k|        return val;                                                          \
 5344|   634k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   576k|        : basic_scan_args(store.desc, store.args.data())
 5830|   576k|    {
 5831|   576k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|   288k|        : m_str(r.str)
 8457|   288k|    {
 8458|   288k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   317k|    {
 1740|   317k|        return has_value();
 1741|   317k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   776k|    {
 1815|   776k|        return &value();
 1816|   776k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   776k|    {
 1769|   776k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   776k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   776k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   776k|        return this->get_value();
 1771|   776k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5553|  58.0k|{
 5554|  58.0k|    check_scan_arg_types<T>();
 5555|       |
 5556|  58.0k|    basic_scan_arg<Context> arg;
 5557|  58.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  58.0k|    arg.m_value = make_value<Context>(value);
 5559|  58.0k|    return arg;
 5560|  58.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9330|   323k|{
 9331|   323k|    return scan_result_type<Source, Args...>();
 9332|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   323k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   323k|        : m_value(T{}), m_has_value(true)
  427|   323k|    {
  428|   323k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6264|   323k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   323k|{
 9316|   323k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.6k, False: 235k]
  |  |  ------------------
  ------------------
 9317|  87.6k|        out = unexpected(in.error());
 9318|  87.6k|    }
 9319|   235k|    else {
 9320|   235k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   235k|    static_cast<    \
  |  |  935|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   235k|    }
 9322|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.6k|        : base(unexpect, std::move(e.error())),
 1616|  87.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.6k|    {
 1618|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.6k|          m_has_value(false)
  451|  87.6k|    {
  452|  87.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.6k|    {
 1316|  87.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.6k|    {
  903|  87.6k|        assign_common(std::move(other));
  904|  87.6k|        return *this;
  905|  87.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.6k|    {
  950|  87.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.6k, False: 0]
  ------------------
  951|  87.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.29M|    {
  490|  1.29M|        return m_has_value;
  491|  1.29M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   795k|    {
  456|   795k|        return m_value;
  457|   795k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.6k|    {
 1046|  87.6k|        this->destroy_value();
 1047|  87.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.6k|    {
  504|  87.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.6k|                                  std::forward<Args>(args)...);
  506|  87.6k|        m_has_value = false;
  507|  87.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.6k|    {
  473|  87.6k|        return m_unexpected;
  474|  87.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.6k|    {
  481|  87.6k|        return std::move(m_unexpected);
  482|  87.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|   293k|    {
 8462|   293k|        return m_str;
 8463|   293k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   587k|{
 5804|   587k|    detail::check_scan_arg_types<Args...>();
 5805|   587k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   587k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 5779|   587k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   587k|    {
 5781|   587k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   587k|    {
 5789|   587k|        return {detail::make_arg<
 5790|   587k|            kind, Context,
 5791|   587k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   587k|                                 typename Context::char_type>::value>(args)...};
 5793|   587k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EevEEPvRT2_:
 5568|   587k|{
 5569|   587k|    return make_value<Context>(value).ref_value;
 5570|   587k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5503|   647k|{
 5504|   647k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   647k|                                  needs_context_tag>) {
 5508|   647k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   647k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   647k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5342|   647k|    {                                                                        \
 5343|   647k|        return val;                                                          \
 5344|   647k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   587k|        : basic_scan_args(store.desc, store.args.data())
 5830|   587k|    {
 5831|   587k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|   293k|        : m_str(r.str)
 8457|   293k|    {
 8458|   293k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   323k|    {
 1740|   323k|        return has_value();
 1741|   323k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   795k|    {
 1815|   795k|        return &value();
 1816|   795k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   795k|    {
 1769|   795k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   795k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   795k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   795k|        return this->get_value();
 1771|   795k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5553|  59.8k|{
 5554|  59.8k|    check_scan_arg_types<T>();
 5555|       |
 5556|  59.8k|    basic_scan_arg<Context> arg;
 5557|  59.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  59.8k|    arg.m_value = make_value<Context>(value);
 5559|  59.8k|    return arg;
 5560|  59.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   263k|    {
 2869|   263k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   263k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   263k|    {
 2850|   263k|        return decay_copy(t.begin());
 2851|   263k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  18.3M|{
 2094|  18.3M|    return SCN_FWD(t);
  ------------------
  |  |  936|  18.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  18.3M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.83M|    {
 2926|  1.83M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.83M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.83M|    {
 2908|  1.83M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.83M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9330|   278k|{
 9331|   278k|    return scan_result_type<Source, Args...>();
 9332|   278k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   278k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   278k|        : m_value(T{}), m_has_value(true)
  427|   278k|    {
  428|   278k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6264|   278k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6107|   918k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   918k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   278k|{
 9316|   278k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.6k, False: 190k]
  |  |  ------------------
  ------------------
 9317|  87.6k|        out = unexpected(in.error());
 9318|  87.6k|    }
 9319|   190k|    else {
 9320|   190k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   190k|    static_cast<    \
  |  |  935|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   190k|    }
 9322|   278k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   918k|    {
 1740|   918k|        return has_value();
 1741|   918k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.83M|    {
  490|  1.83M|        return m_has_value;
  491|  1.83M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   263k|    {
 1746|   263k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   263k|        return this->get_unexpected().error();
 1748|   263k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   263k|    {
  473|   263k|        return m_unexpected;
  474|   263k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.6k|        : base(unexpect, std::move(e.error())),
 1616|  87.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.6k|    {
 1618|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.6k|          m_has_value(false)
  451|  87.6k|    {
  452|  87.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.6k|    {
 1316|  87.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.6k|    {
  903|  87.6k|        assign_common(std::move(other));
  904|  87.6k|        return *this;
  905|  87.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.6k|    {
  950|  87.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.6k, False: 0]
  ------------------
  951|  87.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.11M|    {
  490|  1.11M|        return m_has_value;
  491|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   660k|    {
  456|   660k|        return m_value;
  457|   660k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.6k|    {
 1046|  87.6k|        this->destroy_value();
 1047|  87.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.6k|    {
  504|  87.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.6k|                                  std::forward<Args>(args)...);
  506|  87.6k|        m_has_value = false;
  507|  87.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.6k|    {
  473|  87.6k|        return m_unexpected;
  474|  87.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.6k|    {
  481|  87.6k|        return std::move(m_unexpected);
  482|  87.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6138|   655k|    {
 6139|   655k|        m_range = std::forward<Other>(r);
 6140|   655k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   655k|    {
 1795|   655k|        return value();
 1796|   655k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   655k|    {
 1769|   655k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   655k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   655k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   655k|        return this->get_value();
 1771|   655k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   655k|    {
  456|   655k|        return m_value;
  457|   655k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9091|   418k|{
 9092|   418k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   418k|    auto result = vscan_impl(buffer, format, args);
 9095|   418k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 121k, False: 296k]
  |  |  ------------------
  ------------------
 9096|   121k|        return unexpected(result.error());
 9097|   121k|    }
 9098|   296k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   418k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5074|   918k|{
 5075|   918k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|   918k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|   918k|                  "\n"
 5079|   918k|                  "Unsupported range type given as input to a scanning "
 5080|   918k|                  "function.\n"
 5081|   918k|                  "A range needs to have a character type (value type) "
 5082|   918k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|   918k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|   918k|                  "to be included.\n"
 5085|   918k|                  "See the scnlib documentation for more details.");
 5086|   918k|    static_assert(
 5087|   918k|        !std::is_same_v<T, custom_char_traits>,
 5088|   918k|        "\n"
 5089|   918k|        "Unsupported range type given as input to a scanning "
 5090|   918k|        "function.\n"
 5091|   918k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|   918k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|   918k|        "not supported.");
 5094|   918k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|   918k|                  "\n"
 5096|   918k|                  "Unsupported range type given as input to a scanning "
 5097|   918k|                  "function.\n"
 5098|   918k|                  "file_marker_found cannot be used as an "
 5099|   918k|                  "source range type to scn::scan.\n"
 5100|   918k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|   918k|                  "and do not provide an explicit source range, "
 5102|   918k|                  "or use scn::scan with a FILE* directly.");
 5103|   918k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|   918k|                  "\n"
 5105|   918k|                  "Unsupported range type given as input to a scanning "
 5106|   918k|                  "function.\n"
 5107|   918k|                  "In order to be scannable, a range needs to satisfy "
 5108|   918k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|   918k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|   918k|                  "\n"
 5111|   918k|                  "Unsupported range type given as input to a scanning "
 5112|   918k|                  "function.\n"
 5113|   918k|                  "A range needs to model forward_range and have a valid "
 5114|   918k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|   918k|                  "Examples of scannable ranges are std::string, "
 5116|   918k|                  "std::string_view, "
 5117|   918k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|   918k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|   918k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|   918k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5044|   918k|{
 5045|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5046|       |        return file_marker_found{};
 5047|       |    }
 5048|       |    else if constexpr (!ranges::forward_range<Range>) {
 5049|       |        if constexpr (ranges::range<Range>) {
 5050|       |            return insufficient_range{};
 5051|       |        }
 5052|       |        else {
 5053|       |            return invalid_input_range{};
 5054|       |        }
 5055|       |    }
 5056|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5057|       |        return invalid_char_type{};
 5058|       |    }
 5059|   918k|    else {
 5060|   918k|        return make_forward_scan_buffer(r);
 5061|   918k|    }
 5062|   918k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4878|   918k|{
 4879|   918k|    return basic_scan_forward_buffer_impl(range);
 4880|   918k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   918k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   918k|          m_cursor(ranges::begin(*m_range))
 4765|   918k|    {
 4766|   918k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|   918k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   918k|    {
 4737|   918k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|   918k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   918k|    {
 4428|   918k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   918k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.57M|    {
 2869|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.57M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.57M|    {
 2850|  1.57M|        return decay_copy(t.begin());
 2851|  1.57M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  2.23M|    {
 3480|  2.23M|        return m_iterator;
 3481|  2.23M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|  4.59M|    {
 4770|  4.59M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 202k, False: 4.39M]
  ------------------
 4771|   202k|            return false;
 4772|   202k|        }
 4773|  4.39M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  4.39M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  4.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  4.39M|        }
 4776|  4.39M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 3.47M, False: 917k]
  ------------------
 4777|  3.47M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  3.47M|                                          this->m_current_view.begin(),
 4779|  3.47M|                                          this->m_current_view.end());
 4780|  3.47M|        }
 4781|  4.39M|        m_latest = *m_cursor;
 4782|  4.39M|        ++m_cursor;
 4783|  4.39M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  4.39M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  4.39M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  4.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  4.39M|        }
 4787|  4.39M|        return true;
 4788|  4.59M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  13.3M|    {
 2926|  13.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  13.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  13.3M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  13.3M|    {
 2908|  13.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  13.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  13.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  14.0M|    {
 3484|  14.0M|        return m_sentinel;
 3485|  14.0M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   918k|    {
 4346|   918k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   918k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   918k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   263k|        : base(unexpect, std::move(e.error())),
 1616|   263k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   263k|    {
 1618|   263k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   263k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   263k|          m_has_value(false)
  451|   263k|    {
  452|   263k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   918k|    {
 1316|   918k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6368|   655k|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|   655k|                      ranges::iterator_t<SourceRange>>) {
 6371|   655k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|   655k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   655k|    {
 2869|   655k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   655k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   655k|    {
 2850|   655k|        return decay_copy(t.begin());
 2851|   655k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6355|   655k|{
 6356|   655k|    return ranges::end(source);
 6357|   655k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   655k|    {
 2926|   655k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   655k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   655k|    {
 2908|   655k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   655k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   655k|        : base(std::in_place, std::forward<U>(val)),
 1570|   655k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   655k|    {
 1572|   655k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   655k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   655k|    {
  442|   655k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|   255k|    {
 8462|   255k|        return m_str;
 8463|   255k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.57M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.57M|    static_cast<    \
  |  |  935|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.57M|    static_cast<    \
  |  |  935|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.57M|    {
 3466|  1.57M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|   255k|        : m_str(r.str)
 8457|   255k|    {
 8458|   255k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   278k|    {
 1740|   278k|        return has_value();
 1741|   278k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   660k|    {
 1815|   660k|        return &value();
 1816|   660k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   660k|    {
 1769|   660k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   660k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   660k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   660k|        return this->get_value();
 1771|   660k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6127|   655k|    {
 6128|   655k|        return ranges::begin(m_range);
 6129|   655k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9107|   418k|{
 9108|   418k|#if !SCN_DISABLE_LOCALE
 9109|   418k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   418k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   418k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   418k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   418k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 121k, False: 296k]
  |  |  ------------------
  ------------------
 9116|   121k|        return unexpected(result.error());
 9117|   121k|    }
 9118|   296k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   418k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|  82.4k|{
 9132|  82.4k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|  82.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|  82.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  82.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.2k, False: 62.2k]
  |  |  ------------------
  ------------------
 9136|  20.2k|        return unexpected(result.error());
 9137|  20.2k|    }
 9138|  62.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|  82.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9330|   317k|{
 9331|   317k|    return scan_result_type<Source, Args...>();
 9332|   317k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   317k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   317k|        : m_value(T{}), m_has_value(true)
  427|   317k|    {
  428|   317k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6264|   317k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   317k|{
 9316|   317k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.6k, False: 229k]
  |  |  ------------------
  ------------------
 9317|  87.6k|        out = unexpected(in.error());
 9318|  87.6k|    }
 9319|   229k|    else {
 9320|   229k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   229k|    static_cast<    \
  |  |  935|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   229k|    }
 9322|   317k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.6k|        : base(unexpect, std::move(e.error())),
 1616|  87.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.6k|    {
 1618|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.6k|          m_has_value(false)
  451|  87.6k|    {
  452|  87.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.6k|    {
 1316|  87.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.6k|    {
  903|  87.6k|        assign_common(std::move(other));
  904|  87.6k|        return *this;
  905|  87.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.6k|    {
  950|  87.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.6k, False: 0]
  ------------------
  951|  87.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.26M|    {
  490|  1.26M|        return m_has_value;
  491|  1.26M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   775k|    {
  456|   775k|        return m_value;
  457|   775k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.6k|    {
 1046|  87.6k|        this->destroy_value();
 1047|  87.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.6k|    {
  504|  87.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.6k|                                  std::forward<Args>(args)...);
  506|  87.6k|        m_has_value = false;
  507|  87.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.6k|    {
  473|  87.6k|        return m_unexpected;
  474|  87.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.6k|    {
  481|  87.6k|        return std::move(m_unexpected);
  482|  87.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|   287k|    {
 8462|   287k|        return m_str;
 8463|   287k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|   287k|        : m_str(r.str)
 8457|   287k|    {
 8458|   287k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   317k|    {
 1740|   317k|        return has_value();
 1741|   317k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|   775k|    {
 1815|   775k|        return &value();
 1816|   775k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   775k|    {
 1769|   775k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   775k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   775k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   775k|        return this->get_value();
 1771|   775k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9330|   323k|{
 9331|   323k|    return scan_result_type<Source, Args...>();
 9332|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   323k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   323k|        : m_value(T{}), m_has_value(true)
  427|   323k|    {
  428|   323k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6264|   323k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   323k|{
 9316|   323k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.6k, False: 235k]
  |  |  ------------------
  ------------------
 9317|  87.6k|        out = unexpected(in.error());
 9318|  87.6k|    }
 9319|   235k|    else {
 9320|   235k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   235k|    static_cast<    \
  |  |  935|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   235k|    }
 9322|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.6k|        : base(unexpect, std::move(e.error())),
 1616|  87.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.6k|    {
 1618|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.6k|          m_has_value(false)
  451|  87.6k|    {
  452|  87.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.6k|    {
 1316|  87.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.6k|    {
  903|  87.6k|        assign_common(std::move(other));
  904|  87.6k|        return *this;
  905|  87.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.6k|    {
  950|  87.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.6k, False: 0]
  ------------------
  951|  87.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.29M|    {
  490|  1.29M|        return m_has_value;
  491|  1.29M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   794k|    {
  456|   794k|        return m_value;
  457|   794k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.6k|    {
 1046|  87.6k|        this->destroy_value();
 1047|  87.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.6k|    {
  504|  87.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.6k|                                  std::forward<Args>(args)...);
  506|  87.6k|        m_has_value = false;
  507|  87.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.6k|    {
  473|  87.6k|        return m_unexpected;
  474|  87.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.6k|    {
  481|  87.6k|        return std::move(m_unexpected);
  482|  87.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|   293k|    {
 8462|   293k|        return m_str;
 8463|   293k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|   293k|        : m_str(r.str)
 8457|   293k|    {
 8458|   293k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   323k|    {
 1740|   323k|        return has_value();
 1741|   323k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|   794k|    {
 1815|   794k|        return &value();
 1816|   794k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   794k|    {
 1769|   794k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   794k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   794k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   794k|        return this->get_value();
 1771|   794k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  5.91M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  5.91M|    {
 3742|  5.91M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  5.91M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  5.91M|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|   416k|    {
 3753|   416k|        return m_code;
 3754|   416k|    }
_ZNK3scn2v410scan_error3msgEv:
 3757|  2.73k|    {
 3758|  2.73k|        return m_msg;
 3759|  2.73k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  85.7M|    {
 3480|  85.7M|        return m_iterator;
 3481|  85.7M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  38.9M|    {
 3480|  38.9M|        return m_iterator;
 3481|  38.9M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  30.9M|    {
  572|  30.9M|        return m_has_value;
  573|  30.9M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  6.23M|    {
  555|  6.23M|        return m_unexpected;
  556|  6.23M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   628k|    {
 1746|   628k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   628k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   628k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   628k|        return this->get_unexpected().error();
 1748|   628k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 6705|  3.85M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 6749|  2.81M|    {
 6750|  2.81M|        m_specs.type = type;
 6751|  2.81M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 6822|  3.85M|    {
 6823|  3.85M|        return m_error;
 6824|  3.85M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  5.86M|{
 3918|  5.86M|    return unexpected(scan_error{c, m});
 3919|  5.86M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  8.09M|{
 4308|       |    // Pattern_White_Space property
 4309|  8.09M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 7.77M, False: 317k]
  |  Branch (4309:27): [True: 1.50M, False: 6.27M]
  ------------------
 4310|  8.09M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 104k, False: 6.48M]
  ------------------
 4311|  8.09M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 73.3k, False: 6.41M]
  ------------------
 4312|  8.09M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 4.43k, False: 6.40M]
  ------------------
 4313|  8.09M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 25.0k, False: 6.38M]
  ------------------
 4314|  8.09M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.57M, False: 4.80M]
  ------------------
 4315|  8.09M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 154, False: 4.80M]
  ------------------
 4316|  8.09M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7505|  1.03M|{
 7506|  1.03M|    switch (type) {
 7507|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7507:9): [True: 0, False: 1.03M]
  ------------------
 7508|      0|            return arg_type_category::none;
 7509|       |
 7510|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7510:9): [True: 0, False: 1.03M]
  ------------------
 7511|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7511:9): [True: 0, False: 1.03M]
  ------------------
 7512|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7512:9): [True: 0, False: 1.03M]
  ------------------
 7513|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7513:9): [True: 0, False: 1.03M]
  ------------------
 7514|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7514:9): [True: 0, False: 1.03M]
  ------------------
 7515|      0|            return arg_type_category::integer;
 7516|       |
 7517|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7517:9): [True: 0, False: 1.03M]
  ------------------
 7518|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7518:9): [True: 0, False: 1.03M]
  ------------------
 7519|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7519:9): [True: 0, False: 1.03M]
  ------------------
 7520|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7520:9): [True: 0, False: 1.03M]
  ------------------
 7521|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7521:9): [True: 0, False: 1.03M]
  ------------------
 7522|      0|            return arg_type_category::unsigned_integer;
 7523|       |
 7524|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7524:9): [True: 0, False: 1.03M]
  ------------------
 7525|      0|            return arg_type_category::pointer;
 7526|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7526:9): [True: 0, False: 1.03M]
  ------------------
 7527|      0|            return arg_type_category::boolean;
 7528|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7528:9): [True: 0, False: 1.03M]
  ------------------
 7529|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7529:9): [True: 0, False: 1.03M]
  ------------------
 7530|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7530:9): [True: 0, False: 1.03M]
  ------------------
 7531|      0|            return arg_type_category::character;
 7532|       |
 7533|   318k|        case arg_type::float_type:
  ------------------
  |  Branch (7533:9): [True: 318k, False: 714k]
  ------------------
 7534|   671k|        case arg_type::double_type:
  ------------------
  |  Branch (7534:9): [True: 353k, False: 679k]
  ------------------
 7535|  1.03M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7535:9): [True: 360k, False: 671k]
  ------------------
 7536|  1.03M|            return arg_type_category::floating;
 7537|       |
 7538|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7538:9): [True: 0, False: 1.03M]
  ------------------
 7539|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7539:9): [True: 0, False: 1.03M]
  ------------------
 7540|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7540:9): [True: 0, False: 1.03M]
  ------------------
 7541|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7541:9): [True: 0, False: 1.03M]
  ------------------
 7542|      0|            return arg_type_category::string;
 7543|       |
 7544|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7544:9): [True: 0, False: 1.03M]
  ------------------
 7545|      0|            return arg_type_category::custom;
 7546|       |
 7547|      0|            SCN_CLANG_PUSH
 7548|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7549|      0|        default:
  ------------------
  |  Branch (7549:9): [True: 0, False: 1.03M]
  ------------------
 7550|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7551|  1.03M|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7552|  1.03M|            SCN_CLANG_POP
 7553|  1.03M|    }
 7554|       |
 7555|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7556|  1.03M|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  5.60M|    {
 1756|  5.60M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  5.60M|        return std::move(this->get_unexpected().error());
 1758|  5.60M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  4.55M|    {
 3041|  4.55M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  4.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  4.55M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3074|  4.55M|    {
 3075|  4.55M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  4.55M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3097|  4.55M|    {
 3098|  4.55M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|  4.55M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3106|  4.55M|    {
 3107|  4.55M|        return fn::impl(std::forward<T>(t));
 3108|  4.55M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7635|  3.85M|{
 7636|  3.85M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7636:9): [True: 2.81M, False: 1.03M]
  ------------------
 7637|  3.85M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7637:10): [True: 0, False: 2.81M]
  ------------------
 7638|  2.81M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7638:10): [True: 0, False: 2.81M]
  ------------------
 7639|      0|        SCN_UNLIKELY_ATTR
 7640|      0|        return handler.on_error("Invalid type specifier for float type");
 7641|      0|    }
 7642|  3.85M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  24.7M|    {
 1740|  24.7M|        return has_value();
 1741|  24.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|   548M|    {
 4472|   548M|        assert(m_begin);
 4473|   548M|        return m_end == nullptr;
 4474|   548M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  1.45M|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  1.45M|    else {
 3981|  1.45M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  1.45M|    }
 3983|  1.45M|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|  7.13M|    {
 4489|  7.13M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 7.13M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  7.13M|        return parent()->get_segment_starting_at(position());
 4495|  7.13M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|   305M|    {
 4483|   305M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   305M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   305M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|   305M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|   305M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|  7.13M|    {
 4376|  7.13M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  7.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.12M, False: 4.00M]
  |  |  ------------------
  ------------------
 4377|  7.13M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  3.12M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  3.12M|        }
 4380|  4.00M|        const auto start = pos - m_putback_buffer.size();
 4381|  4.00M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  4.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|  4.00M|        return m_current_view.substr(start);
 4383|  4.00M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4477|  4.97M|    {
 4478|  4.97M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  4.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|  4.97M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|  4.97M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|  13.0M|    {
 4467|  13.0M|        return m_position;
 4468|  13.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|  5.66M|    {
 4398|  5.66M|        return m_is_contiguous;
 4399|  5.66M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|   125M|    {
 4472|   125M|        assert(m_begin);
 4473|   125M|        return m_end == nullptr;
 4474|   125M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   638k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   638k|    else {
 3981|   638k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   638k|    }
 3983|   638k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|  2.23M|    {
 4489|  2.23M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 2.23M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  2.23M|        return parent()->get_segment_starting_at(position());
 4495|  2.23M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|  67.0M|    {
 4483|  67.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  67.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  67.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  67.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4375|  2.23M|    {
 4376|  2.23M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.29M, False: 941k]
  |  |  ------------------
  ------------------
 4377|  2.23M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  1.29M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  1.29M|        }
 4380|   941k|        const auto start = pos - m_putback_buffer.size();
 4381|   941k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   941k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   941k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   941k|        return m_current_view.substr(start);
 4383|   941k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4477|  2.42M|    {
 4478|  2.42M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|  2.42M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|  2.42M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|  4.89M|    {
 4467|  4.89M|        return m_position;
 4468|  4.89M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|  2.75M|    {
 4398|  2.75M|        return m_is_contiguous;
 4399|  2.75M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  9.58M|    {
 3334|  9.58M|        return static_cast<D&>(*this);
 3335|  9.58M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  9.58M|    {
 3375|  9.58M|        return detail::to_address(ranges::begin(derived()));
 3376|  9.58M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  2.14M|    {
 3334|  2.14M|        return static_cast<D&>(*this);
 3335|  2.14M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  2.14M|    {
 3375|  2.14M|        return detail::to_address(ranges::begin(derived()));
 3376|  2.14M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8658|  1.36M|    {
 8659|  1.36M|        return ranges::subrange{begin(), end()};
 8660|  1.36M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8650|  1.36M|    {
 8651|  1.36M|        return ranges::default_sentinel;
 8652|  1.36M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  20.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  20.9M|    static_cast<    \
  |  |  935|  20.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  20.9M|    static_cast<    \
  |  |  935|  20.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  20.9M|    {
 3466|  20.9M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8477|  8.18M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.88M|    {
 1979|  1.88M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.88M|                                            std::forward<F>(f));
 1981|  1.88M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.88M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.88M|    else {
 1472|  1.88M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.88M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.86M, False: 23.0k]
  |  |  ------------------
  ------------------
 1474|  1.88M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.88M|                   : result(unexpect,
 1476|  23.0k|                            trivial_invoke(std::forward<F>(f),
 1477|  23.0k|                                           std::forward<Exp>(exp).error()));
 1478|  1.88M|    }
 1479|  1.88M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  20.0M|    {
  490|  20.0M|        return m_has_value;
  491|  20.0M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  6.80M|    {
 1805|  6.80M|        return std::move(value());
 1806|  6.80M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  7.76M|    {
 1769|  7.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  7.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  7.76M|        return this->get_value();
 1771|  7.76M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  7.76M|    {
  456|  7.76M|        return m_value;
  457|  7.76M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  8.38M|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.38M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.38M|    {
 1572|  8.38M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  8.38M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.38M|    {
  442|  8.38M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.6M|    {
 1316|  10.6M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  49.1k|{
 1350|  49.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  49.1k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  63.7k|    {
 1756|  63.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  63.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  63.7k|        return std::move(this->get_unexpected().error());
 1758|  63.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   489k|    {
  365|   489k|        return m_unexpected;
  366|   489k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.88M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.88M|    {
 1628|  1.88M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  2.21M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.21M|          m_has_value(false)
  451|  2.21M|    {
  452|  2.21M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8658|   671k|    {
 8659|   671k|        return ranges::subrange{begin(), end()};
 8660|   671k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8650|   671k|    {
 8651|   671k|        return ranges::default_sentinel;
 8652|   671k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  9.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.44M|    static_cast<    \
  |  |  935|  9.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.44M|    static_cast<    \
  |  |  935|  9.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  9.44M|    {
 3466|  9.44M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   918k|    {
 1979|   918k|        return detail::transform_error_impl(std::move(*this),
 1980|   918k|                                            std::forward<F>(f));
 1981|   918k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   918k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   918k|    else {
 1472|   918k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   918k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   918k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 915k, False: 3.89k]
  |  |  ------------------
  ------------------
 1474|   918k|                   ? result(*std::forward<Exp>(exp))
 1475|   918k|                   : result(unexpect,
 1476|  3.89k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.89k|                                           std::forward<Exp>(exp).error()));
 1478|   918k|    }
 1479|   918k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  8.89M|    {
  490|  8.89M|        return m_has_value;
  491|  8.89M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.27M|    {
 1805|  3.27M|        return std::move(value());
 1806|  3.27M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  3.30M|    {
 1769|  3.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.30M|        return this->get_value();
 1771|  3.30M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  3.30M|    {
  456|  3.30M|        return m_value;
  457|  3.30M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  3.36M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.36M|    {
 1572|  3.36M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.36M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.36M|    {
  442|  3.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.25M|    {
 1316|  5.25M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  65.0k|    {
 1756|  65.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  65.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  65.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  65.0k|        return std::move(this->get_unexpected().error());
 1758|  65.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  67.2k|    {
  473|  67.2k|        return m_unexpected;
  474|  67.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.16M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.16M|    {
 1628|  1.16M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.89M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.89M|          m_has_value(false)
  451|  1.89M|    {
  452|  1.89M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  5.86M|        : m_unexpected(std::forward<Err>(e))
  350|  5.86M|    {
  351|  5.86M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  5.86M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  5.86M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  1.21M|        : base(unexpect, std::move(e.error())),
 1616|  1.21M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.21M|    {
 1618|  1.21M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|  1.21M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.21M|          m_has_value(false)
  451|  1.21M|    {
  452|  1.21M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8M|    {
 1316|  14.8M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   296k|        : base(unexpect, std::move(e.error())),
 1616|   296k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   296k|    {
 1618|   296k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.86M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.86M|          m_has_value(false)
  451|  1.86M|    {
  452|  1.86M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.14M|    {
 1316|  9.14M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  7.19M|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.19M|    {
 1572|  7.19M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  7.19M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.19M|    {
  442|  7.19M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  10.7M|    {
 1740|  10.7M|        return has_value();
 1741|  10.7M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  16.8M|    {
  490|  16.8M|        return m_has_value;
  491|  16.8M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   350k|    {
 1746|   350k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   350k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   350k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   350k|        return this->get_unexpected().error();
 1748|   350k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   350k|    {
  473|   350k|        return m_unexpected;
  474|   350k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  4.63M|    {
 1805|  4.63M|        return std::move(value());
 1806|  4.63M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  5.73M|    {
 1769|  5.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.73M|        return this->get_value();
 1771|  5.73M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  5.73M|    {
  456|  5.73M|        return m_value;
  457|  5.73M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   586k|        : base(unexpect, std::move(e.error())),
 1616|   586k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   586k|    {
 1618|   586k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.61M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.61M|          m_has_value(false)
  451|  1.61M|    {
  452|  1.61M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.25M|    {
 1316|  5.25M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  3.63M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.63M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.63M|    {
 1572|  3.63M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.63M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.63M|    {
  442|  3.63M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  6.17M|    {
 1740|  6.17M|        return has_value();
 1741|  6.17M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  9.71M|    {
  490|  9.71M|        return m_has_value;
  491|  9.71M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   704k|    {
 1746|   704k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   704k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   704k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   704k|        return this->get_unexpected().error();
 1748|   704k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   704k|    {
  473|   704k|        return m_unexpected;
  474|   704k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.36M|    {
 1805|  2.36M|        return std::move(value());
 1806|  2.36M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  2.83M|    {
 1769|  2.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.83M|        return this->get_value();
 1771|  2.83M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.83M|    {
  456|  2.83M|        return m_value;
  457|  2.83M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.61M|    {
 1979|  1.61M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.61M|                                            std::forward<F>(f));
 1981|  1.61M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.61M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.61M|    else {
 1472|  1.61M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.61M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.59M, False: 18.3k]
  |  |  ------------------
  ------------------
 1474|  1.61M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.61M|                   : result(unexpect,
 1476|  18.3k|                            trivial_invoke(std::forward<F>(f),
 1477|  18.3k|                                           std::forward<Exp>(exp).error()));
 1478|  1.61M|    }
 1479|  1.61M|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  6.12M|    {
  490|  6.12M|        return m_has_value;
  491|  6.12M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.59M|    {
 1805|  1.59M|        return std::move(value());
 1806|  1.59M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.09M|    {
 1769|  2.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.09M|        return this->get_value();
 1771|  2.09M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.09M|    {
  456|  2.09M|        return m_value;
  457|  2.09M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  18.3k|    {
 1756|  18.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  18.3k|        return std::move(this->get_unexpected().error());
 1758|  18.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  23.8k|    {
  473|  23.8k|        return m_unexpected;
  474|  23.8k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.56M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.56M|    {
 1628|  1.56M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8642|  3.99M|    {
 8643|  3.99M|        return m_current;
 8644|  3.99M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8535|  2.50M|    {
 8536|  2.50M|        return m_locale;
 8537|  2.50M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8541|  2.50M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  2.50M|    static_cast<    \
  |  |  935|  2.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  2.50M|    static_cast<    \
  |  |  935|  2.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|  2.50M|    {
 8543|  2.50M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.47M|    {
 3000|  1.47M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.47M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.47M|    {
 2981|  1.47M|        return t.data();
 2982|  1.47M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   338k|        : base(unexpect, std::move(e.error())),
 1616|   338k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   338k|    {
 1618|   338k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  89.6k|        : base(std::in_place, std::forward<U>(val)),
 1570|  89.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  89.6k|    {
 1572|  89.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  89.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  89.6k|    {
  442|  89.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8642|  1.81M|    {
 8643|  1.81M|        return m_current;
 8644|  1.81M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8535|  1.34M|    {
 8536|  1.34M|        return m_locale;
 8537|  1.34M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8541|  1.34M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.34M|    static_cast<    \
  |  |  935|  1.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.34M|    static_cast<    \
  |  |  935|  1.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|  1.34M|    {
 8543|  1.34M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   722k|        : base(unexpect, std::move(e.error())),
 1616|   722k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   722k|    {
 1618|   722k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  20.8M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  20.8M|        : m_deferred_init(), m_has_value(true)
  529|  20.8M|    {
  530|  20.8M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  6.23M|        : base(unexpect, std::move(e.error())),
 1616|  6.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.23M|    {
 1618|  6.23M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  6.23M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  6.23M|          m_has_value(false)
  550|  6.23M|    {
  551|  6.23M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.23M|    {
 1316|  6.23M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  16.6M|    {
 4558|  16.6M|        return x.is_at_end();
 4559|  16.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  41.6M|    {
 4602|  41.6M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 41.6M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  41.6M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 41.6M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  41.6M|        return !read_at_position();
 4609|  41.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|   179M|    {
 4582|   179M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   179M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   179M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|   179M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 179M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|   179M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   179M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 155M, False: 24.2M]
  |  |  ------------------
  ------------------
 4589|   155M|            return true;
 4590|   155M|        }
 4591|       |
 4592|  48.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 24.2M, False: 23.9M]
  ------------------
 4593|  24.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 339k, False: 23.9M]
  ------------------
 4594|   339k|                return false;
 4595|   339k|            }
 4596|  24.2M|        }
 4597|  23.9M|        return true;
 4598|  24.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|   232M|    {
 4356|   232M|        return m_putback_buffer.size() + m_current_view.size();
 4357|   232M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  46.2M|    {
 4517|  46.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  46.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  46.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 46.2M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  46.2M|        auto res = read_at_position();
 4526|  46.2M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  46.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  46.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  46.2M|        return parent()->get_character_at(m_position);
 4528|  46.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  46.2M|    {
 4387|  46.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  46.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.7M, False: 17.5M]
  |  |  ------------------
  ------------------
 4388|  46.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  28.7M|            return m_putback_buffer[pos];
 4390|  28.7M|        }
 4391|  17.5M|        const auto start = pos - m_putback_buffer.size();
 4392|  17.5M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  17.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  17.5M|        return m_current_view[start];
 4394|  17.5M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  12.1M|        : base(std::in_place, std::forward<U>(val)),
 1570|  12.1M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  12.1M|    {
 1572|  12.1M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  12.1M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  12.1M|    {
  442|  12.1M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.1M|    {
 1316|  12.1M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|   163k|        : m_unexpected(std::forward<Err>(e))
  350|   163k|    {
  351|   163k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   163k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   163k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   244k|        : m_unexpected(std::forward<Args>(args)...)
  359|   244k|    {
  360|   244k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   244k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   244k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  5.32M|    {
 1740|  5.32M|        return has_value();
 1741|  5.32M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   964k|    {
 1795|   964k|        return value();
 1796|   964k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|  43.8M|    {
 4552|  43.8M|        return !(lhs == rhs);
 4553|  43.8M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|  48.8M|    {
 4547|  48.8M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 48.8M, False: 0]
  |  Branch (4547:46): [True: 6.27M, False: 42.5M]
  ------------------
 4548|  48.8M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  91.7M|    {
 4503|  91.7M|        ++m_position;
 4504|  91.7M|        (void)read_at_position();
 4505|  91.7M|        return *this;
 4506|  91.7M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  81.3k|        : m_unexpected(std::forward<Err>(e))
  350|  81.3k|    {
  351|  81.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  81.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  81.3k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  17.5k|        : base(unexpect, std::move(e.error())),
 1616|  17.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  17.5k|    {
 1618|  17.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  17.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  17.5k|          m_has_value(false)
  451|  17.5k|    {
  452|  17.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.61M|    {
 1316|  2.61M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  2.59M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.59M|    {
 1572|  2.59M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  2.59M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.59M|    {
  442|  2.59M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  2.61M|    {
 1740|  2.61M|        return has_value();
 1741|  2.61M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  5.22M|    {
  490|  5.22M|        return m_has_value;
  491|  5.22M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  17.5k|    {
 1746|  17.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  17.5k|        return this->get_unexpected().error();
 1748|  17.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  17.5k|    {
  473|  17.5k|        return m_unexpected;
  474|  17.5k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.59M|    {
 1805|  2.59M|        return std::move(value());
 1806|  2.59M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  2.59M|    {
 1769|  2.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.59M|        return this->get_value();
 1771|  2.59M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.59M|    {
  456|  2.59M|        return m_value;
  457|  2.59M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  59.2M|    {
 3484|  59.2M|        return m_sentinel;
 3485|  59.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  71.3k|        : m_unexpected(std::forward<Err>(e))
  350|  71.3k|    {
  351|  71.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  71.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  71.3k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  21.2M|    {
  365|  21.2M|        return m_unexpected;
  366|  21.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  5.65M|        : m_unexpected(std::forward<Args>(args)...)
  359|  5.65M|    {
  360|  5.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  5.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  5.65M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  26.3M|        : m_unexpected(std::forward<Err>(e))
  350|  26.3M|    {
  351|  26.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  26.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  26.3M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  26.3M|    {
  365|  26.3M|        return m_unexpected;
  366|  26.3M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  26.3M|        : m_unexpected(std::forward<Args>(args)...)
  359|  26.3M|    {
  360|  26.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  26.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  26.3M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|   163k|{
 1350|   163k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   163k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  5.41M|        : m_unexpected(std::forward<Err>(e))
  350|  5.41M|    {
  351|  5.41M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  5.41M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  5.41M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  23.8k|    {
 1746|  23.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.8k|        return this->get_unexpected().error();
 1748|  23.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.90M|        : base(unexpect, std::move(e.error())),
 1616|  1.90M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.90M|    {
 1618|  1.90M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.94M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.94M|          m_has_value(false)
  451|  1.94M|    {
  452|  1.94M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  20.7M|    {
 1316|  20.7M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   974k|        : base(std::in_place, std::forward<U>(val)),
 1570|   974k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   974k|    {
 1572|   974k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   974k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   974k|    {
  442|   974k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  10.6M|        : base(unexpect, std::move(e.error())),
 1616|  10.6M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.6M|    {
 1618|  10.6M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  10.6M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.6M|          m_has_value(false)
  451|  10.6M|    {
  452|  10.6M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  22.6M|    {
 1740|  22.6M|        return has_value();
 1741|  22.6M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  40.0M|    {
  490|  40.0M|        return m_has_value;
  491|  40.0M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  5.32M|    {
 1746|  5.32M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.32M|        return this->get_unexpected().error();
 1748|  5.32M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  5.32M|    {
  473|  5.32M|        return m_unexpected;
  474|  5.32M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|  2.03M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.03M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.03M|    {
 1572|  2.03M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  2.03M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.03M|    {
  442|  2.03M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.03M|    {
 1316|  2.03M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    309|        : base(unexpect, std::move(e.error())),
 1616|    309|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    309|    {
 1618|    309|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|    309|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    309|          m_has_value(false)
  451|    309|    {
  452|    309|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  5.29M|    {
 1795|  5.29M|        return value();
 1796|  5.29M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  10.2M|    {
 1769|  10.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.2M|        return this->get_value();
 1771|  10.2M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  10.2M|    {
  456|  10.2M|        return m_value;
  457|  10.2M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   173k|    {
 1740|   173k|        return has_value();
 1741|   173k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  4.07M|    {
  490|  4.07M|        return m_has_value;
  491|  4.07M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.86M|    {
 1805|  1.86M|        return std::move(value());
 1806|  1.86M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  2.03M|    {
 1769|  2.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.03M|        return this->get_value();
 1771|  2.03M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  2.03M|    {
  456|  2.03M|        return m_value;
  457|  2.03M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  4.97M|    {
 1979|  4.97M|        return detail::transform_error_impl(std::move(*this),
 1980|  4.97M|                                            std::forward<F>(f));
 1981|  4.97M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  4.97M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  4.97M|    else {
 1472|  4.97M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  4.97M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  4.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.93M, False: 40.7k]
  |  |  ------------------
  ------------------
 1474|  4.97M|                   ? result(*std::forward<Exp>(exp))
 1475|  4.97M|                   : result(unexpect,
 1476|  40.7k|                            trivial_invoke(std::forward<F>(f),
 1477|  40.7k|                                           std::forward<Exp>(exp).error()));
 1478|  4.97M|    }
 1479|  4.97M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  7.26M|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.26M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.26M|    {
 1572|  7.26M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  7.26M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.26M|    {
  442|  7.26M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  40.7k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  40.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  40.7k|    {
 1628|  40.7k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  4.93M|    {
 1805|  4.93M|        return std::move(value());
 1806|  4.93M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  12.5M|    {
 1740|  12.5M|        return has_value();
 1741|  12.5M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  19.6M|    {
  490|  19.6M|        return m_has_value;
  491|  19.6M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   443k|    {
 1746|   443k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   443k|        return this->get_unexpected().error();
 1748|   443k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   443k|    {
  473|   443k|        return m_unexpected;
  474|   443k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  5.38M|    {
 1805|  5.38M|        return std::move(value());
 1806|  5.38M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  6.71M|    {
 1769|  6.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.71M|        return this->get_value();
 1771|  6.71M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.71M|    {
  456|  6.71M|        return m_value;
  457|  6.71M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  2.13M|    {
 3480|  2.13M|        return m_iterator;
 3481|  2.13M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  2.13M|    {
 3484|  2.13M|        return m_sentinel;
 3485|  2.13M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  1.68M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.68M|    static_cast<    \
  |  |  935|  1.68M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.68M|    static_cast<    \
  |  |  935|  1.68M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.68M|    {
 3466|  1.68M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  24.9M|    {
 4569|  24.9M|        return !x.is_at_end();
 4570|  24.9M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  23.8k|        : base(unexpect, std::move(e.error())),
 1616|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  23.8k|    {
 1618|  23.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.8k|          m_has_value(false)
  451|  23.8k|    {
  452|  23.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.01M|    {
 1316|  4.01M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  3.98M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.98M|    {
 1572|  3.98M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.98M|    {
  442|  3.98M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  2.39M|    {
 1740|  2.39M|        return has_value();
 1741|  2.39M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   492k|    {
 1795|   492k|        return value();
 1796|   492k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  13.1k|        : base(unexpect, std::move(e.error())),
 1616|  13.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.1k|    {
 1618|  13.1k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  13.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.1k|          m_has_value(false)
  451|  13.1k|    {
  452|  13.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.17M|    {
 1316|  2.17M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.15M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.15M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.15M|    {
 1572|  2.15M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  2.15M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.15M|    {
  442|  2.15M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  2.17M|    {
 1740|  2.17M|        return has_value();
 1741|  2.17M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.34M|    {
  490|  4.34M|        return m_has_value;
  491|  4.34M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  13.1k|    {
 1746|  13.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  13.1k|        return this->get_unexpected().error();
 1748|  13.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.1k|    {
  473|  13.1k|        return m_unexpected;
  474|  13.1k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  2.15M|    {
 1805|  2.15M|        return std::move(value());
 1806|  2.15M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  2.15M|    {
 1769|  2.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.15M|        return this->get_value();
 1771|  2.15M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.15M|    {
  456|  2.15M|        return m_value;
  457|  2.15M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|  5.54k|    {
 1746|  5.54k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  5.54k|        return this->get_unexpected().error();
 1748|  5.54k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.62M|        : base(unexpect, std::move(e.error())),
 1616|  1.62M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.62M|    {
 1618|  1.62M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.62M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.62M|          m_has_value(false)
  451|  1.62M|    {
  452|  1.62M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.16M|    {
 1316|  9.16M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   501k|        : base(std::in_place, std::forward<U>(val)),
 1570|   501k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   501k|    {
 1572|   501k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   501k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   501k|    {
  442|   501k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  6.35M|        : base(unexpect, std::move(e.error())),
 1616|  6.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.35M|    {
 1618|  6.35M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  6.35M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.35M|          m_has_value(false)
  451|  6.35M|    {
  452|  6.35M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  10.7M|    {
 1740|  10.7M|        return has_value();
 1741|  10.7M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  18.3M|    {
  490|  18.3M|        return m_has_value;
  491|  18.3M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  4.40M|    {
 1746|  4.40M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.40M|        return this->get_unexpected().error();
 1748|  4.40M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  4.40M|    {
  473|  4.40M|        return m_unexpected;
  474|  4.40M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  1.63M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.63M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.63M|    {
 1572|  1.63M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  1.63M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.63M|    {
  442|  1.63M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.63M|    {
 1316|  1.63M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    102|        : base(unexpect, std::move(e.error())),
 1616|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    102|    {
 1618|    102|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|    102|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    102|          m_has_value(false)
  451|    102|    {
  452|    102|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  1.67M|    {
 1795|  1.67M|        return value();
 1796|  1.67M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.67M|    {
 1769|  1.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.67M|        return this->get_value();
 1771|  1.67M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.67M|    {
  456|  1.67M|        return m_value;
  457|  1.67M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  39.0k|    {
 1740|  39.0k|        return has_value();
 1741|  39.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  3.27M|    {
  490|  3.27M|        return m_has_value;
  491|  3.27M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.59M|    {
 1805|  1.59M|        return std::move(value());
 1806|  1.59M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.63M|    {
 1769|  1.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.63M|        return this->get_value();
 1771|  1.63M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  1.63M|    {
  456|  1.63M|        return m_value;
  457|  1.63M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|   682k|        : base(std::in_place, std::forward<U>(val)),
 1570|   682k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   682k|    {
 1572|   682k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   682k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   682k|    {
  442|   682k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  5.36M|    {
 3000|  5.36M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  5.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  5.36M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  5.36M|    {
 2981|  5.36M|        return t.data();
 2982|  5.36M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  13.5M|        : base(std::in_place, std::forward<U>(val)),
 1570|  13.5M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  13.5M|    {
 1572|  13.5M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  13.5M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  13.5M|    {
  442|  13.5M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1804|  9.10M|    {
 1805|  9.10M|        return std::move(value());
 1806|  9.10M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  5.60M|{
 1350|  5.60M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  5.60M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|  1.86M|    {
 1979|  1.86M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.86M|                                            std::forward<F>(f));
 1981|  1.86M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|  1.86M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.86M|    else {
 1472|  1.86M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.86M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.86M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.86M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.86M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.86M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.86M|    }
 1479|  1.86M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.86M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.86M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.86M|    {
 1572|  1.86M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.86M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.86M|    {
  442|  1.86M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.86M|    {
 1316|  1.86M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.86M|    {
 1740|  1.86M|        return has_value();
 1741|  1.86M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.72M|    {
  490|  3.72M|        return m_has_value;
  491|  3.72M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.86M|    {
 1805|  1.86M|        return std::move(value());
 1806|  1.86M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.86M|    {
 1769|  1.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.86M|        return this->get_value();
 1771|  1.86M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.86M|    {
  456|  1.86M|        return m_value;
  457|  1.86M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|  1.85M|    {
 1965|  1.85M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.85M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|  1.85M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.85M|    else {
 1472|  1.85M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.85M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 1474|  1.85M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.85M|                   : result(unexpect,
 1476|  1.85M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.85M|                                           std::forward<Exp>(exp).error()));
 1478|  1.85M|    }
 1479|  1.85M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  1.32M|    {
 1795|  1.32M|        return value();
 1796|  1.32M|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   433k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|   172k|    {
 1815|   172k|        return &value();
 1816|   172k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|  1.34M|    {
 2869|  1.34M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.34M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|  1.34M|    {
 2850|  1.34M|        return decay_copy(t.begin());
 2851|  1.34M|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|  1.34M|{
 2094|  1.34M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.34M|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   816k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|  1.59M|    {
 1979|  1.59M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.59M|                                            std::forward<F>(f));
 1981|  1.59M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|  1.59M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.59M|    else {
 1472|  1.59M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.59M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.59M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.59M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.59M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.59M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.59M|    }
 1479|  1.59M|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.59M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.59M|    {
 1572|  1.59M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  1.59M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.59M|    {
  442|  1.59M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.59M|    {
 1316|  1.59M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.59M|    {
 1740|  1.59M|        return has_value();
 1741|  1.59M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.19M|    {
  490|  3.19M|        return m_has_value;
  491|  3.19M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.59M|    {
 1805|  1.59M|        return std::move(value());
 1806|  1.59M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.59M|    {
 1769|  1.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.59M|        return this->get_value();
 1771|  1.59M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.59M|    {
  456|  1.59M|        return m_value;
  457|  1.59M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|  1.55M|    {
 1965|  1.55M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.55M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.55M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.55M|    else {
 1472|  1.55M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.55M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.55M]
  |  |  ------------------
  ------------------
 1474|  1.55M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.55M|                   : result(unexpect,
 1476|  1.55M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.55M|                                           std::forward<Exp>(exp).error()));
 1478|  1.55M|    }
 1479|  1.55M|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1569|  86.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  86.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  86.0k|    {
 1572|  86.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  86.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  86.0k|    {
  442|  86.0k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  1.55M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.55M|    static_cast<    \
  |  |  935|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.55M|    {
 3912|  1.55M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  1.10M|    {
 1795|  1.10M|        return value();
 1796|  1.10M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  38.9k|    {
 1815|  38.9k|        return &value();
 1816|  38.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.85M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.85M|    static_cast<    \
  |  |  935|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.85M|    {
 3912|  1.85M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  7.75M|    {
 4558|  7.75M|        return x.is_at_end();
 4559|  7.75M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|  12.2M|    {
 4602|  12.2M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 12.2M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  12.2M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 12.2M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  12.2M|        return !read_at_position();
 4609|  12.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|  39.0M|    {
 4582|  39.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  39.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  39.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 39.0M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  39.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  39.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 34.4M, False: 4.59M]
  |  |  ------------------
  ------------------
 4589|  34.4M|            return true;
 4590|  34.4M|        }
 4591|       |
 4592|  8.98M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 4.59M, False: 4.39M]
  ------------------
 4593|  4.59M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 202k, False: 4.39M]
  ------------------
 4594|   202k|                return false;
 4595|   202k|            }
 4596|  4.59M|        }
 4597|  4.39M|        return true;
 4598|  4.59M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|  50.4M|    {
 4356|  50.4M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  50.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|  12.2M|    {
 4517|  12.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  12.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  12.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 12.2M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  12.2M|        auto res = read_at_position();
 4526|  12.2M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  12.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  12.2M|        return parent()->get_character_at(m_position);
 4528|  12.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|  12.2M|    {
 4387|  12.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  12.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4M, False: 1.81M]
  |  |  ------------------
  ------------------
 4388|  12.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  10.4M|            return m_putback_buffer[pos];
 4390|  10.4M|        }
 4391|  1.81M|        const auto start = pos - m_putback_buffer.size();
 4392|  1.81M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  1.81M|        return m_current_view[start];
 4394|  1.81M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|  4.44M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|  4.44M|    else {
 4075|       |        // utf-32
 4076|  4.44M|        static_assert(sizeof(U) == 4);
 4077|  4.44M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|  4.44M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|  4.44M|        return 1;
 4079|  4.44M|    }
 4080|  4.44M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  5.45M|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.45M|    {
 1572|  5.45M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  5.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.45M|    {
  442|  5.45M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.52M|    {
 1316|  5.52M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  67.2k|        : base(unexpect, std::move(e.error())),
 1616|  67.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  67.2k|    {
 1618|  67.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  67.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  67.2k|          m_has_value(false)
  451|  67.2k|    {
  452|  67.2k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  2.17M|    {
 1740|  2.17M|        return has_value();
 1741|  2.17M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  32.9k|    {
 1795|  32.9k|        return value();
 1796|  32.9k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|  5.94M|    {
 4552|  5.94M|        return !(lhs == rhs);
 4553|  5.94M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|  8.07M|    {
 4547|  8.07M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 8.07M, False: 0]
  |  Branch (4547:46): [True: 2.58M, False: 5.49M]
  ------------------
 4548|  8.07M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|  14.4M|    {
 4503|  14.4M|        ++m_position;
 4504|  14.4M|        (void)read_at_position();
 4505|  14.4M|        return *this;
 4506|  14.4M|    }
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  4.44M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|  4.44M|    else {
 4281|  4.44M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|  4.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|  4.44M|        auto cp = static_cast<char32_t>(input.front());
 4283|  4.44M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  4.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 297k, False: 4.14M]
  |  |  ------------------
  ------------------
 4284|   297k|            return invalid_code_point;
 4285|   297k|        }
 4286|  4.14M|        return cp;
 4287|  4.44M|    }
 4288|  4.44M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  2.90k|        : base(unexpect, std::move(e.error())),
 1616|  2.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.90k|    {
 1618|  2.90k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  2.90k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.90k|          m_has_value(false)
  451|  2.90k|    {
  452|  2.90k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.13M|    {
 1316|  1.13M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.13M|    {
 1572|  1.13M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.13M|    {
  442|  1.13M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  1.13M|    {
 1740|  1.13M|        return has_value();
 1741|  1.13M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.27M|    {
  490|  2.27M|        return m_has_value;
  491|  2.27M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  2.90k|    {
 1746|  2.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.90k|        return this->get_unexpected().error();
 1748|  2.90k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.90k|    {
  473|  2.90k|        return m_unexpected;
  474|  2.90k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.13M|    {
 1805|  1.13M|        return std::move(value());
 1806|  1.13M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.13M|    {
 1769|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.13M|        return this->get_value();
 1771|  1.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.13M|    {
  456|  1.13M|        return m_value;
  457|  1.13M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  20.1M|    {
 3484|  20.1M|        return m_sentinel;
 3485|  20.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  2.23k|    {
 1746|  2.23k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.23k|        return this->get_unexpected().error();
 1748|  2.23k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|   978k|        : base(unexpect, std::move(e.error())),
 1616|   978k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   978k|    {
 1618|   978k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03M|          m_has_value(false)
  451|  1.03M|    {
  452|  1.03M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.53M|    {
 1316|  9.53M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  32.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  32.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  32.9k|    {
 1572|  32.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  32.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  32.9k|    {
  442|  32.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  5.41M|        : base(unexpect, std::move(e.error())),
 1616|  5.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.41M|    {
 1618|  5.41M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  5.41M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.41M|          m_has_value(false)
  451|  5.41M|    {
  452|  5.41M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  10.4M|    {
 1740|  10.4M|        return has_value();
 1741|  10.4M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  18.4M|    {
  490|  18.4M|        return m_has_value;
  491|  18.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  3.06M|    {
 1746|  3.06M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.06M|        return this->get_unexpected().error();
 1748|  3.06M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  3.06M|    {
  473|  3.06M|        return m_unexpected;
  474|  3.06M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   934k|        : base(std::in_place, std::forward<U>(val)),
 1570|   934k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   934k|    {
 1572|   934k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   934k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   934k|    {
  442|   934k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   934k|    {
 1316|   934k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|     91|        : base(unexpect, std::move(e.error())),
 1616|     91|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     91|    {
 1618|     91|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|     91|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     91|          m_has_value(false)
  451|     91|    {
  452|     91|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  1.39M|    {
 1795|  1.39M|        return value();
 1796|  1.39M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  3.75M|    {
 1769|  3.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.75M|        return this->get_value();
 1771|  3.75M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  3.75M|    {
  456|  3.75M|        return m_value;
  457|  3.75M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|  19.6k|    {
 1740|  19.6k|        return has_value();
 1741|  19.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  1.86M|    {
  490|  1.86M|        return m_has_value;
  491|  1.86M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   915k|    {
 1805|   915k|        return std::move(value());
 1806|   915k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   934k|    {
 1769|   934k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   934k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   934k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   934k|        return this->get_value();
 1771|   934k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   934k|    {
  456|   934k|        return m_value;
  457|   934k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.42M|    {
 1979|  2.42M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.42M|                                            std::forward<F>(f));
 1981|  2.42M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  2.42M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.42M|    else {
 1472|  2.42M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.42M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.42M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.36M, False: 61.1k]
  |  |  ------------------
  ------------------
 1474|  2.42M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.42M|                   : result(unexpect,
 1476|  61.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  61.1k|                                           std::forward<Exp>(exp).error()));
 1478|  2.42M|    }
 1479|  2.42M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  3.04M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.04M|    {
 1572|  3.04M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.04M|    {
  442|  3.04M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  61.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  61.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  61.1k|    {
 1628|  61.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.36M|    {
 1805|  2.36M|        return std::move(value());
 1806|  2.36M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  6.16M|    {
 1740|  6.16M|        return has_value();
 1741|  6.16M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.84M|    {
  490|  9.84M|        return m_has_value;
  491|  9.84M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   975k|    {
 1746|   975k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   975k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   975k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   975k|        return this->get_unexpected().error();
 1748|   975k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   975k|    {
  473|   975k|        return m_unexpected;
  474|   975k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  2.23M|    {
 1805|  2.23M|        return std::move(value());
 1806|  2.23M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  2.70M|    {
 1769|  2.70M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.70M|        return this->get_value();
 1771|  2.70M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.70M|    {
  456|  2.70M|        return m_value;
  457|  2.70M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   704k|    {
 3480|   704k|        return m_iterator;
 3481|   704k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   704k|    {
 3484|   704k|        return m_sentinel;
 3485|   704k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   660k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   660k|    static_cast<    \
  |  |  935|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   660k|    static_cast<    \
  |  |  935|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   660k|    {
 3466|   660k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  4.52M|    {
 4569|  4.52M|        return !x.is_at_end();
 4570|  4.52M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  65.7k|        : base(unexpect, std::move(e.error())),
 1616|  65.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  65.7k|    {
 1618|  65.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  65.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  65.7k|          m_has_value(false)
  451|  65.7k|    {
  452|  65.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.59M|    {
 1316|  4.59M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  4.53M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.53M|    {
 1572|  4.53M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.53M|    {
  442|  4.53M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|  1.25M|    {
 1740|  1.25M|        return has_value();
 1741|  1.25M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  7.95M|    {
  490|  7.95M|        return m_has_value;
  491|  7.95M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  13.9k|    {
 1795|  13.9k|        return value();
 1796|  13.9k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  3.29M|    {
 1769|  3.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.29M|        return this->get_value();
 1771|  3.29M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  3.29M|    {
  456|  3.29M|        return m_value;
  457|  3.29M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.90k|        : base(unexpect, std::move(e.error())),
 1616|  2.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.90k|    {
 1618|  2.90k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  2.90k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.90k|          m_has_value(false)
  451|  2.90k|    {
  452|  2.90k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.14M|    {
 1316|  1.14M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.13M|    {
 1572|  1.13M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.13M|    {
  442|  1.13M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   919k|    {
 1979|   919k|        return detail::transform_error_impl(std::move(*this),
 1980|   919k|                                            std::forward<F>(f));
 1981|   919k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   919k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   919k|    else {
 1472|   919k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   919k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   919k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 915k, False: 3.89k]
  |  |  ------------------
  ------------------
 1474|   919k|                   ? result(*std::forward<Exp>(exp))
 1475|   919k|                   : result(unexpect,
 1476|  3.89k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.89k|                                           std::forward<Exp>(exp).error()));
 1478|   919k|    }
 1479|   919k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  3.27M|    {
 1805|  3.27M|        return std::move(value());
 1806|  3.27M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  65.1k|    {
 1756|  65.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  65.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  65.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  65.1k|        return std::move(this->get_unexpected().error());
 1758|  65.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  65.7k|    {
  473|  65.7k|        return m_unexpected;
  474|  65.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.03M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.03M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.03M|    {
 1628|  1.03M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  1.14M|    {
 1740|  1.14M|        return has_value();
 1741|  1.14M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.28M|    {
  490|  2.28M|        return m_has_value;
  491|  2.28M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  2.90k|    {
 1746|  2.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.90k|        return this->get_unexpected().error();
 1748|  2.90k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.90k|    {
  473|  2.90k|        return m_unexpected;
  474|  2.90k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.13M|    {
 1805|  1.13M|        return std::move(value());
 1806|  1.13M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.13M|    {
 1769|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.13M|        return this->get_value();
 1771|  1.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.13M|    {
  456|  1.13M|        return m_value;
  457|  1.13M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|    554|    {
 1746|    554|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    554|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    554|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    554|        return this->get_unexpected().error();
 1748|    554|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   977k|        : base(unexpect, std::move(e.error())),
 1616|   977k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   977k|    {
 1618|   977k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.03M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.03M|          m_has_value(false)
  451|  1.03M|    {
  452|  1.03M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.55M|    {
 1316|  7.55M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  13.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  13.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  13.9k|    {
 1572|  13.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  13.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  13.9k|    {
  442|  13.9k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.92M|        : base(unexpect, std::move(e.error())),
 1616|  3.92M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.92M|    {
 1618|  3.92M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.92M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.92M|          m_has_value(false)
  451|  3.92M|    {
  452|  3.92M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  8.47M|    {
 1740|  8.47M|        return has_value();
 1741|  8.47M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  15.2M|    {
  490|  15.2M|        return m_has_value;
  491|  15.2M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  2.92M|    {
 1746|  2.92M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.92M|        return this->get_unexpected().error();
 1748|  2.92M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.92M|    {
  473|  2.92M|        return m_unexpected;
  474|  2.92M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   922k|        : base(std::in_place, std::forward<U>(val)),
 1570|   922k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   922k|    {
 1572|   922k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   922k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   922k|    {
  442|   922k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   922k|    {
 1316|   922k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     30|        : base(unexpect, std::move(e.error())),
 1616|     30|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     30|    {
 1618|     30|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     30|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     30|          m_has_value(false)
  451|     30|    {
  452|     30|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   443k|    {
 1795|   443k|        return value();
 1796|   443k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.80M|    {
 1769|  2.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.80M|        return this->get_value();
 1771|  2.80M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  2.80M|    {
  456|  2.80M|        return m_value;
  457|  2.80M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  6.69k|    {
 1740|  6.69k|        return has_value();
 1741|  6.69k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.84M|    {
  490|  1.84M|        return m_has_value;
  491|  1.84M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   915k|    {
 1805|   915k|        return std::move(value());
 1806|   915k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   922k|    {
 1769|   922k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   922k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   922k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   922k|        return this->get_value();
 1771|   922k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   922k|    {
  456|   922k|        return m_value;
  457|   922k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  2.42M|    {
 1979|  2.42M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.42M|                                            std::forward<F>(f));
 1981|  2.42M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  2.42M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.42M|    else {
 1472|  2.42M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.42M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.42M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.36M, False: 61.2k]
  |  |  ------------------
  ------------------
 1474|  2.42M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.42M|                   : result(unexpect,
 1476|  61.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  61.2k|                                           std::forward<Exp>(exp).error()));
 1478|  2.42M|    }
 1479|  2.42M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  2.58M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.58M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.58M|    {
 1572|  2.58M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.58M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.58M|    {
  442|  2.58M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  61.2k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  61.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  61.2k|    {
 1628|  61.2k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.36M|    {
 1805|  2.36M|        return std::move(value());
 1806|  2.36M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.14M|    {
 3000|  2.14M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.14M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.14M|    {
 2981|  2.14M|        return t.data();
 2982|  2.14M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|   915k|    {
 1979|   915k|        return detail::transform_error_impl(std::move(*this),
 1980|   915k|                                            std::forward<F>(f));
 1981|   915k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|   915k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   915k|    else {
 1472|   915k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   915k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   915k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 915k, False: 0]
  |  |  ------------------
  ------------------
 1474|   915k|                   ? result(*std::forward<Exp>(exp))
 1475|   915k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   915k|    }
 1479|   915k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|   915k|        : base(std::in_place, std::forward<U>(val)),
 1570|   915k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   915k|    {
 1572|   915k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   915k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   915k|    {
  442|   915k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   915k|    {
 1316|   915k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   915k|    {
 1740|   915k|        return has_value();
 1741|   915k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.83M|    {
  490|  1.83M|        return m_has_value;
  491|  1.83M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   915k|    {
 1805|   915k|        return std::move(value());
 1806|   915k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   915k|    {
 1769|   915k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   915k|        return this->get_value();
 1771|   915k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   915k|    {
  456|   915k|        return m_value;
  457|   915k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|  1.16M|    {
 1965|  1.16M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.16M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|  1.16M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.16M|    else {
 1472|  1.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
 1474|  1.16M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.16M|                   : result(unexpect,
 1476|  1.16M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.16M|                                           std::forward<Exp>(exp).error()));
 1478|  1.16M|    }
 1479|  1.16M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   469k|    {
 1795|   469k|        return value();
 1796|   469k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   182k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|  19.5k|    {
 1815|  19.5k|        return &value();
 1816|  19.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   732k|    {
 2869|   732k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   732k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   732k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   732k|    {
 2850|   732k|        return decay_copy(t.begin());
 2851|   732k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   732k|{
 2094|   732k|    return SCN_FWD(t);
  ------------------
  |  |  936|   732k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   732k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   409k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   915k|    {
 1979|   915k|        return detail::transform_error_impl(std::move(*this),
 1980|   915k|                                            std::forward<F>(f));
 1981|   915k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   915k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   915k|    else {
 1472|   915k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   915k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   915k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 915k, False: 0]
  |  |  ------------------
  ------------------
 1474|   915k|                   ? result(*std::forward<Exp>(exp))
 1475|   915k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   915k|    }
 1479|   915k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   915k|        : base(std::in_place, std::forward<U>(val)),
 1570|   915k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   915k|    {
 1572|   915k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   915k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   915k|    {
  442|   915k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   915k|    {
 1316|   915k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   915k|    {
 1740|   915k|        return has_value();
 1741|   915k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.83M|    {
  490|  1.83M|        return m_has_value;
  491|  1.83M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   915k|    {
 1805|   915k|        return std::move(value());
 1806|   915k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   915k|    {
 1769|   915k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   915k|        return this->get_value();
 1771|   915k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   915k|    {
  456|   915k|        return m_value;
  457|   915k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|  1.02M|    {
 1965|  1.02M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.02M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|  1.02M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.02M|    else {
 1472|  1.02M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.02M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1474|  1.02M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.02M|                   : result(unexpect,
 1476|  1.02M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.02M|                                           std::forward<Exp>(exp).error()));
 1478|  1.02M|    }
 1479|  1.02M|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  1.02M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.02M|    static_cast<    \
  |  |  935|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.02M|    {
 3912|  1.02M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   469k|    {
 1795|   469k|        return value();
 1796|   469k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  6.66k|    {
 1815|  6.66k|        return &value();
 1816|  6.66k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.16M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.16M|    static_cast<    \
  |  |  935|  1.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.16M|    {
 3912|  1.16M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1569|   160k|        : base(std::in_place, std::forward<U>(val)),
 1570|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   160k|    {
 1572|   160k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  440|   160k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   160k|    {
  442|   160k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 5870|  3.17M|    {
 5871|  3.17M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  3.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.17M]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|  3.17M|        return static_cast<std::size_t>(m_desc &
 5876|  3.17M|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|  3.17M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 5896|  6.34M|    {
 5897|  6.34M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|  6.34M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 5838|  3.17M|    {
 5839|  3.17M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  3.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.17M]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|  3.17M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  3.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.17M]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|  3.17M|        const auto t = type(id);
 5851|  3.17M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  3.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.17M]
  |  |  ------------------
  ------------------
 5852|      0|            return {};
 5853|      0|        }
 5854|       |
 5855|  3.17M|        basic_scan_arg<Context> arg;
 5856|  3.17M|        arg.m_type = t;
 5857|  3.17M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 3.17M, False: 0]
  ------------------
 5858|  3.17M|            arg.m_value.ref_value = m_builtin_values[id];
 5859|  3.17M|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|  3.17M|        return arg;
 5864|  3.17M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 5905|  3.17M|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|  3.17M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|  3.17M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|  3.17M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|  3.17M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 5900|  3.17M|    {
 5901|  3.17M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|  3.17M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5654|  6.01M|    {
 5655|  6.01M|        return m_type != detail::arg_type::none_type;
 5656|  6.01M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|   475k|{
 8994|   475k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   475k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   475k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   475k|{
 8895|   475k|#define SCN_VISIT(Type)                                                \
 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   475k|    }                                                                  \
 8899|   475k|    else {                                                             \
 8900|   475k|        return vis(monostate_val);                                     \
 8901|   475k|    }
 8902|       |
 8903|   475k|    monostate monostate_val{};
 8904|       |
 8905|   475k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 475k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 475k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 475k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 475k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 475k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 475k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 475k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 475k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 475k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 475k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 475k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 475k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 475k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 475k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 475k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|   152k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 152k, False: 322k]
  ------------------
 8937|   152k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   152k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   152k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   152k|    }                                                                  \
  |  | 8899|   152k|    else {                                                             \
  |  | 8900|   152k|        return vis(monostate_val);                                     \
  |  | 8901|   152k|    }
  ------------------
 8938|   312k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 159k, False: 315k]
  ------------------
 8939|   312k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   312k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   312k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   312k|    }                                                                  \
  |  | 8899|   312k|    else {                                                             \
  |  | 8900|   312k|        return vis(monostate_val);                                     \
  |  | 8901|   312k|    }
  ------------------
 8940|   475k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 162k, False: 312k]
  ------------------
 8941|   475k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   475k|    }                                                                  \
  |  | 8899|   475k|    else {                                                             \
  |  | 8900|   475k|        return vis(monostate_val);                                     \
  |  | 8901|   475k|    }
  ------------------
 8942|   475k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 475k]
  ------------------
 8943|   475k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   475k|    }                                                                  \
  |  | 8899|   475k|    else {                                                             \
  |  | 8900|   475k|        return vis(monostate_val);                                     \
  |  | 8901|   475k|    }
  ------------------
 8944|   475k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 475k]
  ------------------
 8945|   475k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   475k|    }                                                                  \
  |  | 8899|   475k|    else {                                                             \
  |  | 8900|   475k|        return vis(monostate_val);                                     \
  |  | 8901|   475k|    }
  ------------------
 8946|   475k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 475k]
  ------------------
 8947|   475k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   475k|    }                                                                  \
  |  | 8899|   475k|    else {                                                             \
  |  | 8900|   475k|        return vis(monostate_val);                                     \
  |  | 8901|   475k|    }
  ------------------
 8948|   475k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 475k]
  ------------------
 8949|   475k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   475k|    }                                                                  \
  |  | 8899|   475k|    else {                                                             \
  |  | 8900|   475k|        return vis(monostate_val);                                     \
  |  | 8901|   475k|    }
  ------------------
 8950|   475k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 475k]
  ------------------
 8951|   475k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   475k|    }                                                                  \
  |  | 8899|   475k|    else {                                                             \
  |  | 8900|   475k|        return vis(monostate_val);                                     \
  |  | 8901|   475k|    }
  ------------------
 8952|   475k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 475k]
  ------------------
 8953|   475k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   475k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   475k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   475k|    }                                                                  \
  |  | 8899|   475k|    else {                                                             \
  |  | 8900|   475k|        return vis(monostate_val);                                     \
  |  | 8901|   475k|    }
  ------------------
 8954|       |
 8955|   475k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 475k]
  ------------------
 8956|   475k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   475k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   475k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 475k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 475k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   475k|            SCN_CLANG_POP
 8973|   475k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|  8.51M|{
 5700|  8.51M|    return arg.m_type;
 5701|  8.51M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|  3.50M|{
 5712|  3.50M|    return arg.m_value;
 5713|  3.50M|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5950|  2.50M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|  2.50M|    {
 5952|  2.50M|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8626|  1.36M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8627|  1.36M|    {
 8628|  1.36M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|  1.88M|{
 4690|  1.88M|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 1.88M]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|  1.88M|    return ranges::subrange{forward_iterator{this, 0},
 4695|  1.88M|                            ranges::default_sentinel};
 4696|  1.88M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|  1.88M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|  1.88M|    {
 4454|  1.88M|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|  1.88M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.88M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 8993|   522k|{
 8994|   522k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   522k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   522k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   522k|{
 8895|   522k|#define SCN_VISIT(Type)                                                \
 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   522k|    }                                                                  \
 8899|   522k|    else {                                                             \
 8900|   522k|        return vis(monostate_val);                                     \
 8901|   522k|    }
 8902|       |
 8903|   522k|    monostate monostate_val{};
 8904|       |
 8905|   522k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 522k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 522k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 522k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 522k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 522k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 522k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 522k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 522k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 522k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 522k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 522k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 522k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 522k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 522k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 522k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|   167k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 167k, False: 354k]
  ------------------
 8937|   167k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   167k|    }                                                                  \
  |  | 8899|   167k|    else {                                                             \
  |  | 8900|   167k|        return vis(monostate_val);                                     \
  |  | 8901|   167k|    }
  ------------------
 8938|   343k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 176k, False: 345k]
  ------------------
 8939|   343k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   343k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   343k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   343k|    }                                                                  \
  |  | 8899|   343k|    else {                                                             \
  |  | 8900|   343k|        return vis(monostate_val);                                     \
  |  | 8901|   343k|    }
  ------------------
 8940|   522k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 178k, False: 343k]
  ------------------
 8941|   522k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   522k|    }                                                                  \
  |  | 8899|   522k|    else {                                                             \
  |  | 8900|   522k|        return vis(monostate_val);                                     \
  |  | 8901|   522k|    }
  ------------------
 8942|   522k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 522k]
  ------------------
 8943|   522k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   522k|    }                                                                  \
  |  | 8899|   522k|    else {                                                             \
  |  | 8900|   522k|        return vis(monostate_val);                                     \
  |  | 8901|   522k|    }
  ------------------
 8944|   522k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 522k]
  ------------------
 8945|   522k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   522k|    }                                                                  \
  |  | 8899|   522k|    else {                                                             \
  |  | 8900|   522k|        return vis(monostate_val);                                     \
  |  | 8901|   522k|    }
  ------------------
 8946|   522k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 522k]
  ------------------
 8947|   522k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   522k|    }                                                                  \
  |  | 8899|   522k|    else {                                                             \
  |  | 8900|   522k|        return vis(monostate_val);                                     \
  |  | 8901|   522k|    }
  ------------------
 8948|   522k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 522k]
  ------------------
 8949|   522k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   522k|    }                                                                  \
  |  | 8899|   522k|    else {                                                             \
  |  | 8900|   522k|        return vis(monostate_val);                                     \
  |  | 8901|   522k|    }
  ------------------
 8950|   522k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 522k]
  ------------------
 8951|   522k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   522k|    }                                                                  \
  |  | 8899|   522k|    else {                                                             \
  |  | 8900|   522k|        return vis(monostate_val);                                     \
  |  | 8901|   522k|    }
  ------------------
 8952|   522k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 522k]
  ------------------
 8953|   522k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   522k|    }                                                                  \
  |  | 8899|   522k|    else {                                                             \
  |  | 8900|   522k|        return vis(monostate_val);                                     \
  |  | 8901|   522k|    }
  ------------------
 8954|       |
 8955|   522k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 522k]
  ------------------
 8956|   522k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   522k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   522k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 522k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 522k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   522k|            SCN_CLANG_POP
 8973|   522k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  1.14M|    {
 3075|  1.14M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.14M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  1.14M|    {
 3041|  1.14M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.14M|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|  1.14M|{
 7487|  1.14M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|  1.14M|    handler.check_args_exhausted();
 7489|  1.14M|    return handler.get_error();
 7490|  1.14M|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|  1.14M|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|  1.14M|    auto begin = format.data();
 7455|  1.14M|    auto it = begin;
 7456|  1.14M|    const auto end = format.data() + format.size();
 7457|       |
 7458|  2.18M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 1.14M, False: 1.04M]
  ------------------
 7459|  1.14M|        const auto ch = *it++;
 7460|  1.14M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 1.14M, False: 0]
  ------------------
 7461|  1.14M|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  1.14M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  1.14M|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 101k, False: 1.04M]
  ------------------
 7465|   101k|                return;
 7466|   101k|            }
 7467|  1.14M|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|  1.14M|    }
 7478|       |
 7479|  1.04M|    handler.on_literal_text(begin, end);
 7480|  1.04M|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7383|  1.14M|{
 7384|  1.14M|    struct id_adapter {
 7385|  1.14M|        constexpr void operator()()
 7386|  1.14M|        {
 7387|  1.14M|            arg_id = handler.on_arg_id();
 7388|  1.14M|        }
 7389|  1.14M|        constexpr void operator()(std::size_t id)
 7390|  1.14M|        {
 7391|  1.14M|            arg_id = handler.on_arg_id(id);
 7392|  1.14M|        }
 7393|       |
 7394|  1.14M|        constexpr void on_error(const char* msg)
 7395|  1.14M|        {
 7396|  1.14M|            SCN_UNLIKELY_ATTR
 7397|  1.14M|            handler.on_error(msg);
 7398|  1.14M|        }
 7399|       |
 7400|  1.14M|        Handler& handler;
 7401|  1.14M|        std::size_t arg_id;
 7402|  1.14M|    };
 7403|       |
 7404|  1.14M|    ++begin;
 7405|  1.14M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  1.14M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 1.14M]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|  1.14M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 1.14M]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|  1.14M|    else {
 7417|  1.14M|        auto adapter = id_adapter{handler, 0};
 7418|  1.14M|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  1.14M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  1.14M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 1.14M]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  1.14M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 1.14M, False: 0]
  ------------------
 7429|  1.14M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  1.14M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  1.14M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.14M]
  |  |  |  Branch (865:45): [True: 0, False: 1.14M]
  |  |  |  Branch (865:45): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 7435|      0|                handler.on_error("Unknown format specifier");
 7436|      0|                return begin;
 7437|      0|            }
 7438|  1.14M|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|  1.14M|    }
 7445|  1.14M|    return begin + 1;
 7446|  1.14M|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8525|  2.50M|    {
 8526|  2.50M|        return m_args.get(id);
 8527|  2.50M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 5979|  2.50M|    {
 5980|  2.50M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.50M]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|  2.50M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|  2.50M|        do_check_arg_id(id);
 5988|  2.50M|        return id;
 5989|  2.50M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6499|  2.50M|{
 6500|  2.50M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|  2.50M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|  2.50M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  1.14M|{
 6885|  1.14M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  1.14M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 1.14M, False: 0]
  |  Branch (6886:26): [True: 0, False: 1.14M]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|  1.14M|    handler();
 6891|  1.14M|    return begin;
 6892|  1.14M|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  1.14M|        {
 7387|  1.14M|            arg_id = handler.on_arg_id();
 7388|  1.14M|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 5974|  2.50M|    {
 5975|  2.50M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|  2.50M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 5963|  5.01M|    {
 5964|  5.01M|        return m_format.data();
 5965|  5.01M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|  1.14M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  1.14M|    {
 7565|  1.14M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  1.14M|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7299|  1.14M|{
 7300|  1.14M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.14M|        if (*begin == CharT{'['}) {
 7302|  1.14M|            auto set = parse_presentation_set(begin, end, handler);
 7303|  1.14M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  1.14M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  1.14M|                return begin;
 7308|  1.14M|            }
 7309|  1.14M|            handler.on_character_set_string(set);
 7310|  1.14M|            return begin;
 7311|  1.14M|        }
 7312|  1.14M|        if (*begin == CharT{'/'}) {
 7313|  1.14M|            return parse_presentation_regex(begin, end, handler);
 7314|  1.14M|        }
 7315|  1.14M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.14M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  1.14M|            handler.on_error("Invalid type specifier in format string");
 7318|  1.14M|            return begin;
 7319|  1.14M|        }
 7320|  1.14M|        handler.on_type(type);
 7321|  1.14M|        return begin;
 7322|  1.14M|    };
 7323|       |
 7324|  1.14M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 1.14M, False: 0]
  |  Branch (7324:28): [True: 1.14M, False: 0]
  ------------------
 7325|  1.14M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 1.14M, False: 0]
  |  Branch (7325:36): [True: 826k, False: 316k]
  ------------------
 7326|   826k|        return do_presentation();
 7327|   826k|    }
 7328|       |
 7329|   316k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   316k|    begin = parse_align(begin, end, handler);
 7335|   316k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   316k|    begin = parse_width(begin, end, handler);
 7341|   316k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   316k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 316k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   316k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 316k, False: 0]
  ------------------
 7360|   316k|        handler.on_localized();
 7361|   316k|        ++begin;
 7362|   316k|    }
 7363|   316k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   316k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 316k, False: 0]
  |  Branch (7368:25): [True: 0, False: 316k]
  ------------------
 7369|      0|        do_presentation();
 7370|      0|    }
 7371|   316k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   316k|    return begin;
 7377|   316k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 6948|  2.50M|{
 6949|  2.50M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 1.80M, False: 702k]
  |  Branch (6949:33): [True: 1.80M, False: 0]
  ------------------
 6950|  2.50M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 702k, False: 0]
  |  Branch (6950:33): [True: 702k, False: 0]
  ------------------
 6951|  2.50M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|   826k|    auto do_presentation = [&]() -> const CharT* {
 7301|   826k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 826k]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|   826k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 826k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   826k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   826k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 826k]
  |  |  ------------------
  ------------------
 7317|      0|            handler.on_error("Invalid type specifier in format string");
 7318|      0|            return begin;
 7319|      0|        }
 7320|   826k|        handler.on_type(type);
 7321|   826k|        return begin;
 7322|   826k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6896|  1.80M|{
 6897|  1.80M|    switch (type) {
 6898|      0|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 0, False: 1.80M]
  ------------------
 6899|      0|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 0, False: 1.80M]
  ------------------
 6900|      0|            return presentation_type::int_binary;
 6901|      0|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 0, False: 1.80M]
  ------------------
 6902|      0|            return presentation_type::int_decimal;
 6903|      0|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 0, False: 1.80M]
  ------------------
 6904|      0|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 1.80M]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|      0|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 0, False: 1.80M]
  ------------------
 6908|      0|            return presentation_type::int_octal;
 6909|      0|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 0, False: 1.80M]
  ------------------
 6910|      0|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 1.80M]
  ------------------
 6911|      0|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 1.80M]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 1.80M]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|   765k|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 765k, False: 1.03M]
  ------------------
 6916|   765k|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 1.80M]
  ------------------
 6917|   765k|            return presentation_type::float_hex;
 6918|  60.9k|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 60.9k, False: 1.74M]
  ------------------
 6919|  60.9k|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 1.80M]
  ------------------
 6920|  60.9k|            return presentation_type::float_scientific;
 6921|   378k|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 378k, False: 1.42M]
  ------------------
 6922|   378k|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 1.80M]
  ------------------
 6923|   378k|            return presentation_type::float_fixed;
 6924|   600k|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 600k, False: 1.20M]
  ------------------
 6925|   600k|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 1.80M]
  ------------------
 6926|   600k|            return presentation_type::float_general;
 6927|      0|        case 's':
  ------------------
  |  Branch (6927:9): [True: 0, False: 1.80M]
  ------------------
 6928|      0|            return presentation_type::string;
 6929|      0|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.80M]
  ------------------
 6930|      0|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 1.80M]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 1.80M]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 1.80M]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 1.80M]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|      0|        default:
  ------------------
  |  Branch (6941:9): [True: 0, False: 1.80M]
  ------------------
 6942|      0|            return presentation_type::none;
 6943|  1.80M|    }
 6944|  1.80M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 6973|   316k|{
 6974|   316k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   316k|    auto check_align = [](wchar_t ch) {
 6977|   316k|        switch (ch) {
 6978|   316k|            case L'<':
 6979|   316k|                return align_type::left;
 6980|   316k|            case L'>':
 6981|   316k|                return align_type::right;
 6982|   316k|            case L'^':
 6983|   316k|                return align_type::center;
 6984|   316k|            default:
 6985|   316k|                return align_type::none;
 6986|   316k|        }
 6987|   316k|    };
 6988|       |
 6989|   316k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   316k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  |  Branch (865:45): [True: 0, False: 316k]
  |  |  |  Branch (865:45): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 6991|   316k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   316k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   316k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   316k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   316k|    const auto begin_before_fill = begin;
 7001|   316k|    begin += potential_fill_len;
 7002|       |
 7003|   316k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 316k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   316k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   316k|    const auto begin_after_fill = begin;
 7009|   316k|    ++begin;
 7010|       |
 7011|   316k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 316k, False: 0]
  ------------------
 7012|   316k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   316k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 316k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   316k|    }
 7020|       |
 7021|   316k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 316k, False: 0]
  ------------------
 7022|   316k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 316k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   316k|        return begin_before_fill;
 7027|   316k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   316k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 6955|   702k|{
 6956|   702k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   702k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   702k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|       |    if constexpr (sizeof(CharT) != 1) {
 6958|       |        return 1;
 6959|       |    }
 6960|   702k|    else {
 6961|   702k|        const auto lengths =
 6962|   702k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|   702k|            "\3\4";
 6964|   702k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|   702k|        return len;
 6966|   702k|    }
 6967|   702k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|   633k|    auto check_align = [](wchar_t ch) {
 6977|   633k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 633k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 633k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 633k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   633k|            default:
  ------------------
  |  Branch (6984:13): [True: 633k, False: 0]
  ------------------
 6985|   633k|                return align_type::none;
 6986|   633k|        }
 6987|   633k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7038|   316k|{
 7039|   316k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   316k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 316k, False: 0]
  |  Branch (7041:33): [True: 0, False: 316k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   316k|    return begin;
 7052|   316k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7569|   316k|    {
 7570|   316k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|   316k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 316k, False: 0]
  ------------------
 7572|   316k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 316k, False: 0]
  ------------------
 7573|   316k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 316k]
  ------------------
 7574|   316k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|   316k|        Handler::on_localized();
 7582|   316k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 6718|  1.03M|    {
 6719|  1.03M|        if constexpr (!SCN_DISABLE_LOCALE) {
 6720|  1.03M|            m_specs.localized = true;
 6721|       |        }
 6722|       |        else {
 6723|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6724|       |        }
 6725|  1.03M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|  1.14M|{
 8994|  1.14M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  1.14M|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  1.14M|{
 8895|  1.14M|#define SCN_VISIT(Type)                                                \
 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  1.14M|    }                                                                  \
 8899|  1.14M|    else {                                                             \
 8900|  1.14M|        return vis(monostate_val);                                     \
 8901|  1.14M|    }
 8902|       |
 8903|  1.14M|    monostate monostate_val{};
 8904|       |
 8905|  1.14M|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 1.14M]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 1.14M]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 1.14M]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 1.14M]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 1.14M]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 1.14M]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 1.14M]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 1.14M]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 1.14M]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 1.14M]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 1.14M]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 1.14M]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 1.14M]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 1.14M]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 1.14M]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|   371k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 371k, False: 771k]
  ------------------
 8937|   371k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   371k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   371k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   371k|    }                                                                  \
  |  | 8899|   371k|    else {                                                             \
  |  | 8900|   371k|        return vis(monostate_val);                                     \
  |  | 8901|   371k|    }
  ------------------
 8938|   755k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 383k, False: 759k]
  ------------------
 8939|   755k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   755k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   755k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   755k|    }                                                                  \
  |  | 8899|   755k|    else {                                                             \
  |  | 8900|   755k|        return vis(monostate_val);                                     \
  |  | 8901|   755k|    }
  ------------------
 8940|  1.14M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 387k, False: 755k]
  ------------------
 8941|  1.14M|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8942|  1.14M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 1.14M]
  ------------------
 8943|  1.14M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8944|  1.14M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 1.14M]
  ------------------
 8945|  1.14M|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8946|  1.14M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 1.14M]
  ------------------
 8947|  1.14M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8948|  1.14M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 1.14M]
  ------------------
 8949|  1.14M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8950|  1.14M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 1.14M]
  ------------------
 8951|  1.14M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8952|  1.14M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 1.14M]
  ------------------
 8953|  1.14M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8954|       |
 8955|  1.14M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 1.14M]
  ------------------
 8956|  1.14M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  1.14M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  1.14M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 1.14M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 1.14M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  1.14M|            SCN_CLANG_POP
 8973|  1.14M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|  1.36M|{
 7487|  1.36M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|  1.36M|    handler.check_args_exhausted();
 7489|  1.36M|    return handler.get_error();
 7490|  1.36M|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|  1.36M|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|  1.36M|    auto begin = format.data();
 7455|  1.36M|    auto it = begin;
 7456|  1.36M|    const auto end = format.data() + format.size();
 7457|       |
 7458|  2.62M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 1.36M, False: 1.26M]
  ------------------
 7459|  1.36M|        const auto ch = *it++;
 7460|  1.36M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 1.36M, False: 0]
  ------------------
 7461|  1.36M|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  1.36M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  1.36M|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 101k, False: 1.26M]
  ------------------
 7465|   101k|                return;
 7466|   101k|            }
 7467|  1.36M|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|  1.36M|    }
 7478|       |
 7479|  1.26M|    handler.on_literal_text(begin, end);
 7480|  1.26M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8664|  1.26M|    {
 8665|  1.26M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  1.26M|    static_cast<    \
  |  |  935|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8666|  1.26M|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7383|  1.36M|{
 7384|  1.36M|    struct id_adapter {
 7385|  1.36M|        constexpr void operator()()
 7386|  1.36M|        {
 7387|  1.36M|            arg_id = handler.on_arg_id();
 7388|  1.36M|        }
 7389|  1.36M|        constexpr void operator()(std::size_t id)
 7390|  1.36M|        {
 7391|  1.36M|            arg_id = handler.on_arg_id(id);
 7392|  1.36M|        }
 7393|       |
 7394|  1.36M|        constexpr void on_error(const char* msg)
 7395|  1.36M|        {
 7396|  1.36M|            SCN_UNLIKELY_ATTR
 7397|  1.36M|            handler.on_error(msg);
 7398|  1.36M|        }
 7399|       |
 7400|  1.36M|        Handler& handler;
 7401|  1.36M|        std::size_t arg_id;
 7402|  1.36M|    };
 7403|       |
 7404|  1.36M|    ++begin;
 7405|  1.36M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  1.36M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 1.36M]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|  1.36M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 1.36M]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|  1.36M|    else {
 7417|  1.36M|        auto adapter = id_adapter{handler, 0};
 7418|  1.36M|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  1.36M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  1.36M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 1.36M]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  1.36M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 1.36M, False: 0]
  ------------------
 7429|  1.36M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  1.36M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  1.36M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  2.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36M]
  |  |  |  Branch (865:45): [True: 0, False: 1.36M]
  |  |  |  Branch (865:45): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
 7435|      0|                handler.on_error("Unknown format specifier");
 7436|      0|                return begin;
 7437|      0|            }
 7438|  1.36M|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|  1.36M|    }
 7445|  1.36M|    return begin + 1;
 7446|  1.36M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  1.36M|{
 6885|  1.36M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  1.36M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 1.36M, False: 0]
  |  Branch (6886:26): [True: 0, False: 1.36M]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|  1.36M|    handler();
 6891|  1.36M|    return begin;
 6892|  1.36M|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  1.36M|        {
 7387|  1.36M|            arg_id = handler.on_arg_id();
 7388|  1.36M|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7563|  1.36M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  1.36M|    {
 7565|  1.36M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  1.36M|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7299|  1.36M|{
 7300|  1.36M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.36M|        if (*begin == CharT{'['}) {
 7302|  1.36M|            auto set = parse_presentation_set(begin, end, handler);
 7303|  1.36M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  1.36M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  1.36M|                return begin;
 7308|  1.36M|            }
 7309|  1.36M|            handler.on_character_set_string(set);
 7310|  1.36M|            return begin;
 7311|  1.36M|        }
 7312|  1.36M|        if (*begin == CharT{'/'}) {
 7313|  1.36M|            return parse_presentation_regex(begin, end, handler);
 7314|  1.36M|        }
 7315|  1.36M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.36M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  1.36M|            handler.on_error("Invalid type specifier in format string");
 7318|  1.36M|            return begin;
 7319|  1.36M|        }
 7320|  1.36M|        handler.on_type(type);
 7321|  1.36M|        return begin;
 7322|  1.36M|    };
 7323|       |
 7324|  1.36M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 1.36M, False: 0]
  |  Branch (7324:28): [True: 1.36M, False: 0]
  ------------------
 7325|  1.36M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 1.36M, False: 0]
  |  Branch (7325:36): [True: 978k, False: 385k]
  ------------------
 7326|   978k|        return do_presentation();
 7327|   978k|    }
 7328|       |
 7329|   385k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   385k|    begin = parse_align(begin, end, handler);
 7335|   385k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   385k|    begin = parse_width(begin, end, handler);
 7341|   385k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   385k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 385k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   385k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 385k, False: 0]
  ------------------
 7360|   385k|        handler.on_localized();
 7361|   385k|        ++begin;
 7362|   385k|    }
 7363|   385k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   385k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 385k, False: 0]
  |  Branch (7368:25): [True: 0, False: 385k]
  ------------------
 7369|      0|        do_presentation();
 7370|      0|    }
 7371|   385k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   385k|    return begin;
 7377|   385k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7300|   978k|    auto do_presentation = [&]() -> const CharT* {
 7301|   978k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 978k]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|   978k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 978k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   978k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   978k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 978k]
  |  |  ------------------
  ------------------
 7317|      0|            handler.on_error("Invalid type specifier in format string");
 7318|      0|            return begin;
 7319|      0|        }
 7320|   978k|        handler.on_type(type);
 7321|   978k|        return begin;
 7322|   978k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 6973|   385k|{
 6974|   385k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   385k|    auto check_align = [](wchar_t ch) {
 6977|   385k|        switch (ch) {
 6978|   385k|            case L'<':
 6979|   385k|                return align_type::left;
 6980|   385k|            case L'>':
 6981|   385k|                return align_type::right;
 6982|   385k|            case L'^':
 6983|   385k|                return align_type::center;
 6984|   385k|            default:
 6985|   385k|                return align_type::none;
 6986|   385k|        }
 6987|   385k|    };
 6988|       |
 6989|   385k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   385k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 385k]
  |  |  |  Branch (865:45): [True: 0, False: 385k]
  |  |  |  Branch (865:45): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 6991|   385k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   385k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   385k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   385k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   385k|    const auto begin_before_fill = begin;
 7001|   385k|    begin += potential_fill_len;
 7002|       |
 7003|   385k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 385k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   385k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   385k|    const auto begin_after_fill = begin;
 7009|   385k|    ++begin;
 7010|       |
 7011|   385k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 385k, False: 0]
  ------------------
 7012|   385k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   385k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 385k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   385k|    }
 7020|       |
 7021|   385k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 385k, False: 0]
  ------------------
 7022|   385k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 385k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   385k|        return begin_before_fill;
 7027|   385k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   385k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6976|   771k|    auto check_align = [](wchar_t ch) {
 6977|   771k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 771k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 771k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 771k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   771k|            default:
  ------------------
  |  Branch (6984:13): [True: 771k, False: 0]
  ------------------
 6985|   771k|                return align_type::none;
 6986|   771k|        }
 6987|   771k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7038|   385k|{
 7039|   385k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   385k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 385k, False: 0]
  |  Branch (7041:33): [True: 0, False: 385k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   385k|    return begin;
 7052|   385k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7569|   385k|    {
 7570|   385k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|   385k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 385k, False: 0]
  ------------------
 7572|   385k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 385k, False: 0]
  ------------------
 7573|   385k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 385k]
  ------------------
 7574|   385k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|   385k|        Handler::on_localized();
 7582|   385k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 8993|  1.36M|{
 8994|  1.36M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  1.36M|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  1.36M|{
 8895|  1.36M|#define SCN_VISIT(Type)                                                \
 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  1.36M|    }                                                                  \
 8899|  1.36M|    else {                                                             \
 8900|  1.36M|        return vis(monostate_val);                                     \
 8901|  1.36M|    }
 8902|       |
 8903|  1.36M|    monostate monostate_val{};
 8904|       |
 8905|  1.36M|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 1.36M]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 1.36M]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 1.36M]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 1.36M]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 1.36M]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 1.36M]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 1.36M]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 1.36M]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 1.36M]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 1.36M]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 1.36M]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 1.36M]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 1.36M]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 1.36M]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 1.36M]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|   439k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 439k, False: 925k]
  ------------------
 8937|   439k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   439k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   439k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   439k|    }                                                                  \
  |  | 8899|   439k|    else {                                                             \
  |  | 8900|   439k|        return vis(monostate_val);                                     \
  |  | 8901|   439k|    }
  ------------------
 8938|   899k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 460k, False: 904k]
  ------------------
 8939|   899k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   899k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   899k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   899k|    }                                                                  \
  |  | 8899|   899k|    else {                                                             \
  |  | 8900|   899k|        return vis(monostate_val);                                     \
  |  | 8901|   899k|    }
  ------------------
 8940|  1.36M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 465k, False: 899k]
  ------------------
 8941|  1.36M|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.36M|    }                                                                  \
  |  | 8899|  1.36M|    else {                                                             \
  |  | 8900|  1.36M|        return vis(monostate_val);                                     \
  |  | 8901|  1.36M|    }
  ------------------
 8942|  1.36M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 1.36M]
  ------------------
 8943|  1.36M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.36M|    }                                                                  \
  |  | 8899|  1.36M|    else {                                                             \
  |  | 8900|  1.36M|        return vis(monostate_val);                                     \
  |  | 8901|  1.36M|    }
  ------------------
 8944|  1.36M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 1.36M]
  ------------------
 8945|  1.36M|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.36M|    }                                                                  \
  |  | 8899|  1.36M|    else {                                                             \
  |  | 8900|  1.36M|        return vis(monostate_val);                                     \
  |  | 8901|  1.36M|    }
  ------------------
 8946|  1.36M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 1.36M]
  ------------------
 8947|  1.36M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.36M|    }                                                                  \
  |  | 8899|  1.36M|    else {                                                             \
  |  | 8900|  1.36M|        return vis(monostate_val);                                     \
  |  | 8901|  1.36M|    }
  ------------------
 8948|  1.36M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 1.36M]
  ------------------
 8949|  1.36M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.36M|    }                                                                  \
  |  | 8899|  1.36M|    else {                                                             \
  |  | 8900|  1.36M|        return vis(monostate_val);                                     \
  |  | 8901|  1.36M|    }
  ------------------
 8950|  1.36M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 1.36M]
  ------------------
 8951|  1.36M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.36M|    }                                                                  \
  |  | 8899|  1.36M|    else {                                                             \
  |  | 8900|  1.36M|        return vis(monostate_val);                                     \
  |  | 8901|  1.36M|    }
  ------------------
 8952|  1.36M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 1.36M]
  ------------------
 8953|  1.36M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  1.36M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.36M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.36M|    }                                                                  \
  |  | 8899|  1.36M|    else {                                                             \
  |  | 8900|  1.36M|        return vis(monostate_val);                                     \
  |  | 8901|  1.36M|    }
  ------------------
 8954|       |
 8955|  1.36M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 1.36M]
  ------------------
 8956|  1.36M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  1.36M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  1.36M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 1.36M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 1.36M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  1.36M|            SCN_CLANG_POP
 8973|  1.36M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|   131k|    {
 4351|   131k|        sync(0);
 4352|   131k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 5870|  1.67M|    {
 5871|  1.67M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|  1.67M|        return static_cast<std::size_t>(m_desc &
 5876|  1.67M|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|  1.67M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 5896|  3.34M|    {
 5897|  3.34M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|  3.34M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 5838|  1.67M|    {
 5839|  1.67M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|  1.67M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|  1.67M|        const auto t = type(id);
 5851|  1.67M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 5852|      0|            return {};
 5853|      0|        }
 5854|       |
 5855|  1.67M|        basic_scan_arg<Context> arg;
 5856|  1.67M|        arg.m_type = t;
 5857|  1.67M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 1.67M, False: 0]
  ------------------
 5858|  1.67M|            arg.m_value.ref_value = m_builtin_values[id];
 5859|  1.67M|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|  1.67M|        return arg;
 5864|  1.67M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 5905|  1.67M|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|  1.67M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|  1.67M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|  1.67M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|  1.67M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 5900|  1.67M|    {
 5901|  1.67M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|  1.67M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5654|  3.18M|    {
 5655|  3.18M|        return m_type != detail::arg_type::none_type;
 5656|  3.18M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|   247k|{
 8994|   247k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   247k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   247k|{
 8895|   247k|#define SCN_VISIT(Type)                                                \
 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   247k|    }                                                                  \
 8899|   247k|    else {                                                             \
 8900|   247k|        return vis(monostate_val);                                     \
 8901|   247k|    }
 8902|       |
 8903|   247k|    monostate monostate_val{};
 8904|       |
 8905|   247k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 247k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 247k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 247k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 247k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 247k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 247k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 247k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 247k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 247k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 247k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 247k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 247k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 247k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 247k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 247k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|  70.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 70.7k, False: 177k]
  ------------------
 8937|  70.7k|            SCN_VISIT(float);
  ------------------
  |  | 8896|  70.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  70.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  70.7k|    }                                                                  \
  |  | 8899|  70.7k|    else {                                                             \
  |  | 8900|  70.7k|        return vis(monostate_val);                                     \
  |  | 8901|  70.7k|    }
  ------------------
 8938|   157k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 87.1k, False: 160k]
  ------------------
 8939|   157k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   157k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   157k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   157k|    }                                                                  \
  |  | 8899|   157k|    else {                                                             \
  |  | 8900|   157k|        return vis(monostate_val);                                     \
  |  | 8901|   157k|    }
  ------------------
 8940|   247k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 89.8k, False: 157k]
  ------------------
 8941|   247k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8942|   247k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 247k]
  ------------------
 8943|   247k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8944|   247k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 247k]
  ------------------
 8945|   247k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8946|   247k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 247k]
  ------------------
 8947|   247k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8948|   247k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 247k]
  ------------------
 8949|   247k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8950|   247k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 247k]
  ------------------
 8951|   247k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8952|   247k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 247k]
  ------------------
 8953|   247k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8954|       |
 8955|   247k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 247k]
  ------------------
 8956|   247k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   247k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   247k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 247k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 247k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   247k|            SCN_CLANG_POP
 8973|   247k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|  4.52M|{
 5700|  4.52M|    return arg.m_type;
 5701|  4.52M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|  1.83M|{
 5712|  1.83M|    return arg.m_value;
 5713|  1.83M|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5950|  1.34M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|  1.34M|    {
 5952|  1.34M|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8626|   671k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8627|   671k|    {
 8628|   671k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   671k|    {
 3075|   671k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   671k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   671k|    {
 3041|   671k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   671k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|   671k|{
 7487|   671k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|   671k|    handler.check_args_exhausted();
 7489|   671k|    return handler.get_error();
 7490|   671k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|   671k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|   671k|    auto begin = format.data();
 7455|   671k|    auto it = begin;
 7456|   671k|    const auto end = format.data() + format.size();
 7457|       |
 7458|  1.14M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 671k, False: 469k]
  ------------------
 7459|   671k|        const auto ch = *it++;
 7460|   671k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 671k, False: 0]
  ------------------
 7461|   671k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|   671k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|   671k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 202k, False: 469k]
  ------------------
 7465|   202k|                return;
 7466|   202k|            }
 7467|   671k|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|   671k|    }
 7478|       |
 7479|   469k|    handler.on_literal_text(begin, end);
 7480|   469k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7383|   671k|{
 7384|   671k|    struct id_adapter {
 7385|   671k|        constexpr void operator()()
 7386|   671k|        {
 7387|   671k|            arg_id = handler.on_arg_id();
 7388|   671k|        }
 7389|   671k|        constexpr void operator()(std::size_t id)
 7390|   671k|        {
 7391|   671k|            arg_id = handler.on_arg_id(id);
 7392|   671k|        }
 7393|       |
 7394|   671k|        constexpr void on_error(const char* msg)
 7395|   671k|        {
 7396|   671k|            SCN_UNLIKELY_ATTR
 7397|   671k|            handler.on_error(msg);
 7398|   671k|        }
 7399|       |
 7400|   671k|        Handler& handler;
 7401|   671k|        std::size_t arg_id;
 7402|   671k|    };
 7403|       |
 7404|   671k|    ++begin;
 7405|   671k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|   671k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 671k]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|   671k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 671k]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|   671k|    else {
 7417|   671k|        auto adapter = id_adapter{handler, 0};
 7418|   671k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|   671k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|   671k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 671k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|   671k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 671k, False: 0]
  ------------------
 7429|   671k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|   671k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|   671k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  |  Branch (865:45): [True: 0, False: 671k]
  |  |  |  Branch (865:45): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7435|      0|                handler.on_error("Unknown format specifier");
 7436|      0|                return begin;
 7437|      0|            }
 7438|   671k|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|   671k|    }
 7445|   671k|    return begin + 1;
 7446|   671k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8525|  1.34M|    {
 8526|  1.34M|        return m_args.get(id);
 8527|  1.34M|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 5979|  1.34M|    {
 5980|  1.34M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|  1.34M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|  1.34M|        do_check_arg_id(id);
 5988|  1.34M|        return id;
 5989|  1.34M|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6499|  1.34M|{
 6500|  1.34M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|  1.34M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|  1.34M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|   671k|{
 6885|   671k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|   671k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 671k, False: 0]
  |  Branch (6886:26): [True: 0, False: 671k]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|   671k|    handler();
 6891|   671k|    return begin;
 6892|   671k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|   671k|        {
 7387|   671k|            arg_id = handler.on_arg_id();
 7388|   671k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 5974|  1.34M|    {
 5975|  1.34M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|  1.34M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|   918k|{
 4690|   918k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 918k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   918k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   918k|                            ranges::default_sentinel};
 4696|   918k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|   918k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   918k|    {
 4454|   918k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   918k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   918k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   918k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   918k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   918k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   918k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 5963|  2.68M|    {
 5964|  2.68M|        return m_format.data();
 5965|  2.68M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|   671k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|   671k|    {
 7565|   671k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|   671k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7299|   671k|{
 7300|   671k|    auto do_presentation = [&]() -> const CharT* {
 7301|   671k|        if (*begin == CharT{'['}) {
 7302|   671k|            auto set = parse_presentation_set(begin, end, handler);
 7303|   671k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|   671k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|   671k|                return begin;
 7308|   671k|            }
 7309|   671k|            handler.on_character_set_string(set);
 7310|   671k|            return begin;
 7311|   671k|        }
 7312|   671k|        if (*begin == CharT{'/'}) {
 7313|   671k|            return parse_presentation_regex(begin, end, handler);
 7314|   671k|        }
 7315|   671k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   671k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|   671k|            handler.on_error("Invalid type specifier in format string");
 7318|   671k|            return begin;
 7319|   671k|        }
 7320|   671k|        handler.on_type(type);
 7321|   671k|        return begin;
 7322|   671k|    };
 7323|       |
 7324|   671k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 671k, False: 0]
  |  Branch (7324:28): [True: 671k, False: 0]
  ------------------
 7325|   671k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 671k, False: 0]
  |  Branch (7325:36): [True: 506k, False: 165k]
  ------------------
 7326|   506k|        return do_presentation();
 7327|   506k|    }
 7328|       |
 7329|   165k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   165k|    begin = parse_align(begin, end, handler);
 7335|   165k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   165k|    begin = parse_width(begin, end, handler);
 7341|   165k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   165k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 165k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   165k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 165k, False: 0]
  ------------------
 7360|   165k|        handler.on_localized();
 7361|   165k|        ++begin;
 7362|   165k|    }
 7363|   165k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   165k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 165k, False: 0]
  |  Branch (7368:25): [True: 0, False: 165k]
  ------------------
 7369|      0|        do_presentation();
 7370|      0|    }
 7371|   165k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   165k|    return begin;
 7377|   165k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 6948|  1.34M|{
 6949|  1.34M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 1.01M, False: 330k]
  |  Branch (6949:33): [True: 1.01M, False: 0]
  ------------------
 6950|  1.34M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 330k, False: 0]
  |  Branch (6950:33): [True: 330k, False: 0]
  ------------------
 6951|  1.34M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|   506k|    auto do_presentation = [&]() -> const CharT* {
 7301|   506k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 506k]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|   506k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 506k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   506k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   506k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 506k]
  |  |  ------------------
  ------------------
 7317|      0|            handler.on_error("Invalid type specifier in format string");
 7318|      0|            return begin;
 7319|      0|        }
 7320|   506k|        handler.on_type(type);
 7321|   506k|        return begin;
 7322|   506k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6896|  1.01M|{
 6897|  1.01M|    switch (type) {
 6898|      0|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 0, False: 1.01M]
  ------------------
 6899|      0|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 0, False: 1.01M]
  ------------------
 6900|      0|            return presentation_type::int_binary;
 6901|      0|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 0, False: 1.01M]
  ------------------
 6902|      0|            return presentation_type::int_decimal;
 6903|      0|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 0, False: 1.01M]
  ------------------
 6904|      0|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 1.01M]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|      0|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 0, False: 1.01M]
  ------------------
 6908|      0|            return presentation_type::int_octal;
 6909|      0|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 0, False: 1.01M]
  ------------------
 6910|      0|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 1.01M]
  ------------------
 6911|      0|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 1.01M]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 1.01M]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|   365k|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 365k, False: 648k]
  ------------------
 6916|   365k|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 1.01M]
  ------------------
 6917|   365k|            return presentation_type::float_hex;
 6918|  83.0k|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 83.0k, False: 930k]
  ------------------
 6919|  83.0k|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 1.01M]
  ------------------
 6920|  83.0k|            return presentation_type::float_scientific;
 6921|   255k|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 255k, False: 758k]
  ------------------
 6922|   255k|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 1.01M]
  ------------------
 6923|   255k|            return presentation_type::float_fixed;
 6924|   309k|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 309k, False: 703k]
  ------------------
 6925|   309k|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 1.01M]
  ------------------
 6926|   309k|            return presentation_type::float_general;
 6927|      0|        case 's':
  ------------------
  |  Branch (6927:9): [True: 0, False: 1.01M]
  ------------------
 6928|      0|            return presentation_type::string;
 6929|      0|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.01M]
  ------------------
 6930|      0|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 1.01M]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 1.01M]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 1.01M]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 1.01M]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|      0|        default:
  ------------------
  |  Branch (6941:9): [True: 0, False: 1.01M]
  ------------------
 6942|      0|            return presentation_type::none;
 6943|  1.01M|    }
 6944|  1.01M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 6973|   165k|{
 6974|   165k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   165k|    auto check_align = [](wchar_t ch) {
 6977|   165k|        switch (ch) {
 6978|   165k|            case L'<':
 6979|   165k|                return align_type::left;
 6980|   165k|            case L'>':
 6981|   165k|                return align_type::right;
 6982|   165k|            case L'^':
 6983|   165k|                return align_type::center;
 6984|   165k|            default:
 6985|   165k|                return align_type::none;
 6986|   165k|        }
 6987|   165k|    };
 6988|       |
 6989|   165k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   165k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  |  Branch (865:45): [True: 0, False: 165k]
  |  |  |  Branch (865:45): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 6991|   165k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   165k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   165k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   165k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   165k|    const auto begin_before_fill = begin;
 7001|   165k|    begin += potential_fill_len;
 7002|       |
 7003|   165k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 165k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   165k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   165k|    const auto begin_after_fill = begin;
 7009|   165k|    ++begin;
 7010|       |
 7011|   165k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 165k, False: 0]
  ------------------
 7012|   165k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   165k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 165k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   165k|    }
 7020|       |
 7021|   165k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 165k, False: 0]
  ------------------
 7022|   165k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 165k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   165k|        return begin_before_fill;
 7027|   165k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   165k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 6955|   330k|{
 6956|   330k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|   330k|    if constexpr (sizeof(CharT) != 1) {
 6958|   330k|        return 1;
 6959|       |    }
 6960|       |    else {
 6961|       |        const auto lengths =
 6962|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|       |            "\3\4";
 6964|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|       |        return len;
 6966|       |    }
 6967|   330k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|   330k|    auto check_align = [](wchar_t ch) {
 6977|   330k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 330k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 330k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 330k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   330k|            default:
  ------------------
  |  Branch (6984:13): [True: 330k, False: 0]
  ------------------
 6985|   330k|                return align_type::none;
 6986|   330k|        }
 6987|   330k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7038|   165k|{
 7039|   165k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   165k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 165k, False: 0]
  |  Branch (7041:33): [True: 0, False: 165k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   165k|    return begin;
 7052|   165k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7569|   165k|    {
 7570|   165k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|   165k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 165k, False: 0]
  ------------------
 7572|   165k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 165k, False: 0]
  ------------------
 7573|   165k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 165k]
  ------------------
 7574|   165k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|   165k|        Handler::on_localized();
 7582|   165k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|   671k|{
 8994|   671k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   671k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   671k|{
 8895|   671k|#define SCN_VISIT(Type)                                                \
 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   671k|    }                                                                  \
 8899|   671k|    else {                                                             \
 8900|   671k|        return vis(monostate_val);                                     \
 8901|   671k|    }
 8902|       |
 8903|   671k|    monostate monostate_val{};
 8904|       |
 8905|   671k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 671k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 671k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 671k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 671k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 671k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 671k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 671k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 671k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 671k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 671k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 671k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 671k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 671k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 671k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 671k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|   208k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 208k, False: 463k]
  ------------------
 8937|   208k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   208k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   208k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   208k|    }                                                                  \
  |  | 8899|   208k|    else {                                                             \
  |  | 8900|   208k|        return vis(monostate_val);                                     \
  |  | 8901|   208k|    }
  ------------------
 8938|   438k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 230k, False: 441k]
  ------------------
 8939|   438k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   438k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   438k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   438k|    }                                                                  \
  |  | 8899|   438k|    else {                                                             \
  |  | 8900|   438k|        return vis(monostate_val);                                     \
  |  | 8901|   438k|    }
  ------------------
 8940|   671k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 233k, False: 438k]
  ------------------
 8941|   671k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8942|   671k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 671k]
  ------------------
 8943|   671k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8944|   671k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 671k]
  ------------------
 8945|   671k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8946|   671k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 671k]
  ------------------
 8947|   671k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8948|   671k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 671k]
  ------------------
 8949|   671k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8950|   671k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 671k]
  ------------------
 8951|   671k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8952|   671k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 671k]
  ------------------
 8953|   671k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8954|       |
 8955|   671k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 671k]
  ------------------
 8956|   671k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   671k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   671k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 671k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 671k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   671k|            SCN_CLANG_POP
 8973|   671k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 8993|   247k|{
 8994|   247k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   247k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   247k|{
 8895|   247k|#define SCN_VISIT(Type)                                                \
 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   247k|    }                                                                  \
 8899|   247k|    else {                                                             \
 8900|   247k|        return vis(monostate_val);                                     \
 8901|   247k|    }
 8902|       |
 8903|   247k|    monostate monostate_val{};
 8904|       |
 8905|   247k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 247k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 247k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 247k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 247k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 247k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 247k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 247k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 247k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 247k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 247k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 247k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 247k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 247k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 247k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 247k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|  70.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 70.6k, False: 176k]
  ------------------
 8937|  70.6k|            SCN_VISIT(float);
  ------------------
  |  | 8896|  70.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  70.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  70.6k|    }                                                                  \
  |  | 8899|  70.6k|    else {                                                             \
  |  | 8900|  70.6k|        return vis(monostate_val);                                     \
  |  | 8901|  70.6k|    }
  ------------------
 8938|   157k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 87.0k, False: 160k]
  ------------------
 8939|   157k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   157k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   157k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   157k|    }                                                                  \
  |  | 8899|   157k|    else {                                                             \
  |  | 8900|   157k|        return vis(monostate_val);                                     \
  |  | 8901|   157k|    }
  ------------------
 8940|   247k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 89.7k, False: 157k]
  ------------------
 8941|   247k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8942|   247k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 247k]
  ------------------
 8943|   247k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8944|   247k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 247k]
  ------------------
 8945|   247k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8946|   247k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 247k]
  ------------------
 8947|   247k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8948|   247k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 247k]
  ------------------
 8949|   247k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8950|   247k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 247k]
  ------------------
 8951|   247k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8952|   247k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 247k]
  ------------------
 8953|   247k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   247k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   247k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   247k|    }                                                                  \
  |  | 8899|   247k|    else {                                                             \
  |  | 8900|   247k|        return vis(monostate_val);                                     \
  |  | 8901|   247k|    }
  ------------------
 8954|       |
 8955|   247k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 247k]
  ------------------
 8956|   247k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   247k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   247k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 247k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 247k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   247k|            SCN_CLANG_POP
 8973|   247k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|   671k|{
 7487|   671k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|   671k|    handler.check_args_exhausted();
 7489|   671k|    return handler.get_error();
 7490|   671k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|   671k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|   671k|    auto begin = format.data();
 7455|   671k|    auto it = begin;
 7456|   671k|    const auto end = format.data() + format.size();
 7457|       |
 7458|  1.14M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 671k, False: 469k]
  ------------------
 7459|   671k|        const auto ch = *it++;
 7460|   671k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 671k, False: 0]
  ------------------
 7461|   671k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|   671k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|   671k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 202k, False: 469k]
  ------------------
 7465|   202k|                return;
 7466|   202k|            }
 7467|   671k|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|   671k|    }
 7478|       |
 7479|   469k|    handler.on_literal_text(begin, end);
 7480|   469k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8664|   469k|    {
 8665|   469k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   469k|    static_cast<    \
  |  |  935|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8666|   469k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7383|   671k|{
 7384|   671k|    struct id_adapter {
 7385|   671k|        constexpr void operator()()
 7386|   671k|        {
 7387|   671k|            arg_id = handler.on_arg_id();
 7388|   671k|        }
 7389|   671k|        constexpr void operator()(std::size_t id)
 7390|   671k|        {
 7391|   671k|            arg_id = handler.on_arg_id(id);
 7392|   671k|        }
 7393|       |
 7394|   671k|        constexpr void on_error(const char* msg)
 7395|   671k|        {
 7396|   671k|            SCN_UNLIKELY_ATTR
 7397|   671k|            handler.on_error(msg);
 7398|   671k|        }
 7399|       |
 7400|   671k|        Handler& handler;
 7401|   671k|        std::size_t arg_id;
 7402|   671k|    };
 7403|       |
 7404|   671k|    ++begin;
 7405|   671k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|   671k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 671k]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|   671k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 671k]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|   671k|    else {
 7417|   671k|        auto adapter = id_adapter{handler, 0};
 7418|   671k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|   671k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|   671k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 671k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|   671k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 671k, False: 0]
  ------------------
 7429|   671k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|   671k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|   671k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  |  Branch (865:45): [True: 0, False: 671k]
  |  |  |  Branch (865:45): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 7435|      0|                handler.on_error("Unknown format specifier");
 7436|      0|                return begin;
 7437|      0|            }
 7438|   671k|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|   671k|    }
 7445|   671k|    return begin + 1;
 7446|   671k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|   671k|{
 6885|   671k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|   671k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 671k, False: 0]
  |  Branch (6886:26): [True: 0, False: 671k]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|   671k|    handler();
 6891|   671k|    return begin;
 6892|   671k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|   671k|        {
 7387|   671k|            arg_id = handler.on_arg_id();
 7388|   671k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7563|   671k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|   671k|    {
 7565|   671k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|   671k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7299|   671k|{
 7300|   671k|    auto do_presentation = [&]() -> const CharT* {
 7301|   671k|        if (*begin == CharT{'['}) {
 7302|   671k|            auto set = parse_presentation_set(begin, end, handler);
 7303|   671k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|   671k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|   671k|                return begin;
 7308|   671k|            }
 7309|   671k|            handler.on_character_set_string(set);
 7310|   671k|            return begin;
 7311|   671k|        }
 7312|   671k|        if (*begin == CharT{'/'}) {
 7313|   671k|            return parse_presentation_regex(begin, end, handler);
 7314|   671k|        }
 7315|   671k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   671k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|   671k|            handler.on_error("Invalid type specifier in format string");
 7318|   671k|            return begin;
 7319|   671k|        }
 7320|   671k|        handler.on_type(type);
 7321|   671k|        return begin;
 7322|   671k|    };
 7323|       |
 7324|   671k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 671k, False: 0]
  |  Branch (7324:28): [True: 671k, False: 0]
  ------------------
 7325|   671k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 671k, False: 0]
  |  Branch (7325:36): [True: 506k, False: 164k]
  ------------------
 7326|   506k|        return do_presentation();
 7327|   506k|    }
 7328|       |
 7329|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   164k|    begin = parse_align(begin, end, handler);
 7335|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   164k|    begin = parse_width(begin, end, handler);
 7341|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   164k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 164k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   164k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 164k, False: 0]
  ------------------
 7360|   164k|        handler.on_localized();
 7361|   164k|        ++begin;
 7362|   164k|    }
 7363|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   164k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 164k, False: 0]
  |  Branch (7368:25): [True: 0, False: 164k]
  ------------------
 7369|      0|        do_presentation();
 7370|      0|    }
 7371|   164k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   164k|    return begin;
 7377|   164k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7300|   506k|    auto do_presentation = [&]() -> const CharT* {
 7301|   506k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 506k]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|   506k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 506k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   506k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   506k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 506k]
  |  |  ------------------
  ------------------
 7317|      0|            handler.on_error("Invalid type specifier in format string");
 7318|      0|            return begin;
 7319|      0|        }
 7320|   506k|        handler.on_type(type);
 7321|   506k|        return begin;
 7322|   506k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 6973|   164k|{
 6974|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   164k|    auto check_align = [](wchar_t ch) {
 6977|   164k|        switch (ch) {
 6978|   164k|            case L'<':
 6979|   164k|                return align_type::left;
 6980|   164k|            case L'>':
 6981|   164k|                return align_type::right;
 6982|   164k|            case L'^':
 6983|   164k|                return align_type::center;
 6984|   164k|            default:
 6985|   164k|                return align_type::none;
 6986|   164k|        }
 6987|   164k|    };
 6988|       |
 6989|   164k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   164k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  |  Branch (865:45): [True: 0, False: 164k]
  |  |  |  Branch (865:45): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6991|   164k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   164k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   164k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   164k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   164k|    const auto begin_before_fill = begin;
 7001|   164k|    begin += potential_fill_len;
 7002|       |
 7003|   164k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 164k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   164k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   164k|    const auto begin_after_fill = begin;
 7009|   164k|    ++begin;
 7010|       |
 7011|   164k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 164k, False: 0]
  ------------------
 7012|   164k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   164k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 164k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   164k|    }
 7020|       |
 7021|   164k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 164k, False: 0]
  ------------------
 7022|   164k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 164k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   164k|        return begin_before_fill;
 7027|   164k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   164k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6976|   329k|    auto check_align = [](wchar_t ch) {
 6977|   329k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 329k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 329k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 329k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   329k|            default:
  ------------------
  |  Branch (6984:13): [True: 329k, False: 0]
  ------------------
 6985|   329k|                return align_type::none;
 6986|   329k|        }
 6987|   329k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7038|   164k|{
 7039|   164k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   164k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 164k, False: 0]
  |  Branch (7041:33): [True: 0, False: 164k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   164k|    return begin;
 7052|   164k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7569|   164k|    {
 7570|   164k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|   164k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 164k, False: 0]
  ------------------
 7572|   164k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 164k, False: 0]
  ------------------
 7573|   164k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 164k]
  ------------------
 7574|   164k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|   164k|        Handler::on_localized();
 7582|   164k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 8993|   671k|{
 8994|   671k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   671k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   671k|{
 8895|   671k|#define SCN_VISIT(Type)                                                \
 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   671k|    }                                                                  \
 8899|   671k|    else {                                                             \
 8900|   671k|        return vis(monostate_val);                                     \
 8901|   671k|    }
 8902|       |
 8903|   671k|    monostate monostate_val{};
 8904|       |
 8905|   671k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 671k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 671k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 671k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 671k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 671k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 671k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 671k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 671k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 671k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 671k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 671k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 671k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 671k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 671k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 671k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|   207k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 207k, False: 463k]
  ------------------
 8937|   207k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   207k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   207k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   207k|    }                                                                  \
  |  | 8899|   207k|    else {                                                             \
  |  | 8900|   207k|        return vis(monostate_val);                                     \
  |  | 8901|   207k|    }
  ------------------
 8938|   437k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 229k, False: 441k]
  ------------------
 8939|   437k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   437k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   437k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   437k|    }                                                                  \
  |  | 8899|   437k|    else {                                                             \
  |  | 8900|   437k|        return vis(monostate_val);                                     \
  |  | 8901|   437k|    }
  ------------------
 8940|   671k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 233k, False: 437k]
  ------------------
 8941|   671k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8942|   671k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 671k]
  ------------------
 8943|   671k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8944|   671k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 671k]
  ------------------
 8945|   671k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8946|   671k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 671k]
  ------------------
 8947|   671k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8948|   671k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 671k]
  ------------------
 8949|   671k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8950|   671k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 671k]
  ------------------
 8951|   671k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8952|   671k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 671k]
  ------------------
 8953|   671k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   671k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   671k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   671k|    }                                                                  \
  |  | 8899|   671k|    else {                                                             \
  |  | 8900|   671k|        return vis(monostate_val);                                     \
  |  | 8901|   671k|    }
  ------------------
 8954|       |
 8955|   671k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 671k]
  ------------------
 8956|   671k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   671k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   671k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 671k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 671k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   671k|            SCN_CLANG_POP
 8973|   671k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|   263k|    {
 4351|   263k|        sync(0);
 4352|   263k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5824|   332k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5824|   165k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   127k|{
   89|   127k|    auto result = make_scan_result<Source, Args...>();
   90|   127k|    fill_scan_result(result,
   91|   127k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   127k|                           make_scan_args<wscan_context>(result->values())));
   93|   127k|    return result;
   94|   127k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   418k|{
   44|   418k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   418k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|   127k|{
  131|   127k|    auto result = make_scan_result<Source, Args...>();
  132|   127k|    fill_scan_result(result,
  133|   127k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   127k|                           make_scan_args<wscan_context>(result->values())));
  135|   127k|    return result;
  136|   127k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   418k|{
   60|   418k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   418k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  23.5k|{
  171|  23.5k|    auto result = make_scan_result<Source, T>();
  172|  23.5k|    fill_scan_result(
  173|  23.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  23.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  23.5k|    return result;
  176|  23.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  82.5k|{
   72|  82.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  82.5k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   144k|{
   89|   144k|    auto result = make_scan_result<Source, Args...>();
   90|   144k|    fill_scan_result(result,
   91|   144k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   144k|                           make_scan_args<wscan_context>(result->values())));
   93|   144k|    return result;
   94|   144k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|   144k|{
  131|   144k|    auto result = make_scan_result<Source, Args...>();
  132|   144k|    fill_scan_result(result,
  133|   144k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   144k|                           make_scan_args<wscan_context>(result->values())));
  135|   144k|    return result;
  136|   144k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  29.0k|{
  171|  29.0k|    auto result = make_scan_result<Source, T>();
  172|  29.0k|    fill_scan_result(
  173|  29.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  29.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  29.0k|                            detail::make_arg<wscan_context>(result->value())));
  175|  29.0k|    return result;
  176|  29.0k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   146k|{
   89|   146k|    auto result = make_scan_result<Source, Args...>();
   90|   146k|    fill_scan_result(result,
   91|   146k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   146k|                           make_scan_args<wscan_context>(result->values())));
   93|   146k|    return result;
   94|   146k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|   146k|{
  131|   146k|    auto result = make_scan_result<Source, Args...>();
  132|   146k|    fill_scan_result(result,
  133|   146k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   146k|                           make_scan_args<wscan_context>(result->values())));
  135|   146k|    return result;
  136|   146k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  29.9k|{
  171|  29.9k|    auto result = make_scan_result<Source, T>();
  172|  29.9k|    fill_scan_result(
  173|  29.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  29.9k|                            detail::make_arg<wscan_context>(result->value())));
  175|  29.9k|    return result;
  176|  29.9k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   127k|{
   89|   127k|    auto result = make_scan_result<Source, Args...>();
   90|   127k|    fill_scan_result(result,
   91|   127k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   127k|                           make_scan_args<wscan_context>(result->values())));
   93|   127k|    return result;
   94|   127k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   418k|{
   44|   418k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   418k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|   127k|{
  131|   127k|    auto result = make_scan_result<Source, Args...>();
  132|   127k|    fill_scan_result(result,
  133|   127k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   127k|                           make_scan_args<wscan_context>(result->values())));
  135|   127k|    return result;
  136|   127k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   418k|{
   60|   418k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   418k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  23.5k|{
  171|  23.5k|    auto result = make_scan_result<Source, T>();
  172|  23.5k|    fill_scan_result(
  173|  23.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  23.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  23.5k|    return result;
  176|  23.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  82.4k|{
   72|  82.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  82.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  82.4k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   143k|{
   89|   143k|    auto result = make_scan_result<Source, Args...>();
   90|   143k|    fill_scan_result(result,
   91|   143k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   143k|                           make_scan_args<wscan_context>(result->values())));
   93|   143k|    return result;
   94|   143k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|   143k|{
  131|   143k|    auto result = make_scan_result<Source, Args...>();
  132|   143k|    fill_scan_result(result,
  133|   143k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   143k|                           make_scan_args<wscan_context>(result->values())));
  135|   143k|    return result;
  136|   143k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  29.0k|{
  171|  29.0k|    auto result = make_scan_result<Source, T>();
  172|  29.0k|    fill_scan_result(
  173|  29.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  29.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  29.0k|                            detail::make_arg<wscan_context>(result->value())));
  175|  29.0k|    return result;
  176|  29.0k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   146k|{
   89|   146k|    auto result = make_scan_result<Source, Args...>();
   90|   146k|    fill_scan_result(result,
   91|   146k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   146k|                           make_scan_args<wscan_context>(result->values())));
   93|   146k|    return result;
   94|   146k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|   146k|{
  131|   146k|    auto result = make_scan_result<Source, Args...>();
  132|   146k|    fill_scan_result(result,
  133|   146k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   146k|                           make_scan_args<wscan_context>(result->values())));
  135|   146k|    return result;
  136|   146k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  29.9k|{
  171|  29.9k|    auto result = make_scan_result<Source, T>();
  172|  29.9k|    fill_scan_result(
  173|  29.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  29.9k|                            detail::make_arg<wscan_context>(result->value())));
  175|  29.9k|    return result;
  176|  29.9k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  663|  2.42M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  664|  2.42M|{
  665|  2.42M|    static_assert(std::is_same_v<Locale, std::locale>);
  666|  2.42M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  670|  1.02M|{
  671|  1.02M|    static_assert(std::is_same_v<Locale, std::locale>);
  672|  1.02M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (672:12): [True: 511k, False: 511k]
  ------------------
  673|  1.02M|                    : std::locale{};
  674|  1.02M|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1250|  1.06M|{
 1251|  1.06M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|  1.06M|                                  m_nan_payload_buffer, value);
 1253|  1.06M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.04M, False: 24.6k]
  |  |  ------------------
  ------------------
 1254|  1.04M|        value = this->setsign(value);
 1255|  1.04M|        return n;
 1256|  1.04M|    }
 1257|       |
 1258|  24.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 6.48k, False: 18.1k]
  ------------------
 1259|  24.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 1.52k, False: 4.95k]
  ------------------
 1260|  1.52k|        return detail::unexpected_scan_error(
 1261|  1.52k|            scan_error::value_negative_overflow, n.error().msg());
 1262|  1.52k|    }
 1263|  23.0k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 1.44k, False: 21.6k]
  ------------------
 1264|  23.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 70, False: 1.37k]
  ------------------
 1265|     70|        return detail::unexpected_scan_error(
 1266|     70|            scan_error::value_negative_underflow, n.error().msg());
 1267|     70|    }
 1268|  23.0k|    return n;
 1269|  23.0k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1250|   432k|{
 1251|   432k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|   432k|                                  m_nan_payload_buffer, value);
 1253|   432k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   432k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 382k, False: 50.2k]
  |  |  ------------------
  ------------------
 1254|   382k|        value = this->setsign(value);
 1255|   382k|        return n;
 1256|   382k|    }
 1257|       |
 1258|  50.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 4.28k, False: 45.9k]
  ------------------
 1259|  50.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 0, False: 4.28k]
  ------------------
 1260|      0|        return detail::unexpected_scan_error(
 1261|      0|            scan_error::value_negative_overflow, n.error().msg());
 1262|      0|    }
 1263|  50.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 1.61k, False: 48.6k]
  ------------------
 1264|  50.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 28, False: 1.59k]
  ------------------
 1265|     28|        return detail::unexpected_scan_error(
 1266|     28|            scan_error::value_negative_underflow, n.error().msg());
 1267|     28|    }
 1268|  50.2k|    return n;
 1269|  50.2k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1250|  1.11M|{
 1251|  1.11M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|  1.11M|                                  m_nan_payload_buffer, value);
 1253|  1.11M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  1.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.09M, False: 21.1k]
  |  |  ------------------
  ------------------
 1254|  1.09M|        value = this->setsign(value);
 1255|  1.09M|        return n;
 1256|  1.09M|    }
 1257|       |
 1258|  21.1k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 3.24k, False: 17.8k]
  ------------------
 1259|  21.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 778, False: 2.46k]
  ------------------
 1260|    778|        return detail::unexpected_scan_error(
 1261|    778|            scan_error::value_negative_overflow, n.error().msg());
 1262|    778|    }
 1263|  20.3k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 352, False: 19.9k]
  ------------------
 1264|  20.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 42, False: 310]
  ------------------
 1265|     42|        return detail::unexpected_scan_error(
 1266|     42|            scan_error::value_negative_underflow, n.error().msg());
 1267|     42|    }
 1268|  20.2k|    return n;
 1269|  20.3k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1250|   507k|{
 1251|   507k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|   507k|                                  m_nan_payload_buffer, value);
 1253|   507k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   507k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 458k, False: 48.1k]
  |  |  ------------------
  ------------------
 1254|   458k|        value = this->setsign(value);
 1255|   458k|        return n;
 1256|   458k|    }
 1257|       |
 1258|  48.1k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 2.36k, False: 45.7k]
  ------------------
 1259|  48.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 0, False: 2.36k]
  ------------------
 1260|      0|        return detail::unexpected_scan_error(
 1261|      0|            scan_error::value_negative_overflow, n.error().msg());
 1262|      0|    }
 1263|  48.1k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 370, False: 47.7k]
  ------------------
 1264|  48.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 0, False: 370]
  ------------------
 1265|      0|        return detail::unexpected_scan_error(
 1266|      0|            scan_error::value_negative_underflow, n.error().msg());
 1267|      0|    }
 1268|  48.1k|    return n;
 1269|  48.1k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1250|  1.12M|{
 1251|  1.12M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|  1.12M|                                  m_nan_payload_buffer, value);
 1253|  1.12M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.10M, False: 18.9k]
  |  |  ------------------
  ------------------
 1254|  1.10M|        value = this->setsign(value);
 1255|  1.10M|        return n;
 1256|  1.10M|    }
 1257|       |
 1258|  18.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 736, False: 18.1k]
  ------------------
 1259|  18.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 293, False: 443]
  ------------------
 1260|    293|        return detail::unexpected_scan_error(
 1261|    293|            scan_error::value_negative_overflow, n.error().msg());
 1262|    293|    }
 1263|  18.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 106, False: 18.5k]
  ------------------
 1264|  18.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 0, False: 106]
  ------------------
 1265|      0|        return detail::unexpected_scan_error(
 1266|      0|            scan_error::value_negative_underflow, n.error().msg());
 1267|      0|    }
 1268|  18.6k|    return n;
 1269|  18.6k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1250|   518k|{
 1251|   518k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1252|   518k|                                  m_nan_payload_buffer, value);
 1253|   518k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   518k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 471k, False: 46.4k]
  |  |  ------------------
  ------------------
 1254|   471k|        value = this->setsign(value);
 1255|   471k|        return n;
 1256|   471k|    }
 1257|       |
 1258|  46.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1258:9): [True: 298, False: 46.1k]
  ------------------
 1259|  46.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1259:9): [True: 0, False: 298]
  ------------------
 1260|      0|        return detail::unexpected_scan_error(
 1261|      0|            scan_error::value_negative_overflow, n.error().msg());
 1262|      0|    }
 1263|  46.4k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1263:9): [True: 78, False: 46.4k]
  ------------------
 1264|  46.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1264:9): [True: 0, False: 78]
  ------------------
 1265|      0|        return detail::unexpected_scan_error(
 1266|      0|            scan_error::value_negative_underflow, n.error().msg());
 1267|      0|    }
 1268|  46.4k|    return n;
 1269|  46.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2235|   729k|{
 2236|   729k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2237|   729k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2243|   856k|{
 2244|   856k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2245|   856k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   856k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 795k, False: 60.6k]
  |  |  ------------------
  ------------------
 2246|   795k|        source.sync(*n);
 2247|   795k|    }
 2248|  60.6k|    else {
 2249|  60.6k|        source.sync_all();
 2250|  60.6k|    }
 2251|   856k|    return n;
 2252|   856k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2259|   418k|{
 2260|   418k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2261|   418k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2267|   418k|{
 2268|   418k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2269|   418k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   418k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 296k, False: 121k]
  |  |  ------------------
  ------------------
 2270|   296k|        source.sync(*n);
 2271|   296k|    }
 2272|   121k|    else {
 2273|   121k|        source.sync_all();
 2274|   121k|    }
 2275|   418k|    return n;
 2276|   418k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  205|  1.47M|{
  206|  1.47M|    return find_classic_impl(
  207|  1.47M|        source, [](char ch) { return is_ascii_space(ch); },
  208|  1.47M|        [](char32_t cp) { return detail::is_cp_space(cp); });
  209|  1.47M|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  213|  3.49M|{
  214|  3.49M|    return find_classic_impl(
  215|  3.49M|        source, [](char ch) { return !is_ascii_space(ch); },
  216|  3.49M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  217|  3.49M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2192|   729k|{
 2193|   729k|    return vscan_internal(source, format, args);
 2194|   729k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2198|   856k|{
 2199|   856k|    auto n = vscan_internal(source, format, args);
 2200|   856k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   856k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 795k, False: 60.6k]
  |  |  ------------------
  ------------------
 2201|   795k|        source.sync(*n);
 2202|   795k|    }
 2203|  60.6k|    else {
 2204|  60.6k|        source.sync_all();
 2205|  60.6k|    }
 2206|   856k|    return n;
 2207|   856k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2212|   418k|{
 2213|   418k|    return vscan_internal(source, format, args);
 2214|   418k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2218|   418k|{
 2219|   418k|    auto n = vscan_internal(source, format, args);
 2220|   418k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   418k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 296k, False: 121k]
  |  |  ------------------
  ------------------
 2221|   296k|        source.sync(*n);
 2222|   296k|    }
 2223|   121k|    else {
 2224|   121k|        source.sync_all();
 2225|   121k|    }
 2226|   418k|    return n;
 2227|   418k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2302|   158k|{
 2303|   158k|    return vscan_value_internal(source, arg);
 2304|   158k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2307|   174k|{
 2308|   174k|    auto n = vscan_value_internal(source, arg);
 2309|   174k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   174k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 163k, False: 10.1k]
  |  |  ------------------
  ------------------
 2310|   163k|        source.sync(*n);
 2311|   163k|    }
 2312|  10.1k|    else {
 2313|  10.1k|        source.sync_all();
 2314|  10.1k|    }
 2315|   174k|    return n;
 2316|   174k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2321|  82.5k|{
 2322|  82.5k|    return vscan_value_internal(source, arg);
 2323|  82.5k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2327|  82.4k|{
 2328|  82.4k|    auto n = vscan_value_internal(source, arg);
 2329|  82.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  82.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 62.2k, False: 20.2k]
  |  |  ------------------
  ------------------
 2330|  62.2k|        source.sync(*n);
 2331|  62.2k|    }
 2332|  20.2k|    else {
 2333|  20.2k|        source.sync_all();
 2334|  20.2k|    }
 2335|  82.4k|    return n;
 2336|  82.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  1.47M|{
  130|  1.47M|    auto it = source.begin();
  131|       |
  132|  4.81M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 3.85M, False: 952k]
  ------------------
  133|  3.85M|        auto sv =
  134|  3.85M|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  3.85M|                .substr(0, 8);
  136|       |
  137|  3.85M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 3.77M, False: 87.2k]
  ------------------
  138|  3.77M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  3.77M|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  3.77M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 489k, False: 3.28M]
  ------------------
  141|   489k|                break;
  142|   489k|            }
  143|  3.28M|            continue;
  144|  3.77M|        }
  145|       |
  146|   296k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:28): [True: 244k, False: 51.9k]
  ------------------
  147|   244k|            auto tmp =
  148|   244k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   244k|            auto res = get_next_code_point(tmp);
  150|   244k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 35.3k, False: 208k]
  ------------------
  151|  35.3k|                return it;
  152|  35.3k|            }
  153|   208k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  154|   208k|            it = detail::make_string_view_iterator(source, res.iterator);
  155|   208k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   208k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   208k|        }
  157|  87.2k|    }
  158|       |
  159|  1.44M|    return detail::make_string_view_iterator(source, it);
  160|  1.47M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  5.99M|{
  117|  5.99M|    static_assert(sizeof(*source.data()) == 1);
  118|  5.99M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  5.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  5.99M|    uint64_t word{};
  120|  5.99M|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  5.99M|    return has_byte_greater(word, 127) != 0;
  123|  5.99M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  207|  23.0M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  208|   244k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  3.49M|{
  130|  3.49M|    auto it = source.begin();
  131|       |
  132|  3.82M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 2.13M, False: 1.69M]
  ------------------
  133|  2.13M|        auto sv =
  134|  2.13M|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  2.13M|                .substr(0, 8);
  136|       |
  137|  2.13M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 2.01M, False: 120k]
  ------------------
  138|  2.01M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  2.01M|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  2.01M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 1.69M, False: 318k]
  ------------------
  141|  1.69M|                break;
  142|  1.69M|            }
  143|   318k|            continue;
  144|  2.01M|        }
  145|       |
  146|   224k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:28): [True: 214k, False: 10.5k]
  ------------------
  147|   214k|            auto tmp =
  148|   214k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   214k|            auto res = get_next_code_point(tmp);
  150|   214k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 109k, False: 104k]
  ------------------
  151|   109k|                return it;
  152|   109k|            }
  153|   104k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  154|   104k|            it = detail::make_string_view_iterator(source, res.iterator);
  155|   104k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   104k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   104k|        }
  157|   120k|    }
  158|       |
  159|  3.38M|    return detail::make_string_view_iterator(source, it);
  160|  3.49M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  215|  3.16M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  216|   214k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|  1.06M|{
 1160|  1.06M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 5.86k, False: 1.06M]
  ------------------
 1161|  5.86k|        value = std::numeric_limits<T>::infinity();
 1162|  5.86k|        return 3;
 1163|  5.86k|    }
 1164|  1.06M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 5.94k, False: 1.05M]
  ------------------
 1165|  5.94k|        value = std::numeric_limits<T>::infinity();
 1166|  5.94k|        return 8;
 1167|  5.94k|    }
 1168|  1.05M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 39.9k, False: 1.01M]
  ------------------
 1169|  39.9k|        value = std::numeric_limits<T>::quiet_NaN();
 1170|  39.9k|        return 3;
 1171|  39.9k|    }
 1172|  1.01M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 2.33k, False: 1.01M]
  ------------------
 1173|  2.33k|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|  2.33k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  2.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|  2.33k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|  2.33k|    }
 1204|       |
 1205|  1.01M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|  1.01M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 220k, False: 792k]
  ------------------
 1207|   220k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.59k, False: 215k]
  |  |  ------------------
  ------------------
 1208|  4.59k|            return detail::unexpected_scan_error(
 1209|  4.59k|                scan_error::invalid_scanned_value,
 1210|  4.59k|                "Invalid floating-point digit");
 1211|  4.59k|        }
 1212|   220k|    }
 1213|  1.00M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 996k]
  |  |  ------------------
  ------------------
 1214|  12.0k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|  12.0k|                                             "Invalid floating-point digit");
 1216|  12.0k|    }
 1217|       |
 1218|   996k|#if !SCN_DISABLE_FAST_FLOAT
 1219|       |    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|       |        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|       |            return fast_float_fallback(data, value);
 1232|       |        }
 1233|       |    }
 1234|   996k|    else {
 1235|       |        // Default to fast_float
 1236|   996k|        return fast_float_impl<CharT, T>{data}(value);
 1237|   996k|    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|   996k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1095|   996k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1096|   996k|    {
 1097|   996k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  724|  3.60M|    {
  725|  3.60M|        return {kind, options};
  726|  3.60M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1100|   996k|    {
 1101|   996k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1101:13): [True: 215k, False: 781k]
  ------------------
 1102|   996k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1102:13): [True: 32.5k, False: 748k]
  ------------------
 1103|       |            // fast_float doesn't support hexfloats
 1104|   247k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1105|   247k|                                              value);
 1106|   247k|        }
 1107|       |
 1108|   748k|        const auto flags = get_flags();
 1109|   748k|        const auto view = get_view();
 1110|   748k|        const auto result = fast_float::from_chars(
 1111|   748k|            view.data(), view.data() + view.size(), value, flags);
 1112|       |
 1113|   748k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 748k]
  |  |  ------------------
  ------------------
 1114|      0|            return detail::unexpected_scan_error(
 1115|      0|                scan_error::invalid_scanned_value,
 1116|      0|                "fast_float: invalid_argument");
 1117|      0|        }
 1118|   748k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.68k, False: 741k]
  |  |  ------------------
  ------------------
 1119|       |            // may just be very large: fall back
 1120|  6.68k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1121|  6.68k|                                              value);
 1122|  6.68k|        }
 1123|       |
 1124|   741k|        return result.ptr - view.data();
 1125|   748k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1057|   254k|{
 1058|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1059|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1060|       |        return from_chars_impl<T>{data}(value);
 1061|       |    }
 1062|       |    else
 1063|       |#endif
 1064|   254k|    {
 1065|   254k|#if !SCN_DISABLE_STRTOD
 1066|   254k|        return strtod_impl<CharT, T>{data}(value);
 1067|       |#else
 1068|       |        return detail::unexpected_scan_error(
 1069|       |            scan_error::invalid_scanned_value,
 1070|       |            "fast_float failed, and fallbacks are disabled");
 1071|       |#endif
 1072|   254k|    }
 1073|   254k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  907|   254k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  908|   254k|    {
  909|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  738|   355k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclERf:
  912|   254k|    {
  913|   254k|        return this->parse(value, this->get_null_terminated_source(m_input),
  914|   254k|                           generic_strtod);
  915|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  744|   254k|    {
  745|   254k|        CharT* end{};
  746|   254k|        errno = 0;
  747|   254k|        value = strtod_cb(src, &end);
  748|   254k|        const auto saved_errno = errno;
  749|   254k|        auto chars_read = end - src;
  750|       |
  751|   254k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   254k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.92k, False: 246k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  7.92k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  7.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  7.92k|    }
  ------------------
  752|       |
  753|   246k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (753:13): [True: 214k, False: 32.3k]
  ------------------
  754|   246k|            chars_read >= 2) {
  ------------------
  |  Branch (754:13): [True: 214k, False: 0]
  ------------------
  755|   214k|            chars_read -= 2;
  756|   214k|        }
  757|       |
  758|   246k|        return chars_read;
  759|   254k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  787|   355k|    {
  788|   355k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (788:13): [True: 141k, False: 214k]
  |  Branch (788:37): [True: 0, False: 141k]
  ------------------
  789|      0|            SCN_UNLIKELY_ATTR
  790|      0|            return detail::unexpected_scan_error(
  791|      0|                scan_error::invalid_scanned_value,
  792|      0|                "strtod failed: No conversion");
  793|      0|        }
  794|       |
  795|   355k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (795:13): [True: 33.2k, False: 322k]
  ------------------
  796|   355k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (796:13): [True: 0, False: 33.2k]
  ------------------
  797|      0|            SCN_UNLIKELY_ATTR
  798|      0|            return detail::unexpected_scan_error(
  799|      0|                scan_error::invalid_scanned_value,
  800|      0|                "Hexfloats disallowed by format string");
  801|      0|        }
  802|       |
  803|   355k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (803:13): [True: 13.8k, False: 341k]
  |  Branch (803:34): [True: 3.06k, False: 10.7k]
  ------------------
  804|  3.06k|            SCN_UNLIKELY_ATTR
  805|  3.06k|            return detail::unexpected_scan_error(
  806|  3.06k|                scan_error::value_positive_underflow,
  807|  3.06k|                "strtod failed: underflow");
  808|  3.06k|        }
  809|       |
  810|   352k|        SCN_GCC_COMPAT_PUSH
  811|   352k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  812|       |
  813|   352k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (813:13): [True: 352k, False: 0]
  ------------------
  814|   352k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (814:13): [True: 352k, False: 0]
  ------------------
  815|   352k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (815:13): [True: 10.7k, False: 341k]
  ------------------
  816|  10.7k|            SCN_UNLIKELY_ATTR
  817|  10.7k|            return detail::unexpected_scan_error(
  818|  10.7k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  819|  10.7k|        }
  820|       |
  821|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  822|       |
  823|   341k|            return {};
  824|   352k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEf:
  699|   369k|{
  700|   369k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (700:12): [True: 144k, False: 225k]
  |  Branch (700:25): [True: 0, False: 225k]
  ------------------
  701|   369k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  764|   254k|    {
  765|   254k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (765:13): [True: 249k, False: 5.32k]
  ------------------
  766|       |            // TODO: call float_reader::read_source?
  767|   249k|            auto first_space = read_until_classic_space(input.view());
  768|   249k|            input.assign(
  769|   249k|                std::basic_string<CharT>{input.view().begin(), first_space});
  770|   249k|        }
  771|       |
  772|   254k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (772:13): [True: 215k, False: 39.1k]
  ------------------
  773|   215k|            if constexpr (std::is_same_v<CharT, char>) {
  774|   215k|                input.get_allocated_string().insert(0, "0x");
  775|       |            }
  776|       |            else {
  777|       |                input.get_allocated_string().insert(0, L"0x");
  778|       |            }
  779|   215k|        }
  780|       |
  781|   254k|        return input.get_allocated_string().c_str();
  782|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  919|   254k|    {
  920|   254k|        if constexpr (std::is_same_v<CharT, char>) {
  921|   254k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  922|       |        }
  923|       |        else {
  924|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  925|       |        }
  926|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  827|   254k|    {
  828|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  829|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  830|       |        if constexpr (std::is_same_v<T, float>) {
  831|       |            return ::strtof_l(str, str_end, cloc);
  832|       |        }
  833|       |        else if constexpr (std::is_same_v<T, double>) {
  834|       |            return ::strtod_l(str, str_end, cloc);
  835|       |        }
  836|       |        else if constexpr (std::is_same_v<T, long double>) {
  837|       |            return ::strtold_l(str, str_end, cloc);
  838|       |        }
  839|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  840|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  841|       |        if constexpr (std::is_same_v<T, float>) {
  842|       |            return ::_strtof_l(str, str_end, cloc);
  843|       |        }
  844|       |        else if constexpr (std::is_same_v<T, double>) {
  845|       |            return ::_strtod_l(str, str_end, cloc);
  846|       |        }
  847|       |        else if constexpr (std::is_same_v<T, long double>) {
  848|       |            return ::_strtold_l(str, str_end, cloc);
  849|       |        }
  850|       |#else
  851|   254k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  852|   254k|        if constexpr (std::is_same_v<T, float>) {
  853|   254k|            return std::strtof(str, str_end);
  854|       |        }
  855|       |        else if constexpr (std::is_same_v<T, double>) {
  856|       |            return std::strtod(str, str_end);
  857|       |        }
  858|       |        else if constexpr (std::is_same_v<T, long double>) {
  859|       |            return std::strtold(str, str_end);
  860|       |        }
  861|   254k|#endif
  862|   254k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1079|  2.19M|    {
 1080|  2.19M|        unsigned format_flags{};
 1081|  2.19M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1081:13): [True: 2.17M, False: 14.3k]
  ------------------
 1082|  2.17M|            format_flags |= fast_float::fixed;
 1083|  2.17M|        }
 1084|  2.19M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1084:13): [True: 1.85M, False: 334k]
  ------------------
 1085|  1.85M|            format_flags |= fast_float::scientific;
 1086|  1.85M|        }
 1087|       |
 1088|  2.19M|        return static_cast<fast_float::chars_format>(format_flags);
 1089|  2.19M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1129|   748k|    {
 1130|   748k|        if constexpr (sizeof(CharT) == 1) {
 1131|   748k|            return m_input.view();
 1132|       |        }
 1133|       |        else if constexpr (sizeof(CharT) == 2) {
 1134|       |            return std::u16string_view{
 1135|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1136|       |                m_input.view().size()};
 1137|       |        }
 1138|       |        else {
 1139|       |            return std::u32string_view{
 1140|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1141|       |                m_input.view().size()};
 1142|       |        }
 1143|   748k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|   432k|{
 1160|   432k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 0, False: 432k]
  ------------------
 1161|      0|        value = std::numeric_limits<T>::infinity();
 1162|      0|        return 3;
 1163|      0|    }
 1164|   432k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 0, False: 432k]
  ------------------
 1165|      0|        value = std::numeric_limits<T>::infinity();
 1166|      0|        return 8;
 1167|      0|    }
 1168|   432k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 0, False: 432k]
  ------------------
 1169|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1170|      0|        return 3;
 1171|      0|    }
 1172|   432k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 0, False: 432k]
  ------------------
 1173|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|      0|    }
 1204|       |
 1205|   432k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|   432k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 107k, False: 324k]
  ------------------
 1207|   107k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 94.5k]
  |  |  ------------------
  ------------------
 1208|  13.0k|            return detail::unexpected_scan_error(
 1209|  13.0k|                scan_error::invalid_scanned_value,
 1210|  13.0k|                "Invalid floating-point digit");
 1211|  13.0k|        }
 1212|   107k|    }
 1213|   419k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.2k, False: 387k]
  |  |  ------------------
  ------------------
 1214|  31.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|  31.2k|                                             "Invalid floating-point digit");
 1216|  31.2k|    }
 1217|       |
 1218|   387k|#if !SCN_DISABLE_FAST_FLOAT
 1219|       |    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|       |        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|       |            return fast_float_fallback(data, value);
 1232|       |        }
 1233|       |    }
 1234|   387k|    else {
 1235|       |        // Default to fast_float
 1236|   387k|        return fast_float_impl<CharT, T>{data}(value);
 1237|   387k|    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|   387k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1095|   387k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1096|   387k|    {
 1097|   387k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  724|  1.52M|    {
  725|  1.52M|        return {kind, options};
  726|  1.52M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1100|   387k|    {
 1101|   387k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1101:13): [True: 94.5k, False: 293k]
  ------------------
 1102|   387k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1102:13): [True: 756, False: 292k]
  ------------------
 1103|       |            // fast_float doesn't support hexfloats
 1104|  95.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1105|  95.2k|                                              value);
 1106|  95.2k|        }
 1107|       |
 1108|   292k|        const auto flags = get_flags();
 1109|   292k|        const auto view = get_view();
 1110|   292k|        const auto result = fast_float::from_chars(
 1111|   292k|            view.data(), view.data() + view.size(), value, flags);
 1112|       |
 1113|   292k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 1114|      0|            return detail::unexpected_scan_error(
 1115|      0|                scan_error::invalid_scanned_value,
 1116|      0|                "fast_float: invalid_argument");
 1117|      0|        }
 1118|   292k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.81k, False: 286k]
  |  |  ------------------
  ------------------
 1119|       |            // may just be very large: fall back
 1120|  5.81k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1121|  5.81k|                                              value);
 1122|  5.81k|        }
 1123|       |
 1124|   286k|        return result.ptr - view.data();
 1125|   292k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1057|   101k|{
 1058|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1059|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1060|       |        return from_chars_impl<T>{data}(value);
 1061|       |    }
 1062|       |    else
 1063|       |#endif
 1064|   101k|    {
 1065|   101k|#if !SCN_DISABLE_STRTOD
 1066|   101k|        return strtod_impl<CharT, T>{data}(value);
 1067|       |#else
 1068|       |        return detail::unexpected_scan_error(
 1069|       |            scan_error::invalid_scanned_value,
 1070|       |            "fast_float failed, and fallbacks are disabled");
 1071|       |#endif
 1072|   101k|    }
 1073|   101k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  907|   101k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  908|   101k|    {
  909|   101k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclERf:
  912|   101k|    {
  913|   101k|        return this->parse(value, this->get_null_terminated_source(m_input),
  914|   101k|                           generic_strtod);
  915|   101k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  744|   101k|    {
  745|   101k|        CharT* end{};
  746|   101k|        errno = 0;
  747|   101k|        value = strtod_cb(src, &end);
  748|   101k|        const auto saved_errno = errno;
  749|   101k|        auto chars_read = end - src;
  750|       |
  751|   101k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   101k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.90k, False: 95.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.90k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.90k|    }
  ------------------
  752|       |
  753|  95.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (753:13): [True: 94.4k, False: 756]
  ------------------
  754|  95.1k|            chars_read >= 2) {
  ------------------
  |  Branch (754:13): [True: 94.4k, False: 0]
  ------------------
  755|  94.4k|            chars_read -= 2;
  756|  94.4k|        }
  757|       |
  758|  95.1k|        return chars_read;
  759|   101k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  764|   101k|    {
  765|   101k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (765:13): [True: 97.7k, False: 3.36k]
  ------------------
  766|       |            // TODO: call float_reader::read_source?
  767|  97.7k|            auto first_space = read_until_classic_space(input.view());
  768|  97.7k|            input.assign(
  769|  97.7k|                std::basic_string<CharT>{input.view().begin(), first_space});
  770|  97.7k|        }
  771|       |
  772|   101k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (772:13): [True: 94.5k, False: 6.57k]
  ------------------
  773|       |            if constexpr (std::is_same_v<CharT, char>) {
  774|       |                input.get_allocated_string().insert(0, "0x");
  775|       |            }
  776|  94.5k|            else {
  777|  94.5k|                input.get_allocated_string().insert(0, L"0x");
  778|  94.5k|            }
  779|  94.5k|        }
  780|       |
  781|   101k|        return input.get_allocated_string().c_str();
  782|   101k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  919|   101k|    {
  920|       |        if constexpr (std::is_same_v<CharT, char>) {
  921|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  922|       |        }
  923|   101k|        else {
  924|   101k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  925|   101k|        }
  926|   101k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  865|   101k|    {
  866|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  867|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  868|       |        if constexpr (std::is_same_v<T, float>) {
  869|       |            return ::wcstof_l(str, str_end, cloc);
  870|       |        }
  871|       |        else if constexpr (std::is_same_v<T, double>) {
  872|       |            return ::wcstod_l(str, str_end, cloc);
  873|       |        }
  874|       |        else if constexpr (std::is_same_v<T, long double>) {
  875|       |            return ::wcstold_l(str, str_end, cloc);
  876|       |        }
  877|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  878|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  879|       |        if constexpr (std::is_same_v<T, float>) {
  880|       |            return ::_wcstof_l(str, str_end, cloc);
  881|       |        }
  882|       |        else if constexpr (std::is_same_v<T, double>) {
  883|       |            return ::_wcstod_l(str, str_end, cloc);
  884|       |        }
  885|       |        else if constexpr (std::is_same_v<T, long double>) {
  886|       |            return ::_wcstold_l(str, str_end, cloc);
  887|       |        }
  888|       |#else
  889|   101k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  890|   101k|        if constexpr (std::is_same_v<T, float>) {
  891|   101k|            return std::wcstof(str, str_end);
  892|       |        }
  893|       |        else if constexpr (std::is_same_v<T, double>) {
  894|       |            return std::wcstod(str, str_end);
  895|       |        }
  896|       |        else if constexpr (std::is_same_v<T, long double>) {
  897|       |            return std::wcstold(str, str_end);
  898|       |        }
  899|   101k|#endif
  900|   101k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1129|   292k|    {
 1130|       |        if constexpr (sizeof(CharT) == 1) {
 1131|       |            return m_input.view();
 1132|       |        }
 1133|       |        else if constexpr (sizeof(CharT) == 2) {
 1134|       |            return std::u16string_view{
 1135|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1136|       |                m_input.view().size()};
 1137|       |        }
 1138|   292k|        else {
 1139|   292k|            return std::u32string_view{
 1140|   292k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1141|   292k|                m_input.view().size()};
 1142|   292k|        }
 1143|   292k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|  1.11M|{
 1160|  1.11M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 6.53k, False: 1.10M]
  ------------------
 1161|  6.53k|        value = std::numeric_limits<T>::infinity();
 1162|  6.53k|        return 3;
 1163|  6.53k|    }
 1164|  1.10M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 6.40k, False: 1.10M]
  ------------------
 1165|  6.40k|        value = std::numeric_limits<T>::infinity();
 1166|  6.40k|        return 8;
 1167|  6.40k|    }
 1168|  1.10M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 41.1k, False: 1.05M]
  ------------------
 1169|  41.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1170|  41.1k|        return 3;
 1171|  41.1k|    }
 1172|  1.05M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 2.60k, False: 1.05M]
  ------------------
 1173|  2.60k|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|  2.60k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  2.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|  2.60k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|  2.60k|    }
 1204|       |
 1205|  1.05M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|  1.05M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 226k, False: 830k]
  ------------------
 1207|   226k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.74k, False: 221k]
  |  |  ------------------
  ------------------
 1208|  4.74k|            return detail::unexpected_scan_error(
 1209|  4.74k|                scan_error::invalid_scanned_value,
 1210|  4.74k|                "Invalid floating-point digit");
 1211|  4.74k|        }
 1212|   226k|    }
 1213|  1.05M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.7k, False: 1.03M]
  |  |  ------------------
  ------------------
 1214|  12.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|  12.7k|                                             "Invalid floating-point digit");
 1216|  12.7k|    }
 1217|       |
 1218|  1.03M|#if !SCN_DISABLE_FAST_FLOAT
 1219|       |    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|       |        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|       |            return fast_float_fallback(data, value);
 1232|       |        }
 1233|       |    }
 1234|  1.03M|    else {
 1235|       |        // Default to fast_float
 1236|  1.03M|        return fast_float_impl<CharT, T>{data}(value);
 1237|  1.03M|    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|  1.03M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1095|  1.03M|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1096|  1.03M|    {
 1097|  1.03M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1100|  1.03M|    {
 1101|  1.03M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1101:13): [True: 221k, False: 818k]
  ------------------
 1102|  1.03M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1102:13): [True: 35.0k, False: 783k]
  ------------------
 1103|       |            // fast_float doesn't support hexfloats
 1104|   256k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1105|   256k|                                              value);
 1106|   256k|        }
 1107|       |
 1108|   783k|        const auto flags = get_flags();
 1109|   783k|        const auto view = get_view();
 1110|   783k|        const auto result = fast_float::from_chars(
 1111|   783k|            view.data(), view.data() + view.size(), value, flags);
 1112|       |
 1113|   783k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   783k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 783k]
  |  |  ------------------
  ------------------
 1114|      0|            return detail::unexpected_scan_error(
 1115|      0|                scan_error::invalid_scanned_value,
 1116|      0|                "fast_float: invalid_argument");
 1117|      0|        }
 1118|   783k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   783k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.05k, False: 780k]
  |  |  ------------------
  ------------------
 1119|       |            // may just be very large: fall back
 1120|  3.05k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1121|  3.05k|                                              value);
 1122|  3.05k|        }
 1123|       |
 1124|   780k|        return result.ptr - view.data();
 1125|   783k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1057|   259k|{
 1058|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1059|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1060|       |        return from_chars_impl<T>{data}(value);
 1061|       |    }
 1062|       |    else
 1063|       |#endif
 1064|   259k|    {
 1065|   259k|#if !SCN_DISABLE_STRTOD
 1066|   259k|        return strtod_impl<CharT, T>{data}(value);
 1067|       |#else
 1068|       |        return detail::unexpected_scan_error(
 1069|       |            scan_error::invalid_scanned_value,
 1070|       |            "fast_float failed, and fallbacks are disabled");
 1071|       |#endif
 1072|   259k|    }
 1073|   259k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  907|   259k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  908|   259k|    {
  909|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  738|   357k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclERd:
  912|   259k|    {
  913|   259k|        return this->parse(value, this->get_null_terminated_source(m_input),
  914|   259k|                           generic_strtod);
  915|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  744|   259k|    {
  745|   259k|        CharT* end{};
  746|   259k|        errno = 0;
  747|   259k|        value = strtod_cb(src, &end);
  748|   259k|        const auto saved_errno = errno;
  749|   259k|        auto chars_read = end - src;
  750|       |
  751|   259k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   259k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.59k, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.59k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.59k|    }
  ------------------
  752|       |
  753|   255k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (753:13): [True: 221k, False: 34.9k]
  ------------------
  754|   255k|            chars_read >= 2) {
  ------------------
  |  Branch (754:13): [True: 221k, False: 0]
  ------------------
  755|   221k|            chars_read -= 2;
  756|   221k|        }
  757|       |
  758|   255k|        return chars_read;
  759|   259k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  787|   357k|    {
  788|   357k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (788:13): [True: 140k, False: 217k]
  |  Branch (788:37): [True: 0, False: 140k]
  ------------------
  789|      0|            SCN_UNLIKELY_ATTR
  790|      0|            return detail::unexpected_scan_error(
  791|      0|                scan_error::invalid_scanned_value,
  792|      0|                "strtod failed: No conversion");
  793|      0|        }
  794|       |
  795|   357k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (795:13): [True: 35.7k, False: 321k]
  ------------------
  796|   357k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (796:13): [True: 0, False: 35.7k]
  ------------------
  797|      0|            SCN_UNLIKELY_ATTR
  798|      0|            return detail::unexpected_scan_error(
  799|      0|                scan_error::invalid_scanned_value,
  800|      0|                "Hexfloats disallowed by format string");
  801|      0|        }
  802|       |
  803|   357k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (803:13): [True: 6.32k, False: 351k]
  |  Branch (803:34): [True: 722, False: 5.60k]
  ------------------
  804|    722|            SCN_UNLIKELY_ATTR
  805|    722|            return detail::unexpected_scan_error(
  806|    722|                scan_error::value_positive_underflow,
  807|    722|                "strtod failed: underflow");
  808|    722|        }
  809|       |
  810|   356k|        SCN_GCC_COMPAT_PUSH
  811|   356k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  812|       |
  813|   356k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (813:13): [True: 356k, False: 0]
  ------------------
  814|   356k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (814:13): [True: 356k, False: 0]
  ------------------
  815|   356k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (815:13): [True: 5.60k, False: 351k]
  ------------------
  816|  5.60k|            SCN_UNLIKELY_ATTR
  817|  5.60k|            return detail::unexpected_scan_error(
  818|  5.60k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  819|  5.60k|        }
  820|       |
  821|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  822|       |
  823|   351k|            return {};
  824|   356k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  703|   363k|{
  704|   363k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (704:12): [True: 140k, False: 223k]
  |  Branch (704:24): [True: 0, False: 223k]
  ------------------
  705|   363k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  764|   259k|    {
  765|   259k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (765:13): [True: 255k, False: 3.83k]
  ------------------
  766|       |            // TODO: call float_reader::read_source?
  767|   255k|            auto first_space = read_until_classic_space(input.view());
  768|   255k|            input.assign(
  769|   255k|                std::basic_string<CharT>{input.view().begin(), first_space});
  770|   255k|        }
  771|       |
  772|   259k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (772:13): [True: 221k, False: 38.0k]
  ------------------
  773|   221k|            if constexpr (std::is_same_v<CharT, char>) {
  774|   221k|                input.get_allocated_string().insert(0, "0x");
  775|       |            }
  776|       |            else {
  777|       |                input.get_allocated_string().insert(0, L"0x");
  778|       |            }
  779|   221k|        }
  780|       |
  781|   259k|        return input.get_allocated_string().c_str();
  782|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  919|   259k|    {
  920|   259k|        if constexpr (std::is_same_v<CharT, char>) {
  921|   259k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  922|       |        }
  923|       |        else {
  924|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  925|       |        }
  926|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  827|   259k|    {
  828|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  829|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  830|       |        if constexpr (std::is_same_v<T, float>) {
  831|       |            return ::strtof_l(str, str_end, cloc);
  832|       |        }
  833|       |        else if constexpr (std::is_same_v<T, double>) {
  834|       |            return ::strtod_l(str, str_end, cloc);
  835|       |        }
  836|       |        else if constexpr (std::is_same_v<T, long double>) {
  837|       |            return ::strtold_l(str, str_end, cloc);
  838|       |        }
  839|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  840|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  841|       |        if constexpr (std::is_same_v<T, float>) {
  842|       |            return ::_strtof_l(str, str_end, cloc);
  843|       |        }
  844|       |        else if constexpr (std::is_same_v<T, double>) {
  845|       |            return ::_strtod_l(str, str_end, cloc);
  846|       |        }
  847|       |        else if constexpr (std::is_same_v<T, long double>) {
  848|       |            return ::_strtold_l(str, str_end, cloc);
  849|       |        }
  850|       |#else
  851|   259k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  852|       |        if constexpr (std::is_same_v<T, float>) {
  853|       |            return std::strtof(str, str_end);
  854|       |        }
  855|   259k|        else if constexpr (std::is_same_v<T, double>) {
  856|   259k|            return std::strtod(str, str_end);
  857|       |        }
  858|       |        else if constexpr (std::is_same_v<T, long double>) {
  859|       |            return std::strtold(str, str_end);
  860|       |        }
  861|   259k|#endif
  862|   259k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1129|   783k|    {
 1130|   783k|        if constexpr (sizeof(CharT) == 1) {
 1131|   783k|            return m_input.view();
 1132|       |        }
 1133|       |        else if constexpr (sizeof(CharT) == 2) {
 1134|       |            return std::u16string_view{
 1135|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1136|       |                m_input.view().size()};
 1137|       |        }
 1138|       |        else {
 1139|       |            return std::u32string_view{
 1140|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1141|       |                m_input.view().size()};
 1142|       |        }
 1143|   783k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|   507k|{
 1160|   507k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 0, False: 507k]
  ------------------
 1161|      0|        value = std::numeric_limits<T>::infinity();
 1162|      0|        return 3;
 1163|      0|    }
 1164|   507k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 0, False: 507k]
  ------------------
 1165|      0|        value = std::numeric_limits<T>::infinity();
 1166|      0|        return 8;
 1167|      0|    }
 1168|   507k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 0, False: 507k]
  ------------------
 1169|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1170|      0|        return 3;
 1171|      0|    }
 1172|   507k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 0, False: 507k]
  ------------------
 1173|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|      0|    }
 1204|       |
 1205|   507k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|   507k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 107k, False: 399k]
  ------------------
 1207|   107k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 94.5k]
  |  |  ------------------
  ------------------
 1208|  13.0k|            return detail::unexpected_scan_error(
 1209|  13.0k|                scan_error::invalid_scanned_value,
 1210|  13.0k|                "Invalid floating-point digit");
 1211|  13.0k|        }
 1212|   107k|    }
 1213|   493k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.2k, False: 461k]
  |  |  ------------------
  ------------------
 1214|  32.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|  32.2k|                                             "Invalid floating-point digit");
 1216|  32.2k|    }
 1217|       |
 1218|   461k|#if !SCN_DISABLE_FAST_FLOAT
 1219|       |    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|       |        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|       |            return fast_float_fallback(data, value);
 1232|       |        }
 1233|       |    }
 1234|   461k|    else {
 1235|       |        // Default to fast_float
 1236|   461k|        return fast_float_impl<CharT, T>{data}(value);
 1237|   461k|    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|   461k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1095|   461k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1096|   461k|    {
 1097|   461k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1100|   461k|    {
 1101|   461k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1101:13): [True: 94.5k, False: 367k]
  ------------------
 1102|   461k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1102:13): [True: 756, False: 366k]
  ------------------
 1103|       |            // fast_float doesn't support hexfloats
 1104|  95.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1105|  95.2k|                                              value);
 1106|  95.2k|        }
 1107|       |
 1108|   366k|        const auto flags = get_flags();
 1109|   366k|        const auto view = get_view();
 1110|   366k|        const auto result = fast_float::from_chars(
 1111|   366k|            view.data(), view.data() + view.size(), value, flags);
 1112|       |
 1113|   366k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 1114|      0|            return detail::unexpected_scan_error(
 1115|      0|                scan_error::invalid_scanned_value,
 1116|      0|                "fast_float: invalid_argument");
 1117|      0|        }
 1118|   366k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.66k, False: 363k]
  |  |  ------------------
  ------------------
 1119|       |            // may just be very large: fall back
 1120|  2.66k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1121|  2.66k|                                              value);
 1122|  2.66k|        }
 1123|       |
 1124|   363k|        return result.ptr - view.data();
 1125|   366k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1057|  97.9k|{
 1058|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1059|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1060|       |        return from_chars_impl<T>{data}(value);
 1061|       |    }
 1062|       |    else
 1063|       |#endif
 1064|  97.9k|    {
 1065|  97.9k|#if !SCN_DISABLE_STRTOD
 1066|  97.9k|        return strtod_impl<CharT, T>{data}(value);
 1067|       |#else
 1068|       |        return detail::unexpected_scan_error(
 1069|       |            scan_error::invalid_scanned_value,
 1070|       |            "fast_float failed, and fallbacks are disabled");
 1071|       |#endif
 1072|  97.9k|    }
 1073|  97.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  907|  97.9k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  908|  97.9k|    {
  909|  97.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  912|  97.9k|    {
  913|  97.9k|        return this->parse(value, this->get_null_terminated_source(m_input),
  914|  97.9k|                           generic_strtod);
  915|  97.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  744|  97.9k|    {
  745|  97.9k|        CharT* end{};
  746|  97.9k|        errno = 0;
  747|  97.9k|        value = strtod_cb(src, &end);
  748|  97.9k|        const auto saved_errno = errno;
  749|  97.9k|        auto chars_read = end - src;
  750|       |
  751|  97.9k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  97.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  97.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.73k, False: 95.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.73k|    }
  ------------------
  752|       |
  753|  95.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (753:13): [True: 94.4k, False: 756]
  ------------------
  754|  95.2k|            chars_read >= 2) {
  ------------------
  |  Branch (754:13): [True: 94.4k, False: 0]
  ------------------
  755|  94.4k|            chars_read -= 2;
  756|  94.4k|        }
  757|       |
  758|  95.2k|        return chars_read;
  759|  97.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  764|  97.9k|    {
  765|  97.9k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (765:13): [True: 96.1k, False: 1.80k]
  ------------------
  766|       |            // TODO: call float_reader::read_source?
  767|  96.1k|            auto first_space = read_until_classic_space(input.view());
  768|  96.1k|            input.assign(
  769|  96.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  770|  96.1k|        }
  771|       |
  772|  97.9k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (772:13): [True: 94.5k, False: 3.42k]
  ------------------
  773|       |            if constexpr (std::is_same_v<CharT, char>) {
  774|       |                input.get_allocated_string().insert(0, "0x");
  775|       |            }
  776|  94.5k|            else {
  777|  94.5k|                input.get_allocated_string().insert(0, L"0x");
  778|  94.5k|            }
  779|  94.5k|        }
  780|       |
  781|  97.9k|        return input.get_allocated_string().c_str();
  782|  97.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  919|  97.9k|    {
  920|       |        if constexpr (std::is_same_v<CharT, char>) {
  921|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  922|       |        }
  923|  97.9k|        else {
  924|  97.9k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  925|  97.9k|        }
  926|  97.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  865|  97.9k|    {
  866|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  867|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  868|       |        if constexpr (std::is_same_v<T, float>) {
  869|       |            return ::wcstof_l(str, str_end, cloc);
  870|       |        }
  871|       |        else if constexpr (std::is_same_v<T, double>) {
  872|       |            return ::wcstod_l(str, str_end, cloc);
  873|       |        }
  874|       |        else if constexpr (std::is_same_v<T, long double>) {
  875|       |            return ::wcstold_l(str, str_end, cloc);
  876|       |        }
  877|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  878|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  879|       |        if constexpr (std::is_same_v<T, float>) {
  880|       |            return ::_wcstof_l(str, str_end, cloc);
  881|       |        }
  882|       |        else if constexpr (std::is_same_v<T, double>) {
  883|       |            return ::_wcstod_l(str, str_end, cloc);
  884|       |        }
  885|       |        else if constexpr (std::is_same_v<T, long double>) {
  886|       |            return ::_wcstold_l(str, str_end, cloc);
  887|       |        }
  888|       |#else
  889|  97.9k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  890|       |        if constexpr (std::is_same_v<T, float>) {
  891|       |            return std::wcstof(str, str_end);
  892|       |        }
  893|  97.9k|        else if constexpr (std::is_same_v<T, double>) {
  894|  97.9k|            return std::wcstod(str, str_end);
  895|       |        }
  896|       |        else if constexpr (std::is_same_v<T, long double>) {
  897|       |            return std::wcstold(str, str_end);
  898|       |        }
  899|  97.9k|#endif
  900|  97.9k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1129|   366k|    {
 1130|       |        if constexpr (sizeof(CharT) == 1) {
 1131|       |            return m_input.view();
 1132|       |        }
 1133|       |        else if constexpr (sizeof(CharT) == 2) {
 1134|       |            return std::u16string_view{
 1135|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1136|       |                m_input.view().size()};
 1137|       |        }
 1138|   366k|        else {
 1139|   366k|            return std::u32string_view{
 1140|   366k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1141|   366k|                m_input.view().size()};
 1142|   366k|        }
 1143|   366k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|  1.12M|{
 1160|  1.12M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 6.69k, False: 1.11M]
  ------------------
 1161|  6.69k|        value = std::numeric_limits<T>::infinity();
 1162|  6.69k|        return 3;
 1163|  6.69k|    }
 1164|  1.11M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 6.52k, False: 1.11M]
  ------------------
 1165|  6.52k|        value = std::numeric_limits<T>::infinity();
 1166|  6.52k|        return 8;
 1167|  6.52k|    }
 1168|  1.11M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 41.4k, False: 1.07M]
  ------------------
 1169|  41.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1170|  41.4k|        return 3;
 1171|  41.4k|    }
 1172|  1.07M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 2.63k, False: 1.06M]
  ------------------
 1173|  2.63k|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|  2.63k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  2.63k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|  2.63k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|  2.63k|    }
 1204|       |
 1205|  1.06M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|  1.06M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 227k, False: 840k]
  ------------------
 1207|   227k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.85k, False: 222k]
  |  |  ------------------
  ------------------
 1208|  4.85k|            return detail::unexpected_scan_error(
 1209|  4.85k|                scan_error::invalid_scanned_value,
 1210|  4.85k|                "Invalid floating-point digit");
 1211|  4.85k|        }
 1212|   227k|    }
 1213|  1.06M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.2k, False: 1.04M]
  |  |  ------------------
  ------------------
 1214|  13.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|  13.2k|                                             "Invalid floating-point digit");
 1216|  13.2k|    }
 1217|       |
 1218|  1.04M|#if !SCN_DISABLE_FAST_FLOAT
 1219|  1.04M|    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|  1.04M|        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|  1.04M|            return fast_float_fallback(data, value);
 1232|  1.04M|        }
 1233|       |    }
 1234|       |    else {
 1235|       |        // Default to fast_float
 1236|       |        return fast_float_impl<CharT, T>{data}(value);
 1237|       |    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|  1.04M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1057|  1.04M|{
 1058|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1059|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1060|       |        return from_chars_impl<T>{data}(value);
 1061|       |    }
 1062|       |    else
 1063|       |#endif
 1064|  1.04M|    {
 1065|  1.04M|#if !SCN_DISABLE_STRTOD
 1066|  1.04M|        return strtod_impl<CharT, T>{data}(value);
 1067|       |#else
 1068|       |        return detail::unexpected_scan_error(
 1069|       |            scan_error::invalid_scanned_value,
 1070|       |            "fast_float failed, and fallbacks are disabled");
 1071|       |#endif
 1072|  1.04M|    }
 1073|  1.04M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  907|  1.04M|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  908|  1.04M|    {
  909|  1.04M|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  738|  1.52M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclERe:
  912|  1.04M|    {
  913|  1.04M|        return this->parse(value, this->get_null_terminated_source(m_input),
  914|  1.04M|                           generic_strtod);
  915|  1.04M|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  744|  1.04M|    {
  745|  1.04M|        CharT* end{};
  746|  1.04M|        errno = 0;
  747|  1.04M|        value = strtod_cb(src, &end);
  748|  1.04M|        const auto saved_errno = errno;
  749|  1.04M|        auto chars_read = end - src;
  750|       |
  751|  1.04M|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  1.04M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 842, False: 1.04M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    842|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    842|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    842|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    842|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    842|    }
  ------------------
  752|       |
  753|  1.04M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (753:13): [True: 222k, False: 826k]
  ------------------
  754|  1.04M|            chars_read >= 2) {
  ------------------
  |  Branch (754:13): [True: 222k, False: 0]
  ------------------
  755|   222k|            chars_read -= 2;
  756|   222k|        }
  757|       |
  758|  1.04M|        return chars_read;
  759|  1.04M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  787|  1.52M|    {
  788|  1.52M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (788:13): [True: 662k, False: 859k]
  |  Branch (788:37): [True: 0, False: 662k]
  ------------------
  789|      0|            SCN_UNLIKELY_ATTR
  790|      0|            return detail::unexpected_scan_error(
  791|      0|                scan_error::invalid_scanned_value,
  792|      0|                "strtod failed: No conversion");
  793|      0|        }
  794|       |
  795|  1.52M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (795:13): [True: 35.8k, False: 1.48M]
  ------------------
  796|  1.52M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (796:13): [True: 0, False: 35.8k]
  ------------------
  797|      0|            SCN_UNLIKELY_ATTR
  798|      0|            return detail::unexpected_scan_error(
  799|      0|                scan_error::invalid_scanned_value,
  800|      0|                "Hexfloats disallowed by format string");
  801|      0|        }
  802|       |
  803|  1.52M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (803:13): [True: 1.21k, False: 1.52M]
  |  Branch (803:34): [True: 184, False: 1.03k]
  ------------------
  804|    184|            SCN_UNLIKELY_ATTR
  805|    184|            return detail::unexpected_scan_error(
  806|    184|                scan_error::value_positive_underflow,
  807|    184|                "strtod failed: underflow");
  808|    184|        }
  809|       |
  810|  1.52M|        SCN_GCC_COMPAT_PUSH
  811|  1.52M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  812|       |
  813|  1.52M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (813:13): [True: 1.52M, False: 0]
  ------------------
  814|  1.52M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (814:13): [True: 1.52M, False: 0]
  ------------------
  815|  1.52M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (815:13): [True: 1.03k, False: 1.52M]
  ------------------
  816|  1.03k|            SCN_UNLIKELY_ATTR
  817|  1.03k|            return detail::unexpected_scan_error(
  818|  1.03k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  819|  1.03k|        }
  820|       |
  821|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  822|       |
  823|  1.52M|            return {};
  824|  1.52M|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEe:
  707|  1.52M|{
  708|  1.52M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (708:12): [True: 662k, False: 860k]
  |  Branch (708:26): [True: 0, False: 860k]
  ------------------
  709|  1.52M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  764|  1.04M|    {
  765|  1.04M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (765:13): [True: 972k, False: 77.2k]
  ------------------
  766|       |            // TODO: call float_reader::read_source?
  767|   972k|            auto first_space = read_until_classic_space(input.view());
  768|   972k|            input.assign(
  769|   972k|                std::basic_string<CharT>{input.view().begin(), first_space});
  770|   972k|        }
  771|       |
  772|  1.04M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (772:13): [True: 222k, False: 827k]
  ------------------
  773|   222k|            if constexpr (std::is_same_v<CharT, char>) {
  774|   222k|                input.get_allocated_string().insert(0, "0x");
  775|       |            }
  776|       |            else {
  777|       |                input.get_allocated_string().insert(0, L"0x");
  778|       |            }
  779|   222k|        }
  780|       |
  781|  1.04M|        return input.get_allocated_string().c_str();
  782|  1.04M|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  919|  1.04M|    {
  920|  1.04M|        if constexpr (std::is_same_v<CharT, char>) {
  921|  1.04M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  922|       |        }
  923|       |        else {
  924|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  925|       |        }
  926|  1.04M|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  827|  1.04M|    {
  828|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  829|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  830|       |        if constexpr (std::is_same_v<T, float>) {
  831|       |            return ::strtof_l(str, str_end, cloc);
  832|       |        }
  833|       |        else if constexpr (std::is_same_v<T, double>) {
  834|       |            return ::strtod_l(str, str_end, cloc);
  835|       |        }
  836|       |        else if constexpr (std::is_same_v<T, long double>) {
  837|       |            return ::strtold_l(str, str_end, cloc);
  838|       |        }
  839|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  840|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  841|       |        if constexpr (std::is_same_v<T, float>) {
  842|       |            return ::_strtof_l(str, str_end, cloc);
  843|       |        }
  844|       |        else if constexpr (std::is_same_v<T, double>) {
  845|       |            return ::_strtod_l(str, str_end, cloc);
  846|       |        }
  847|       |        else if constexpr (std::is_same_v<T, long double>) {
  848|       |            return ::_strtold_l(str, str_end, cloc);
  849|       |        }
  850|       |#else
  851|  1.04M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  852|       |        if constexpr (std::is_same_v<T, float>) {
  853|       |            return std::strtof(str, str_end);
  854|       |        }
  855|       |        else if constexpr (std::is_same_v<T, double>) {
  856|       |            return std::strtod(str, str_end);
  857|       |        }
  858|  1.04M|        else if constexpr (std::is_same_v<T, long double>) {
  859|  1.04M|            return std::strtold(str, str_end);
  860|  1.04M|        }
  861|  1.04M|#endif
  862|  1.04M|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1159|   518k|{
 1160|   518k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1160:9): [True: 0, False: 518k]
  ------------------
 1161|      0|        value = std::numeric_limits<T>::infinity();
 1162|      0|        return 3;
 1163|      0|    }
 1164|   518k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1164:9): [True: 0, False: 518k]
  ------------------
 1165|      0|        value = std::numeric_limits<T>::infinity();
 1166|      0|        return 8;
 1167|      0|    }
 1168|   518k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1168:9): [True: 0, False: 518k]
  ------------------
 1169|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1170|      0|        return 3;
 1171|      0|    }
 1172|   518k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1172:9): [True: 0, False: 518k]
  ------------------
 1173|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1174|       |
 1175|       |        // TODO: use payload
 1176|       |#if 0
 1177|       |                    {
 1178|       |                        auto reader = integer_reader<CharT>{
 1179|       |                            integer_reader_base::only_unsigned, 0};
 1180|       |                        if (auto r = reader.read_source(
 1181|       |                                detail::tag_type<unsigned long long>{},
 1182|       |                                nan_payload.view());
 1183|       |                            SCN_UNLIKELY(!r)) {
 1184|       |                            return unexpected(r.error());
 1185|       |                        }
 1186|       |
 1187|       |                        unsigned long long payload;
 1188|       |                        if (auto r = reader.parse_value(payload);
 1189|       |                            SCN_UNLIKELY(!r)) {
 1190|       |                            return unexpected(r.error());
 1191|       |                        }
 1192|       |
 1193|       |                        constexpr auto mantissa_payload_len =
 1194|       |                            std::numeric_limits<T>::digits - 2;
 1195|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1196|       |
 1197|       |
 1198|       |                    }
 1199|       |#endif
 1200|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1201|       |
 1202|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1203|      0|    }
 1204|       |
 1205|   518k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1206|   518k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1206:9): [True: 107k, False: 410k]
  ------------------
 1207|   107k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 94.5k]
  |  |  ------------------
  ------------------
 1208|  13.0k|            return detail::unexpected_scan_error(
 1209|  13.0k|                scan_error::invalid_scanned_value,
 1210|  13.0k|                "Invalid floating-point digit");
 1211|  13.0k|        }
 1212|   107k|    }
 1213|   505k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.0k, False: 472k]
  |  |  ------------------
  ------------------
 1214|  33.0k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1215|  33.0k|                                             "Invalid floating-point digit");
 1216|  33.0k|    }
 1217|       |
 1218|   472k|#if !SCN_DISABLE_FAST_FLOAT
 1219|   472k|    if constexpr (std::is_same_v<T, long double>) {
 1220|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1221|       |            // If double == long double (true on Windows),
 1222|       |            // use fast_float with double
 1223|       |            double tmp{};
 1224|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1225|       |            value = tmp;
 1226|       |            return ret;
 1227|       |        }
 1228|   472k|        else {
 1229|       |            // long doubles aren't supported by fast_float ->
 1230|       |            // fall back to from_chars or strtod
 1231|   472k|            return fast_float_fallback(data, value);
 1232|   472k|        }
 1233|       |    }
 1234|       |    else {
 1235|       |        // Default to fast_float
 1236|       |        return fast_float_impl<CharT, T>{data}(value);
 1237|       |    }
 1238|       |#else
 1239|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1240|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1241|       |
 1242|       |    return fast_float_fallback(data, value);
 1243|       |#endif
 1244|   472k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1057|   472k|{
 1058|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1059|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1060|       |        return from_chars_impl<T>{data}(value);
 1061|       |    }
 1062|       |    else
 1063|       |#endif
 1064|   472k|    {
 1065|   472k|#if !SCN_DISABLE_STRTOD
 1066|   472k|        return strtod_impl<CharT, T>{data}(value);
 1067|       |#else
 1068|       |        return detail::unexpected_scan_error(
 1069|       |            scan_error::invalid_scanned_value,
 1070|       |            "fast_float failed, and fallbacks are disabled");
 1071|       |#endif
 1072|   472k|    }
 1073|   472k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  907|   472k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  908|   472k|    {
  909|   472k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclERe:
  912|   472k|    {
  913|   472k|        return this->parse(value, this->get_null_terminated_source(m_input),
  914|   472k|                           generic_strtod);
  915|   472k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  744|   472k|    {
  745|   472k|        CharT* end{};
  746|   472k|        errno = 0;
  747|   472k|        value = strtod_cb(src, &end);
  748|   472k|        const auto saved_errno = errno;
  749|   472k|        auto chars_read = end - src;
  750|       |
  751|   472k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   472k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   472k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 376, False: 471k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    376|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    376|    }
  ------------------
  752|       |
  753|   471k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (753:13): [True: 94.5k, False: 377k]
  ------------------
  754|   471k|            chars_read >= 2) {
  ------------------
  |  Branch (754:13): [True: 94.5k, False: 0]
  ------------------
  755|  94.5k|            chars_read -= 2;
  756|  94.5k|        }
  757|       |
  758|   471k|        return chars_read;
  759|   472k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  764|   472k|    {
  765|   472k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (765:13): [True: 463k, False: 8.03k]
  ------------------
  766|       |            // TODO: call float_reader::read_source?
  767|   463k|            auto first_space = read_until_classic_space(input.view());
  768|   463k|            input.assign(
  769|   463k|                std::basic_string<CharT>{input.view().begin(), first_space});
  770|   463k|        }
  771|       |
  772|   472k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (772:13): [True: 94.5k, False: 377k]
  ------------------
  773|       |            if constexpr (std::is_same_v<CharT, char>) {
  774|       |                input.get_allocated_string().insert(0, "0x");
  775|       |            }
  776|  94.5k|            else {
  777|  94.5k|                input.get_allocated_string().insert(0, L"0x");
  778|  94.5k|            }
  779|  94.5k|        }
  780|       |
  781|   472k|        return input.get_allocated_string().c_str();
  782|   472k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  919|   472k|    {
  920|       |        if constexpr (std::is_same_v<CharT, char>) {
  921|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  922|       |        }
  923|   472k|        else {
  924|   472k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  925|   472k|        }
  926|   472k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  865|   472k|    {
  866|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  867|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  868|       |        if constexpr (std::is_same_v<T, float>) {
  869|       |            return ::wcstof_l(str, str_end, cloc);
  870|       |        }
  871|       |        else if constexpr (std::is_same_v<T, double>) {
  872|       |            return ::wcstod_l(str, str_end, cloc);
  873|       |        }
  874|       |        else if constexpr (std::is_same_v<T, long double>) {
  875|       |            return ::wcstold_l(str, str_end, cloc);
  876|       |        }
  877|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  878|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  879|       |        if constexpr (std::is_same_v<T, float>) {
  880|       |            return ::_wcstof_l(str, str_end, cloc);
  881|       |        }
  882|       |        else if constexpr (std::is_same_v<T, double>) {
  883|       |            return ::_wcstod_l(str, str_end, cloc);
  884|       |        }
  885|       |        else if constexpr (std::is_same_v<T, long double>) {
  886|       |            return ::_wcstold_l(str, str_end, cloc);
  887|       |        }
  888|       |#else
  889|   472k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  890|       |        if constexpr (std::is_same_v<T, float>) {
  891|       |            return std::wcstof(str, str_end);
  892|       |        }
  893|       |        else if constexpr (std::is_same_v<T, double>) {
  894|       |            return std::wcstod(str, str_end);
  895|       |        }
  896|   472k|        else if constexpr (std::is_same_v<T, long double>) {
  897|   472k|            return std::wcstold(str, str_end);
  898|   472k|        }
  899|   472k|#endif
  900|   472k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2124|  1.71M|{
 2125|  1.71M|    const auto argcount = args.size();
 2126|  1.71M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2126:9): [True: 348k, False: 1.36M]
  |  Branch (2126:60): [True: 348k, False: 0]
  ------------------
 2127|   348k|        auto arg = args.get(0);
 2128|   348k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   348k|    static_cast<    \
  |  |  935|   348k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2129|   348k|    }
 2130|       |
 2131|  1.36M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2131:9): [True: 0, False: 1.36M]
  ------------------
 2132|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2133|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2134|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2135|      0|        return vscan_parse_format_string(format, handler);
 2136|      0|    }
 2137|       |
 2138|  1.36M|    SCN_UNLIKELY_ATTR
 2139|  1.36M|    {
 2140|  1.36M|        auto handler = format_handler<false, CharT>{
 2141|  1.36M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2142|  1.36M|        return vscan_parse_format_string(format, handler);
 2143|  1.36M|    }
 2144|  1.36M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|  3.17M|{
 1673|  3.17M|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 2.50M, False: 664k]
  ------------------
 1674|  2.50M|        return false;
 1675|  2.50M|    }
 1676|   664k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 664k, False: 0]
  |  Branch (1676:39): [True: 664k, False: 0]
  ------------------
 1677|  3.17M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1705|   522k|{
 1706|   522k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 522k]
  |  |  ------------------
  ------------------
 1707|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1708|      0|                                             "Argument #0 not found");
 1709|      0|    }
 1710|       |
 1711|   522k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   522k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 522k]
  |  |  ------------------
  ------------------
 1712|      0|        auto reader = impl::default_arg_reader<
 1713|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1714|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1715|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1716|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1717|      0|    }
 1718|       |
 1719|   522k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1720|   522k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   522k|    static_cast<    \
  |  |  935|   522k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|   522k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   522k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   522k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   522k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30.3k, False: 491k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  30.3k|    }                                                  \
  |  |  |  | 3939|   522k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1722|   491k|    return it.position();
 1723|   522k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1948|  1.14M|        : format_handler_base{argcount},
 1949|  1.14M|          parse_ctx{format},
 1950|  1.14M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.14M|    static_cast<    \
  |  |  935|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.14M|    static_cast<    \
  |  |  935|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|  1.14M|    {
 1952|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1766|  3.85M|    format_handler_base(size_t argcount) : args_count(argcount)
 1767|  3.85M|    {
 1768|  3.85M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  3.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.85M]
  |  |  ------------------
  ------------------
 1769|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1770|      0|        }
 1771|  3.85M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1899|  1.14M|        : contiguous_ctx(source, args, loc)
 1900|  1.14M|    {
 1901|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|  1.14M|{
 2090|  1.14M|    const auto beg = handler.get_ctx().begin();
 2091|  1.14M|    detail::parse_format_string<false>(format, handler);
 2092|  1.14M|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 101k, False: 1.04M]
  |  |  ------------------
  ------------------
 2093|   101k|        return unexpected(err.error());
 2094|   101k|    }
 2095|  1.04M|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|  1.14M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2073|  7.79M|    {
 2074|  7.79M|        return ctx.get();
 2075|  7.79M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1904|  7.79M|    {
 1905|  7.79M|        return contiguous_ctx;
 1906|  7.79M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1955|  2.18M|    {
 1956|  2.18M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 2.18M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  2.18M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1815|   606k|    {
 1816|   606k|        error = unexpected(err);
 1817|   606k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1727|  1.14M|{
 1728|  1.14M|    auto arg = ctx.arg(id);
 1729|  1.14M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|  1.14M|    return arg;
 1733|  1.14M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1841|  3.85M|    {
 1842|  3.85M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  3.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.85M]
  |  |  ------------------
  ------------------
 1843|      0|            on_error({scan_error::invalid_format_string,
 1844|      0|                      "Argument ID out-of-range"});
 1845|      0|            return;
 1846|      0|        }
 1847|       |
 1848|  3.85M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  3.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.85M]
  |  |  ------------------
  ------------------
 1849|      0|            on_error({scan_error::invalid_format_string,
 1850|      0|                      "Argument with this ID has already been scanned"});
 1851|      0|        }
 1852|       |
 1853|  3.85M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  3.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.85M, False: 0]
  |  |  ------------------
  ------------------
 1854|  3.85M|            visited_args_lower64 |= (1ull << id);
 1855|  3.85M|            return;
 1856|  3.85M|        }
 1857|       |
 1858|      0|        id -= 64;
 1859|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1860|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1825|  3.85M|    {
 1826|  3.85M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  3.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.85M]
  |  |  ------------------
  ------------------
 1827|      0|            on_error({scan_error::invalid_format_string,
 1828|      0|                      "Argument ID out-of-range"});
 1829|      0|            return false;
 1830|      0|        }
 1831|       |
 1832|  3.85M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  3.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.85M, False: 0]
  |  |  ------------------
  ------------------
 1833|  3.85M|            return (visited_args_lower64 >> id) & 1ull;
 1834|  3.85M|        }
 1835|       |
 1836|      0|        id -= 64;
 1837|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1838|  3.85M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1995|  1.14M|    {
 1996|  1.14M|        return parse_ctx.next_arg_id();
 1997|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2035|  1.14M|    {
 2036|  1.14M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  1.14M|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  1.14M|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 1.14M]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  1.14M|        auto specs = detail::format_specs{};
 2049|  1.14M|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  1.14M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  1.14M|            detail::get_arg_type(arg)};
 2052|       |
 2053|  1.14M|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  1.14M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 1.14M]
  |  Branch (2054:29): [True: 0, False: 1.14M]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|  1.14M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 2061|      0|            return parse_ctx.begin();
 2062|      0|        }
 2063|  1.14M|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  1.14M|        on_visit_scan_arg(
 2066|  1.14M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  1.14M|                                           get_ctx().locale()},
 2068|  1.14M|            arg);
 2069|  1.14M|        return parse_ctx.begin();
 2070|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1745|  1.14M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  1.14M|    {
 1747|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2006|  1.14M|    {
 2007|  1.14M|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 1.14M]
  |  Branch (2007:13): [True: 0, False: 1.14M]
  |  Branch (2007:29): [True: 0, False: 1.14M]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|  1.14M|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  1.14M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 101k, False: 1.04M]
  |  |  ------------------
  ------------------
 2014|   101k|            on_error(r.error());
 2015|   101k|        }
 2016|  1.04M|        else {
 2017|  1.04M|            get_ctx().advance_to(*r);
 2018|  1.04M|        }
 2019|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1774|  3.85M|    {
 1775|  3.85M|        {
 1776|  3.85M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1776:45): [True: 0, False: 3.85M]
  ------------------
 1777|  3.85M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1777:35): [True: 0, False: 3.85M]
  ------------------
 1778|  3.85M|                                      ? std::numeric_limits<uint64_t>::max()
 1779|  3.85M|                                      : (1ull << args_count_lower64) - 1;
 1780|       |
 1781|  3.85M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1781:17): [True: 0, False: 3.85M]
  ------------------
 1782|      0|                return on_error({scan_error::invalid_format_string,
 1783|      0|                                 "Argument list not exhausted"});
 1784|      0|            }
 1785|  3.85M|        }
 1786|       |
 1787|  3.85M|        if (args_count < 64) {
  ------------------
  |  Branch (1787:13): [True: 3.85M, False: 0]
  ------------------
 1788|  3.85M|            return;
 1789|  3.85M|        }
 1790|       |
 1791|      0|        auto last_args_count = args_count - 64;
 1792|      0|        for (auto it = visited_args_upper.begin();
 1793|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1793:14): [True: 0, False: 0]
  ------------------
 1794|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1794:17): [True: 0, False: 0]
  ------------------
 1795|      0|                return on_error({scan_error::invalid_format_string,
 1796|      0|                                 "Argument list not exhausted"});
 1797|      0|            }
 1798|      0|            last_args_count -= 8;
 1799|      0|        }
 1800|       |
 1801|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1802|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1802:13): [True: 0, False: 0]
  ------------------
 1803|      0|            return on_error({scan_error::invalid_format_string,
 1804|      0|                             "Argument list not exhausted"});
 1805|      0|        }
 1806|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1820|  15.4M|    {
 1821|  15.4M|        return error;
 1822|  15.4M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1948|  1.36M|        : format_handler_base{argcount},
 1949|  1.36M|          parse_ctx{format},
 1950|  1.36M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|  1.36M|    {
 1952|  1.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1875|  1.36M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  1.36M|    static_cast<    \
  |  |  935|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1876|  1.36M|    {
 1877|  1.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|  1.36M|{
 2090|  1.36M|    const auto beg = handler.get_ctx().begin();
 2091|  1.36M|    detail::parse_format_string<false>(format, handler);
 2092|  1.36M|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 101k, False: 1.26M]
  |  |  ------------------
  ------------------
 2093|   101k|        return unexpected(err.error());
 2094|   101k|    }
 2095|  1.26M|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|  1.36M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2073|  9.34M|    {
 2074|  9.34M|        return ctx.get();
 2075|  9.34M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1880|  9.34M|    {
 1881|  9.34M|        return ctx;
 1882|  9.34M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1955|  2.62M|    {
 1956|  2.62M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 2.62M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  2.62M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1727|  1.36M|{
 1728|  1.36M|    auto arg = ctx.arg(id);
 1729|  1.36M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|  1.36M|    return arg;
 1733|  1.36M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1995|  1.36M|    {
 1996|  1.36M|        return parse_ctx.next_arg_id();
 1997|  1.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2035|  1.36M|    {
 2036|  1.36M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  1.36M|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  1.36M|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 1.36M]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  1.36M|        auto specs = detail::format_specs{};
 2049|  1.36M|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  1.36M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  1.36M|            detail::get_arg_type(arg)};
 2052|       |
 2053|  1.36M|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  1.36M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 1.36M]
  |  Branch (2054:29): [True: 0, False: 1.36M]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|  1.36M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
 2061|      0|            return parse_ctx.begin();
 2062|      0|        }
 2063|  1.36M|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  1.36M|        on_visit_scan_arg(
 2066|  1.36M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  1.36M|                                           get_ctx().locale()},
 2068|  1.36M|            arg);
 2069|  1.36M|        return parse_ctx.begin();
 2070|  1.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1745|  1.36M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  1.36M|    {
 1747|  1.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2006|  1.36M|    {
 2007|  1.36M|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 1.36M]
  |  Branch (2007:13): [True: 0, False: 1.36M]
  |  Branch (2007:29): [True: 0, False: 1.36M]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|  1.36M|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  1.36M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 101k, False: 1.26M]
  |  |  ------------------
  ------------------
 2014|   101k|            on_error(r.error());
 2015|   101k|        }
 2016|  1.26M|        else {
 2017|  1.26M|            get_ctx().advance_to(*r);
 2018|  1.26M|        }
 2019|  1.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|  1.45M|{
 2105|  1.45M|    const auto argcount = args.size();
 2106|  1.45M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 316k, False: 1.14M]
  |  Branch (2106:60): [True: 316k, False: 0]
  ------------------
 2107|   316k|        auto arg = args.get(0);
 2108|   316k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   316k|    static_cast<    \
  |  |  935|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|   316k|    }
 2110|       |
 2111|  1.14M|    auto handler = format_handler<true, CharT>{
 2112|  1.14M|        ranges::subrange<const CharT*>{source.data(),
 2113|  1.14M|                                       source.data() + source.size()},
 2114|  1.14M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.14M|    static_cast<    \
  |  |  935|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.14M|    static_cast<    \
  |  |  935|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|  1.14M|    return vscan_parse_format_string(format, handler);
 2116|  1.45M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1685|   475k|{
 1686|   475k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 475k]
  |  |  ------------------
  ------------------
 1687|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1688|      0|                                             "Argument #0 not found");
 1689|      0|    }
 1690|       |
 1691|   475k|    auto reader =
 1692|   475k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1693|   475k|            ranges::subrange<const CharT*>{source.data(),
 1694|   475k|                                           source.data() + source.size()},
 1695|   475k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   475k|    static_cast<    \
  |  |  935|   475k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1696|   475k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   475k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   475k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   475k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30.3k, False: 444k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  30.3k|    }                                                  \
  |  |  |  | 3939|   475k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|   444k|    return ranges::distance(source.data(), it);
 1698|   475k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|   837k|{
 2105|   837k|    const auto argcount = args.size();
 2106|   837k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 165k, False: 671k]
  |  Branch (2106:60): [True: 165k, False: 0]
  ------------------
 2107|   165k|        auto arg = args.get(0);
 2108|   165k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   165k|    static_cast<    \
  |  |  935|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|   165k|    }
 2110|       |
 2111|   671k|    auto handler = format_handler<true, CharT>{
 2112|   671k|        ranges::subrange<const CharT*>{source.data(),
 2113|   671k|                                       source.data() + source.size()},
 2114|   671k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|   671k|    return vscan_parse_format_string(format, handler);
 2116|   837k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|  1.67M|{
 1673|  1.67M|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 1.34M, False: 330k]
  ------------------
 1674|  1.34M|        return false;
 1675|  1.34M|    }
 1676|   330k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 330k, False: 0]
  |  Branch (1676:39): [True: 330k, False: 0]
  ------------------
 1677|  1.67M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1685|   247k|{
 1686|   247k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 1687|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1688|      0|                                             "Argument #0 not found");
 1689|      0|    }
 1690|       |
 1691|   247k|    auto reader =
 1692|   247k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1693|   247k|            ranges::subrange<const CharT*>{source.data(),
 1694|   247k|                                           source.data() + source.size()},
 1695|   247k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   247k|    static_cast<    \
  |  |  935|   247k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1696|   247k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60.6k, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  60.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  60.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  60.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  60.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  60.6k|    }                                                  \
  |  |  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|   187k|    return ranges::distance(source.data(), it);
 1698|   247k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1948|   671k|        : format_handler_base{argcount},
 1949|   671k|          parse_ctx{format},
 1950|   671k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|   671k|    {
 1952|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1899|   671k|        : contiguous_ctx(source, args, loc)
 1900|   671k|    {
 1901|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|   671k|{
 2090|   671k|    const auto beg = handler.get_ctx().begin();
 2091|   671k|    detail::parse_format_string<false>(format, handler);
 2092|   671k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 202k, False: 469k]
  |  |  ------------------
  ------------------
 2093|   202k|        return unexpected(err.error());
 2094|   202k|    }
 2095|   469k|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|   671k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2073|  4.29M|    {
 2074|  4.29M|        return ctx.get();
 2075|  4.29M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1904|  4.29M|    {
 1905|  4.29M|        return contiguous_ctx;
 1906|  4.29M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1955|  1.14M|    {
 1956|  1.14M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 1.14M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1727|   671k|{
 1728|   671k|    auto arg = ctx.arg(id);
 1729|   671k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|   671k|    return arg;
 1733|   671k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1995|   671k|    {
 1996|   671k|        return parse_ctx.next_arg_id();
 1997|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2035|   671k|    {
 2036|   671k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|   671k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|   671k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 671k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|   671k|        auto specs = detail::format_specs{};
 2049|   671k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|   671k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|   671k|            detail::get_arg_type(arg)};
 2052|       |
 2053|   671k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|   671k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 671k]
  |  Branch (2054:29): [True: 0, False: 671k]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|   671k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 2061|      0|            return parse_ctx.begin();
 2062|      0|        }
 2063|   671k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|   671k|        on_visit_scan_arg(
 2066|   671k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|   671k|                                           get_ctx().locale()},
 2068|   671k|            arg);
 2069|   671k|        return parse_ctx.begin();
 2070|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1745|   671k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|   671k|    {
 1747|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2006|   671k|    {
 2007|   671k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 671k]
  |  Branch (2007:13): [True: 0, False: 671k]
  |  Branch (2007:29): [True: 0, False: 671k]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|   671k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|   671k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 202k, False: 469k]
  |  |  ------------------
  ------------------
 2014|   202k|            on_error(r.error());
 2015|   202k|        }
 2016|   469k|        else {
 2017|   469k|            get_ctx().advance_to(*r);
 2018|   469k|        }
 2019|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2124|   836k|{
 2125|   836k|    const auto argcount = args.size();
 2126|   836k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2126:9): [True: 164k, False: 671k]
  |  Branch (2126:60): [True: 164k, False: 0]
  ------------------
 2127|   164k|        auto arg = args.get(0);
 2128|   164k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   164k|    static_cast<    \
  |  |  935|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2129|   164k|    }
 2130|       |
 2131|   671k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2131:9): [True: 0, False: 671k]
  ------------------
 2132|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2133|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2134|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2135|      0|        return vscan_parse_format_string(format, handler);
 2136|      0|    }
 2137|       |
 2138|   671k|    SCN_UNLIKELY_ATTR
 2139|   671k|    {
 2140|   671k|        auto handler = format_handler<false, CharT>{
 2141|   671k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2142|   671k|        return vscan_parse_format_string(format, handler);
 2143|   671k|    }
 2144|   671k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1705|   247k|{
 1706|   247k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 1707|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1708|      0|                                             "Argument #0 not found");
 1709|      0|    }
 1710|       |
 1711|   247k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   247k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 1712|      0|        auto reader = impl::default_arg_reader<
 1713|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1714|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1715|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1716|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1717|      0|    }
 1718|       |
 1719|   247k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1720|   247k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   247k|    static_cast<    \
  |  |  935|   247k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|   247k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60.6k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  60.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  60.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  60.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  60.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  60.6k|    }                                                  \
  |  |  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1722|   186k|    return it.position();
 1723|   247k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1948|   671k|        : format_handler_base{argcount},
 1949|   671k|          parse_ctx{format},
 1950|   671k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|   671k|    {
 1952|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1875|   671k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1876|   671k|    {
 1877|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|   671k|{
 2090|   671k|    const auto beg = handler.get_ctx().begin();
 2091|   671k|    detail::parse_format_string<false>(format, handler);
 2092|   671k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 202k, False: 469k]
  |  |  ------------------
  ------------------
 2093|   202k|        return unexpected(err.error());
 2094|   202k|    }
 2095|   469k|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|   671k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2073|  4.29M|    {
 2074|  4.29M|        return ctx.get();
 2075|  4.29M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1880|  4.29M|    {
 1881|  4.29M|        return ctx;
 1882|  4.29M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1955|  1.14M|    {
 1956|  1.14M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 1.14M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  1.14M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1727|   671k|{
 1728|   671k|    auto arg = ctx.arg(id);
 1729|   671k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|   671k|    return arg;
 1733|   671k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1995|   671k|    {
 1996|   671k|        return parse_ctx.next_arg_id();
 1997|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2035|   671k|    {
 2036|   671k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|   671k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|   671k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 671k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|   671k|        auto specs = detail::format_specs{};
 2049|   671k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|   671k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|   671k|            detail::get_arg_type(arg)};
 2052|       |
 2053|   671k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|   671k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 671k]
  |  Branch (2054:29): [True: 0, False: 671k]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|   671k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 2061|      0|            return parse_ctx.begin();
 2062|      0|        }
 2063|   671k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|   671k|        on_visit_scan_arg(
 2066|   671k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|   671k|                                           get_ctx().locale()},
 2068|   671k|            arg);
 2069|   671k|        return parse_ctx.begin();
 2070|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1745|   671k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|   671k|    {
 1747|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2006|   671k|    {
 2007|   671k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 671k]
  |  Branch (2007:13): [True: 0, False: 671k]
  |  Branch (2007:29): [True: 0, False: 671k]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|   671k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|   671k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 202k, False: 469k]
  |  |  ------------------
  ------------------
 2014|   202k|            on_error(r.error());
 2015|   202k|        }
 2016|   469k|        else {
 2017|   469k|            get_ctx().advance_to(*r);
 2018|   469k|        }
 2019|   671k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2150|   158k|{
 2151|   158k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|   158k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2150|   174k|{
 2151|   174k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|   174k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2150|  82.5k|{
 2151|  82.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|  82.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2150|  82.4k|{
 2151|  82.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  82.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|  82.4k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1352|  3.37k|{
 1353|  3.37k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1354|       |
 1355|  3.37k|    if constexpr (sizeof(SourceCharT) == 1) {
 1356|       |        if constexpr (sizeof(DestCharT) == 2) {
 1357|       |            std::u32string tmp;
 1358|       |            transcode_to_string_impl_to32(src, tmp);
 1359|       |            return transcode_to_string_impl_32to16<false>(
 1360|       |                std::u32string_view{tmp}, dest);
 1361|       |        }
 1362|  3.37k|        else if constexpr (sizeof(DestCharT) == 4) {
 1363|  3.37k|            return transcode_to_string_impl_to32(src, dest);
 1364|  3.37k|        }
 1365|       |    }
 1366|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1367|       |        if constexpr (sizeof(DestCharT) == 1) {
 1368|       |            std::u32string tmp;
 1369|       |            transcode_to_string_impl_to32(src, tmp);
 1370|       |            return transcode_to_string_impl_32to8<false>(
 1371|       |                std::u32string_view{tmp}, dest);
 1372|       |        }
 1373|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1374|       |            return trasncode_to_string_impl_to32(src, dest);
 1375|       |        }
 1376|       |    }
 1377|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1378|       |        if constexpr (sizeof(DestCharT) == 1) {
 1379|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1380|       |        }
 1381|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1382|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1383|       |        }
 1384|       |    }
 1385|       |
 1386|  3.37k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1387|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1388|  3.37k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1245|  3.37k|{
 1246|  3.37k|    static_assert(sizeof(DestCharT) == 4);
 1247|       |
 1248|  3.37k|    auto it = src.begin();
 1249|  1.10M|    while (it != src.end()) {
  ------------------
  |  Branch (1249:12): [True: 1.10M, False: 3.37k]
  ------------------
 1250|  1.10M|        auto res = get_next_code_point(
 1251|  1.10M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1252|  1.10M|                                                                 src.end()));
 1253|  1.10M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.48k, False: 1.10M]
  |  |  ------------------
  ------------------
 1254|  4.48k|            dest.push_back(DestCharT{0xfffd});
 1255|  4.48k|        }
 1256|  1.10M|        else {
 1257|  1.10M|            dest.push_back(res.value);
 1258|  1.10M|        }
 1259|  1.10M|        it = detail::make_string_view_iterator(src, res.iterator);
 1260|  1.10M|    }
 1261|  3.37k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1169|  1.56M|{
 1170|  1.56M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1171|       |
 1172|  1.56M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1173|  1.56M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44.0k, False: 1.51M]
  |  |  ------------------
  ------------------
 1174|  44.0k|        return {get_start_for_next_code_point(input),
 1175|  44.0k|                detail::invalid_code_point};
 1176|  44.0k|    }
 1177|  1.51M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.32k, False: 1.51M]
  |  |  ------------------
  ------------------
 1178|  5.32k|        return {input.end(), detail::invalid_code_point};
 1179|  5.32k|    }
 1180|       |
 1181|  1.51M|    return {input.begin() + len,
 1182|  1.51M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1183|  1.51M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1155|  44.0k|{
 1156|  44.0k|    auto it = input.begin();
 1157|   356k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 347k, False: 9.43k]
  ------------------
 1158|   347k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 34.6k, False: 312k]
  ------------------
 1159|  34.6k|            break;
 1160|  34.6k|        }
 1161|   347k|    }
 1162|  44.0k|    return it;
 1163|  44.0k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  48.0M|    constexpr parse_error(code c) : m_code(c)
  808|  48.0M|    {
  809|  48.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  48.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  48.0M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  21.5M|    {
  823|  21.5M|        return a.m_code == b.m_code;
  824|  21.5M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  5.60M|    {
  827|  5.60M|        return !(a == b);
  828|  5.60M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1716|  2.23M|    clocale_restorer(int cat) : m_category(cat)
 1717|  2.23M|    {
 1718|  2.23M|        const auto loc = std::setlocale(cat, nullptr);
 1719|  2.23M|        std::strcpy(m_locbuf, loc);
 1720|  2.23M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1722|  2.23M|    {
 1723|       |        // Restore locale to what it was before
 1724|  2.23M|        std::setlocale(m_category, m_locbuf);
 1725|  2.23M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1745|  2.23M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1746|  2.23M|    {
 1747|  2.23M|        std::setlocale(cat, "C");
 1748|  2.23M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 2930|  3.85M|    {
 2931|  3.85M|        return m_msg == nullptr;
 2932|  3.85M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3566|  3.81M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  26.2M|{
  458|  26.2M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  26.2M|        static_cast<unsigned char>(ch))];
  460|  26.2M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   241k|{
  469|   241k|    return static_cast<unsigned char>(ch) <= 127;
  470|   241k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  5.99M|{
  539|  5.99M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  5.99M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  17.9M|{
  784|  17.9M|    return e != eof_error::good;
  785|  17.9M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  49.1k|{
  798|  49.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  49.1k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  49.1k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   234k|{
  845|   234k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   234k|    return parse_error::eof;
  847|   234k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.60M|{
  854|  5.60M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.60M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.60M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 86.0k, False: 5.51M]
  ------------------
  859|  86.0k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  86.0k|    }
  861|       |
  862|  5.51M|    return detail::unexpected_scan_error(code, msg);
  863|  5.60M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.60M|{
  868|  5.60M|    return [code, msg](parse_error err) {
  869|  5.60M|        assert(err != parse_error::good);
  870|  5.60M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  5.60M|    };
  872|  5.60M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2210|  4.22M|{
 2211|  4.22M|    unsigned char running_diff{0};
 2212|  15.8M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2212:24): [True: 11.6M, False: 4.22M]
  ------------------
 2213|  11.6M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2214|  11.6M|    }
 2215|  4.22M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2215:12): [True: 119k, False: 4.10M]
  |  Branch (2215:33): [True: 23.8k, False: 4.07M]
  ------------------
 2216|  4.22M|}
_ZN3scn2v44impl11char_to_intEc:
 3119|  31.7M|{
 3120|  31.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3121|  31.7M|}
_ZN3scn2v44impl11char_to_intEw:
 3123|  5.01M|{
 3124|  5.01M|#if WCHAR_MIN < 0
 3125|  5.01M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3125:9): [True: 4.99M, False: 21.0k]
  |  Branch (3125:20): [True: 3.12M, False: 1.86M]
  ------------------
 3126|       |#else
 3127|       |    if (ch <= 255) {
 3128|       |#endif
 3129|  3.12M|        return char_to_int(static_cast<char>(ch));
 3130|  3.12M|    }
 3131|  1.88M|    return 255;
 3132|  5.01M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5925|  3.24M|{
 5926|  3.24M|    if (specs.width != 0) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 3.24M]
  ------------------
 5927|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5927:13): [True: 0, False: 0]
  ------------------
 5928|      0|            return detail::unexpected_scan_error(
 5929|      0|                scan_error::length_too_short,
 5930|      0|                "Scanned value too narrow, width did not exceed what "
 5931|      0|                "was specified in the format string");
 5932|      0|        }
 5933|      0|    }
 5934|  3.24M|    if (specs.precision != 0) {
  ------------------
  |  Branch (5934:9): [True: 0, False: 3.24M]
  ------------------
 5935|       |        // Ensured by take_width_view
 5936|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5937|      0|                   specs.precision);
 5938|      0|    }
 5939|  3.24M|    return {};
 5940|  3.24M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  4.72M|    {
  304|  4.72M|        ranges::advance(x, n);
  305|  4.72M|        return x;
  306|  4.72M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  4.72M|    {
  268|  4.72M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.72M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  4.72M|    {
  151|  4.72M|        i += n;
  152|  4.72M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  5.58M|    {
  108|  5.58M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.58M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  5.58M|    {
   87|  5.58M|        return s - i;
   88|  5.58M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.02M|    {
  304|  3.02M|        ranges::advance(x, n);
  305|  3.02M|        return x;
  306|  3.02M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.02M|    {
  268|  3.02M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.02M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.02M|    {
  151|  3.02M|        i += n;
  152|  3.02M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   867k|    {
  108|   867k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   867k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   867k|    {
   87|   867k|        return s - i;
   88|   867k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2872|  3.32M|    {
 2873|  3.32M|        return m_current;
 2874|  3.32M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2872|  1.81M|    {
 2873|  1.81M|        return m_current;
 2874|  1.81M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.88M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.88M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.88M|        auto beg = r.begin();
  991|  1.88M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.88M, False: 0]
  ------------------
  992|  1.88M|            return false;
  993|  1.88M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.88M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  50.0M|    {
  763|  50.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  50.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  50.0M|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1846|  4.97M|{
 1847|  4.97M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  4.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|  4.97M|    else {
 1858|  4.97M|        auto it = range.begin();
 1859|  4.97M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 3.07M, False: 1.90M]
  ------------------
 1860|  3.07M|            return ranges::next(it, count);
 1861|  3.07M|        }
 1862|       |
 1863|  7.58M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 5.72M, False: 1.86M]
  ------------------
 1864|  5.72M|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 40.7k, False: 5.67M]
  ------------------
 1865|  40.7k|                return unexpected(eof_error::eof);
 1866|  40.7k|            }
 1867|  5.72M|        }
 1868|       |
 1869|  1.86M|        return it;
 1870|  1.90M|    }
 1871|  4.97M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  4.97M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  4.97M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  4.97M|        else {
 1107|  4.97M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 4.97M, False: 0]
  ------------------
 1108|  4.97M|                return static_cast<size_t>(
 1109|  4.97M|                    r.begin().parent()->chars_available() -
 1110|  4.97M|                    r.begin().position());
 1111|  4.97M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  4.97M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  4.97M|}
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.56M|        : m_fptr([](storage fn,
  743|  4.56M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.56M|              cvref<T> obj = *get<T>(fn);
  745|  4.56M|              if constexpr (std::is_void_v<R>) {
  746|  4.56M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.56M|              }
  748|  4.56M|              else {
  749|  4.56M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.56M|              }
  751|  4.56M|          }),
  752|  4.56M|          m_storage(std::addressof(f))
  753|  4.56M|    {
  754|  4.56M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  25.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  25.0M|              else {
  749|  25.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.0M|              }
  751|  25.0M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  25.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  25.0M|        else if constexpr (std::is_object_v<T>) {
  688|  25.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  25.0M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.56M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.56M|        {
  662|  4.56M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  14.0M|    {
  763|  14.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  14.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  14.0M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.51M|        : m_fptr([](storage fn,
  743|  3.51M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.51M|              cvref<T> obj = *get<T>(fn);
  745|  3.51M|              if constexpr (std::is_void_v<R>) {
  746|  3.51M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.51M|              }
  748|  3.51M|              else {
  749|  3.51M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.51M|              }
  751|  3.51M|          }),
  752|  3.51M|          m_storage(std::addressof(f))
  753|  3.51M|    {
  754|  3.51M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.38M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.38M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.38M|              else {
  749|  6.38M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.38M|              }
  751|  6.38M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.38M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.38M|        else if constexpr (std::is_object_v<T>) {
  688|  6.38M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.38M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.51M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.51M|        {
  662|  3.51M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 5953|  1.36M|    {
 5954|  1.36M|        const bool need_skipped_width =
 5955|  1.36M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 1.36M]
  |  Branch (5955:33): [True: 0, False: 1.36M]
  ------------------
 5956|  1.36M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  1.36M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 1.36M]
  ------------------
 5960|  1.36M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 1.36M]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|  1.36M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 1.36M, False: 0]
  |  Branch (5964:56): [True: 1.36M, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|  1.36M|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 1.36M]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  2.71M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.36M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.36M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.36M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 17.5k, False: 1.34M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  17.5k|    }                                                  \
  |  |  |  | 3939|  1.36M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  2.71M|                            make_eof_scan_error));
 5975|       |
 5976|  2.71M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 1.34M]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|  1.34M|            return result_type{it, 0};
 5984|  2.71M|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|  1.36M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1965|  3.64M|{
 1966|  3.64M|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  3.64M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1946|  3.64M|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|  3.64M|    else {
 1951|  3.64M|        auto first = range.begin();
 1952|  20.1M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 20.1M, False: 32.0k]
  ------------------
 1953|  20.1M|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 3.61M, False: 16.5M]
  ------------------
 1954|  3.61M|                return first;
 1955|  3.61M|            }
 1956|  20.1M|        }
 1957|  32.0k|        return first;
 1958|  3.64M|    }
 1959|  3.64M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.25M|    {
  108|  3.25M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.25M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.25M|    {
   94|  3.25M|        iter_difference_t<I> counter{0};
   95|  32.8M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 29.5M, False: 3.25M]
  ------------------
   96|  29.5M|            ++i;
   97|  29.5M|            ++counter;
   98|  29.5M|        }
   99|  3.25M|        return counter;
  100|  3.25M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.60M|    return [code, msg](parse_error err) {
  869|  5.60M|        assert(err != parse_error::good);
  870|  5.60M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  5.60M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1769|   694k|    {
 1770|   694k|        auto stdloc = loc.get<std::locale>();
 1771|   694k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1772|   694k|        grouping = numpunct.grouping();
 1773|   694k|        thousands_sep =
 1774|   694k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1774:13): [True: 0, False: 694k]
  ------------------
 1775|   694k|        decimal_point = numpunct.decimal_point();
 1776|   694k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1706|   694k|{
 1707|   694k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1707:9): [True: 694k, False: 0]
  ------------------
 1708|   694k|        return std::use_facet<Facet>(stdloc);
 1709|   694k|    }
 1710|      0|    stdloc = std::locale(stdloc, new Facet{});
 1711|      0|    return std::use_facet<Facet>(stdloc);
 1712|   694k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1835|  5.32M|{
 1836|  5.32M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  5.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.8k, False: 5.30M]
  |  |  ------------------
  ------------------
 1837|  23.8k|        return unexpected(e);
 1838|  23.8k|    }
 1839|       |
 1840|  5.30M|    return ranges::next(range.begin());
 1841|  5.32M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  7.73M|{
  951|  7.73M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  7.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 46.8k, False: 7.68M]
  |  |  ------------------
  ------------------
  952|  46.8k|        return eof_error::eof;
  953|  46.8k|    }
  954|  7.68M|    return eof_error::good;
  955|  7.73M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  10.9M|{
  945|  10.9M|    return is_range_eof(r.begin(), r.end());
  946|  10.9M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  10.9M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  10.9M|    {
  938|  10.9M|        return begin == end;
  939|  10.9M|    }
  940|  10.9M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  5.30M|    {
  296|  5.30M|        ++x;
  297|  5.30M|        return x;
  298|  5.30M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3137|  2.03M|{
 3138|  2.03M|    auto r = read_one_of_code_unit(range, "+-");
 3139|  2.03M|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 1.57M, False: 457k]
  ------------------
 3140|  1.57M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 1.57M, False: 309]
  ------------------
 3141|  1.57M|            return std::pair{range.begin(), sign_type::default_sign};
 3142|  1.57M|        }
 3143|    309|        return unexpected(eof_error::eof);
 3144|  1.57M|    }
 3145|       |
 3146|   457k|    auto& it = *r;
 3147|   457k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 186k, False: 270k]
  ------------------
 3148|   186k|        return std::pair{it, sign_type::minus_sign};
 3149|   186k|    }
 3150|   270k|    return std::pair{it, sign_type::plus_sign};
 3151|   457k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2262|  3.55M|{
 2263|  3.55M|    auto it = read_code_unit(range);
 2264|  3.55M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.0k, False: 3.54M]
  |  |  ------------------
  ------------------
 2265|  14.0k|        return unexpected(make_eof_parse_error(it.error()));
 2266|  14.0k|    }
 2267|       |
 2268|  6.70M|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 6.70M, False: 2.91M]
  ------------------
 2269|  6.70M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 630k, False: 6.07M]
  ------------------
 2270|   630k|            return *it;
 2271|   630k|        }
 2272|  6.70M|    }
 2273|       |
 2274|  2.91M|    return unexpected(parse_error::error);
 2275|  3.54M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2221|  4.97M|{
 2222|  4.97M|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|  4.97M|    else {
 2235|  4.97M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  4.97M|            if (ch < 'A' || ch > 'Z') {
 2237|  4.97M|                return ch;
 2238|  4.97M|            }
 2239|  4.97M|            return static_cast<char_type>(ch +
 2240|  4.97M|                                          static_cast<char_type>('a' - 'A'));
 2241|  4.97M|        };
 2242|       |
 2243|  4.97M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  4.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40.7k, False: 4.93M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  40.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  40.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  40.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  40.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  40.7k|    }                                                  \
  |  |  |  | 3939|  4.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|  4.93M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|  4.93M|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|  4.93M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  4.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.78M, False: 150k]
  |  |  ------------------
  ------------------
 2248|  4.93M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|  4.93M|                    return ascii_tolower(a) ==
 2250|  4.93M|                           static_cast<detail::char_t<Range>>(b);
 2251|  4.93M|                }))) {
 2252|  4.78M|            return unexpected(parse_error::error);
 2253|  4.78M|        }
 2254|       |
 2255|   150k|        return it;
 2256|  4.93M|    }
 2257|  4.97M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2235|  5.67M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  5.67M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 5.17M, False: 502k]
  |  Branch (2236:29): [True: 414k, False: 87.5k]
  ------------------
 2237|  5.59M|                return ch;
 2238|  5.59M|            }
 2239|  87.5k|            return static_cast<char_type>(ch +
 2240|  87.5k|                                          static_cast<char_type>('a' - 'A'));
 2241|  5.67M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2136|  1.76M|{
 2137|  1.76M|    auto it = read_code_unit(range);
 2138|  1.76M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.74k, False: 1.75M]
  |  |  ------------------
  ------------------
 2139|  9.74k|        return unexpected(make_eof_parse_error(it.error()));
 2140|  9.74k|    }
 2141|       |
 2142|  1.75M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42M, False: 333k]
  |  |  ------------------
  ------------------
 2143|  1.75M|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|  1.42M|        return unexpected(parse_error::error);
 2145|  1.42M|    }
 2146|       |
 2147|   333k|    return *it;
 2148|  1.75M|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1985|  3.64M|{
 1986|  3.64M|    auto it = read_while_code_unit(range, pred);
 1987|  3.64M|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 1.47M, False: 2.16M]
  ------------------
 1988|  1.47M|        return unexpected(parse_error::error);
 1989|  1.47M|    }
 1990|  2.16M|    return it;
 1991|  3.64M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1610|  1.68M|    {
 1611|  1.68M|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|  1.68M|                           ranges::common_range<Range>) {
 1628|  1.68M|            auto beg_seg = range.begin().contiguous_segment();
 1629|  1.68M|            auto end_seg = range.end().contiguous_segment();
 1630|  1.68M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 227k, False: 1.45M]
  |  |  ------------------
  ------------------
 1631|  1.68M|                             detail::to_address(end_seg.end()))) {
 1632|   227k|                auto& str = m_storage.emplace();
 1633|   227k|                str.reserve(range.end().position() - range.begin().position());
 1634|   227k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|   227k|                m_view = string_view_type{str};
 1636|   227k|                return;
 1637|   227k|            }
 1638|       |
 1639|  1.45M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|  1.45M|                                                            end_seg.data());
 1641|  1.45M|            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|  1.68M|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1571|  11.4M|    {
 1572|  11.4M|        return m_view;
 1573|  11.4M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1561|  6.92M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 5995|  1.24M|    {
 5996|  1.24M|        const bool need_skipped_width =
 5997|  1.24M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 1.24M]
  |  Branch (5997:33): [True: 0, False: 1.24M]
  ------------------
 5998|  1.24M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  1.24M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 1.24M]
  ------------------
 6001|  1.24M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 1.24M]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  1.24M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 1.24M, False: 0]
  ------------------
 6010|  1.24M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 1.24M]
  ------------------
 6011|  1.24M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  1.24M|        return result_type{rng.begin(), 0};
 6035|  1.24M|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1835|  2.39M|{
 1836|  2.39M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.54k, False: 2.38M]
  |  |  ------------------
  ------------------
 1837|  5.54k|        return unexpected(e);
 1838|  5.54k|    }
 1839|       |
 1840|  2.38M|    return ranges::next(range.begin());
 1841|  2.39M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  4.48M|{
  951|  4.48M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.8k, False: 4.45M]
  |  |  ------------------
  ------------------
  952|  23.8k|        return eof_error::eof;
  953|  23.8k|    }
  954|  4.45M|    return eof_error::good;
  955|  4.48M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  4.48M|{
  945|  4.48M|    return is_range_eof(r.begin(), r.end());
  946|  4.48M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  4.48M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  4.48M|    {
  938|  4.48M|        return begin == end;
  939|  4.48M|    }
  940|  4.48M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.38M|    {
  296|  2.38M|        ++x;
  297|  2.38M|        return x;
  298|  2.38M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3137|  1.63M|{
 3138|  1.63M|    auto r = read_one_of_code_unit(range, "+-");
 3139|  1.63M|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 1.27M, False: 366k]
  ------------------
 3140|  1.27M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 1.27M, False: 102]
  ------------------
 3141|  1.27M|            return std::pair{range.begin(), sign_type::default_sign};
 3142|  1.27M|        }
 3143|    102|        return unexpected(eof_error::eof);
 3144|  1.27M|    }
 3145|       |
 3146|   366k|    auto& it = *r;
 3147|   366k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 159k, False: 207k]
  ------------------
 3148|   159k|        return std::pair{it, sign_type::minus_sign};
 3149|   159k|    }
 3150|   207k|    return std::pair{it, sign_type::plus_sign};
 3151|   366k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2262|  1.90M|{
 2263|  1.90M|    auto it = read_code_unit(range);
 2264|  1.90M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.44k, False: 1.90M]
  |  |  ------------------
  ------------------
 2265|  2.44k|        return unexpected(make_eof_parse_error(it.error()));
 2266|  2.44k|    }
 2267|       |
 2268|  3.56M|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 3.56M, False: 1.49M]
  ------------------
 2269|  3.56M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 405k, False: 3.16M]
  ------------------
 2270|   405k|            return *it;
 2271|   405k|        }
 2272|  3.56M|    }
 2273|       |
 2274|  1.49M|    return unexpected(parse_error::error);
 2275|  1.90M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2221|  4.25M|{
 2222|  4.25M|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|  4.25M|                  std::is_same_v<char_type, char>) {
 2226|  4.25M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2226:13): [True: 39.1k, False: 4.22M]
  ------------------
 2227|  39.1k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|  39.1k|        }
 2229|  4.22M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2229:13): [True: 4.07M, False: 143k]
  ------------------
 2230|  4.07M|            return unexpected(parse_error::error);
 2231|  4.07M|        }
 2232|   143k|        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|       |    else {
 2235|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|       |            if (ch < 'A' || ch > 'Z') {
 2237|       |                return ch;
 2238|       |            }
 2239|       |            return static_cast<char_type>(ch +
 2240|       |                                          static_cast<char_type>('a' - 'A'));
 2241|       |        };
 2242|       |
 2243|       |        SCN_TRY(it, read_exactly_n_code_units(
 2244|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|       |                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|       |        if (SCN_UNLIKELY(!std::equal(
 2248|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|       |                    return ascii_tolower(a) ==
 2250|       |                           static_cast<detail::char_t<Range>>(b);
 2251|       |                }))) {
 2252|       |            return unexpected(parse_error::error);
 2253|       |        }
 2254|       |
 2255|       |        return it;
 2256|       |    }
 2257|  4.25M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2136|   490k|{
 2137|   490k|    auto it = read_code_unit(range);
 2138|   490k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.09k, False: 487k]
  |  |  ------------------
  ------------------
 2139|  3.09k|        return unexpected(make_eof_parse_error(it.error()));
 2140|  3.09k|    }
 2141|       |
 2142|   487k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 400k, False: 86.4k]
  |  |  ------------------
  ------------------
 2143|   487k|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|   400k|        return unexpected(parse_error::error);
 2145|   400k|    }
 2146|       |
 2147|  86.4k|    return *it;
 2148|   487k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1492|  6.18M|    {
 1493|  6.18M|        return sv;
 1494|  6.18M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1965|   919k|{
 1966|   919k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|   919k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1946|   919k|{
 1947|   919k|    if constexpr (ranges::common_range<Range>) {
 1948|   919k|        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|       |    else {
 1951|       |        auto first = range.begin();
 1952|       |        for (; first != range.end(); ++first) {
 1953|       |            if (pred(*first)) {
 1954|       |                return first;
 1955|       |            }
 1956|       |        }
 1957|       |        return first;
 1958|       |    }
 1959|   919k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|  1.61M|{
 2946|  1.61M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 1.61M, False: 0]
  ------------------
 2947|  1.61M|        auto it = read_while_classic_space(range);
 2948|  1.61M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|  1.61M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.6k, False: 1.59M]
  |  |  ------------------
  ------------------
 2950|  13.6k|            return unexpected(e);
 2951|  13.6k|        }
 2952|       |
 2953|  1.59M|        return it;
 2954|  1.61M|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|  1.61M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|  1.61M|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|  1.61M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|  1.61M|        auto buf = make_contiguous_buffer(range);
 2111|  1.61M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|  1.61M|        return ranges::next(range.begin(),
 2113|  1.61M|                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|       |    else {
 2116|       |        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|       |            return detail::is_cp_space(cp);
 2129|       |        });
 2130|       |    }
 2131|  1.61M|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1672|  1.61M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  1.61M|                  ranges::sized_range<Range>) {
 1676|  1.61M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  1.61M|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1478|  1.61M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  1.61M|    {
 1480|  1.61M|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  5.03M|    {
  304|  5.03M|        ranges::advance(x, n);
  305|  5.03M|        return x;
  306|  5.03M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  6.71M|    {
  268|  6.71M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.71M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  6.71M|    {
  181|  32.0M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 25.3M, False: 6.71M]
  ------------------
  182|  25.3M|            ++i;
  183|  25.3M|        }
  184|  6.71M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   439k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   439k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   439k|            auto rd = make_reader<T, char_type>();
 6116|   439k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   439k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 439k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   439k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 439k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   439k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   439k|                return impl(rd, range, value);
 6121|   439k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   439k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3035|  2.50M|    {
 3036|  2.50M|        reader_error_handler eh{};
 3037|  2.50M|        get_derived().check_specs_impl(specs, eh);
 3038|  2.50M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.50M]
  |  |  ------------------
  ------------------
 3039|      0|            return detail::unexpected_scan_error(
 3040|      0|                scan_error::invalid_format_string, eh.m_msg);
 3041|      0|        }
 3042|  2.50M|        return {};
 3043|  2.50M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3047|  2.50M|    {
 3048|  2.50M|        return static_cast<Derived&>(*this);
 3049|  2.50M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4057|  2.50M|    {
 4058|  2.50M|        detail::check_float_type_specs(specs, eh);
 4059|  2.50M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   439k|    {
 6041|   439k|        const bool need_skipped_width =
 6042|   439k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 439k]
  |  Branch (6042:33): [True: 0, False: 439k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   439k|        auto it = rng.begin();
 6046|   439k|        std::ptrdiff_t prefix_width = 0;
 6047|   439k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 439k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   439k|        else {
 6055|   439k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   439k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   439k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   439k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.26k, False: 433k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.26k|    }                                                  \
  |  |  |  | 3939|   439k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   433k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   433k|            std::tie(it, prefix_width) = prefix_result;
 6057|   433k|        }
 6058|   433k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   433k|        std::ptrdiff_t value_width = 0;
 6062|   433k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 433k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   433k|        else {
 6078|   433k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   433k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   433k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 28.4k, False: 405k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  28.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  28.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  28.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  28.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  28.4k|    }                                                  \
  |  | 3939|   433k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   433k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   405k|                                             specs, value, loc));
 6080|       |
 6081|   405k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 405k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   405k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   405k|        std::ptrdiff_t postfix_width = 0;
 6090|   405k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 401k, False: 4.28k]
  ------------------
 6091|   401k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   401k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   401k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   401k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 401k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   401k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   401k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   401k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   401k|                                 value_width));
 6095|   401k|            std::tie(it, postfix_width) = postfix_result;
 6096|   401k|        }
 6097|       |
 6098|   405k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   405k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 405k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   405k|            specs, prefix_width, value_width, postfix_width));
 6100|   405k|        return it;
 6101|   405k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3030|  5.78M|    {
 3031|  5.78M|        return true;
 3032|  5.78M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4129|  2.47M|    {
 4130|  2.47M|        unsigned options{};
 4131|  2.47M|        if (specs.localized) {
  ------------------
  |  Branch (4131:13): [True: 694k, False: 1.78M]
  ------------------
 4132|   694k|            options |= float_reader_base::allow_thsep;
 4133|   694k|        }
 4134|       |
 4135|  2.47M|        SCN_GCC_COMPAT_PUSH
 4136|  2.47M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4137|       |
 4138|  2.47M|        switch (specs.type) {
 4139|   374k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4139:13): [True: 374k, False: 2.10M]
  ------------------
 4140|   374k|                return options | float_reader_base::allow_fixed;
 4141|       |
 4142|  59.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4142:13): [True: 59.1k, False: 2.41M]
  ------------------
 4143|  59.1k|                return options | float_reader_base::allow_scientific;
 4144|       |
 4145|   754k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4145:13): [True: 754k, False: 1.72M]
  ------------------
 4146|   754k|                return options | float_reader_base::allow_hex;
 4147|       |
 4148|   593k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4148:13): [True: 593k, False: 1.88M]
  ------------------
 4149|   593k|                return options | float_reader_base::allow_scientific |
 4150|   593k|                       float_reader_base::allow_fixed;
 4151|       |
 4152|   694k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4152:13): [True: 694k, False: 1.78M]
  ------------------
 4153|   694k|                return options | float_reader_base::allow_scientific |
 4154|   694k|                       float_reader_base::allow_fixed |
 4155|   694k|                       float_reader_base::allow_hex;
 4156|       |
 4157|      0|            default:
  ------------------
  |  Branch (4157:13): [True: 0, False: 2.47M]
  ------------------
 4158|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4159|  2.47M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4160|  2.47M|        }
 4161|       |
 4162|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4163|  2.47M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3581|  2.47M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1760|  3.46M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1521|  6.92M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3612|  1.06M|    {
 3613|  1.06M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|  1.06M|        const std::ptrdiff_t sign_len =
 3616|  1.06M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 243k, False: 823k]
  ------------------
 3617|       |
 3618|  1.06M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|  1.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24.6k, False: 1.04M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  24.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  24.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  24.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  24.6k|    }                                                  \
  |  |  |  | 3939|  1.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|  1.04M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|  1.06M|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 3969|  3.30M|    {
 3970|  3.30M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (3970:13): [True: 3.30M, False: 0]
  ------------------
 3971|  3.30M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (3971:13): [True: 3.30M, False: 0]
  ------------------
 3972|  3.30M|            return;
 3973|  3.30M|        }
 3974|       |
 3975|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 3976|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (3976:13): [True: 0, False: 0]
  ------------------
 3977|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (3977:27): [True: 0, False: 0]
  ------------------
 3978|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (3978:21): [True: 0, False: 0]
  ------------------
 3979|      0|                    ch = CharT{'.'};
 3980|      0|                }
 3981|      0|            }
 3982|      0|        }
 3983|       |
 3984|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 0]
  ------------------
 3985|      0|            return;
 3986|      0|        }
 3987|       |
 3988|      0|        auto first =
 3989|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 3990|      0|        if (first == str.end()) {
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|      0|            return;
 3992|      0|        }
 3993|       |
 3994|      0|        m_thsep_indices.push_back(
 3995|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 3996|       |
 3997|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (3997:31): [True: 0, False: 0]
  ------------------
 3998|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (3998:17): [True: 0, False: 0]
  ------------------
 3999|      0|                *first++ = std::move(*it);
 4000|      0|            }
 4001|      0|            else {
 4002|      0|                m_thsep_indices.push_back(
 4003|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4004|      0|            }
 4005|      0|        }
 4006|       |
 4007|      0|        str.erase(first, str.end());
 4008|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1576|  3.78M|    {
 1577|  3.78M|        return m_storage.has_value();
 1578|  3.78M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1581|  2.22M|    {
 1582|  2.22M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  2.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1583|  2.22M|        return *m_storage;
 1584|  2.22M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4082|   433k|    {
 4083|   433k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   433k|#if !SCN_DISABLE_LOCALE
 4086|   433k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 120k, False: 313k]
  ------------------
 4087|   120k|            return read_impl<Range>(
 4088|   120k|                range, rd,
 4089|   120k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   120k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|   120k|                },
 4092|   120k|                value, loc);
 4093|   120k|        }
 4094|   313k|#endif
 4095|       |
 4096|   313k|        return read_impl<Range>(
 4097|   313k|            range, rd,
 4098|   313k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   313k|                return r.read_source(SCN_FWD(args)...);
 4100|   313k|            },
 4101|   313k|            value);
 4102|   433k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|   599k|    {
 4119|   599k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   599k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 32.5k, False: 566k]
  |  |  ------------------
  ------------------
 4121|  32.5k|            return unexpected(r.error());
 4122|  32.5k|        }
 4123|       |
 4124|   566k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   566k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   566k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   566k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.37k, False: 562k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.37k|    }                                                  \
  |  |  |  | 3939|   566k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   562k|        return ranges::next(range.begin(), n);
 4126|   566k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.86M|    {
  763|  1.86M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.86M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   120k|        : m_fptr([](storage fn,
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|   120k|              if constexpr (std::is_void_v<R>) {
  746|   120k|                  obj(static_cast<decltype(args)>(args)...);
  747|   120k|              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
  752|   120k|          m_storage(std::addressof(f))
  753|   120k|    {
  754|   120k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   120k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   120k|        else if constexpr (std::is_object_v<T>) {
  688|   120k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   120k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4089|   120k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   120k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|   120k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3600|   380k|    {
 3601|   380k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3602|   380k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   380k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 380k]
  |  |  ------------------
  ------------------
 3603|      0|            m_locale_options.thousands_sep = CharT{0};
 3604|      0|        }
 3605|       |
 3606|   380k|        return read_source_impl(range);
 3607|   380k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3626|  1.86M|    {
 3627|  1.86M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.86M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.86M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.86M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.86M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.86M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|  1.86M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|  1.86M|        auto it = sign_result.first;
 3630|  1.86M|        m_sign = sign_result.second;
 3631|       |
 3632|  1.86M|        auto digits_begin = it;
 3633|  1.86M|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|       |                      ranges::sized_range<Range>) {
 3636|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3637|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|       |                SCN_TRY_ASSIGN(
 3639|       |                    it,
 3640|       |                    do_read_source_impl(
 3641|       |                        r,
 3642|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|       |            }
 3645|       |            else {
 3646|       |                auto cb = [&](const auto& rr)
 3647|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|       |                    auto res = read_all(rr);
 3649|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|       |                        return detail::unexpected_scan_error(
 3651|       |                            scan_error::invalid_scanned_value,
 3652|       |                            "Invalid float value");
 3653|       |                    }
 3654|       |                    return res;
 3655|       |                };
 3656|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3657|       |            }
 3658|       |        }
 3659|  1.86M|        else {
 3660|  1.86M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|  1.86M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.86M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 101k, False: 1.76M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   101k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   101k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   101k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   101k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   101k|    }                                                  \
  |  | 3939|  1.86M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3661|  1.76M|                it,
 3662|  1.76M|                do_read_source_impl(
 3663|  1.76M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|  1.76M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|  1.76M|        }
 3666|       |
 3667|  1.86M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|  1.76M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 1.75M, False: 9.70k]
  |  Branch (3669:48): [True: 1.74M, False: 9.81k]
  ------------------
 3670|  1.76M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 1.68M, False: 62.0k]
  ------------------
 3671|  1.76M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 1.67M, False: 4.04k]
  ------------------
 3672|  1.67M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|  1.67M|        }
 3674|       |
 3675|  1.76M|        handle_separators();
 3676|       |
 3677|  1.76M|        return it;
 3678|  1.86M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3912|  1.86M|    {
 3913|  1.86M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|  1.86M|        const bool allowed_nonhex =
 3915|  1.86M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|  1.86M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|  1.86M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 1.84M, False: 19.5k]
  |  Branch (3918:45): [True: 0, False: 1.84M]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|  1.86M|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 19.5k, False: 1.84M]
  ------------------
 3924|  19.5k|            return *r;
 3925|  19.5k|        }
 3926|       |
 3927|  1.84M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 1.77M, False: 66.0k]
  |  Branch (3927:45): [True: 1.96k, False: 1.77M]
  ------------------
 3928|  1.96k|            return unexpected(r.error());
 3929|  1.96k|        }
 3930|  1.84M|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 66.0k, False: 1.77M]
  ------------------
 3931|  66.0k|            return *r;
 3932|  66.0k|        }
 3933|       |
 3934|  1.77M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 1.25M, False: 525k]
  |  Branch (3934:28): [True: 397k, False: 853k]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|   397k|            auto it = range.begin();
 3938|       |
 3939|   397k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 16.5k, False: 380k]
  ------------------
 3940|  16.5k|                m_kind = float_kind::hex_with_prefix;
 3941|  16.5k|                it = *r;
 3942|  16.5k|            }
 3943|   380k|            else {
 3944|   380k|                m_kind = float_kind::hex_without_prefix;
 3945|   380k|            }
 3946|       |
 3947|   397k|            return read_hex(ranges::subrange{it, range.end()});
 3948|   397k|        }
 3949|  1.37M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 525k, False: 853k]
  |  Branch (3949:29): [True: 525k, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|   525k|            m_kind = float_kind::generic;
 3953|   525k|            return read_regular_float(range);
 3954|   525k|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|   853k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 36.5k, False: 816k]
  |  |  ------------------
  ------------------
 3960|  36.5k|            m_kind = float_kind::hex_with_prefix;
 3961|  36.5k|            return read_hex(ranges::subrange{*r, range.end()});
 3962|  36.5k|        }
 3963|       |
 3964|   816k|        m_kind = float_kind::generic;
 3965|   816k|        return read_regular(range);
 3966|   853k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3720|  1.86M|    {
 3721|  1.86M|        auto it = range.begin();
 3722|  1.86M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 1.84M, False: 19.5k]
  ------------------
 3723|  1.84M|            return unexpected(r.error());
 3724|  1.84M|        }
 3725|  19.5k|        else {
 3726|  19.5k|            it = *r;
 3727|  19.5k|        }
 3728|       |
 3729|  19.5k|        if (auto r = read_matching_string_classic_nocase(
 3730|  19.5k|                ranges::subrange{it, range.end()}, "inity");
 3731|  19.5k|            !r) {
  ------------------
  |  Branch (3731:13): [True: 9.70k, False: 9.81k]
  ------------------
 3732|  9.70k|            m_kind = float_kind::inf_short;
 3733|  9.70k|            return it;
 3734|  9.70k|        }
 3735|  9.81k|        else {
 3736|  9.81k|            m_kind = float_kind::inf_long;
 3737|  9.81k|            return *r;
 3738|  9.81k|        }
 3739|  19.5k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3743|  1.84M|    {
 3744|  1.84M|        auto it = range.begin();
 3745|  1.84M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 1.77M, False: 68.0k]
  ------------------
 3746|  1.77M|            return r.transform_error(map_parse_error_to_scan_error(
 3747|  1.77M|                scan_error::invalid_scanned_value,
 3748|  1.77M|                "Invalid floating-point NaN value"));
 3749|  1.77M|        }
 3750|  68.0k|        else {
 3751|  68.0k|            it = *r;
 3752|  68.0k|        }
 3753|       |
 3754|  68.0k|        if (auto r =
 3755|  68.0k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|  68.0k|            !r) {
  ------------------
  |  Branch (3756:13): [True: 62.0k, False: 6.01k]
  ------------------
 3757|  62.0k|            m_kind = float_kind::nan_simple;
 3758|  62.0k|            return it;
 3759|  62.0k|        }
 3760|  6.01k|        else {
 3761|  6.01k|            it = *r;
 3762|  6.01k|        }
 3763|       |
 3764|  6.01k|        auto payload_beg_it = it;
 3765|  6.01k|        it = read_while_code_unit(
 3766|  6.01k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|  6.01k|                return is_ascii_char(ch) &&
 3768|  6.01k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|  6.01k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|  6.01k|            });
 3771|  6.01k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|  6.01k|        m_kind = float_kind::nan_with_payload;
 3774|  6.01k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 4.04k, False: 1.96k]
  ------------------
 3775|  6.01k|                                             ')')) {
 3776|  4.04k|            return *r;
 3777|  4.04k|        }
 3778|  1.96k|        return detail::unexpected_scan_error(
 3779|  1.96k|            scan_error::invalid_scanned_value,
 3780|  1.96k|            "Invalid floating-point NaN payload");
 3781|  6.01k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  6.01k|        : m_fptr([](storage fn,
  743|  6.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.01k|              cvref<T> obj = *get<T>(fn);
  745|  6.01k|              if constexpr (std::is_void_v<R>) {
  746|  6.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.01k|              }
  748|  6.01k|              else {
  749|  6.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.01k|              }
  751|  6.01k|          }),
  752|  6.01k|          m_storage(std::addressof(f))
  753|  6.01k|    {
  754|  6.01k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   137k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   137k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   137k|              else {
  749|   137k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   137k|              }
  751|   137k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   137k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   137k|        else if constexpr (std::is_object_v<T>) {
  688|   137k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   137k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3766|   137k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|   137k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3767:24): [True: 137k, False: 122]
  ------------------
 3768|   137k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3768:26): [True: 132k, False: 4.79k]
  |  Branch (3768:39): [True: 122k, False: 9.81k]
  |  Branch (3768:54): [True: 2.99k, False: 11.6k]
  |  Branch (3768:67): [True: 2.91k, False: 83]
  ------------------
 3769|   137k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3769:26): [True: 6.90k, False: 4.79k]
  |  Branch (3769:39): [True: 2.55k, False: 4.34k]
  |  Branch (3769:53): [True: 4.26k, False: 4.87k]
  ------------------
 3770|   137k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  6.01k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.01k|        {
  662|  6.01k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3713|  1.25M|    {
 3714|  1.25M|        return read_matching_string_classic_nocase(range, "0x");
 3715|  1.25M|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3814|   433k|    {
 3815|   433k|        auto it = range.begin();
 3816|       |
 3817|   433k|        std::ptrdiff_t digits_count = 0;
 3818|   433k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3819|   433k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.8k, False: 421k]
  |  |  ------------------
  ------------------
 3820|  12.8k|            return r.transform_error(map_parse_error_to_scan_error(
 3821|  12.8k|                scan_error::invalid_scanned_value,
 3822|  12.8k|                "Invalid hexadecimal floating-point value"));
 3823|  12.8k|        }
 3824|   421k|        else {
 3825|   421k|            digits_count += ranges::distance(it, *r);
 3826|   421k|            it = *r;
 3827|   421k|        }
 3828|       |
 3829|   421k|        m_integral_part_length = digits_count;
 3830|   421k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3830:18): [True: 69.1k, False: 351k]
  ------------------
 3831|   421k|                                             m_locale_options.decimal_point)) {
 3832|  69.1k|            it = *r;
 3833|  69.1k|        }
 3834|       |
 3835|   421k|        if (auto r =
  ------------------
  |  Branch (3835:18): [True: 63.5k, False: 357k]
  ------------------
 3836|   421k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3837|  63.5k|            digits_count += ranges::distance(it, *r);
 3838|  63.5k|            it = *r;
 3839|  63.5k|        }
 3840|       |
 3841|   421k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 421k]
  |  |  ------------------
  ------------------
 3842|      0|            return detail::unexpected_scan_error(
 3843|      0|                scan_error::invalid_scanned_value,
 3844|      0|                "No significand digits in hexfloat");
 3845|      0|        }
 3846|       |
 3847|   421k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3848|       |
 3849|   421k|        return it;
 3850|   421k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3698|   855k|    {
 3699|   855k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   855k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 855k]
  |  |  |  Branch (865:45): [True: 0, False: 855k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3700|   855k|                         thsep_allowed)) {
 3701|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3702|      0|                return char_to_int(ch) < 16 ||
 3703|      0|                       ch == m_locale_options.thousands_sep;
 3704|      0|            });
 3705|      0|        }
 3706|       |
 3707|   855k|        return read_while1_code_unit(
 3708|   855k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3709|   855k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   855k|        : m_fptr([](storage fn,
  743|   855k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   855k|              cvref<T> obj = *get<T>(fn);
  745|   855k|              if constexpr (std::is_void_v<R>) {
  746|   855k|                  obj(static_cast<decltype(args)>(args)...);
  747|   855k|              }
  748|   855k|              else {
  749|   855k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   855k|              }
  751|   855k|          }),
  752|   855k|          m_storage(std::addressof(f))
  753|   855k|    {
  754|   855k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  4.60M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.60M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.60M|              else {
  749|  4.60M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.60M|              }
  751|  4.60M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  4.60M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.60M|        else if constexpr (std::is_object_v<T>) {
  688|  4.60M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.60M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3708|  4.60M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   855k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   855k|        {
  662|   855k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3786|  1.52M|    {
 3787|  1.52M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3787:18): [True: 173k, False: 1.34M]
  ------------------
 3788|   173k|            auto beg_exp_it = range.begin();
 3789|   173k|            auto it = *r;
 3790|       |
 3791|   173k|            if (auto r_sign =
  ------------------
  |  Branch (3791:22): [True: 172k, False: 309]
  ------------------
 3792|   173k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3793|   172k|                it = r_sign->first;
 3794|   172k|            }
 3795|       |
 3796|   173k|            if (auto r_exp = read_while1_code_unit(
 3797|   173k|                    ranges::subrange{it, range.end()},
 3798|   173k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3799|   173k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.51k, False: 170k]
  |  |  ------------------
  ------------------
 3800|  2.51k|                it = beg_exp_it;
 3801|  2.51k|            }
 3802|   170k|            else {
 3803|   170k|                it = *r_exp;
 3804|   170k|            }
 3805|       |
 3806|   173k|            return it;
 3807|   173k|        }
 3808|  1.34M|        return range.begin();
 3809|  1.52M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   173k|        : m_fptr([](storage fn,
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
  752|   173k|          m_storage(std::addressof(f))
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   559k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   559k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   559k|              else {
  749|   559k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   559k|              }
  751|   559k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   559k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   559k|        else if constexpr (std::is_object_v<T>) {
  688|   559k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   559k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3798|   559k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   173k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3855|  1.34M|    {
 3856|  1.34M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3857|  1.34M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3857:35): [True: 1.15M, False: 190k]
  |  Branch (3857:50): [True: 29.5k, False: 1.12M]
  ------------------
 3858|       |
 3859|  1.34M|        auto it = ranges::begin(range);
 3860|  1.34M|        std::ptrdiff_t digits_count = 0;
 3861|       |
 3862|  1.34M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3863|  1.34M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.0k, False: 1.27M]
  |  |  ------------------
  ------------------
 3864|  69.0k|            return r.transform_error(
 3865|  69.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3866|  69.0k|                                              "Invalid floating-point value"));
 3867|  69.0k|        }
 3868|  1.27M|        else {
 3869|  1.27M|            digits_count += ranges::distance(it, *r);
 3870|  1.27M|            it = *r;
 3871|  1.27M|        }
 3872|       |
 3873|  1.27M|        m_integral_part_length = digits_count;
 3874|  1.27M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3874:18): [True: 254k, False: 1.01M]
  ------------------
 3875|  1.27M|                                             m_locale_options.decimal_point)) {
 3876|   254k|            it = *r;
 3877|   254k|        }
 3878|       |
 3879|  1.27M|        if (auto r =
  ------------------
  |  Branch (3879:18): [True: 236k, False: 1.03M]
  ------------------
 3880|  1.27M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3881|   236k|            digits_count += ranges::distance(it, *r);
 3882|   236k|            it = *r;
 3883|   236k|        }
 3884|       |
 3885|  1.27M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 3886|      0|            return detail::unexpected_scan_error(
 3887|      0|                scan_error::invalid_scanned_value,
 3888|      0|                "No significand digits in float");
 3889|      0|        }
 3890|       |
 3891|  1.27M|        auto beg_exp_it = it;
 3892|  1.27M|        if (allowed_exp) {
  ------------------
  |  Branch (3892:13): [True: 1.10M, False: 172k]
  ------------------
 3893|  1.10M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3894|  1.10M|        }
 3895|  1.27M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3895:13): [True: 28.4k, False: 1.24M]
  |  Branch (3895:29): [True: 17.5k, False: 10.8k]
  ------------------
 3896|  17.5k|            return detail::unexpected_scan_error(
 3897|  17.5k|                scan_error::invalid_scanned_value,
 3898|  17.5k|                "No exponent given to scientific float");
 3899|  17.5k|        }
 3900|       |
 3901|  1.25M|        m_kind =
 3902|  1.25M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3902:13): [True: 1.08M, False: 169k]
  ------------------
 3903|       |
 3904|  1.25M|        return it;
 3905|  1.27M|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3683|  2.61M|    {
 3684|  2.61M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.61M]
  |  |  |  Branch (865:45): [True: 0, False: 2.61M]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3685|  2.61M|                         thsep_allowed)) {
 3686|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3687|      0|                return char_to_int(ch) < 10 ||
 3688|      0|                       ch == m_locale_options.thousands_sep;
 3689|      0|            });
 3690|      0|        }
 3691|       |
 3692|  2.61M|        return read_while1_code_unit(
 3693|  2.61M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3694|  2.61M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.61M|        : m_fptr([](storage fn,
  743|  2.61M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.61M|              cvref<T> obj = *get<T>(fn);
  745|  2.61M|              if constexpr (std::is_void_v<R>) {
  746|  2.61M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.61M|              }
  748|  2.61M|              else {
  749|  2.61M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.61M|              }
  751|  2.61M|          }),
  752|  2.61M|          m_storage(std::addressof(f))
  753|  2.61M|    {
  754|  2.61M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  14.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.8M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.8M|              else {
  749|  14.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.8M|              }
  751|  14.8M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  14.8M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.8M|        else if constexpr (std::is_object_v<T>) {
  688|  14.8M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.8M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3693|  14.8M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.61M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.61M|        {
  662|  2.61M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1566|  1.68M|    {
 1567|  1.68M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|  1.68M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   120k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   120k|        {
  662|   120k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   313k|        : m_fptr([](storage fn,
  743|   313k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   313k|              cvref<T> obj = *get<T>(fn);
  745|   313k|              if constexpr (std::is_void_v<R>) {
  746|   313k|                  obj(static_cast<decltype(args)>(args)...);
  747|   313k|              }
  748|   313k|              else {
  749|   313k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   313k|              }
  751|   313k|          }),
  752|   313k|          m_storage(std::addressof(f))
  753|   313k|    {
  754|   313k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   313k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   313k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   313k|              else {
  749|   313k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   313k|              }
  751|   313k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   313k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   313k|        else if constexpr (std::is_object_v<T>) {
  688|   313k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   313k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4098|   313k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   313k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   313k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3586|  1.48M|    {
 3587|  1.48M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.48M]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|  1.48M|        return read_source_impl(range);
 3593|  1.48M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   313k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   313k|        {
  662|   313k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4082|   367k|    {
 4083|   367k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   367k|#if !SCN_DISABLE_LOCALE
 4086|   367k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 100k, False: 266k]
  ------------------
 4087|   100k|            return read_impl<Range>(
 4088|   100k|                range, rd,
 4089|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|   100k|                },
 4092|   100k|                value, loc);
 4093|   100k|        }
 4094|   266k|#endif
 4095|       |
 4096|   266k|        return read_impl<Range>(
 4097|   266k|            range, rd,
 4098|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   266k|                return r.read_source(SCN_FWD(args)...);
 4100|   266k|            },
 4101|   266k|            value);
 4102|   367k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|   518k|    {
 4119|   518k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   518k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   518k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.0k, False: 500k]
  |  |  ------------------
  ------------------
 4121|  18.0k|            return unexpected(r.error());
 4122|  18.0k|        }
 4123|       |
 4124|   500k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.2k, False: 480k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.2k|    }                                                  \
  |  |  |  | 3939|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   480k|        return ranges::next(range.begin(), n);
 4126|   500k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.59M|    {
  763|  1.59M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.59M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4089|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|   100k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3600|   313k|    {
 3601|   313k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3602|   313k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   313k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 313k]
  |  |  ------------------
  ------------------
 3603|      0|            m_locale_options.thousands_sep = CharT{0};
 3604|      0|        }
 3605|       |
 3606|   313k|        return read_source_impl(range);
 3607|   313k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3626|  1.59M|    {
 3627|  1.59M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.59M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.59M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.59M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.59M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.59M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|  1.59M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|  1.59M|        auto it = sign_result.first;
 3630|  1.59M|        m_sign = sign_result.second;
 3631|       |
 3632|  1.59M|        auto digits_begin = it;
 3633|  1.59M|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|  1.59M|                      ranges::sized_range<Range>) {
 3636|  1.59M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  3.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.59M]
  |  |  |  Branch (865:45): [True: 0, False: 1.59M]
  |  |  |  Branch (865:45): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 3637|  1.59M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3639|      0|                    it,
 3640|      0|                    do_read_source_impl(
 3641|      0|                        r,
 3642|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|      0|            }
 3645|  1.59M|            else {
 3646|  1.59M|                auto cb = [&](const auto& rr)
 3647|  1.59M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|  1.59M|                    auto res = read_all(rr);
 3649|  1.59M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|  1.59M|                        return detail::unexpected_scan_error(
 3651|  1.59M|                            scan_error::invalid_scanned_value,
 3652|  1.59M|                            "Invalid float value");
 3653|  1.59M|                    }
 3654|  1.59M|                    return res;
 3655|  1.59M|                };
 3656|  1.59M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|  1.59M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.59M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 55.5k, False: 1.54M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  55.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  55.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  55.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  55.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  55.5k|    }                                                  \
  |  | 3939|  1.59M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3657|  1.54M|            }
 3658|       |        }
 3659|       |        else {
 3660|       |            SCN_TRY_ASSIGN(
 3661|       |                it,
 3662|       |                do_read_source_impl(
 3663|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|       |        }
 3666|       |
 3667|  1.59M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|  1.54M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 1.53M, False: 9.39k]
  |  Branch (3669:48): [True: 1.52M, False: 9.05k]
  ------------------
 3670|  1.54M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 1.46M, False: 60.5k]
  ------------------
 3671|  1.54M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 1.46M, False: 3.52k]
  ------------------
 3672|  1.46M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|  1.46M|        }
 3674|       |
 3675|  1.54M|        handle_separators();
 3676|       |
 3677|  1.54M|        return it;
 3678|  1.59M|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3720|  1.59M|    {
 3721|  1.59M|        auto it = range.begin();
 3722|  1.59M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 1.58M, False: 18.4k]
  ------------------
 3723|  1.58M|            return unexpected(r.error());
 3724|  1.58M|        }
 3725|  18.4k|        else {
 3726|  18.4k|            it = *r;
 3727|  18.4k|        }
 3728|       |
 3729|  18.4k|        if (auto r = read_matching_string_classic_nocase(
 3730|  18.4k|                ranges::subrange{it, range.end()}, "inity");
 3731|  18.4k|            !r) {
  ------------------
  |  Branch (3731:13): [True: 9.39k, False: 9.05k]
  ------------------
 3732|  9.39k|            m_kind = float_kind::inf_short;
 3733|  9.39k|            return it;
 3734|  9.39k|        }
 3735|  9.05k|        else {
 3736|  9.05k|            m_kind = float_kind::inf_long;
 3737|  9.05k|            return *r;
 3738|  9.05k|        }
 3739|  18.4k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3743|  1.58M|    {
 3744|  1.58M|        auto it = range.begin();
 3745|  1.58M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 1.51M, False: 65.6k]
  ------------------
 3746|  1.51M|            return r.transform_error(map_parse_error_to_scan_error(
 3747|  1.51M|                scan_error::invalid_scanned_value,
 3748|  1.51M|                "Invalid floating-point NaN value"));
 3749|  1.51M|        }
 3750|  65.6k|        else {
 3751|  65.6k|            it = *r;
 3752|  65.6k|        }
 3753|       |
 3754|  65.6k|        if (auto r =
 3755|  65.6k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|  65.6k|            !r) {
  ------------------
  |  Branch (3756:13): [True: 60.5k, False: 5.08k]
  ------------------
 3757|  60.5k|            m_kind = float_kind::nan_simple;
 3758|  60.5k|            return it;
 3759|  60.5k|        }
 3760|  5.08k|        else {
 3761|  5.08k|            it = *r;
 3762|  5.08k|        }
 3763|       |
 3764|  5.08k|        auto payload_beg_it = it;
 3765|  5.08k|        it = read_while_code_unit(
 3766|  5.08k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|  5.08k|                return is_ascii_char(ch) &&
 3768|  5.08k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|  5.08k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|  5.08k|            });
 3771|  5.08k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|  5.08k|        m_kind = float_kind::nan_with_payload;
 3774|  5.08k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 3.52k, False: 1.56k]
  ------------------
 3775|  5.08k|                                             ')')) {
 3776|  3.52k|            return *r;
 3777|  3.52k|        }
 3778|  1.56k|        return detail::unexpected_scan_error(
 3779|  1.56k|            scan_error::invalid_scanned_value,
 3780|  1.56k|            "Invalid floating-point NaN payload");
 3781|  5.08k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  5.08k|        : m_fptr([](storage fn,
  743|  5.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.08k|              cvref<T> obj = *get<T>(fn);
  745|  5.08k|              if constexpr (std::is_void_v<R>) {
  746|  5.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.08k|              }
  748|  5.08k|              else {
  749|  5.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.08k|              }
  751|  5.08k|          }),
  752|  5.08k|          m_storage(std::addressof(f))
  753|  5.08k|    {
  754|  5.08k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3766|   104k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|   104k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3767:24): [True: 104k, False: 116]
  ------------------
 3768|   104k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3768:26): [True: 100k, False: 3.89k]
  |  Branch (3768:39): [True: 90.8k, False: 9.65k]
  |  Branch (3768:54): [True: 2.84k, False: 10.7k]
  |  Branch (3768:67): [True: 2.75k, False: 83]
  ------------------
 3769|   104k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3769:26): [True: 6.90k, False: 3.89k]
  |  Branch (3769:39): [True: 2.55k, False: 4.34k]
  |  Branch (3769:53): [True: 4.26k, False: 3.98k]
  ------------------
 3770|   104k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  5.08k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.08k|        {
  662|  5.08k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3713|  1.06M|    {
 3714|  1.06M|        return read_matching_string_classic_nocase(range, "0x");
 3715|  1.06M|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1985|   914k|{
 1986|   914k|    auto it = read_while_code_unit(range, pred);
 1987|   914k|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 384k, False: 529k]
  ------------------
 1988|   384k|        return unexpected(parse_error::error);
 1989|   384k|    }
 1990|   529k|    return it;
 1991|   914k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3786|   263k|    {
 3787|   263k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3787:18): [True: 39.0k, False: 224k]
  ------------------
 3788|  39.0k|            auto beg_exp_it = range.begin();
 3789|  39.0k|            auto it = *r;
 3790|       |
 3791|  39.0k|            if (auto r_sign =
  ------------------
  |  Branch (3791:22): [True: 38.9k, False: 102]
  ------------------
 3792|  39.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3793|  38.9k|                it = r_sign->first;
 3794|  38.9k|            }
 3795|       |
 3796|  39.0k|            if (auto r_exp = read_while1_code_unit(
 3797|  39.0k|                    ranges::subrange{it, range.end()},
 3798|  39.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3799|  39.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 860, False: 38.2k]
  |  |  ------------------
  ------------------
 3800|    860|                it = beg_exp_it;
 3801|    860|            }
 3802|  38.2k|            else {
 3803|  38.2k|                it = *r_exp;
 3804|  38.2k|            }
 3805|       |
 3806|  39.0k|            return it;
 3807|  39.0k|        }
 3808|   224k|        return range.begin();
 3809|   263k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  39.0k|        : m_fptr([](storage fn,
  743|  39.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.0k|              cvref<T> obj = *get<T>(fn);
  745|  39.0k|              if constexpr (std::is_void_v<R>) {
  746|  39.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.0k|              }
  748|  39.0k|              else {
  749|  39.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.0k|              }
  751|  39.0k|          }),
  752|  39.0k|          m_storage(std::addressof(f))
  753|  39.0k|    {
  754|  39.0k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3798|   116k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  39.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.0k|        {
  662|  39.0k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3855|   455k|    {
 3856|   455k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3857|   455k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3857:35): [True: 281k, False: 174k]
  |  Branch (3857:50): [True: 26.9k, False: 254k]
  ------------------
 3858|       |
 3859|   455k|        auto it = ranges::begin(range);
 3860|   455k|        std::ptrdiff_t digits_count = 0;
 3861|       |
 3862|   455k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3863|   455k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.8k, False: 419k]
  |  |  ------------------
  ------------------
 3864|  35.8k|            return r.transform_error(
 3865|  35.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3866|  35.8k|                                              "Invalid floating-point value"));
 3867|  35.8k|        }
 3868|   419k|        else {
 3869|   419k|            digits_count += ranges::distance(it, *r);
 3870|   419k|            it = *r;
 3871|   419k|        }
 3872|       |
 3873|   419k|        m_integral_part_length = digits_count;
 3874|   419k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3874:18): [True: 77.7k, False: 341k]
  ------------------
 3875|   419k|                                             m_locale_options.decimal_point)) {
 3876|  77.7k|            it = *r;
 3877|  77.7k|        }
 3878|       |
 3879|   419k|        if (auto r =
  ------------------
  |  Branch (3879:18): [True: 71.5k, False: 348k]
  ------------------
 3880|   419k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3881|  71.5k|            digits_count += ranges::distance(it, *r);
 3882|  71.5k|            it = *r;
 3883|  71.5k|        }
 3884|       |
 3885|   419k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 3886|      0|            return detail::unexpected_scan_error(
 3887|      0|                scan_error::invalid_scanned_value,
 3888|      0|                "No significand digits in float");
 3889|      0|        }
 3890|       |
 3891|   419k|        auto beg_exp_it = it;
 3892|   419k|        if (allowed_exp) {
  ------------------
  |  Branch (3892:13): [True: 263k, False: 155k]
  ------------------
 3893|   263k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3894|   263k|        }
 3895|   419k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3895:13): [True: 25.3k, False: 394k]
  |  Branch (3895:29): [True: 17.2k, False: 8.09k]
  ------------------
 3896|  17.2k|            return detail::unexpected_scan_error(
 3897|  17.2k|                scan_error::invalid_scanned_value,
 3898|  17.2k|                "No exponent given to scientific float");
 3899|  17.2k|        }
 3900|       |
 3901|   402k|        m_kind =
 3902|   402k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3902:13): [True: 364k, False: 38.2k]
  ------------------
 3903|       |
 3904|   402k|        return it;
 3905|   419k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3683|   875k|    {
 3684|   875k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   875k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 875k]
  |  |  |  Branch (865:45): [True: 0, False: 875k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3685|   875k|                         thsep_allowed)) {
 3686|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3687|      0|                return char_to_int(ch) < 10 ||
 3688|      0|                       ch == m_locale_options.thousands_sep;
 3689|      0|            });
 3690|      0|        }
 3691|       |
 3692|   875k|        return read_while1_code_unit(
 3693|   875k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3694|   875k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   875k|        : m_fptr([](storage fn,
  743|   875k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   875k|              cvref<T> obj = *get<T>(fn);
  745|   875k|              if constexpr (std::is_void_v<R>) {
  746|   875k|                  obj(static_cast<decltype(args)>(args)...);
  747|   875k|              }
  748|   875k|              else {
  749|   875k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   875k|              }
  751|   875k|          }),
  752|   875k|          m_storage(std::addressof(f))
  753|   875k|    {
  754|   875k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  4.65M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.65M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.65M|              else {
  749|  4.65M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.65M|              }
  751|  4.65M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  4.65M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.65M|        else if constexpr (std::is_object_v<T>) {
  688|  4.65M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.65M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3693|  4.65M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   875k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   875k|        {
  662|   875k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3912|  1.59M|    {
 3913|  1.59M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|  1.59M|        const bool allowed_nonhex =
 3915|  1.59M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|  1.59M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|  1.59M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 1.58M, False: 18.4k]
  |  Branch (3918:45): [True: 0, False: 1.58M]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|  1.59M|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 18.4k, False: 1.58M]
  ------------------
 3924|  18.4k|            return *r;
 3925|  18.4k|        }
 3926|       |
 3927|  1.58M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 1.51M, False: 64.0k]
  |  Branch (3927:45): [True: 1.56k, False: 1.51M]
  ------------------
 3928|  1.56k|            return unexpected(r.error());
 3929|  1.56k|        }
 3930|  1.57M|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 64.0k, False: 1.51M]
  ------------------
 3931|  64.0k|            return *r;
 3932|  64.0k|        }
 3933|       |
 3934|  1.51M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 1.06M, False: 455k]
  |  Branch (3934:28): [True: 319k, False: 740k]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|   319k|            auto it = range.begin();
 3938|       |
 3939|   319k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 14.6k, False: 305k]
  ------------------
 3940|  14.6k|                m_kind = float_kind::hex_with_prefix;
 3941|  14.6k|                it = *r;
 3942|  14.6k|            }
 3943|   305k|            else {
 3944|   305k|                m_kind = float_kind::hex_without_prefix;
 3945|   305k|            }
 3946|       |
 3947|   319k|            return read_hex(ranges::subrange{it, range.end()});
 3948|   319k|        }
 3949|  1.19M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 455k, False: 740k]
  |  Branch (3949:29): [True: 455k, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|   455k|            m_kind = float_kind::generic;
 3953|   455k|            return read_regular_float(range);
 3954|   455k|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|   740k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 35.6k, False: 704k]
  |  |  ------------------
  ------------------
 3960|  35.6k|            m_kind = float_kind::hex_with_prefix;
 3961|  35.6k|            return read_hex(ranges::subrange{*r, range.end()});
 3962|  35.6k|        }
 3963|       |
 3964|   704k|        m_kind = float_kind::generic;
 3965|   704k|        return read_regular(range);
 3966|   740k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3647|  1.06M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|  1.06M|                    auto res = read_all(rr);
 3649|  1.06M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 921, False: 1.05M]
  |  |  ------------------
  ------------------
 3650|    921|                        return detail::unexpected_scan_error(
 3651|    921|                            scan_error::invalid_scanned_value,
 3652|    921|                            "Invalid float value");
 3653|    921|                    }
 3654|  1.05M|                    return res;
 3655|  1.06M|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1828|  1.06M|{
 1829|  1.06M|    return ranges::next(range.begin(), range.end());
 1830|  1.06M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.06M|    {
  313|  1.06M|        ranges::advance(x, bound);
  314|  1.06M|        return x;
  315|  1.06M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.06M|    {
  275|  1.06M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.06M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.06M|    {
  190|  1.06M|        i = std::move(bound);
  191|  1.06M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1566|  1.46M|    {
 1567|  1.46M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|  1.46M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1610|  1.46M|    {
 1611|  1.46M|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|  1.46M|                      ranges::sized_range<Range>) {
 1616|  1.46M|            m_storage.reset();
 1617|  1.46M|            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|  1.46M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   266k|        : m_fptr([](storage fn,
  743|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   266k|              cvref<T> obj = *get<T>(fn);
  745|   266k|              if constexpr (std::is_void_v<R>) {
  746|   266k|                  obj(static_cast<decltype(args)>(args)...);
  747|   266k|              }
  748|   266k|              else {
  749|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   266k|              }
  751|   266k|          }),
  752|   266k|          m_storage(std::addressof(f))
  753|   266k|    {
  754|   266k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   266k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   266k|              else {
  749|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   266k|              }
  751|   266k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   266k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   266k|        else if constexpr (std::is_object_v<T>) {
  688|   266k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   266k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4098|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   266k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   266k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3586|  1.28M|    {
 3587|  1.28M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.28M]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|  1.28M|        return read_source_impl(range);
 3593|  1.28M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   266k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   266k|        {
  662|   266k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   460k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   460k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   460k|            auto rd = make_reader<T, char_type>();
 6116|   460k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   460k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 460k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   460k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 460k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   460k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   460k|                return impl(rd, range, value);
 6121|   460k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   460k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   460k|    {
 6041|   460k|        const bool need_skipped_width =
 6042|   460k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 460k]
  |  Branch (6042:33): [True: 0, False: 460k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   460k|        auto it = rng.begin();
 6046|   460k|        std::ptrdiff_t prefix_width = 0;
 6047|   460k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 460k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   460k|        else {
 6055|   460k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   460k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   460k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   460k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.95k, False: 454k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.95k|    }                                                  \
  |  |  |  | 3939|   460k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   454k|            std::tie(it, prefix_width) = prefix_result;
 6057|   454k|        }
 6058|   454k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   454k|        std::ptrdiff_t value_width = 0;
 6062|   454k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 454k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   454k|        else {
 6078|   454k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   454k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   454k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 27.7k, False: 426k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  27.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  27.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  27.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  27.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  27.7k|    }                                                  \
  |  | 3939|   454k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   426k|                                             specs, value, loc));
 6080|       |
 6081|   426k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 426k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   426k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   426k|        std::ptrdiff_t postfix_width = 0;
 6090|   426k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 421k, False: 4.85k]
  ------------------
 6091|   421k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   421k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   421k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   421k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   421k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   421k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   421k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   421k|                                 value_width));
 6095|   421k|            std::tie(it, postfix_width) = postfix_result;
 6096|   421k|        }
 6097|       |
 6098|   426k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   426k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 426k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   426k|            specs, prefix_width, value_width, postfix_width));
 6100|   426k|        return it;
 6101|   426k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3612|  1.11M|    {
 3613|  1.11M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|  1.11M|        const std::ptrdiff_t sign_len =
 3616|  1.11M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 254k, False: 859k]
  ------------------
 3617|       |
 3618|  1.11M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|  1.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.1k, False: 1.09M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.1k|    }                                                  \
  |  |  |  | 3939|  1.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|  1.09M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|  1.11M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4082|   454k|    {
 4083|   454k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   454k|#if !SCN_DISABLE_LOCALE
 4086|   454k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 129k, False: 325k]
  ------------------
 4087|   129k|            return read_impl<Range>(
 4088|   129k|                range, rd,
 4089|   129k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   129k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|   129k|                },
 4092|   129k|                value, loc);
 4093|   129k|        }
 4094|   325k|#endif
 4095|       |
 4096|   325k|        return read_impl<Range>(
 4097|   325k|            range, rd,
 4098|   325k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   325k|                return r.read_source(SCN_FWD(args)...);
 4100|   325k|            },
 4101|   325k|            value);
 4102|   454k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|   629k|    {
 4119|   629k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   629k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.9k, False: 595k]
  |  |  ------------------
  ------------------
 4121|  33.9k|            return unexpected(r.error());
 4122|  33.9k|        }
 4123|       |
 4124|   595k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   595k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.01k, False: 593k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.01k|    }                                                  \
  |  |  |  | 3939|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   593k|        return ranges::next(range.begin(), n);
 4126|   595k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   129k|        : m_fptr([](storage fn,
  743|   129k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   129k|              cvref<T> obj = *get<T>(fn);
  745|   129k|              if constexpr (std::is_void_v<R>) {
  746|   129k|                  obj(static_cast<decltype(args)>(args)...);
  747|   129k|              }
  748|   129k|              else {
  749|   129k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   129k|              }
  751|   129k|          }),
  752|   129k|          m_storage(std::addressof(f))
  753|   129k|    {
  754|   129k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   129k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   129k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   129k|              else {
  749|   129k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   129k|              }
  751|   129k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   129k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   129k|        else if constexpr (std::is_object_v<T>) {
  688|   129k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   129k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4089|   129k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   129k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|   129k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   129k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   129k|        {
  662|   129k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   325k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   325k|        else if constexpr (std::is_object_v<T>) {
  688|   325k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   325k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4098|   325k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   325k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   325k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4082|   379k|    {
 4083|   379k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   379k|#if !SCN_DISABLE_LOCALE
 4086|   379k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 105k, False: 274k]
  ------------------
 4087|   105k|            return read_impl<Range>(
 4088|   105k|                range, rd,
 4089|   105k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   105k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|   105k|                },
 4092|   105k|                value, loc);
 4093|   105k|        }
 4094|   274k|#endif
 4095|       |
 4096|   274k|        return read_impl<Range>(
 4097|   274k|            range, rd,
 4098|   274k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   274k|                return r.read_source(SCN_FWD(args)...);
 4100|   274k|            },
 4101|   274k|            value);
 4102|   379k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|   537k|    {
 4119|   537k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   537k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.5k, False: 518k]
  |  |  ------------------
  ------------------
 4121|  18.5k|            return unexpected(r.error());
 4122|  18.5k|        }
 4123|       |
 4124|   518k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   518k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   518k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   518k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   518k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 19.0k, False: 499k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  19.0k|    }                                                  \
  |  |  |  | 3939|   518k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   499k|        return ranges::next(range.begin(), n);
 4126|   518k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   105k|        : m_fptr([](storage fn,
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
  752|   105k|          m_storage(std::addressof(f))
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   105k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  688|   105k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   105k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4089|   105k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   105k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|   105k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   105k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   274k|        : m_fptr([](storage fn,
  743|   274k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   274k|              cvref<T> obj = *get<T>(fn);
  745|   274k|              if constexpr (std::is_void_v<R>) {
  746|   274k|                  obj(static_cast<decltype(args)>(args)...);
  747|   274k|              }
  748|   274k|              else {
  749|   274k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   274k|              }
  751|   274k|          }),
  752|   274k|          m_storage(std::addressof(f))
  753|   274k|    {
  754|   274k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   274k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   274k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   274k|              else {
  749|   274k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   274k|              }
  751|   274k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   274k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   274k|        else if constexpr (std::is_object_v<T>) {
  688|   274k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   274k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4098|   274k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   274k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   274k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   274k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   274k|        {
  662|   274k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   465k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   465k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   465k|            auto rd = make_reader<T, char_type>();
 6116|   465k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   465k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 465k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   465k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 465k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   465k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   465k|                return impl(rd, range, value);
 6121|   465k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   465k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   465k|    {
 6041|   465k|        const bool need_skipped_width =
 6042|   465k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 465k]
  |  Branch (6042:33): [True: 0, False: 465k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   465k|        auto it = rng.begin();
 6046|   465k|        std::ptrdiff_t prefix_width = 0;
 6047|   465k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 465k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   465k|        else {
 6055|   465k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   465k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   465k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   465k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.34k, False: 458k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.34k|    }                                                  \
  |  |  |  | 3939|   465k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   458k|            std::tie(it, prefix_width) = prefix_result;
 6057|   458k|        }
 6058|   458k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   458k|        std::ptrdiff_t value_width = 0;
 6062|   458k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 458k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   458k|        else {
 6078|   458k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   458k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   458k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 27.3k, False: 431k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  27.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  27.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  27.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  27.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  27.3k|    }                                                  \
  |  | 3939|   458k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   431k|                                             specs, value, loc));
 6080|       |
 6081|   431k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 431k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   431k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   431k|        std::ptrdiff_t postfix_width = 0;
 6090|   431k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 426k, False: 5.13k]
  ------------------
 6091|   426k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   426k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   426k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   426k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 426k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   426k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   426k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   426k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   426k|                                 value_width));
 6095|   426k|            std::tie(it, postfix_width) = postfix_result;
 6096|   426k|        }
 6097|       |
 6098|   431k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   431k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 431k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   431k|            specs, prefix_width, value_width, postfix_width));
 6100|   431k|        return it;
 6101|   431k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3612|  1.12M|    {
 3613|  1.12M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|  1.12M|        const std::ptrdiff_t sign_len =
 3616|  1.12M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 259k, False: 865k]
  ------------------
 3617|       |
 3618|  1.12M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|  1.12M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.12M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.12M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18.9k, False: 1.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  18.9k|    }                                                  \
  |  |  |  | 3939|  1.12M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|  1.10M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|  1.12M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4082|   458k|    {
 4083|   458k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   458k|#if !SCN_DISABLE_LOCALE
 4086|   458k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 130k, False: 327k]
  ------------------
 4087|   130k|            return read_impl<Range>(
 4088|   130k|                range, rd,
 4089|   130k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   130k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|   130k|                },
 4092|   130k|                value, loc);
 4093|   130k|        }
 4094|   327k|#endif
 4095|       |
 4096|   327k|        return read_impl<Range>(
 4097|   327k|            range, rd,
 4098|   327k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   327k|                return r.read_source(SCN_FWD(args)...);
 4100|   327k|            },
 4101|   327k|            value);
 4102|   458k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|   635k|    {
 4119|   635k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   635k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   635k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.8k, False: 600k]
  |  |  ------------------
  ------------------
 4121|  34.8k|            return unexpected(r.error());
 4122|  34.8k|        }
 4123|       |
 4124|   600k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   600k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   600k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   600k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 610, False: 599k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    610|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    610|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    610|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    610|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    610|    }                                                  \
  |  |  |  | 3939|   600k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   599k|        return ranges::next(range.begin(), n);
 4126|   600k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   130k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   130k|        else if constexpr (std::is_object_v<T>) {
  688|   130k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   130k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4089|   130k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   130k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|   130k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   327k|        : m_fptr([](storage fn,
  743|   327k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   327k|              cvref<T> obj = *get<T>(fn);
  745|   327k|              if constexpr (std::is_void_v<R>) {
  746|   327k|                  obj(static_cast<decltype(args)>(args)...);
  747|   327k|              }
  748|   327k|              else {
  749|   327k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   327k|              }
  751|   327k|          }),
  752|   327k|          m_storage(std::addressof(f))
  753|   327k|    {
  754|   327k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   327k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   327k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   327k|              else {
  749|   327k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   327k|              }
  751|   327k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   327k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   327k|        else if constexpr (std::is_object_v<T>) {
  688|   327k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   327k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4098|   327k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   327k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   327k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   327k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   327k|        {
  662|   327k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4082|   383k|    {
 4083|   383k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   383k|#if !SCN_DISABLE_LOCALE
 4086|   383k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 107k, False: 276k]
  ------------------
 4087|   107k|            return read_impl<Range>(
 4088|   107k|                range, rd,
 4089|   107k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   107k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|   107k|                },
 4092|   107k|                value, loc);
 4093|   107k|        }
 4094|   276k|#endif
 4095|       |
 4096|   276k|        return read_impl<Range>(
 4097|   276k|            range, rd,
 4098|   276k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   276k|                return r.read_source(SCN_FWD(args)...);
 4100|   276k|            },
 4101|   276k|            value);
 4102|   383k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|   543k|    {
 4119|   543k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   543k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.9k, False: 524k]
  |  |  ------------------
  ------------------
 4121|  18.9k|            return unexpected(r.error());
 4122|  18.9k|        }
 4123|       |
 4124|   524k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   524k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18.3k, False: 506k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  18.3k|    }                                                  \
  |  |  |  | 3939|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   506k|        return ranges::next(range.begin(), n);
 4126|   524k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4089|   107k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|   107k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|   107k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   276k|        : m_fptr([](storage fn,
  743|   276k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   276k|              cvref<T> obj = *get<T>(fn);
  745|   276k|              if constexpr (std::is_void_v<R>) {
  746|   276k|                  obj(static_cast<decltype(args)>(args)...);
  747|   276k|              }
  748|   276k|              else {
  749|   276k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   276k|              }
  751|   276k|          }),
  752|   276k|          m_storage(std::addressof(f))
  753|   276k|    {
  754|   276k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   276k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   276k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   276k|              else {
  749|   276k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   276k|              }
  751|   276k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   276k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   276k|        else if constexpr (std::is_object_v<T>) {
  688|   276k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   276k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4098|   276k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   276k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   276k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   276k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   276k|        {
  662|   276k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.88M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.88M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.88M|        else {
 1055|  1.88M|            return r.begin().contiguous_segment();
 1056|  1.88M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.88M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|  1.67M|{
 2051|  1.67M|    auto it = range.begin();
 2052|  3.23M|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 3.21M, False: 18.1k]
  ------------------
 2053|  3.21M|        const auto val =
 2054|  3.21M|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  3.21M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  3.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.19M, False: 21.5k]
  |  |  ------------------
  ------------------
 2056|  3.19M|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  3.19M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  3.19M|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 1.65M, False: 1.53M]
  ------------------
 2059|  1.65M|                return it;
 2060|  1.65M|            }
 2061|  3.19M|        }
 2062|  1.55M|        it = val.iterator;
 2063|  1.55M|    }
 2064|       |
 2065|  18.1k|    return it;
 2066|  1.67M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1888|  3.21M|{
 1889|  3.21M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  3.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  3.21M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  3.21M|    auto it = range.begin();
 1893|  3.21M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  3.21M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  3.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.5k, False: 3.19M]
  |  |  ------------------
  ------------------
 1896|  21.5k|        ++it;
 1897|  21.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|  21.5k|        return {it, {}};
 1899|  21.5k|    }
 1900|       |
 1901|  3.19M|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 3.16M, False: 28.1k]
  ------------------
 1902|  3.16M|        ++it;
 1903|  3.16M|        return {it, string_type(1, *range.begin())};
 1904|  3.16M|    }
 1905|       |
 1906|  28.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|  28.1k|    return {it, string_type{range.begin(), it}};
 1908|  3.19M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1155|  21.5k|{
 1156|  21.5k|    auto it = input.begin();
 1157|   212k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 210k, False: 1.53k]
  ------------------
 1158|   210k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 20.0k, False: 190k]
  ------------------
 1159|  20.0k|            break;
 1160|  20.0k|        }
 1161|   210k|    }
 1162|  21.5k|    return it;
 1163|  21.5k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  28.1k|    {
  283|  28.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  28.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  28.1k|    {
  252|  28.1k|        constexpr iter_difference_t<I> zero{0};
  253|  28.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|  85.0k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 58.0k, False: 27.0k]
  |  Branch (255:30): [True: 56.9k, False: 1.10k]
  ------------------
  256|  56.9k|            ++i;
  257|  56.9k|            ++counter;
  258|  56.9k|        }
  259|       |
  260|  28.1k|        return counter;
  261|  28.1k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1879|  3.21M|    {
 1880|  3.21M|        return !codepoint.empty();
 1881|  3.21M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|  1.67M|{
 2072|  1.67M|    return read_until_code_point(range, std::not_fn(pred));
 2073|  1.67M|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|  1.88M|{
 2946|  1.88M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 1.88M, False: 0]
  ------------------
 2947|  1.88M|        auto it = read_while_classic_space(range);
 2948|  1.88M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|  1.88M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.1k, False: 1.86M]
  |  |  ------------------
  ------------------
 2950|  18.1k|            return unexpected(e);
 2951|  18.1k|        }
 2952|       |
 2953|  1.86M|        return it;
 2954|  1.88M|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|  1.88M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|  1.88M|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|  1.88M|    else {
 2116|  1.88M|        auto it = range.begin();
 2117|       |
 2118|  1.88M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|  1.88M|            auto seg = get_contiguous_beginning(range);
 2120|  1.88M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|  1.88M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2121:17): [True: 203k, False: 1.67M]
  ------------------
 2122|   203k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|   203k|            }
 2124|  1.67M|            ranges::advance(it, seg.size());
 2125|  1.67M|        }
 2126|       |
 2127|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  1.88M|            return detail::is_cp_space(cp);
 2129|  1.88M|        });
 2130|  1.88M|    }
 2131|  1.88M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.67M|        : m_fptr([](storage fn,
  743|  1.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.67M|              cvref<T> obj = *get<T>(fn);
  745|  1.67M|              if constexpr (std::is_void_v<R>) {
  746|  1.67M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.67M|              }
  748|  1.67M|              else {
  749|  1.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.67M|              }
  751|  1.67M|          }),
  752|  1.67M|          m_storage(std::addressof(f))
  753|  1.67M|    {
  754|  1.67M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.19M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.19M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.19M|              else {
  749|  3.19M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.19M|              }
  751|  3.19M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.19M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.19M|        else if constexpr (std::is_object_v<T>) {
  688|  3.19M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.19M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|  3.19M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  3.19M|            return detail::is_cp_space(cp);
 2129|  3.19M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.67M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.67M|        {
  662|  1.67M|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   918k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   918k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   918k|        auto beg = r.begin();
  991|   918k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 918k, False: 0]
  ------------------
  992|   918k|            return false;
  993|   918k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   918k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  6.54M|    {
  763|  6.54M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  6.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.54M|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1846|  2.42M|{
 1847|  2.42M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|  2.42M|    else {
 1858|  2.42M|        auto it = range.begin();
 1859|  2.42M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 1.47M, False: 949k]
  ------------------
 1860|  1.47M|            return ranges::next(it, count);
 1861|  1.47M|        }
 1862|       |
 1863|  3.70M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 2.81M, False: 888k]
  ------------------
 1864|  2.81M|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 61.1k, False: 2.75M]
  ------------------
 1865|  61.1k|                return unexpected(eof_error::eof);
 1866|  61.1k|            }
 1867|  2.81M|        }
 1868|       |
 1869|   888k|        return it;
 1870|   949k|    }
 1871|  2.42M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  2.42M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  2.42M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  2.42M|        else {
 1107|  2.42M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 2.42M, False: 0]
  ------------------
 1108|  2.42M|                return static_cast<size_t>(
 1109|  2.42M|                    r.begin().parent()->chars_available() -
 1110|  2.42M|                    r.begin().position());
 1111|  2.42M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  2.42M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  2.42M|}
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.14M|        : m_fptr([](storage fn,
  743|  2.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.14M|              cvref<T> obj = *get<T>(fn);
  745|  2.14M|              if constexpr (std::is_void_v<R>) {
  746|  2.14M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.14M|              }
  748|  2.14M|              else {
  749|  2.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.14M|              }
  751|  2.14M|          }),
  752|  2.14M|          m_storage(std::addressof(f))
  753|  2.14M|    {
  754|  2.14M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.27M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.27M|              else {
  749|  3.27M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.27M|              }
  751|  3.27M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.27M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.27M|        else if constexpr (std::is_object_v<T>) {
  688|  3.27M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.27M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.14M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.14M|        {
  662|  2.14M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 5953|   671k|    {
 5954|   671k|        const bool need_skipped_width =
 5955|   671k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 671k]
  |  Branch (5955:33): [True: 0, False: 671k]
  ------------------
 5956|   671k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|   671k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 671k]
  ------------------
 5960|   671k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 671k]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|   671k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 671k, False: 0]
  |  Branch (5964:56): [True: 671k, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|   671k|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 671k]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  1.34M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   671k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   671k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   671k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.90k, False: 668k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.90k|    }                                                  \
  |  |  |  | 3939|   671k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  1.34M|                            make_eof_scan_error));
 5975|       |
 5976|  1.34M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 668k]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|   668k|            return result_type{it, 0};
 5984|  1.34M|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|   671k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1965|  1.60M|{
 1966|  1.60M|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  1.60M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1946|  1.60M|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|  1.60M|    else {
 1951|  1.60M|        auto first = range.begin();
 1952|  2.46M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 2.45M, False: 3.45k]
  ------------------
 1953|  2.45M|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 1.59M, False: 860k]
  ------------------
 1954|  1.59M|                return first;
 1955|  1.59M|            }
 1956|  2.45M|        }
 1957|  3.45k|        return first;
 1958|  1.60M|    }
 1959|  1.60M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.13M|    {
  108|  1.13M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.13M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.13M|    {
   94|  1.13M|        iter_difference_t<I> counter{0};
   95|  3.03M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.89M, False: 1.13M]
  ------------------
   96|  1.89M|            ++i;
   97|  1.89M|            ++counter;
   98|  1.89M|        }
   99|  1.13M|        return counter;
  100|  1.13M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1769|   328k|    {
 1770|   328k|        auto stdloc = loc.get<std::locale>();
 1771|   328k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1772|   328k|        grouping = numpunct.grouping();
 1773|   328k|        thousands_sep =
 1774|   328k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1774:13): [True: 0, False: 328k]
  ------------------
 1775|   328k|        decimal_point = numpunct.decimal_point();
 1776|   328k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1706|   328k|{
 1707|   328k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1707:9): [True: 328k, False: 0]
  ------------------
 1708|   328k|        return std::use_facet<Facet>(stdloc);
 1709|   328k|    }
 1710|      0|    stdloc = std::locale(stdloc, new Facet{});
 1711|      0|    return std::use_facet<Facet>(stdloc);
 1712|   328k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1835|  2.17M|{
 1836|  2.17M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.23k, False: 2.17M]
  |  |  ------------------
  ------------------
 1837|  2.23k|        return unexpected(e);
 1838|  2.23k|    }
 1839|       |
 1840|  2.17M|    return ranges::next(range.begin());
 1841|  2.17M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  3.34M|{
  951|  3.34M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  3.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.12k, False: 3.33M]
  |  |  ------------------
  ------------------
  952|  6.12k|        return eof_error::eof;
  953|  6.12k|    }
  954|  3.33M|    return eof_error::good;
  955|  3.34M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  4.94M|{
  945|  4.94M|    return is_range_eof(r.begin(), r.end());
  946|  4.94M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  4.94M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  4.94M|    {
  938|  4.94M|        return begin == end;
  939|  4.94M|    }
  940|  4.94M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.17M|    {
  296|  2.17M|        ++x;
  297|  2.17M|        return x;
  298|  2.17M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3137|   934k|{
 3138|   934k|    auto r = read_one_of_code_unit(range, "+-");
 3139|   934k|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 924k, False: 9.76k]
  ------------------
 3140|   924k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 924k, False: 91]
  ------------------
 3141|   924k|            return std::pair{range.begin(), sign_type::default_sign};
 3142|   924k|        }
 3143|     91|        return unexpected(eof_error::eof);
 3144|   924k|    }
 3145|       |
 3146|  9.76k|    auto& it = *r;
 3147|  9.76k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 8.21k, False: 1.55k]
  ------------------
 3148|  8.21k|        return std::pair{it, sign_type::minus_sign};
 3149|  8.21k|    }
 3150|  1.55k|    return std::pair{it, sign_type::plus_sign};
 3151|  9.76k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2262|  1.51M|{
 2263|  1.51M|    auto it = read_code_unit(range);
 2264|  1.51M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.23k, False: 1.51M]
  |  |  ------------------
  ------------------
 2265|  1.23k|        return unexpected(make_eof_parse_error(it.error()));
 2266|  1.23k|    }
 2267|       |
 2268|  3.02M|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 3.02M, False: 1.48M]
  ------------------
 2269|  3.02M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 29.4k, False: 2.99M]
  ------------------
 2270|  29.4k|            return *it;
 2271|  29.4k|        }
 2272|  3.02M|    }
 2273|       |
 2274|  1.48M|    return unexpected(parse_error::error);
 2275|  1.51M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2221|  2.42M|{
 2222|  2.42M|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|  2.42M|    else {
 2235|  2.42M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  2.42M|            if (ch < 'A' || ch > 'Z') {
 2237|  2.42M|                return ch;
 2238|  2.42M|            }
 2239|  2.42M|            return static_cast<char_type>(ch +
 2240|  2.42M|                                          static_cast<char_type>('a' - 'A'));
 2241|  2.42M|        };
 2242|       |
 2243|  2.42M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 61.1k, False: 2.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  61.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  61.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  61.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  61.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  61.1k|    }                                                  \
  |  |  |  | 3939|  2.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|  2.36M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|  2.36M|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|  2.36M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.35M, False: 1.55k]
  |  |  ------------------
  ------------------
 2248|  2.36M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|  2.36M|                    return ascii_tolower(a) ==
 2250|  2.36M|                           static_cast<detail::char_t<Range>>(b);
 2251|  2.36M|                }))) {
 2252|  2.35M|            return unexpected(parse_error::error);
 2253|  2.35M|        }
 2254|       |
 2255|  1.55k|        return it;
 2256|  2.36M|    }
 2257|  2.42M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2235|  2.76M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  2.76M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 2.16M, False: 597k]
  |  Branch (2236:29): [True: 579k, False: 18.0k]
  ------------------
 2237|  2.74M|                return ch;
 2238|  2.74M|            }
 2239|  18.0k|            return static_cast<char_type>(ch +
 2240|  18.0k|                                          static_cast<char_type>('a' - 'A'));
 2241|  2.76M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2136|   666k|{
 2137|   666k|    auto it = read_code_unit(range);
 2138|   666k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   666k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 997, False: 665k]
  |  |  ------------------
  ------------------
 2139|    997|        return unexpected(make_eof_parse_error(it.error()));
 2140|    997|    }
 2141|       |
 2142|   665k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 661k, False: 3.54k]
  |  |  ------------------
  ------------------
 2143|   665k|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|   661k|        return unexpected(parse_error::error);
 2145|   661k|    }
 2146|       |
 2147|  3.54k|    return *it;
 2148|   665k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1985|  1.60M|{
 1986|  1.60M|    auto it = read_while_code_unit(range, pred);
 1987|  1.60M|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 913k, False: 686k]
  ------------------
 1988|   913k|        return unexpected(parse_error::error);
 1989|   913k|    }
 1990|   686k|    return it;
 1991|  1.60M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1610|   660k|    {
 1611|   660k|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|   660k|                           ranges::common_range<Range>) {
 1628|   660k|            auto beg_seg = range.begin().contiguous_segment();
 1629|   660k|            auto end_seg = range.end().contiguous_segment();
 1630|   660k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.9k, False: 638k]
  |  |  ------------------
  ------------------
 1631|   660k|                             detail::to_address(end_seg.end()))) {
 1632|  21.9k|                auto& str = m_storage.emplace();
 1633|  21.9k|                str.reserve(range.end().position() - range.begin().position());
 1634|  21.9k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|  21.9k|                m_view = string_view_type{str};
 1636|  21.9k|                return;
 1637|  21.9k|            }
 1638|       |
 1639|   638k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|   638k|                                                            end_seg.data());
 1641|   638k|            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|   660k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1571|  5.83M|    {
 1572|  5.83M|        return m_view;
 1573|  5.83M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1561|  3.66M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 5995|   467k|    {
 5996|   467k|        const bool need_skipped_width =
 5997|   467k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 467k]
  |  Branch (5997:33): [True: 0, False: 467k]
  ------------------
 5998|   467k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|   467k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 467k]
  ------------------
 6001|   467k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 467k]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|   467k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 467k, False: 0]
  ------------------
 6010|   467k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 467k]
  ------------------
 6011|   467k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|   467k|        return result_type{rng.begin(), 0};
 6035|   467k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1846|  2.42M|{
 1847|  2.42M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|  2.42M|    if constexpr (ranges::sized_range<Range>) {
 1850|  2.42M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|  2.42M|        if (sz < count) {
  ------------------
  |  Branch (1851:13): [True: 61.2k, False: 2.36M]
  ------------------
 1852|  61.2k|            return unexpected(eof_error::eof);
 1853|  61.2k|        }
 1854|       |
 1855|  2.36M|        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|       |    else {
 1858|       |        auto it = range.begin();
 1859|       |        if (guaranteed_minimum_size(range) >= count) {
 1860|       |            return ranges::next(it, count);
 1861|       |        }
 1862|       |
 1863|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1864|       |            if (it == range.end()) {
 1865|       |                return unexpected(eof_error::eof);
 1866|       |            }
 1867|       |        }
 1868|       |
 1869|       |        return it;
 1870|       |    }
 1871|  2.42M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1888|  2.84M|{
 1889|  2.84M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  2.84M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  2.84M|    auto it = range.begin();
 1893|  2.84M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  2.84M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.84M]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|  2.84M|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 2.84M, False: 0]
  ------------------
 1902|  2.84M|        ++it;
 1903|  2.84M|        return {it, string_type(1, *range.begin())};
 1904|  2.84M|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|  2.84M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  5.27M|{
  945|  5.27M|    return is_range_eof(r.begin(), r.end());
  946|  5.27M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  5.27M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  5.27M|    {
  938|  5.27M|        return begin == end;
  939|  5.27M|    }
  940|  5.27M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   592k|    {
  190|   592k|        i = std::move(bound);
  191|   592k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1879|  2.84M|    {
 1880|  2.84M|        return !codepoint.empty();
 1881|  2.84M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.42M|{
  951|  2.42M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.44k, False: 2.41M]
  |  |  ------------------
  ------------------
  952|  4.44k|        return eof_error::eof;
  953|  4.44k|    }
  954|  2.41M|    return eof_error::good;
  955|  2.42M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1835|  1.25M|{
 1836|  1.25M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 554, False: 1.25M]
  |  |  ------------------
  ------------------
 1837|    554|        return unexpected(e);
 1838|    554|    }
 1839|       |
 1840|  1.25M|    return ranges::next(range.begin());
 1841|  1.25M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.25M|    {
  296|  1.25M|        ++x;
  297|  1.25M|        return x;
  298|  1.25M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3137|   922k|{
 3138|   922k|    auto r = read_one_of_code_unit(range, "+-");
 3139|   922k|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 916k, False: 5.86k]
  ------------------
 3140|   916k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 916k, False: 30]
  ------------------
 3141|   916k|            return std::pair{range.begin(), sign_type::default_sign};
 3142|   916k|        }
 3143|     30|        return unexpected(eof_error::eof);
 3144|   916k|    }
 3145|       |
 3146|  5.86k|    auto& it = *r;
 3147|  5.86k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 4.56k, False: 1.29k]
  ------------------
 3148|  4.56k|        return std::pair{it, sign_type::minus_sign};
 3149|  4.56k|    }
 3150|  1.29k|    return std::pair{it, sign_type::plus_sign};
 3151|  5.86k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2262|  1.04M|{
 2263|  1.04M|    auto it = read_code_unit(range);
 2264|  1.04M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 276, False: 1.04M]
  |  |  ------------------
  ------------------
 2265|    276|        return unexpected(make_eof_parse_error(it.error()));
 2266|    276|    }
 2267|       |
 2268|  2.08M|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 2.08M, False: 1.03M]
  ------------------
 2269|  2.08M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 12.5k, False: 2.07M]
  ------------------
 2270|  12.5k|            return *it;
 2271|  12.5k|        }
 2272|  2.08M|    }
 2273|       |
 2274|  1.03M|    return unexpected(parse_error::error);
 2275|  1.04M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2221|  2.42M|{
 2222|  2.42M|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|  2.42M|    else {
 2235|  2.42M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  2.42M|            if (ch < 'A' || ch > 'Z') {
 2237|  2.42M|                return ch;
 2238|  2.42M|            }
 2239|  2.42M|            return static_cast<char_type>(ch +
 2240|  2.42M|                                          static_cast<char_type>('a' - 'A'));
 2241|  2.42M|        };
 2242|       |
 2243|  2.42M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 61.2k, False: 2.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  61.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  61.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  61.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  61.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  61.2k|    }                                                  \
  |  |  |  | 3939|  2.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|  2.36M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|  2.36M|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|  2.36M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.36M, False: 1.55k]
  |  |  ------------------
  ------------------
 2248|  2.36M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|  2.36M|                    return ascii_tolower(a) ==
 2250|  2.36M|                           static_cast<detail::char_t<Range>>(b);
 2251|  2.36M|                }))) {
 2252|  2.36M|            return unexpected(parse_error::error);
 2253|  2.36M|        }
 2254|       |
 2255|  1.55k|        return it;
 2256|  2.36M|    }
 2257|  2.42M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2235|  2.76M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  2.76M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 2.16M, False: 599k]
  |  Branch (2236:29): [True: 581k, False: 18.1k]
  ------------------
 2237|  2.75M|                return ch;
 2238|  2.75M|            }
 2239|  18.1k|            return static_cast<char_type>(ch +
 2240|  18.1k|                                          static_cast<char_type>('a' - 'A'));
 2241|  2.76M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2136|   209k|{
 2137|   209k|    auto it = read_code_unit(range);
 2138|   209k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 278, False: 209k]
  |  |  ------------------
  ------------------
 2139|    278|        return unexpected(make_eof_parse_error(it.error()));
 2140|    278|    }
 2141|       |
 2142|   209k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 208k, False: 1.41k]
  |  |  ------------------
  ------------------
 2143|   209k|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|   208k|        return unexpected(parse_error::error);
 2145|   208k|    }
 2146|       |
 2147|  1.41k|    return *it;
 2148|   209k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1965|   539k|{
 1966|   539k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|   539k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1946|   539k|{
 1947|   539k|    if constexpr (ranges::common_range<Range>) {
 1948|   539k|        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|       |    else {
 1951|       |        auto first = range.begin();
 1952|       |        for (; first != range.end(); ++first) {
 1953|       |            if (pred(*first)) {
 1954|       |                return first;
 1955|       |            }
 1956|       |        }
 1957|       |        return first;
 1958|       |    }
 1959|   539k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|   919k|{
 2946|   919k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 919k, False: 0]
  ------------------
 2947|   919k|        auto it = read_while_classic_space(range);
 2948|   919k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|   919k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   919k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.41k, False: 915k]
  |  |  ------------------
  ------------------
 2950|  3.41k|            return unexpected(e);
 2951|  3.41k|        }
 2952|       |
 2953|   915k|        return it;
 2954|   919k|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|   919k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|   919k|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|   919k|    else {
 2116|   919k|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|   919k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|   919k|            return detail::is_cp_space(cp);
 2129|   919k|        });
 2130|   919k|    }
 2131|   919k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2071|   919k|{
 2072|   919k|    return read_until_code_point(range, std::not_fn(pred));
 2073|   919k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2050|  1.57M|{
 2051|  1.57M|    auto it = range.begin();
 2052|  3.25M|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 2.84M, False: 407k]
  ------------------
 2053|  2.84M|        const auto val =
 2054|  2.84M|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  2.84M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  2.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.84M, False: 0]
  |  |  ------------------
  ------------------
 2056|  2.84M|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  2.84M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  2.84M|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 1.16M, False: 1.67M]
  ------------------
 2059|  1.16M|                return it;
 2060|  1.16M|            }
 2061|  2.84M|        }
 2062|  1.67M|        it = val.iterator;
 2063|  1.67M|    }
 2064|       |
 2065|   407k|    return it;
 2066|  1.57M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   919k|        : m_fptr([](storage fn,
  743|   919k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   919k|              cvref<T> obj = *get<T>(fn);
  745|   919k|              if constexpr (std::is_void_v<R>) {
  746|   919k|                  obj(static_cast<decltype(args)>(args)...);
  747|   919k|              }
  748|   919k|              else {
  749|   919k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   919k|              }
  751|   919k|          }),
  752|   919k|          m_storage(std::addressof(f))
  753|   919k|    {
  754|   919k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.59M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.59M|              else {
  749|  1.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.59M|              }
  751|  1.59M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.59M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.59M|        else if constexpr (std::is_object_v<T>) {
  688|  1.59M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.59M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2127|  1.59M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  1.59M|            return detail::is_cp_space(cp);
 2129|  1.59M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   919k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   919k|        {
  662|   919k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.12M|    {
  304|  2.12M|        ranges::advance(x, n);
  305|  2.12M|        return x;
  306|  2.12M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  2.12M|    {
  268|  2.12M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.12M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  2.12M|    {
  181|  6.80M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 4.68M, False: 2.12M]
  ------------------
  182|  4.68M|            ++i;
  183|  4.68M|        }
  184|  2.12M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|   207k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   207k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   207k|            auto rd = make_reader<T, char_type>();
 6116|   207k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   207k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 207k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   207k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 207k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   207k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   207k|                return impl(rd, range, value);
 6121|   207k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   207k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3035|  1.34M|    {
 3036|  1.34M|        reader_error_handler eh{};
 3037|  1.34M|        get_derived().check_specs_impl(specs, eh);
 3038|  1.34M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
 3039|      0|            return detail::unexpected_scan_error(
 3040|      0|                scan_error::invalid_format_string, eh.m_msg);
 3041|      0|        }
 3042|  1.34M|        return {};
 3043|  1.34M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3047|  1.34M|    {
 3048|  1.34M|        return static_cast<Derived&>(*this);
 3049|  1.34M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4057|  1.34M|    {
 4058|  1.34M|        detail::check_float_type_specs(specs, eh);
 4059|  1.34M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   207k|    {
 6041|   207k|        const bool need_skipped_width =
 6042|   207k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 207k]
  |  Branch (6042:33): [True: 0, False: 207k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   207k|        auto it = rng.begin();
 6046|   207k|        std::ptrdiff_t prefix_width = 0;
 6047|   207k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 207k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   207k|        else {
 6055|   207k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 906, False: 207k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    906|    }                                                  \
  |  |  |  | 3939|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   207k|            std::tie(it, prefix_width) = prefix_result;
 6057|   207k|        }
 6058|   207k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   207k|        std::ptrdiff_t value_width = 0;
 6062|   207k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 207k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   207k|        else {
 6078|   207k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.5k, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.5k|    }                                                  \
  |  | 3939|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   140k|                                             specs, value, loc));
 6080|       |
 6081|   140k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 140k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   140k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   140k|        std::ptrdiff_t postfix_width = 0;
 6090|   140k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 140k, False: 406]
  ------------------
 6091|   140k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   140k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   140k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   140k|                                 value_width));
 6095|   140k|            std::tie(it, postfix_width) = postfix_result;
 6096|   140k|        }
 6097|       |
 6098|   140k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   140k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   140k|            specs, prefix_width, value_width, postfix_width));
 6100|   140k|        return it;
 6101|   140k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3030|  2.77M|    {
 3031|  2.77M|        return true;
 3032|  2.77M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4129|  1.33M|    {
 4130|  1.33M|        unsigned options{};
 4131|  1.33M|        if (specs.localized) {
  ------------------
  |  Branch (4131:13): [True: 328k, False: 1.00M]
  ------------------
 4132|   328k|            options |= float_reader_base::allow_thsep;
 4133|   328k|        }
 4134|       |
 4135|  1.33M|        SCN_GCC_COMPAT_PUSH
 4136|  1.33M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4137|       |
 4138|  1.33M|        switch (specs.type) {
 4139|   254k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4139:13): [True: 254k, False: 1.08M]
  ------------------
 4140|   254k|                return options | float_reader_base::allow_fixed;
 4141|       |
 4142|  82.7k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4142:13): [True: 82.7k, False: 1.25M]
  ------------------
 4143|  82.7k|                return options | float_reader_base::allow_scientific;
 4144|       |
 4145|   363k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4145:13): [True: 363k, False: 974k]
  ------------------
 4146|   363k|                return options | float_reader_base::allow_hex;
 4147|       |
 4148|   308k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4148:13): [True: 308k, False: 1.02M]
  ------------------
 4149|   308k|                return options | float_reader_base::allow_scientific |
 4150|   308k|                       float_reader_base::allow_fixed;
 4151|       |
 4152|   328k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4152:13): [True: 328k, False: 1.00M]
  ------------------
 4153|   328k|                return options | float_reader_base::allow_scientific |
 4154|   328k|                       float_reader_base::allow_fixed |
 4155|   328k|                       float_reader_base::allow_hex;
 4156|       |
 4157|      0|            default:
  ------------------
  |  Branch (4157:13): [True: 0, False: 1.33M]
  ------------------
 4158|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4159|  1.33M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4160|  1.33M|        }
 4161|       |
 4162|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4163|  1.33M|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3581|  1.33M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1760|  1.83M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1521|  3.66M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3612|   432k|    {
 3613|   432k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|   432k|        const std::ptrdiff_t sign_len =
 3616|   432k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 2.34k, False: 429k]
  ------------------
 3617|       |
 3618|   432k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   432k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   432k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   432k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 50.2k, False: 382k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  50.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  50.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  50.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  50.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  50.2k|    }                                                  \
  |  |  |  | 3939|   432k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|   382k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|   432k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 3969|  1.45M|    {
 3970|  1.45M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (3970:13): [True: 1.45M, False: 0]
  ------------------
 3971|  1.45M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (3971:13): [True: 1.45M, False: 0]
  ------------------
 3972|  1.45M|            return;
 3973|  1.45M|        }
 3974|       |
 3975|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 3976|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (3976:13): [True: 0, False: 0]
  ------------------
 3977|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (3977:27): [True: 0, False: 0]
  ------------------
 3978|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (3978:21): [True: 0, False: 0]
  ------------------
 3979|      0|                    ch = CharT{'.'};
 3980|      0|                }
 3981|      0|            }
 3982|      0|        }
 3983|       |
 3984|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (3984:13): [True: 0, False: 0]
  ------------------
 3985|      0|            return;
 3986|      0|        }
 3987|       |
 3988|      0|        auto first =
 3989|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 3990|      0|        if (first == str.end()) {
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|      0|            return;
 3992|      0|        }
 3993|       |
 3994|      0|        m_thsep_indices.push_back(
 3995|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 3996|       |
 3997|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (3997:31): [True: 0, False: 0]
  ------------------
 3998|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (3998:17): [True: 0, False: 0]
  ------------------
 3999|      0|                *first++ = std::move(*it);
 4000|      0|            }
 4001|      0|            else {
 4002|      0|                m_thsep_indices.push_back(
 4003|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4004|      0|            }
 4005|      0|        }
 4006|       |
 4007|      0|        str.erase(first, str.end());
 4008|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1576|  1.62M|    {
 1577|  1.62M|        return m_storage.has_value();
 1578|  1.62M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1581|   954k|    {
 1582|   954k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|   954k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   954k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1583|   954k|        return *m_storage;
 1584|   954k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4082|   207k|    {
 4083|   207k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   207k|#if !SCN_DISABLE_LOCALE
 4086|   207k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 46.8k, False: 160k]
  ------------------
 4087|  46.8k|            return read_impl<Range>(
 4088|  46.8k|                range, rd,
 4089|  46.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  46.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|  46.8k|                },
 4092|  46.8k|                value, loc);
 4093|  46.8k|        }
 4094|   160k|#endif
 4095|       |
 4096|   160k|        return read_impl<Range>(
 4097|   160k|            range, rd,
 4098|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   160k|                return r.read_source(SCN_FWD(args)...);
 4100|   160k|            },
 4101|   160k|            value);
 4102|   207k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|   277k|    {
 4119|   277k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   277k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.4k, False: 193k]
  |  |  ------------------
  ------------------
 4121|  83.4k|            return unexpected(r.error());
 4122|  83.4k|        }
 4123|       |
 4124|   193k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.97k, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.97k|    }                                                  \
  |  |  |  | 3939|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   190k|        return ranges::next(range.begin(), n);
 4126|   193k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   915k|    {
  763|   915k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   915k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  46.8k|        : m_fptr([](storage fn,
  743|  46.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.8k|              cvref<T> obj = *get<T>(fn);
  745|  46.8k|              if constexpr (std::is_void_v<R>) {
  746|  46.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.8k|              }
  748|  46.8k|              else {
  749|  46.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.8k|              }
  751|  46.8k|          }),
  752|  46.8k|          m_storage(std::addressof(f))
  753|  46.8k|    {
  754|  46.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  46.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.8k|              else {
  749|  46.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.8k|              }
  751|  46.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.8k|        else if constexpr (std::is_object_v<T>) {
  688|  46.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4089|  46.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  46.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|  46.8k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3600|   164k|    {
 3601|   164k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3602|   164k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   164k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 3603|      0|            m_locale_options.thousands_sep = CharT{0};
 3604|      0|        }
 3605|       |
 3606|   164k|        return read_source_impl(range);
 3607|   164k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3626|   915k|    {
 3627|   915k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   915k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   915k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   915k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 915k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   915k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|   915k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|   915k|        auto it = sign_result.first;
 3630|   915k|        m_sign = sign_result.second;
 3631|       |
 3632|   915k|        auto digits_begin = it;
 3633|   915k|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|       |                      ranges::sized_range<Range>) {
 3636|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3637|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|       |                SCN_TRY_ASSIGN(
 3639|       |                    it,
 3640|       |                    do_read_source_impl(
 3641|       |                        r,
 3642|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|       |            }
 3645|       |            else {
 3646|       |                auto cb = [&](const auto& rr)
 3647|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|       |                    auto res = read_all(rr);
 3649|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|       |                        return detail::unexpected_scan_error(
 3651|       |                            scan_error::invalid_scanned_value,
 3652|       |                            "Invalid float value");
 3653|       |                    }
 3654|       |                    return res;
 3655|       |                };
 3656|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3657|       |            }
 3658|       |        }
 3659|   915k|        else {
 3660|   915k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|   915k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   915k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 254k, False: 660k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   254k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   254k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   254k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   254k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   254k|    }                                                  \
  |  | 3939|   915k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3661|   660k|                it,
 3662|   660k|                do_read_source_impl(
 3663|   660k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|   660k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|   660k|        }
 3666|       |
 3667|   915k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|   660k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 660k, False: 0]
  |  Branch (3669:48): [True: 660k, False: 0]
  ------------------
 3670|   660k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 660k, False: 0]
  ------------------
 3671|   660k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 660k, False: 0]
  ------------------
 3672|   660k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|   660k|        }
 3674|       |
 3675|   660k|        handle_separators();
 3676|       |
 3677|   660k|        return it;
 3678|   915k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3912|   915k|    {
 3913|   915k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|   915k|        const bool allowed_nonhex =
 3915|   915k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|   915k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|   915k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 915k, False: 0]
  |  Branch (3918:45): [True: 0, False: 915k]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|   915k|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 0, False: 915k]
  ------------------
 3924|      0|            return *r;
 3925|      0|        }
 3926|       |
 3927|   915k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 915k, False: 0]
  |  Branch (3927:45): [True: 0, False: 915k]
  ------------------
 3928|      0|            return unexpected(r.error());
 3929|      0|        }
 3930|   915k|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 0, False: 915k]
  ------------------
 3931|      0|            return *r;
 3932|      0|        }
 3933|       |
 3934|   915k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 592k, False: 322k]
  |  Branch (3934:28): [True: 181k, False: 410k]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|   181k|            auto it = range.begin();
 3938|       |
 3939|   181k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 468, False: 180k]
  ------------------
 3940|    468|                m_kind = float_kind::hex_with_prefix;
 3941|    468|                it = *r;
 3942|    468|            }
 3943|   180k|            else {
 3944|   180k|                m_kind = float_kind::hex_without_prefix;
 3945|   180k|            }
 3946|       |
 3947|   181k|            return read_hex(ranges::subrange{it, range.end()});
 3948|   181k|        }
 3949|   733k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 322k, False: 410k]
  |  Branch (3949:29): [True: 322k, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|   322k|            m_kind = float_kind::generic;
 3953|   322k|            return read_regular_float(range);
 3954|   322k|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|   410k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.08k, False: 409k]
  |  |  ------------------
  ------------------
 3960|  1.08k|            m_kind = float_kind::hex_with_prefix;
 3961|  1.08k|            return read_hex(ranges::subrange{*r, range.end()});
 3962|  1.08k|        }
 3963|       |
 3964|   409k|        m_kind = float_kind::generic;
 3965|   409k|        return read_regular(range);
 3966|   410k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3720|   915k|    {
 3721|   915k|        auto it = range.begin();
 3722|   915k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 915k, False: 0]
  ------------------
 3723|   915k|            return unexpected(r.error());
 3724|   915k|        }
 3725|      0|        else {
 3726|      0|            it = *r;
 3727|      0|        }
 3728|       |
 3729|      0|        if (auto r = read_matching_string_classic_nocase(
 3730|      0|                ranges::subrange{it, range.end()}, "inity");
 3731|      0|            !r) {
  ------------------
  |  Branch (3731:13): [True: 0, False: 0]
  ------------------
 3732|      0|            m_kind = float_kind::inf_short;
 3733|      0|            return it;
 3734|      0|        }
 3735|      0|        else {
 3736|      0|            m_kind = float_kind::inf_long;
 3737|      0|            return *r;
 3738|      0|        }
 3739|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3743|   915k|    {
 3744|   915k|        auto it = range.begin();
 3745|   915k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 915k, False: 0]
  ------------------
 3746|   915k|            return r.transform_error(map_parse_error_to_scan_error(
 3747|   915k|                scan_error::invalid_scanned_value,
 3748|   915k|                "Invalid floating-point NaN value"));
 3749|   915k|        }
 3750|      0|        else {
 3751|      0|            it = *r;
 3752|      0|        }
 3753|       |
 3754|      0|        if (auto r =
 3755|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|      0|            !r) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            m_kind = float_kind::nan_simple;
 3758|      0|            return it;
 3759|      0|        }
 3760|      0|        else {
 3761|      0|            it = *r;
 3762|      0|        }
 3763|       |
 3764|      0|        auto payload_beg_it = it;
 3765|      0|        it = read_while_code_unit(
 3766|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|      0|                return is_ascii_char(ch) &&
 3768|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|      0|            });
 3771|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|      0|        m_kind = float_kind::nan_with_payload;
 3774|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 0, False: 0]
  ------------------
 3775|      0|                                             ')')) {
 3776|      0|            return *r;
 3777|      0|        }
 3778|      0|        return detail::unexpected_scan_error(
 3779|      0|            scan_error::invalid_scanned_value,
 3780|      0|            "Invalid floating-point NaN payload");
 3781|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3713|   592k|    {
 3714|   592k|        return read_matching_string_classic_nocase(range, "0x");
 3715|   592k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3814|   182k|    {
 3815|   182k|        auto it = range.begin();
 3816|       |
 3817|   182k|        std::ptrdiff_t digits_count = 0;
 3818|   182k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3819|   182k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 39.8k, False: 142k]
  |  |  ------------------
  ------------------
 3820|  39.8k|            return r.transform_error(map_parse_error_to_scan_error(
 3821|  39.8k|                scan_error::invalid_scanned_value,
 3822|  39.8k|                "Invalid hexadecimal floating-point value"));
 3823|  39.8k|        }
 3824|   142k|        else {
 3825|   142k|            digits_count += ranges::distance(it, *r);
 3826|   142k|            it = *r;
 3827|   142k|        }
 3828|       |
 3829|   142k|        m_integral_part_length = digits_count;
 3830|   142k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3830:18): [True: 648, False: 141k]
  ------------------
 3831|   142k|                                             m_locale_options.decimal_point)) {
 3832|    648|            it = *r;
 3833|    648|        }
 3834|       |
 3835|   142k|        if (auto r =
  ------------------
  |  Branch (3835:18): [True: 540, False: 142k]
  ------------------
 3836|   142k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3837|    540|            digits_count += ranges::distance(it, *r);
 3838|    540|            it = *r;
 3839|    540|        }
 3840|       |
 3841|   142k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 3842|      0|            return detail::unexpected_scan_error(
 3843|      0|                scan_error::invalid_scanned_value,
 3844|      0|                "No significand digits in hexfloat");
 3845|      0|        }
 3846|       |
 3847|   142k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3848|       |
 3849|   142k|        return it;
 3850|   142k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3698|   325k|    {
 3699|   325k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 325k]
  |  |  |  Branch (865:45): [True: 0, False: 325k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3700|   325k|                         thsep_allowed)) {
 3701|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3702|      0|                return char_to_int(ch) < 16 ||
 3703|      0|                       ch == m_locale_options.thousands_sep;
 3704|      0|            });
 3705|      0|        }
 3706|       |
 3707|   325k|        return read_while1_code_unit(
 3708|   325k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3709|   325k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   509k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   509k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   509k|              else {
  749|   509k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   509k|              }
  751|   509k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   509k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   509k|        else if constexpr (std::is_object_v<T>) {
  688|   509k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   509k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3708|   509k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3786|   578k|    {
 3787|   578k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3787:18): [True: 19.6k, False: 559k]
  ------------------
 3788|  19.6k|            auto beg_exp_it = range.begin();
 3789|  19.6k|            auto it = *r;
 3790|       |
 3791|  19.6k|            if (auto r_sign =
  ------------------
  |  Branch (3791:22): [True: 19.5k, False: 91]
  ------------------
 3792|  19.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3793|  19.5k|                it = r_sign->first;
 3794|  19.5k|            }
 3795|       |
 3796|  19.6k|            if (auto r_exp = read_while1_code_unit(
 3797|  19.6k|                    ranges::subrange{it, range.end()},
 3798|  19.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3799|  19.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.67k, False: 17.9k]
  |  |  ------------------
  ------------------
 3800|  1.67k|                it = beg_exp_it;
 3801|  1.67k|            }
 3802|  17.9k|            else {
 3803|  17.9k|                it = *r_exp;
 3804|  17.9k|            }
 3805|       |
 3806|  19.6k|            return it;
 3807|  19.6k|        }
 3808|   559k|        return range.begin();
 3809|   578k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  19.6k|        : m_fptr([](storage fn,
  743|  19.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.6k|              cvref<T> obj = *get<T>(fn);
  745|  19.6k|              if constexpr (std::is_void_v<R>) {
  746|  19.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.6k|              }
  748|  19.6k|              else {
  749|  19.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.6k|              }
  751|  19.6k|          }),
  752|  19.6k|          m_storage(std::addressof(f))
  753|  19.6k|    {
  754|  19.6k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  67.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  67.4k|              else {
  749|  67.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.4k|              }
  751|  67.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  67.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  67.4k|        else if constexpr (std::is_object_v<T>) {
  688|  67.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  67.4k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3798|  67.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  19.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  19.6k|        {
  662|  19.6k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3855|   732k|    {
 3856|   732k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3857|   732k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3857:35): [True: 605k, False: 127k]
  |  Branch (3857:50): [True: 41.3k, False: 563k]
  ------------------
 3858|       |
 3859|   732k|        auto it = ranges::begin(range);
 3860|   732k|        std::ptrdiff_t digits_count = 0;
 3861|       |
 3862|   732k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3863|   732k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 209k, False: 523k]
  |  |  ------------------
  ------------------
 3864|   209k|            return r.transform_error(
 3865|   209k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3866|   209k|                                              "Invalid floating-point value"));
 3867|   209k|        }
 3868|   523k|        else {
 3869|   523k|            digits_count += ranges::distance(it, *r);
 3870|   523k|            it = *r;
 3871|   523k|        }
 3872|       |
 3873|   523k|        m_integral_part_length = digits_count;
 3874|   523k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3874:18): [True: 2.90k, False: 520k]
  ------------------
 3875|   523k|                                             m_locale_options.decimal_point)) {
 3876|  2.90k|            it = *r;
 3877|  2.90k|        }
 3878|       |
 3879|   523k|        if (auto r =
  ------------------
  |  Branch (3879:18): [True: 2.44k, False: 520k]
  ------------------
 3880|   523k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3881|  2.44k|            digits_count += ranges::distance(it, *r);
 3882|  2.44k|            it = *r;
 3883|  2.44k|        }
 3884|       |
 3885|   523k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 523k]
  |  |  ------------------
  ------------------
 3886|      0|            return detail::unexpected_scan_error(
 3887|      0|                scan_error::invalid_scanned_value,
 3888|      0|                "No significand digits in float");
 3889|      0|        }
 3890|       |
 3891|   523k|        auto beg_exp_it = it;
 3892|   523k|        if (allowed_exp) {
  ------------------
  |  Branch (3892:13): [True: 436k, False: 87.2k]
  ------------------
 3893|   436k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3894|   436k|        }
 3895|   523k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3895:13): [True: 6.86k, False: 516k]
  |  Branch (3895:29): [True: 5.50k, False: 1.36k]
  ------------------
 3896|  5.50k|            return detail::unexpected_scan_error(
 3897|  5.50k|                scan_error::invalid_scanned_value,
 3898|  5.50k|                "No exponent given to scientific float");
 3899|  5.50k|        }
 3900|       |
 3901|   517k|        m_kind =
 3902|   517k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3902:13): [True: 500k, False: 17.8k]
  ------------------
 3903|       |
 3904|   517k|        return it;
 3905|   523k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3683|  1.25M|    {
 3684|  1.25M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.25M]
  |  |  |  Branch (865:45): [True: 0, False: 1.25M]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3685|  1.25M|                         thsep_allowed)) {
 3686|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3687|      0|                return char_to_int(ch) < 10 ||
 3688|      0|                       ch == m_locale_options.thousands_sep;
 3689|      0|            });
 3690|      0|        }
 3691|       |
 3692|  1.25M|        return read_while1_code_unit(
 3693|  1.25M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3694|  1.25M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.25M|        : m_fptr([](storage fn,
  743|  1.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.25M|              cvref<T> obj = *get<T>(fn);
  745|  1.25M|              if constexpr (std::is_void_v<R>) {
  746|  1.25M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.25M|              }
  748|  1.25M|              else {
  749|  1.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.25M|              }
  751|  1.25M|          }),
  752|  1.25M|          m_storage(std::addressof(f))
  753|  1.25M|    {
  754|  1.25M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.88M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.88M|              else {
  749|  1.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.88M|              }
  751|  1.88M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.88M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.88M|        else if constexpr (std::is_object_v<T>) {
  688|  1.88M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.88M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3693|  1.88M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.25M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.25M|        {
  662|  1.25M|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1566|   660k|    {
 1567|   660k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|   660k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  46.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.8k|        {
  662|  46.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4098|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   160k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3586|   750k|    {
 3587|   750k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|   750k|        return read_source_impl(range);
 3593|   750k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4082|   207k|    {
 4083|   207k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   207k|#if !SCN_DISABLE_LOCALE
 4086|   207k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 46.9k, False: 160k]
  ------------------
 4087|  46.9k|            return read_impl<Range>(
 4088|  46.9k|                range, rd,
 4089|  46.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  46.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|  46.9k|                },
 4092|  46.9k|                value, loc);
 4093|  46.9k|        }
 4094|   160k|#endif
 4095|       |
 4096|   160k|        return read_impl<Range>(
 4097|   160k|            range, rd,
 4098|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   160k|                return r.read_source(SCN_FWD(args)...);
 4100|   160k|            },
 4101|   160k|            value);
 4102|   207k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|   277k|    {
 4119|   277k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   277k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 39.1k, False: 238k]
  |  |  ------------------
  ------------------
 4121|  39.1k|            return unexpected(r.error());
 4122|  39.1k|        }
 4123|       |
 4124|   238k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   238k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   238k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   238k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 47.2k, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  47.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  47.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  47.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  47.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  47.2k|    }                                                  \
  |  |  |  | 3939|   238k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   191k|        return ranges::next(range.begin(), n);
 4126|   238k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   915k|    {
  763|   915k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   915k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  46.9k|        : m_fptr([](storage fn,
  743|  46.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.9k|              cvref<T> obj = *get<T>(fn);
  745|  46.9k|              if constexpr (std::is_void_v<R>) {
  746|  46.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.9k|              }
  748|  46.9k|              else {
  749|  46.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.9k|              }
  751|  46.9k|          }),
  752|  46.9k|          m_storage(std::addressof(f))
  753|  46.9k|    {
  754|  46.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  46.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.9k|              else {
  749|  46.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.9k|              }
  751|  46.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.9k|        else if constexpr (std::is_object_v<T>) {
  688|  46.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4089|  46.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  46.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|  46.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3600|   164k|    {
 3601|   164k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3602|   164k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   164k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 3603|      0|            m_locale_options.thousands_sep = CharT{0};
 3604|      0|        }
 3605|       |
 3606|   164k|        return read_source_impl(range);
 3607|   164k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3626|   915k|    {
 3627|   915k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   915k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   915k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   915k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 915k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   915k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3628|   915k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3629|   915k|        auto it = sign_result.first;
 3630|   915k|        m_sign = sign_result.second;
 3631|       |
 3632|   915k|        auto digits_begin = it;
 3633|   915k|        auto r = ranges::subrange{it, range.end()};
 3634|       |        if constexpr (ranges::contiguous_range<Range> &&
 3635|   915k|                      ranges::sized_range<Range>) {
 3636|   915k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 915k]
  |  |  |  Branch (865:45): [True: 0, False: 915k]
  |  |  |  Branch (865:45): [True: 0, False: 915k]
  |  |  ------------------
  ------------------
 3637|   915k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3638|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3639|      0|                    it,
 3640|      0|                    do_read_source_impl(
 3641|      0|                        r,
 3642|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3643|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3644|      0|            }
 3645|   915k|            else {
 3646|   915k|                auto cb = [&](const auto& rr)
 3647|   915k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|   915k|                    auto res = read_all(rr);
 3649|   915k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3650|   915k|                        return detail::unexpected_scan_error(
 3651|   915k|                            scan_error::invalid_scanned_value,
 3652|   915k|                            "Invalid float value");
 3653|   915k|                    }
 3654|   915k|                    return res;
 3655|   915k|                };
 3656|   915k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   915k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   915k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 118k, False: 797k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   118k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   118k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   118k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   118k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   118k|    }                                                  \
  |  | 3939|   915k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3657|   797k|            }
 3658|       |        }
 3659|       |        else {
 3660|       |            SCN_TRY_ASSIGN(
 3661|       |                it,
 3662|       |                do_read_source_impl(
 3663|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3664|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3665|       |        }
 3666|       |
 3667|   915k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3668|       |
 3669|   797k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3669:13): [True: 797k, False: 0]
  |  Branch (3669:48): [True: 797k, False: 0]
  ------------------
 3670|   797k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3670:13): [True: 797k, False: 0]
  ------------------
 3671|   797k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3671:13): [True: 797k, False: 0]
  ------------------
 3672|   797k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3673|   797k|        }
 3674|       |
 3675|   797k|        handle_separators();
 3676|       |
 3677|   797k|        return it;
 3678|   915k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3720|   915k|    {
 3721|   915k|        auto it = range.begin();
 3722|   915k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3722:73): [True: 915k, False: 0]
  ------------------
 3723|   915k|            return unexpected(r.error());
 3724|   915k|        }
 3725|      0|        else {
 3726|      0|            it = *r;
 3727|      0|        }
 3728|       |
 3729|      0|        if (auto r = read_matching_string_classic_nocase(
 3730|      0|                ranges::subrange{it, range.end()}, "inity");
 3731|      0|            !r) {
  ------------------
  |  Branch (3731:13): [True: 0, False: 0]
  ------------------
 3732|      0|            m_kind = float_kind::inf_short;
 3733|      0|            return it;
 3734|      0|        }
 3735|      0|        else {
 3736|      0|            m_kind = float_kind::inf_long;
 3737|      0|            return *r;
 3738|      0|        }
 3739|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3743|   915k|    {
 3744|   915k|        auto it = range.begin();
 3745|   915k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3745:73): [True: 915k, False: 0]
  ------------------
 3746|   915k|            return r.transform_error(map_parse_error_to_scan_error(
 3747|   915k|                scan_error::invalid_scanned_value,
 3748|   915k|                "Invalid floating-point NaN value"));
 3749|   915k|        }
 3750|      0|        else {
 3751|      0|            it = *r;
 3752|      0|        }
 3753|       |
 3754|      0|        if (auto r =
 3755|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3756|      0|            !r) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            m_kind = float_kind::nan_simple;
 3758|      0|            return it;
 3759|      0|        }
 3760|      0|        else {
 3761|      0|            it = *r;
 3762|      0|        }
 3763|       |
 3764|      0|        auto payload_beg_it = it;
 3765|      0|        it = read_while_code_unit(
 3766|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3767|      0|                return is_ascii_char(ch) &&
 3768|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3769|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3770|      0|            });
 3771|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3772|       |
 3773|      0|        m_kind = float_kind::nan_with_payload;
 3774|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3774:18): [True: 0, False: 0]
  ------------------
 3775|      0|                                             ')')) {
 3776|      0|            return *r;
 3777|      0|        }
 3778|      0|        return detail::unexpected_scan_error(
 3779|      0|            scan_error::invalid_scanned_value,
 3780|      0|            "Invalid floating-point NaN payload");
 3781|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3713|   592k|    {
 3714|   592k|        return read_matching_string_classic_nocase(range, "0x");
 3715|   592k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1985|   539k|{
 1986|   539k|    auto it = read_while_code_unit(range, pred);
 1987|   539k|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 322k, False: 217k]
  ------------------
 1988|   322k|        return unexpected(parse_error::error);
 1989|   322k|    }
 1990|   217k|    return it;
 1991|   539k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3786|   122k|    {
 3787|   122k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3787:18): [True: 6.69k, False: 115k]
  ------------------
 3788|  6.69k|            auto beg_exp_it = range.begin();
 3789|  6.69k|            auto it = *r;
 3790|       |
 3791|  6.69k|            if (auto r_sign =
  ------------------
  |  Branch (3791:22): [True: 6.66k, False: 30]
  ------------------
 3792|  6.69k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3793|  6.66k|                it = r_sign->first;
 3794|  6.66k|            }
 3795|       |
 3796|  6.69k|            if (auto r_exp = read_while1_code_unit(
 3797|  6.69k|                    ranges::subrange{it, range.end()},
 3798|  6.69k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3799|  6.69k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  6.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 632, False: 6.06k]
  |  |  ------------------
  ------------------
 3800|    632|                it = beg_exp_it;
 3801|    632|            }
 3802|  6.06k|            else {
 3803|  6.06k|                it = *r_exp;
 3804|  6.06k|            }
 3805|       |
 3806|  6.69k|            return it;
 3807|  6.69k|        }
 3808|   115k|        return range.begin();
 3809|   122k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  6.69k|        : m_fptr([](storage fn,
  743|  6.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.69k|              cvref<T> obj = *get<T>(fn);
  745|  6.69k|              if constexpr (std::is_void_v<R>) {
  746|  6.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.69k|              }
  748|  6.69k|              else {
  749|  6.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.69k|              }
  751|  6.69k|          }),
  752|  6.69k|          m_storage(std::addressof(f))
  753|  6.69k|    {
  754|  6.69k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  22.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  22.8k|              else {
  749|  22.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.8k|              }
  751|  22.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  22.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  22.8k|        else if constexpr (std::is_object_v<T>) {
  688|  22.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  22.8k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3798|  22.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  6.69k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.69k|        {
  662|  6.69k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3855|   322k|    {
 3856|   322k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3857|   322k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3857:35): [True: 195k, False: 127k]
  |  Branch (3857:50): [True: 41.3k, False: 154k]
  ------------------
 3858|       |
 3859|   322k|        auto it = ranges::begin(range);
 3860|   322k|        std::ptrdiff_t digits_count = 0;
 3861|       |
 3862|   322k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3863|   322k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 113k, False: 209k]
  |  |  ------------------
  ------------------
 3864|   113k|            return r.transform_error(
 3865|   113k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3866|   113k|                                              "Invalid floating-point value"));
 3867|   113k|        }
 3868|   209k|        else {
 3869|   209k|            digits_count += ranges::distance(it, *r);
 3870|   209k|            it = *r;
 3871|   209k|        }
 3872|       |
 3873|   209k|        m_integral_part_length = digits_count;
 3874|   209k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3874:18): [True: 1.41k, False: 208k]
  ------------------
 3875|   209k|                                             m_locale_options.decimal_point)) {
 3876|  1.41k|            it = *r;
 3877|  1.41k|        }
 3878|       |
 3879|   209k|        if (auto r =
  ------------------
  |  Branch (3879:18): [True: 1.18k, False: 208k]
  ------------------
 3880|   209k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3881|  1.18k|            digits_count += ranges::distance(it, *r);
 3882|  1.18k|            it = *r;
 3883|  1.18k|        }
 3884|       |
 3885|   209k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 3886|      0|            return detail::unexpected_scan_error(
 3887|      0|                scan_error::invalid_scanned_value,
 3888|      0|                "No significand digits in float");
 3889|      0|        }
 3890|       |
 3891|   209k|        auto beg_exp_it = it;
 3892|   209k|        if (allowed_exp) {
  ------------------
  |  Branch (3892:13): [True: 122k, False: 87.2k]
  ------------------
 3893|   122k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3894|   122k|        }
 3895|   209k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3895:13): [True: 6.86k, False: 202k]
  |  Branch (3895:29): [True: 5.50k, False: 1.36k]
  ------------------
 3896|  5.50k|            return detail::unexpected_scan_error(
 3897|  5.50k|                scan_error::invalid_scanned_value,
 3898|  5.50k|                "No exponent given to scientific float");
 3899|  5.50k|        }
 3900|       |
 3901|   204k|        m_kind =
 3902|   204k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3902:13): [True: 198k, False: 6.06k]
  ------------------
 3903|       |
 3904|   204k|        return it;
 3905|   209k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3683|   532k|    {
 3684|   532k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 532k]
  |  |  |  Branch (865:45): [True: 0, False: 532k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3685|   532k|                         thsep_allowed)) {
 3686|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3687|      0|                return char_to_int(ch) < 10 ||
 3688|      0|                       ch == m_locale_options.thousands_sep;
 3689|      0|            });
 3690|      0|        }
 3691|       |
 3692|   532k|        return read_while1_code_unit(
 3693|   532k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3694|   532k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   532k|        : m_fptr([](storage fn,
  743|   532k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   532k|              cvref<T> obj = *get<T>(fn);
  745|   532k|              if constexpr (std::is_void_v<R>) {
  746|   532k|                  obj(static_cast<decltype(args)>(args)...);
  747|   532k|              }
  748|   532k|              else {
  749|   532k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   532k|              }
  751|   532k|          }),
  752|   532k|          m_storage(std::addressof(f))
  753|   532k|    {
  754|   532k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   789k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   789k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   789k|              else {
  749|   789k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   789k|              }
  751|   789k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   789k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   789k|        else if constexpr (std::is_object_v<T>) {
  688|   789k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   789k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3693|   789k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   532k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   532k|        {
  662|   532k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3912|   915k|    {
 3913|   915k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3914|   915k|        const bool allowed_nonhex =
 3915|   915k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3916|   915k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3917|       |
 3918|   915k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3918:39): [True: 915k, False: 0]
  |  Branch (3918:45): [True: 0, False: 915k]
  ------------------
 3919|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3920|      0|                scan_error::invalid_scanned_value,
 3921|      0|                "Invalid infinite floating-point value"));
 3922|      0|        }
 3923|   915k|        else if (r) {
  ------------------
  |  Branch (3923:18): [True: 0, False: 915k]
  ------------------
 3924|      0|            return *r;
 3925|      0|        }
 3926|       |
 3927|   915k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3927:39): [True: 915k, False: 0]
  |  Branch (3927:45): [True: 0, False: 915k]
  ------------------
 3928|      0|            return unexpected(r.error());
 3929|      0|        }
 3930|   915k|        else if (r) {
  ------------------
  |  Branch (3930:18): [True: 0, False: 915k]
  ------------------
 3931|      0|            return *r;
 3932|      0|        }
 3933|       |
 3934|   915k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (3934:13): [True: 592k, False: 322k]
  |  Branch (3934:28): [True: 181k, False: 411k]
  ------------------
 3935|       |            // only hex allowed:
 3936|       |            // prefix "0x" allowed, not required
 3937|   181k|            auto it = range.begin();
 3938|       |
 3939|   181k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (3939:22): [True: 468, False: 181k]
  ------------------
 3940|    468|                m_kind = float_kind::hex_with_prefix;
 3941|    468|                it = *r;
 3942|    468|            }
 3943|   181k|            else {
 3944|   181k|                m_kind = float_kind::hex_without_prefix;
 3945|   181k|            }
 3946|       |
 3947|   181k|            return read_hex(ranges::subrange{it, range.end()});
 3948|   181k|        }
 3949|   734k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (3949:13): [True: 322k, False: 411k]
  |  Branch (3949:29): [True: 322k, False: 0]
  ------------------
 3950|       |            // only nonhex allowed:
 3951|       |            // no prefix allowed
 3952|   322k|            m_kind = float_kind::generic;
 3953|   322k|            return read_regular_float(range);
 3954|   322k|        }
 3955|       |        // both hex and nonhex allowed:
 3956|       |        // check for "0x" prefix -> hex,
 3957|       |        // regular otherwise
 3958|       |
 3959|   411k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.08k, False: 410k]
  |  |  ------------------
  ------------------
 3960|  1.08k|            m_kind = float_kind::hex_with_prefix;
 3961|  1.08k|            return read_hex(ranges::subrange{*r, range.end()});
 3962|  1.08k|        }
 3963|       |
 3964|   410k|        m_kind = float_kind::generic;
 3965|   410k|        return read_regular(range);
 3966|   411k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3647|   592k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3648|   592k|                    auto res = read_all(rr);
 3649|   592k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 178, False: 592k]
  |  |  ------------------
  ------------------
 3650|    178|                        return detail::unexpected_scan_error(
 3651|    178|                            scan_error::invalid_scanned_value,
 3652|    178|                            "Invalid float value");
 3653|    178|                    }
 3654|   592k|                    return res;
 3655|   592k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1828|   592k|{
 1829|   592k|    return ranges::next(range.begin(), range.end());
 1830|   592k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   592k|    {
  313|   592k|        ranges::advance(x, bound);
  314|   592k|        return x;
  315|   592k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   592k|    {
  275|   592k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   592k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1566|   797k|    {
 1567|   797k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   797k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|   797k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1610|   797k|    {
 1611|   797k|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|   797k|                      ranges::sized_range<Range>) {
 1616|   797k|            m_storage.reset();
 1617|   797k|            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|   797k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  46.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.9k|        {
  662|  46.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4098|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   160k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3586|   751k|    {
 3587|   751k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 751k]
  |  |  ------------------
  ------------------
 3588|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3589|      0|                classic_with_thsep_tag{}};
 3590|      0|        }
 3591|       |
 3592|   751k|        return read_source_impl(range);
 3593|   751k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|   229k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   229k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   229k|            auto rd = make_reader<T, char_type>();
 6116|   229k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   229k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 229k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   229k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 229k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   229k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   229k|                return impl(rd, range, value);
 6121|   229k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   229k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   229k|    {
 6041|   229k|        const bool need_skipped_width =
 6042|   229k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 229k]
  |  Branch (6042:33): [True: 0, False: 229k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   229k|        auto it = rng.begin();
 6046|   229k|        std::ptrdiff_t prefix_width = 0;
 6047|   229k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 229k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   229k|        else {
 6055|   229k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 974, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    974|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    974|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    974|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    974|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    974|    }                                                  \
  |  |  |  | 3939|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   228k|            std::tie(it, prefix_width) = prefix_result;
 6057|   228k|        }
 6058|   228k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   228k|        std::ptrdiff_t value_width = 0;
 6062|   228k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 228k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   228k|        else {
 6078|   228k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.4k, False: 162k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.4k|    }                                                  \
  |  | 3939|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   162k|                                             specs, value, loc));
 6080|       |
 6081|   162k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 162k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   162k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   162k|        std::ptrdiff_t postfix_width = 0;
 6090|   162k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 162k, False: 438]
  ------------------
 6091|   162k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 162k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   162k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   162k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   162k|                                 value_width));
 6095|   162k|            std::tie(it, postfix_width) = postfix_result;
 6096|   162k|        }
 6097|       |
 6098|   162k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   162k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 162k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   162k|            specs, prefix_width, value_width, postfix_width));
 6100|   162k|        return it;
 6101|   162k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3612|   507k|    {
 3613|   507k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|   507k|        const std::ptrdiff_t sign_len =
 3616|   507k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 2.41k, False: 504k]
  ------------------
 3617|       |
 3618|   507k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   507k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   507k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   507k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 48.1k, False: 458k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  48.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  48.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  48.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  48.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  48.1k|    }                                                  \
  |  |  |  | 3939|   507k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|   458k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|   507k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4082|   228k|    {
 4083|   228k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   228k|#if !SCN_DISABLE_LOCALE
 4086|   228k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 57.8k, False: 171k]
  ------------------
 4087|  57.8k|            return read_impl<Range>(
 4088|  57.8k|                range, rd,
 4089|  57.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  57.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|  57.8k|                },
 4092|  57.8k|                value, loc);
 4093|  57.8k|        }
 4094|   171k|#endif
 4095|       |
 4096|   171k|        return read_impl<Range>(
 4097|   171k|            range, rd,
 4098|   171k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   171k|                return r.read_source(SCN_FWD(args)...);
 4100|   171k|            },
 4101|   171k|            value);
 4102|   228k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|   315k|    {
 4119|   315k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   315k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.9k, False: 230k]
  |  |  ------------------
  ------------------
 4121|  84.9k|            return unexpected(r.error());
 4122|  84.9k|        }
 4123|       |
 4124|   230k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   229k|        return ranges::next(range.begin(), n);
 4126|   230k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  57.8k|        : m_fptr([](storage fn,
  743|  57.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.8k|              cvref<T> obj = *get<T>(fn);
  745|  57.8k|              if constexpr (std::is_void_v<R>) {
  746|  57.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.8k|              }
  748|  57.8k|              else {
  749|  57.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.8k|              }
  751|  57.8k|          }),
  752|  57.8k|          m_storage(std::addressof(f))
  753|  57.8k|    {
  754|  57.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  57.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.8k|              else {
  749|  57.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.8k|              }
  751|  57.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.8k|        else if constexpr (std::is_object_v<T>) {
  688|  57.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4089|  57.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  57.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|  57.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  57.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.8k|        {
  662|  57.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   171k|        : m_fptr([](storage fn,
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|   171k|              if constexpr (std::is_void_v<R>) {
  746|   171k|                  obj(static_cast<decltype(args)>(args)...);
  747|   171k|              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
  752|   171k|          m_storage(std::addressof(f))
  753|   171k|    {
  754|   171k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   171k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   171k|        else if constexpr (std::is_object_v<T>) {
  688|   171k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   171k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4098|   171k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   171k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   171k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   171k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   171k|        {
  662|   171k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4082|   229k|    {
 4083|   229k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   229k|#if !SCN_DISABLE_LOCALE
 4086|   229k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 57.8k, False: 171k]
  ------------------
 4087|  57.8k|            return read_impl<Range>(
 4088|  57.8k|                range, rd,
 4089|  57.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  57.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|  57.8k|                },
 4092|  57.8k|                value, loc);
 4093|  57.8k|        }
 4094|   171k|#endif
 4095|       |
 4096|   171k|        return read_impl<Range>(
 4097|   171k|            range, rd,
 4098|   171k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   171k|                return r.read_source(SCN_FWD(args)...);
 4100|   171k|            },
 4101|   171k|            value);
 4102|   229k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|   315k|    {
 4119|   315k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   315k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 39.6k, False: 276k]
  |  |  ------------------
  ------------------
 4121|  39.6k|            return unexpected(r.error());
 4122|  39.6k|        }
 4123|       |
 4124|   276k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.7k, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.7k|    }                                                  \
  |  |  |  | 3939|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   229k|        return ranges::next(range.begin(), n);
 4126|   276k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  57.8k|        : m_fptr([](storage fn,
  743|  57.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.8k|              cvref<T> obj = *get<T>(fn);
  745|  57.8k|              if constexpr (std::is_void_v<R>) {
  746|  57.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.8k|              }
  748|  57.8k|              else {
  749|  57.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.8k|              }
  751|  57.8k|          }),
  752|  57.8k|          m_storage(std::addressof(f))
  753|  57.8k|    {
  754|  57.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  57.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.8k|              else {
  749|  57.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.8k|              }
  751|  57.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.8k|        else if constexpr (std::is_object_v<T>) {
  688|  57.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4089|  57.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  57.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|  57.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  57.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.8k|        {
  662|  57.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   171k|        : m_fptr([](storage fn,
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|   171k|              if constexpr (std::is_void_v<R>) {
  746|   171k|                  obj(static_cast<decltype(args)>(args)...);
  747|   171k|              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
  752|   171k|          m_storage(std::addressof(f))
  753|   171k|    {
  754|   171k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   171k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   171k|        else if constexpr (std::is_object_v<T>) {
  688|   171k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   171k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4098|   171k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   171k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   171k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   171k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   171k|        {
  662|   171k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|   233k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   233k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   233k|            auto rd = make_reader<T, char_type>();
 6116|   233k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   233k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 233k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   233k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 233k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   233k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   233k|                return impl(rd, range, value);
 6121|   233k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   233k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   233k|    {
 6041|   233k|        const bool need_skipped_width =
 6042|   233k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 233k]
  |  Branch (6042:33): [True: 0, False: 233k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   233k|        auto it = rng.begin();
 6046|   233k|        std::ptrdiff_t prefix_width = 0;
 6047|   233k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 233k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   233k|        else {
 6055|   233k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.02k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.02k|    }                                                  \
  |  |  |  | 3939|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   232k|            std::tie(it, prefix_width) = prefix_result;
 6057|   232k|        }
 6058|   232k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   232k|        std::ptrdiff_t value_width = 0;
 6062|   232k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 232k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   232k|        else {
 6078|   232k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.4k, False: 166k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.4k|    }                                                  \
  |  | 3939|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   166k|                                             specs, value, loc));
 6080|       |
 6081|   166k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 166k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   166k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   166k|        std::ptrdiff_t postfix_width = 0;
 6090|   166k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 165k, False: 460]
  ------------------
 6091|   165k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   165k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   165k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   165k|                                 value_width));
 6095|   165k|            std::tie(it, postfix_width) = postfix_result;
 6096|   165k|        }
 6097|       |
 6098|   166k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   166k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   166k|            specs, prefix_width, value_width, postfix_width));
 6100|   166k|        return it;
 6101|   166k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3612|   518k|    {
 3613|   518k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3614|       |
 3615|   518k|        const std::ptrdiff_t sign_len =
 3616|   518k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3616:13): [True: 2.43k, False: 515k]
  ------------------
 3617|       |
 3618|   518k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   518k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   518k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   518k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   518k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.4k, False: 471k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.4k|    }                                                  \
  |  |  |  | 3939|   518k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   471k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3619|   471k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3620|   518k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4082|   232k|    {
 4083|   232k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   232k|#if !SCN_DISABLE_LOCALE
 4086|   232k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 59.5k, False: 173k]
  ------------------
 4087|  59.5k|            return read_impl<Range>(
 4088|  59.5k|                range, rd,
 4089|  59.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  59.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|  59.5k|                },
 4092|  59.5k|                value, loc);
 4093|  59.5k|        }
 4094|   173k|#endif
 4095|       |
 4096|   173k|        return read_impl<Range>(
 4097|   173k|            range, rd,
 4098|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   173k|                return r.read_source(SCN_FWD(args)...);
 4100|   173k|            },
 4101|   173k|            value);
 4102|   232k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4118|   321k|    {
 4119|   321k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   321k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 86.0k, False: 235k]
  |  |  ------------------
  ------------------
 4121|  86.0k|            return unexpected(r.error());
 4122|  86.0k|        }
 4123|       |
 4124|   235k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 216, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    216|    }                                                  \
  |  |  |  | 3939|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   235k|        return ranges::next(range.begin(), n);
 4126|   235k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  59.5k|        : m_fptr([](storage fn,
  743|  59.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.5k|              cvref<T> obj = *get<T>(fn);
  745|  59.5k|              if constexpr (std::is_void_v<R>) {
  746|  59.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.5k|              }
  748|  59.5k|              else {
  749|  59.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.5k|              }
  751|  59.5k|          }),
  752|  59.5k|          m_storage(std::addressof(f))
  753|  59.5k|    {
  754|  59.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  59.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.5k|              else {
  749|  59.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.5k|              }
  751|  59.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.5k|        else if constexpr (std::is_object_v<T>) {
  688|  59.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4089|  59.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  59.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|  59.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  59.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.5k|        {
  662|  59.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   173k|        : m_fptr([](storage fn,
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
  752|   173k|          m_storage(std::addressof(f))
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   173k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  688|   173k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   173k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4098|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   173k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   173k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   173k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4082|   232k|    {
 4083|   232k|        float_reader<CharT> rd{get_options(specs)};
 4084|       |
 4085|   232k|#if !SCN_DISABLE_LOCALE
 4086|   232k|        if (specs.localized) {
  ------------------
  |  Branch (4086:13): [True: 59.6k, False: 173k]
  ------------------
 4087|  59.6k|            return read_impl<Range>(
 4088|  59.6k|                range, rd,
 4089|  59.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  59.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4091|  59.6k|                },
 4092|  59.6k|                value, loc);
 4093|  59.6k|        }
 4094|   173k|#endif
 4095|       |
 4096|   173k|        return read_impl<Range>(
 4097|   173k|            range, rd,
 4098|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   173k|                return r.read_source(SCN_FWD(args)...);
 4100|   173k|            },
 4101|   173k|            value);
 4102|   232k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4118|   322k|    {
 4119|   322k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4120|   322k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40.0k, False: 282k]
  |  |  ------------------
  ------------------
 4121|  40.0k|            return unexpected(r.error());
 4122|  40.0k|        }
 4123|       |
 4124|   282k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 46.2k, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  46.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  46.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  46.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  46.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  46.2k|    }                                                  \
  |  |  |  | 3939|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4125|   235k|        return ranges::next(range.begin(), n);
 4126|   282k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  59.6k|        : m_fptr([](storage fn,
  743|  59.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.6k|              cvref<T> obj = *get<T>(fn);
  745|  59.6k|              if constexpr (std::is_void_v<R>) {
  746|  59.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.6k|              }
  748|  59.6k|              else {
  749|  59.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.6k|              }
  751|  59.6k|          }),
  752|  59.6k|          m_storage(std::addressof(f))
  753|  59.6k|    {
  754|  59.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  59.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.6k|              else {
  749|  59.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.6k|              }
  751|  59.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.6k|        else if constexpr (std::is_object_v<T>) {
  688|  59.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4089|  59.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4090|  59.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4091|  59.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.6k|        {
  662|  59.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   173k|        : m_fptr([](storage fn,
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
  752|   173k|          m_storage(std::addressof(f))
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   173k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  688|   173k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   173k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4098|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4099|   173k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4100|   173k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   173k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|   918k|{
 2051|   918k|    auto it = range.begin();
 2052|  1.59M|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 1.59M, False: 3.41k]
  ------------------
 2053|  1.59M|        const auto val =
 2054|  1.59M|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  1.59M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.59M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.59M, False: 0]
  |  |  ------------------
  ------------------
 2056|  1.59M|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  1.59M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  1.59M|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 915k, False: 679k]
  ------------------
 2059|   915k|                return it;
 2060|   915k|            }
 2061|  1.59M|        }
 2062|   679k|        it = val.iterator;
 2063|   679k|    }
 2064|       |
 2065|  3.41k|    return it;
 2066|   918k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1888|  1.59M|{
 1889|  1.59M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  1.59M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  1.59M|    auto it = range.begin();
 1893|  1.59M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  1.59M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.59M]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|  1.59M|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 1.59M, False: 0]
  ------------------
 1902|  1.59M|        ++it;
 1903|  1.59M|        return {it, string_type(1, *range.begin())};
 1904|  1.59M|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|  1.59M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1879|  1.59M|    {
 1880|  1.59M|        return !codepoint.empty();
 1881|  1.59M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|   918k|{
 2072|   918k|    return read_until_code_point(range, std::not_fn(pred));
 2073|   918k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|   918k|{
 2946|   918k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 918k, False: 0]
  ------------------
 2947|   918k|        auto it = read_while_classic_space(range);
 2948|   918k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|   918k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.41k, False: 915k]
  |  |  ------------------
  ------------------
 2950|  3.41k|            return unexpected(e);
 2951|  3.41k|        }
 2952|       |
 2953|   915k|        return it;
 2954|   918k|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|   918k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|   918k|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|   918k|    else {
 2116|   918k|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|   918k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|   918k|            return detail::is_cp_space(cp);
 2129|   918k|        });
 2130|   918k|    }
 2131|   918k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   918k|        : m_fptr([](storage fn,
  743|   918k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   918k|              cvref<T> obj = *get<T>(fn);
  745|   918k|              if constexpr (std::is_void_v<R>) {
  746|   918k|                  obj(static_cast<decltype(args)>(args)...);
  747|   918k|              }
  748|   918k|              else {
  749|   918k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   918k|              }
  751|   918k|          }),
  752|   918k|          m_storage(std::addressof(f))
  753|   918k|    {
  754|   918k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.59M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.59M|              else {
  749|  1.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.59M|              }
  751|  1.59M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.59M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.59M|        else if constexpr (std::is_object_v<T>) {
  688|  1.59M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.59M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|  1.59M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  1.59M|            return detail::is_cp_space(cp);
 2129|  1.59M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   918k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   918k|        {
  662|   918k|        }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2077|  1.47M|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|  1.47M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|  1.47M|        auto buf = make_contiguous_buffer(range);
 2082|  1.47M|        auto it = find_classic_space_narrow_fast(buf.view());
 2083|  1.47M|        return ranges::next(range.begin(),
 2084|  1.47M|                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|       |    else {
 2087|       |        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|       |        return read_until_code_point(
 2099|       |            ranges::subrange{it, range.end()},
 2100|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|       |    }
 2102|  1.47M|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1672|  1.47M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  1.47M|                  ranges::sized_range<Range>) {
 1676|  1.47M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  1.47M|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1478|  1.47M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  1.47M|    {
 1480|  1.47M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1566|  1.47M|    {
 1567|  1.47M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|  1.47M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1610|  1.47M|    {
 1611|  1.47M|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|  1.47M|                                          std::basic_string<CharT>>) {
 1621|  1.47M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1622|  1.47M|            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|  1.47M|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4012|  1.04M|    {
 4013|  1.04M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4013:13): [True: 102k, False: 940k]
  ------------------
 4014|   102k|            return std::copysign(value, T{-1.0});
 4015|   102k|        }
 4016|   940k|        return std::copysign(value, T{1.0});
 4017|  1.04M|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2077|   657k|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|       |        auto buf = make_contiguous_buffer(range);
 2082|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2083|       |        return ranges::next(range.begin(),
 2084|       |                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|   657k|    else {
 2087|   657k|        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|   657k|        return read_until_code_point(
 2099|   657k|            ranges::subrange{it, range.end()},
 2100|   657k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|   657k|    }
 2102|   657k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   657k|        : m_fptr([](storage fn,
  743|   657k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   657k|              cvref<T> obj = *get<T>(fn);
  745|   657k|              if constexpr (std::is_void_v<R>) {
  746|   657k|                  obj(static_cast<decltype(args)>(args)...);
  747|   657k|              }
  748|   657k|              else {
  749|   657k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   657k|              }
  751|   657k|          }),
  752|   657k|          m_storage(std::addressof(f))
  753|   657k|    {
  754|   657k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.25M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.25M|              else {
  749|  1.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.25M|              }
  751|  1.25M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.25M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.25M|        else if constexpr (std::is_object_v<T>) {
  688|  1.25M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.25M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2100|  1.25M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   657k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   657k|        {
  662|   657k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1566|   657k|    {
 1567|   657k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   657k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1568|   657k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1610|   657k|    {
 1611|   657k|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|   657k|                                          std::basic_string<CharT>>) {
 1621|   657k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   657k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1622|   657k|            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|       |                           ranges::common_range<Range>) {
 1628|       |            auto beg_seg = range.begin().contiguous_segment();
 1629|       |            auto end_seg = range.end().contiguous_segment();
 1630|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1631|       |                             detail::to_address(end_seg.end()))) {
 1632|       |                auto& str = m_storage.emplace();
 1633|       |                str.reserve(range.end().position() - range.begin().position());
 1634|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|       |                m_view = string_view_type{str};
 1636|       |                return;
 1637|       |            }
 1638|       |
 1639|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|       |                                                            end_seg.data());
 1641|       |            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|   657k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4012|   382k|    {
 4013|   382k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4013:13): [True: 1.71k, False: 380k]
  ------------------
 4014|  1.71k|            return std::copysign(value, T{-1.0});
 4015|  1.71k|        }
 4016|   380k|        return std::copysign(value, T{1.0});
 4017|   382k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4012|  1.09M|    {
 4013|  1.09M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4013:13): [True: 107k, False: 985k]
  ------------------
 4014|   107k|            return std::copysign(value, T{-1.0});
 4015|   107k|        }
 4016|   985k|        return std::copysign(value, T{1.0});
 4017|  1.09M|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4012|   458k|    {
 4013|   458k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4013:13): [True: 1.77k, False: 457k]
  ------------------
 4014|  1.77k|            return std::copysign(value, T{-1.0});
 4015|  1.77k|        }
 4016|   457k|        return std::copysign(value, T{1.0});
 4017|   458k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4012|  1.10M|    {
 4013|  1.10M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4013:13): [True: 110k, False: 995k]
  ------------------
 4014|   110k|            return std::copysign(value, T{-1.0});
 4015|   110k|        }
 4016|   995k|        return std::copysign(value, T{1.0});
 4017|  1.10M|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4012|   471k|    {
 4013|   471k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4013:13): [True: 1.78k, False: 469k]
  ------------------
 4014|  1.78k|            return std::copysign(value, T{-1.0});
 4015|  1.78k|        }
 4016|   469k|        return std::copysign(value, T{1.0});
 4017|   471k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|   475k|{
 5715|   475k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.66k, False: 470k]
  |  |  ------------------
  ------------------
 5716|  4.66k|        return unexpected(e);
 5717|  4.66k|    }
 5718|       |
 5719|   470k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 470k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   470k|    return skip_classic_whitespace(range);
 5724|   470k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5790|   152k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|   152k|                          basic_contiguous_scan_context<char_type>>) {
 5795|   152k|            auto rd = make_reader<T, char_type>();
 5796|   152k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   152k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|   152k|    {
 5783|   152k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.52k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.52k|    }                                                  \
  |  |  |  | 3939|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   151k|                        .transform_error(make_eof_scan_error));
 5785|   151k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   152k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|   151k|    {
 4065|   151k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   151k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|   151k|        float_reader<CharT> rd{};
 4068|   151k|        return read_impl<Range>(
 4069|   151k|            range, rd,
 4070|   151k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   151k|                return r.read_source(SCN_FWD(args)...);
 4072|   151k|            },
 4073|   151k|            value);
 4074|   151k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3579|   986k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3565|  1.47M|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   151k|        : m_fptr([](storage fn,
  743|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   151k|              cvref<T> obj = *get<T>(fn);
  745|   151k|              if constexpr (std::is_void_v<R>) {
  746|   151k|                  obj(static_cast<decltype(args)>(args)...);
  747|   151k|              }
  748|   151k|              else {
  749|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   151k|              }
  751|   151k|          }),
  752|   151k|          m_storage(std::addressof(f))
  753|   151k|    {
  754|   151k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   151k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   151k|              else {
  749|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   151k|              }
  751|   151k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   151k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   151k|        else if constexpr (std::is_object_v<T>) {
  688|   151k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   151k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|   151k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   151k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|   151k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   151k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   151k|        {
  662|   151k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5790|   159k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|   159k|                          basic_contiguous_scan_context<char_type>>) {
 5795|   159k|            auto rd = make_reader<T, char_type>();
 5796|   159k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   159k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|   159k|    {
 5783|   159k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.75k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.75k|    }                                                  \
  |  |  |  | 3939|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   157k|                        .transform_error(make_eof_scan_error));
 5785|   157k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   159k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|   157k|    {
 4065|   157k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|   157k|        float_reader<CharT> rd{};
 4068|   157k|        return read_impl<Range>(
 4069|   157k|            range, rd,
 4070|   157k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   157k|                return r.read_source(SCN_FWD(args)...);
 4072|   157k|            },
 4073|   157k|            value);
 4074|   157k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   157k|        : m_fptr([](storage fn,
  743|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   157k|              cvref<T> obj = *get<T>(fn);
  745|   157k|              if constexpr (std::is_void_v<R>) {
  746|   157k|                  obj(static_cast<decltype(args)>(args)...);
  747|   157k|              }
  748|   157k|              else {
  749|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   157k|              }
  751|   157k|          }),
  752|   157k|          m_storage(std::addressof(f))
  753|   157k|    {
  754|   157k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   157k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   157k|              else {
  749|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   157k|              }
  751|   157k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   157k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   157k|        else if constexpr (std::is_object_v<T>) {
  688|   157k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   157k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|   157k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   157k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|   157k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   157k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   157k|        {
  662|   157k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5790|   162k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|   162k|                          basic_contiguous_scan_context<char_type>>) {
 5795|   162k|            auto rd = make_reader<T, char_type>();
 5796|   162k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   162k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|   162k|    {
 5783|   162k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.89k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.89k|    }                                                  \
  |  |  |  | 3939|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   160k|                        .transform_error(make_eof_scan_error));
 5785|   160k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   162k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|   160k|    {
 4065|   160k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   160k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|   160k|        float_reader<CharT> rd{};
 4068|   160k|        return read_impl<Range>(
 4069|   160k|            range, rd,
 4070|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   160k|                return r.read_source(SCN_FWD(args)...);
 4072|   160k|            },
 4073|   160k|            value);
 4074|   160k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|   160k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5714|   522k|{
 5715|   522k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.90k, False: 517k]
  |  |  ------------------
  ------------------
 5716|  4.90k|        return unexpected(e);
 5717|  4.90k|    }
 5718|       |
 5719|   517k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 517k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   517k|    return skip_classic_whitespace(range);
 5724|   517k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|   167k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|   167k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|   167k|            auto rd = make_reader<T, char_type>();
 5800|   167k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 167k, False: 0]
  ------------------
 5801|   167k|                return impl(rd, range, value);
 5802|   167k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   167k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|   167k|    {
 5783|   167k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.61k, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.61k|    }                                                  \
  |  |  |  | 3939|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   165k|                        .transform_error(make_eof_scan_error));
 5785|   165k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   167k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4064|   165k|    {
 4065|   165k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   165k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|   165k|        float_reader<CharT> rd{};
 4068|   165k|        return read_impl<Range>(
 4069|   165k|            range, rd,
 4070|   165k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   165k|                return r.read_source(SCN_FWD(args)...);
 4072|   165k|            },
 4073|   165k|            value);
 4074|   165k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   165k|        : m_fptr([](storage fn,
  743|   165k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165k|              cvref<T> obj = *get<T>(fn);
  745|   165k|              if constexpr (std::is_void_v<R>) {
  746|   165k|                  obj(static_cast<decltype(args)>(args)...);
  747|   165k|              }
  748|   165k|              else {
  749|   165k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165k|              }
  751|   165k|          }),
  752|   165k|          m_storage(std::addressof(f))
  753|   165k|    {
  754|   165k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   165k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   165k|              else {
  749|   165k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165k|              }
  751|   165k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   165k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   165k|        else if constexpr (std::is_object_v<T>) {
  688|   165k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   165k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4070|   165k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   165k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|   165k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   165k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   165k|        {
  662|   165k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|   176k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|   176k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|   176k|            auto rd = make_reader<T, char_type>();
 5800|   176k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 176k, False: 0]
  ------------------
 5801|   176k|                return impl(rd, range, value);
 5802|   176k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   176k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|   176k|    {
 5783|   176k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.86k, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.86k|    }                                                  \
  |  |  |  | 3939|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   174k|                        .transform_error(make_eof_scan_error));
 5785|   174k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   176k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4064|   174k|    {
 4065|   174k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   174k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|   174k|        float_reader<CharT> rd{};
 4068|   174k|        return read_impl<Range>(
 4069|   174k|            range, rd,
 4070|   174k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   174k|                return r.read_source(SCN_FWD(args)...);
 4072|   174k|            },
 4073|   174k|            value);
 4074|   174k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   174k|        : m_fptr([](storage fn,
  743|   174k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   174k|              cvref<T> obj = *get<T>(fn);
  745|   174k|              if constexpr (std::is_void_v<R>) {
  746|   174k|                  obj(static_cast<decltype(args)>(args)...);
  747|   174k|              }
  748|   174k|              else {
  749|   174k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   174k|              }
  751|   174k|          }),
  752|   174k|          m_storage(std::addressof(f))
  753|   174k|    {
  754|   174k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   174k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   174k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   174k|              else {
  749|   174k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   174k|              }
  751|   174k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   174k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   174k|        else if constexpr (std::is_object_v<T>) {
  688|   174k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   174k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4070|   174k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   174k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|   174k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   174k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   174k|        {
  662|   174k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|   178k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|   178k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|   178k|            auto rd = make_reader<T, char_type>();
 5800|   178k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 178k, False: 0]
  ------------------
 5801|   178k|                return impl(rd, range, value);
 5802|   178k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   178k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|   178k|    {
 5783|   178k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.99k, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.99k|    }                                                  \
  |  |  |  | 3939|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   176k|                        .transform_error(make_eof_scan_error));
 5785|   176k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   178k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4064|   176k|    {
 4065|   176k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   176k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|   176k|        float_reader<CharT> rd{};
 4068|   176k|        return read_impl<Range>(
 4069|   176k|            range, rd,
 4070|   176k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   176k|                return r.read_source(SCN_FWD(args)...);
 4072|   176k|            },
 4073|   176k|            value);
 4074|   176k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   176k|        : m_fptr([](storage fn,
  743|   176k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   176k|              cvref<T> obj = *get<T>(fn);
  745|   176k|              if constexpr (std::is_void_v<R>) {
  746|   176k|                  obj(static_cast<decltype(args)>(args)...);
  747|   176k|              }
  748|   176k|              else {
  749|   176k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   176k|              }
  751|   176k|          }),
  752|   176k|          m_storage(std::addressof(f))
  753|   176k|    {
  754|   176k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   176k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   176k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   176k|              else {
  749|   176k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   176k|              }
  751|   176k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   176k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   176k|        else if constexpr (std::is_object_v<T>) {
  688|   176k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   176k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4070|   176k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|   176k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|   176k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   176k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   176k|        {
  662|   176k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2865|  1.14M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  1.14M|    static_cast<    \
  |  |  935|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|  1.14M|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|  1.14M|          m_current(m_range.begin())
 2868|  1.14M|    {
 2869|  1.14M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2877|  2.18M|    {
 2878|  2.18M|        return m_range.end();
 2879|  2.18M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 2892|  1.04M|    {
 2893|  1.04M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|  1.04M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|  1.04M|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 1.04M]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|  1.04M|        }
 2899|  1.04M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  1.04M|    static_cast<    \
  |  |  935|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|  1.04M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2882|  1.14M|    {
 2883|  1.14M|        return ranges::subrange{begin(), end()};
 2884|  1.14M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|  1.14M|    {
 5954|  1.14M|        const bool need_skipped_width =
 5955|  1.14M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 1.14M]
  |  Branch (5955:33): [True: 0, False: 1.14M]
  ------------------
 5956|  1.14M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  1.14M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 1.14M]
  ------------------
 5960|  1.14M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 1.14M]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|  1.14M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 1.14M, False: 0]
  |  Branch (5964:56): [True: 1.14M, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|  1.14M|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 1.14M]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  2.27M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.14M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.14M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.14M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.1k, False: 1.12M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.1k|    }                                                  \
  |  |  |  | 3939|  1.14M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  2.27M|                            make_eof_scan_error));
 5975|       |
 5976|  2.27M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 1.12M]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|  1.12M|            return result_type{it, 0};
 5984|  2.27M|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|  1.14M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|  1.03M|    {
 5996|  1.03M|        const bool need_skipped_width =
 5997|  1.03M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 1.03M]
  |  Branch (5997:33): [True: 0, False: 1.03M]
  ------------------
 5998|  1.03M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  1.03M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 1.03M]
  ------------------
 6001|  1.03M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 1.03M]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  1.03M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 1.03M, False: 0]
  ------------------
 6010|  1.03M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 1.03M]
  ------------------
 6011|  1.03M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  1.03M|        return result_type{rng.begin(), 0};
 6035|  1.03M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6105|   371k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   371k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   371k|            auto rd = make_reader<T, char_type>();
 6111|   371k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   371k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 371k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   371k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   371k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   371k|    {
 6041|   371k|        const bool need_skipped_width =
 6042|   371k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 371k]
  |  Branch (6042:33): [True: 0, False: 371k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   371k|        auto it = rng.begin();
 6046|   371k|        std::ptrdiff_t prefix_width = 0;
 6047|   371k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 371k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   371k|        else {
 6055|   371k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   371k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   371k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   371k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.98k, False: 367k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.98k|    }                                                  \
  |  |  |  | 3939|   371k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   367k|            std::tie(it, prefix_width) = prefix_result;
 6057|   367k|        }
 6058|   367k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   367k|        std::ptrdiff_t value_width = 0;
 6062|   367k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 367k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   367k|        else {
 6078|   367k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   367k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   367k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 29.7k, False: 337k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  29.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  29.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  29.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  29.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  29.7k|    }                                                  \
  |  | 3939|   367k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   337k|                                             specs, value, loc));
 6080|       |
 6081|   337k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 337k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   337k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   337k|        std::ptrdiff_t postfix_width = 0;
 6090|   337k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 334k, False: 3.55k]
  ------------------
 6091|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   334k|                                 value_width));
 6095|   334k|            std::tie(it, postfix_width) = postfix_result;
 6096|   334k|        }
 6097|       |
 6098|   337k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   337k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 337k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   337k|            specs, prefix_width, value_width, postfix_width));
 6100|   337k|        return it;
 6101|   337k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6105|   383k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   383k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   383k|            auto rd = make_reader<T, char_type>();
 6111|   383k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   383k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 383k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   383k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   383k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   383k|    {
 6041|   383k|        const bool need_skipped_width =
 6042|   383k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 383k]
  |  Branch (6042:33): [True: 0, False: 383k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   383k|        auto it = rng.begin();
 6046|   383k|        std::ptrdiff_t prefix_width = 0;
 6047|   383k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 383k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   383k|        else {
 6055|   383k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.45k, False: 379k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.45k|    }                                                  \
  |  |  |  | 3939|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   379k|            std::tie(it, prefix_width) = prefix_result;
 6057|   379k|        }
 6058|   379k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   379k|        std::ptrdiff_t value_width = 0;
 6062|   379k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 379k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   379k|        else {
 6078|   379k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   379k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   379k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 29.2k, False: 350k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  29.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  29.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  29.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  29.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  29.2k|    }                                                  \
  |  | 3939|   379k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   350k|                                             specs, value, loc));
 6080|       |
 6081|   350k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 350k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   350k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   350k|        std::ptrdiff_t postfix_width = 0;
 6090|   350k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 346k, False: 3.97k]
  ------------------
 6091|   346k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 346k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   346k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   346k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   346k|                                 value_width));
 6095|   346k|            std::tie(it, postfix_width) = postfix_result;
 6096|   346k|        }
 6097|       |
 6098|   350k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   350k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 350k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   350k|            specs, prefix_width, value_width, postfix_width));
 6100|   350k|        return it;
 6101|   350k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6105|   387k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   387k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   387k|            auto rd = make_reader<T, char_type>();
 6111|   387k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   387k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 387k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   387k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   387k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   387k|    {
 6041|   387k|        const bool need_skipped_width =
 6042|   387k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 387k]
  |  Branch (6042:33): [True: 0, False: 387k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   387k|        auto it = rng.begin();
 6046|   387k|        std::ptrdiff_t prefix_width = 0;
 6047|   387k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 387k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   387k|        else {
 6055|   387k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   387k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   387k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   387k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.72k, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.72k|    }                                                  \
  |  |  |  | 3939|   387k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   383k|            std::tie(it, prefix_width) = prefix_result;
 6057|   383k|        }
 6058|   383k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   383k|        std::ptrdiff_t value_width = 0;
 6062|   383k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 383k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   383k|        else {
 6078|   383k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 28.9k, False: 354k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  28.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  28.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  28.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  28.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  28.9k|    }                                                  \
  |  | 3939|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   354k|                                             specs, value, loc));
 6080|       |
 6081|   354k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 354k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   354k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   354k|        std::ptrdiff_t postfix_width = 0;
 6090|   354k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 349k, False: 4.21k]
  ------------------
 6091|   349k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   349k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   349k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   349k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 349k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   349k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   349k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   349k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   349k|                                 value_width));
 6095|   349k|            std::tie(it, postfix_width) = postfix_result;
 6096|   349k|        }
 6097|       |
 6098|   354k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   354k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 354k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   354k|            specs, prefix_width, value_width, postfix_width));
 6100|   354k|        return it;
 6101|   354k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|   247k|{
 5715|   247k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 483, False: 247k]
  |  |  ------------------
  ------------------
 5716|    483|        return unexpected(e);
 5717|    483|    }
 5718|       |
 5719|   247k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 247k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   247k|    return skip_classic_whitespace(range);
 5724|   247k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5790|  70.7k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  70.7k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  70.7k|            auto rd = make_reader<T, char_type>();
 5796|  70.7k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  70.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  70.7k|    {
 5783|  70.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  70.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  70.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  70.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 294, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    294|    }                                                  \
  |  |  |  | 3939|  70.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  70.4k|                        .transform_error(make_eof_scan_error));
 5785|  70.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  70.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|  70.4k|    {
 4065|  70.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  70.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|  70.4k|        float_reader<CharT> rd{};
 4068|  70.4k|        return read_impl<Range>(
 4069|  70.4k|            range, rd,
 4070|  70.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  70.4k|                return r.read_source(SCN_FWD(args)...);
 4072|  70.4k|            },
 4073|  70.4k|            value);
 4074|  70.4k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3579|   493k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  70.4k|        : m_fptr([](storage fn,
  743|  70.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.4k|              cvref<T> obj = *get<T>(fn);
  745|  70.4k|              if constexpr (std::is_void_v<R>) {
  746|  70.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.4k|              }
  748|  70.4k|              else {
  749|  70.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.4k|              }
  751|  70.4k|          }),
  752|  70.4k|          m_storage(std::addressof(f))
  753|  70.4k|    {
  754|  70.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  70.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  70.4k|              else {
  749|  70.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.4k|              }
  751|  70.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  70.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  70.4k|        else if constexpr (std::is_object_v<T>) {
  688|  70.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  70.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|  70.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  70.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|  70.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  70.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  70.4k|        {
  662|  70.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5790|  87.1k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  87.1k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  87.1k|            auto rd = make_reader<T, char_type>();
 5796|  87.1k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  87.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  87.1k|    {
 5783|  87.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  87.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  87.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  87.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  87.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 333, False: 86.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    333|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    333|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    333|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    333|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    333|    }                                                  \
  |  |  |  | 3939|  87.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  86.8k|                        .transform_error(make_eof_scan_error));
 5785|  86.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  87.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|  86.8k|    {
 4065|  86.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  86.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|  86.8k|        float_reader<CharT> rd{};
 4068|  86.8k|        return read_impl<Range>(
 4069|  86.8k|            range, rd,
 4070|  86.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  86.8k|                return r.read_source(SCN_FWD(args)...);
 4072|  86.8k|            },
 4073|  86.8k|            value);
 4074|  86.8k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  86.8k|        : m_fptr([](storage fn,
  743|  86.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.8k|              cvref<T> obj = *get<T>(fn);
  745|  86.8k|              if constexpr (std::is_void_v<R>) {
  746|  86.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.8k|              }
  748|  86.8k|              else {
  749|  86.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.8k|              }
  751|  86.8k|          }),
  752|  86.8k|          m_storage(std::addressof(f))
  753|  86.8k|    {
  754|  86.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  86.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  86.8k|              else {
  749|  86.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.8k|              }
  751|  86.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  86.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  86.8k|        else if constexpr (std::is_object_v<T>) {
  688|  86.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  86.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|  86.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  86.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|  86.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  86.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  86.8k|        {
  662|  86.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5790|  89.8k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  89.8k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  89.8k|            auto rd = make_reader<T, char_type>();
 5796|  89.8k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  89.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  89.8k|    {
 5783|  89.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  89.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  89.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  89.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 366, False: 89.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    366|    }                                                  \
  |  |  |  | 3939|  89.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  89.4k|                        .transform_error(make_eof_scan_error));
 5785|  89.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  89.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4064|  89.4k|    {
 4065|  89.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  89.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|  89.4k|        float_reader<CharT> rd{};
 4068|  89.4k|        return read_impl<Range>(
 4069|  89.4k|            range, rd,
 4070|  89.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  89.4k|                return r.read_source(SCN_FWD(args)...);
 4072|  89.4k|            },
 4073|  89.4k|            value);
 4074|  89.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  89.4k|        : m_fptr([](storage fn,
  743|  89.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.4k|              cvref<T> obj = *get<T>(fn);
  745|  89.4k|              if constexpr (std::is_void_v<R>) {
  746|  89.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.4k|              }
  748|  89.4k|              else {
  749|  89.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.4k|              }
  751|  89.4k|          }),
  752|  89.4k|          m_storage(std::addressof(f))
  753|  89.4k|    {
  754|  89.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  89.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.4k|              else {
  749|  89.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.4k|              }
  751|  89.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  89.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.4k|        else if constexpr (std::is_object_v<T>) {
  688|  89.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4070|  89.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  89.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|  89.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  89.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.4k|        {
  662|  89.4k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2865|   671k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   671k|    static_cast<    \
  |  |  935|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|   671k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|   671k|          m_current(m_range.begin())
 2868|   671k|    {
 2869|   671k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2877|  1.14M|    {
 2878|  1.14M|        return m_range.end();
 2879|  1.14M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 2892|   469k|    {
 2893|   469k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   469k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   469k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|   469k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|   469k|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 469k]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|   469k|        }
 2899|   469k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   469k|    static_cast<    \
  |  |  935|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|   469k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2882|   671k|    {
 2883|   671k|        return ranges::subrange{begin(), end()};
 2884|   671k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|   671k|    {
 5954|   671k|        const bool need_skipped_width =
 5955|   671k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 671k]
  |  Branch (5955:33): [True: 0, False: 671k]
  ------------------
 5956|   671k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|   671k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 671k]
  ------------------
 5960|   671k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 671k]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|   671k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 671k, False: 0]
  |  Branch (5964:56): [True: 671k, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|   671k|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 671k]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  1.34M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   671k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   671k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   671k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.90k, False: 669k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.90k|    }                                                  \
  |  |  |  | 3939|   671k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  1.34M|                            make_eof_scan_error));
 5975|       |
 5976|  1.34M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 669k]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|   669k|            return result_type{it, 0};
 5984|  1.34M|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|   671k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|   468k|    {
 5996|   468k|        const bool need_skipped_width =
 5997|   468k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 468k]
  |  Branch (5997:33): [True: 0, False: 468k]
  ------------------
 5998|   468k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|   468k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 468k]
  ------------------
 6001|   468k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 468k]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|   468k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 468k, False: 0]
  ------------------
 6010|   468k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 468k]
  ------------------
 6011|   468k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|   468k|        return result_type{rng.begin(), 0};
 6035|   468k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6105|   208k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   208k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   208k|            auto rd = make_reader<T, char_type>();
 6111|   208k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   208k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 208k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   208k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   208k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   208k|    {
 6041|   208k|        const bool need_skipped_width =
 6042|   208k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 208k]
  |  Branch (6042:33): [True: 0, False: 208k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   208k|        auto it = rng.begin();
 6046|   208k|        std::ptrdiff_t prefix_width = 0;
 6047|   208k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 208k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   208k|        else {
 6055|   208k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   208k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   208k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   208k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 906, False: 207k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    906|    }                                                  \
  |  |  |  | 3939|   208k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   207k|            std::tie(it, prefix_width) = prefix_result;
 6057|   207k|        }
 6058|   207k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   207k|        std::ptrdiff_t value_width = 0;
 6062|   207k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 207k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   207k|        else {
 6078|   207k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.5k, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.5k|    }                                                  \
  |  | 3939|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   140k|                                             specs, value, loc));
 6080|       |
 6081|   140k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 140k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   140k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   140k|        std::ptrdiff_t postfix_width = 0;
 6090|   140k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 140k, False: 406]
  ------------------
 6091|   140k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   140k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   140k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   140k|                                 value_width));
 6095|   140k|            std::tie(it, postfix_width) = postfix_result;
 6096|   140k|        }
 6097|       |
 6098|   140k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   140k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   140k|            specs, prefix_width, value_width, postfix_width));
 6100|   140k|        return it;
 6101|   140k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6105|   230k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   230k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   230k|            auto rd = make_reader<T, char_type>();
 6111|   230k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   230k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 230k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   230k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   230k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   230k|    {
 6041|   230k|        const bool need_skipped_width =
 6042|   230k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 230k]
  |  Branch (6042:33): [True: 0, False: 230k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   230k|        auto it = rng.begin();
 6046|   230k|        std::ptrdiff_t prefix_width = 0;
 6047|   230k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 230k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   230k|        else {
 6055|   230k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 974, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    974|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    974|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    974|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    974|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    974|    }                                                  \
  |  |  |  | 3939|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   229k|            std::tie(it, prefix_width) = prefix_result;
 6057|   229k|        }
 6058|   229k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   229k|        std::ptrdiff_t value_width = 0;
 6062|   229k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 229k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   229k|        else {
 6078|   229k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.4k, False: 162k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.4k|    }                                                  \
  |  | 3939|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   162k|                                             specs, value, loc));
 6080|       |
 6081|   162k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 162k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   162k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   162k|        std::ptrdiff_t postfix_width = 0;
 6090|   162k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 162k, False: 438]
  ------------------
 6091|   162k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 162k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   162k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   162k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   162k|                                 value_width));
 6095|   162k|            std::tie(it, postfix_width) = postfix_result;
 6096|   162k|        }
 6097|       |
 6098|   162k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   162k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 162k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   162k|            specs, prefix_width, value_width, postfix_width));
 6100|   162k|        return it;
 6101|   162k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6105|   233k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   233k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   233k|            auto rd = make_reader<T, char_type>();
 6111|   233k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   233k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 233k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   233k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   233k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   233k|    {
 6041|   233k|        const bool need_skipped_width =
 6042|   233k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 233k]
  |  Branch (6042:33): [True: 0, False: 233k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   233k|        auto it = rng.begin();
 6046|   233k|        std::ptrdiff_t prefix_width = 0;
 6047|   233k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 233k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   233k|        else {
 6055|   233k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.02k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.02k|    }                                                  \
  |  |  |  | 3939|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   232k|            std::tie(it, prefix_width) = prefix_result;
 6057|   232k|        }
 6058|   232k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   232k|        std::ptrdiff_t value_width = 0;
 6062|   232k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 232k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   232k|        else {
 6078|   232k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.4k, False: 166k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.4k|    }                                                  \
  |  | 3939|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   166k|                                             specs, value, loc));
 6080|       |
 6081|   166k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 166k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   166k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   166k|        std::ptrdiff_t postfix_width = 0;
 6090|   166k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 165k, False: 460]
  ------------------
 6091|   165k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   165k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   165k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   165k|                                 value_width));
 6095|   165k|            std::tie(it, postfix_width) = postfix_result;
 6096|   165k|        }
 6097|       |
 6098|   166k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   166k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   166k|            specs, prefix_width, value_width, postfix_width));
 6100|   166k|        return it;
 6101|   166k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5714|   247k|{
 5715|   247k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 483, False: 246k]
  |  |  ------------------
  ------------------
 5716|    483|        return unexpected(e);
 5717|    483|    }
 5718|       |
 5719|   246k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 246k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   246k|    return skip_classic_whitespace(range);
 5724|   246k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  70.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  70.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  70.6k|            auto rd = make_reader<T, char_type>();
 5800|  70.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 70.6k, False: 0]
  ------------------
 5801|  70.6k|                return impl(rd, range, value);
 5802|  70.6k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  70.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  70.6k|    {
 5783|  70.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  70.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  70.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  70.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  70.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 294, False: 70.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    294|    }                                                  \
  |  |  |  | 3939|  70.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  70.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  70.3k|                        .transform_error(make_eof_scan_error));
 5785|  70.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  70.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4064|  70.3k|    {
 4065|  70.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  70.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|  70.3k|        float_reader<CharT> rd{};
 4068|  70.3k|        return read_impl<Range>(
 4069|  70.3k|            range, rd,
 4070|  70.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  70.3k|                return r.read_source(SCN_FWD(args)...);
 4072|  70.3k|            },
 4073|  70.3k|            value);
 4074|  70.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  70.3k|        : m_fptr([](storage fn,
  743|  70.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.3k|              cvref<T> obj = *get<T>(fn);
  745|  70.3k|              if constexpr (std::is_void_v<R>) {
  746|  70.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.3k|              }
  748|  70.3k|              else {
  749|  70.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.3k|              }
  751|  70.3k|          }),
  752|  70.3k|          m_storage(std::addressof(f))
  753|  70.3k|    {
  754|  70.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  70.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  70.3k|              else {
  749|  70.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.3k|              }
  751|  70.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  70.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  70.3k|        else if constexpr (std::is_object_v<T>) {
  688|  70.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  70.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4070|  70.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  70.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  70.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|  70.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  70.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  70.3k|        {
  662|  70.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  87.0k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  87.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  87.0k|            auto rd = make_reader<T, char_type>();
 5800|  87.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 87.0k, False: 0]
  ------------------
 5801|  87.0k|                return impl(rd, range, value);
 5802|  87.0k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  87.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  87.0k|    {
 5783|  87.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  87.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  87.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  87.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 333, False: 86.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    333|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    333|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    333|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    333|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    333|    }                                                  \
  |  |  |  | 3939|  87.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  86.7k|                        .transform_error(make_eof_scan_error));
 5785|  86.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  87.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4064|  86.7k|    {
 4065|  86.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  86.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|  86.7k|        float_reader<CharT> rd{};
 4068|  86.7k|        return read_impl<Range>(
 4069|  86.7k|            range, rd,
 4070|  86.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  86.7k|                return r.read_source(SCN_FWD(args)...);
 4072|  86.7k|            },
 4073|  86.7k|            value);
 4074|  86.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  86.7k|        : m_fptr([](storage fn,
  743|  86.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.7k|              cvref<T> obj = *get<T>(fn);
  745|  86.7k|              if constexpr (std::is_void_v<R>) {
  746|  86.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.7k|              }
  748|  86.7k|              else {
  749|  86.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.7k|              }
  751|  86.7k|          }),
  752|  86.7k|          m_storage(std::addressof(f))
  753|  86.7k|    {
  754|  86.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  86.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  86.7k|              else {
  749|  86.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.7k|              }
  751|  86.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  86.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  86.7k|        else if constexpr (std::is_object_v<T>) {
  688|  86.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  86.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4070|  86.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  86.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|  86.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  86.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  86.7k|        {
  662|  86.7k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  89.7k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  89.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  89.7k|            auto rd = make_reader<T, char_type>();
 5800|  89.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 89.7k, False: 0]
  ------------------
 5801|  89.7k|                return impl(rd, range, value);
 5802|  89.7k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  89.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  89.7k|    {
 5783|  89.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  89.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  89.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  89.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 366, False: 89.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    366|    }                                                  \
  |  |  |  | 3939|  89.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  89.3k|                        .transform_error(make_eof_scan_error));
 5785|  89.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  89.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4064|  89.3k|    {
 4065|  89.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  89.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4066|       |
 4067|  89.3k|        float_reader<CharT> rd{};
 4068|  89.3k|        return read_impl<Range>(
 4069|  89.3k|            range, rd,
 4070|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  89.3k|                return r.read_source(SCN_FWD(args)...);
 4072|  89.3k|            },
 4073|  89.3k|            value);
 4074|  89.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  89.3k|        : m_fptr([](storage fn,
  743|  89.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.3k|              cvref<T> obj = *get<T>(fn);
  745|  89.3k|              if constexpr (std::is_void_v<R>) {
  746|  89.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.3k|              }
  748|  89.3k|              else {
  749|  89.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.3k|              }
  751|  89.3k|          }),
  752|  89.3k|          m_storage(std::addressof(f))
  753|  89.3k|    {
  754|  89.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  89.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.3k|              else {
  749|  89.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.3k|              }
  751|  89.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  89.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.3k|        else if constexpr (std::is_object_v<T>) {
  688|  89.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4070|  89.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4071|  89.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4072|  89.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  89.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.3k|        {
  662|  89.3k|        }

LLVMFuzzerTestOneInput:
   54|  3.37k|{
   55|  3.37k|    scn::fuzz::run(data, size);
   56|  3.37k|    return 0;
   57|  3.37k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.37k|{
   33|  3.37k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.37k]
  |  Branch (33:35): [True: 0, False: 3.37k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.37k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.37k|    const auto& f =
   40|  3.37k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.37k|    do_basic_run(sv, f);
   42|       |
   43|  3.37k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.37k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.37k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.37k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.37k, False: 0]
  ------------------
   47|  3.37k|        do_basic_run(wsv_transcode, wf);
   48|  3.37k|    }
   49|  3.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.37k|{
   25|  3.37k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.37k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.37k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.37k|{
   25|  3.37k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.37k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.37k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.74k|{
   25|  6.74k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.74k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.74k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.74k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.74k|{
   25|  6.74k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.74k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.74k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.74k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.37k|{
   52|  3.37k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.37k|    string_buffer.resize(size);
   56|  3.37k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.37k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.37k|    const auto wsv_reinterpret_size =
   61|  3.37k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 76, False: 3.29k]
  ------------------
   62|  3.37k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.37k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.37k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.37k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.37k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.37k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.37k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.37k|{
  122|  3.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.37k|    buf.resize(sizeof...(Args));
  125|  3.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.37k|    return buf;
  127|  3.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.37k|{
  108|  3.37k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  3.37k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  3.37k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.37k|{
  185|  3.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.37k|                                   format_strings);
  188|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.37k|{
  133|       |    // Regular scan
  134|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.2k, False: 3.37k]
  ------------------
  135|  20.2k|        auto it = scn::ranges::begin(source);
  136|   236k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   236k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   236k|            auto result = scn::scan<T>(
  139|   236k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   236k|                scn::runtime_format(f));
  141|   236k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.2k, False: 216k]
  ------------------
  142|  20.2k|                break;
  143|  20.2k|            }
  144|   216k|            it = result->begin();
  145|   216k|        }
  146|  20.2k|    }
  147|       |
  148|       |    // scan localized
  149|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.2k, False: 3.37k]
  ------------------
  150|  20.2k|        auto it = scn::ranges::begin(source);
  151|   236k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   236k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   236k|            auto result = scn::scan<T>(
  154|   236k|                global_locale,
  155|   236k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   236k|                scn::runtime_format(f));
  157|   236k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.2k, False: 216k]
  ------------------
  158|  20.2k|                break;
  159|  20.2k|            }
  160|   216k|            it = result->begin();
  161|   216k|        }
  162|  20.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.37k|    {
  166|  3.37k|        auto it = scn::ranges::begin(source);
  167|  50.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  50.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  50.9k|            auto result = scn::scan_value<T>(
  170|  50.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  50.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.37k, False: 47.5k]
  ------------------
  172|  3.37k|                break;
  173|  3.37k|            }
  174|  47.5k|            it = result->begin();
  175|  47.5k|        }
  176|  3.37k|    }
  177|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.37k|{
  133|       |    // Regular scan
  134|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.2k, False: 3.37k]
  ------------------
  135|  20.2k|        auto it = scn::ranges::begin(source);
  136|   245k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   245k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   245k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   245k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   245k|            auto result = scn::scan<T>(
  139|   245k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   245k|                scn::runtime_format(f));
  141|   245k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.2k, False: 224k]
  ------------------
  142|  20.2k|                break;
  143|  20.2k|            }
  144|   224k|            it = result->begin();
  145|   224k|        }
  146|  20.2k|    }
  147|       |
  148|       |    // scan localized
  149|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.2k, False: 3.37k]
  ------------------
  150|  20.2k|        auto it = scn::ranges::begin(source);
  151|   245k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   245k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   245k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   245k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   245k|            auto result = scn::scan<T>(
  154|   245k|                global_locale,
  155|   245k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   245k|                scn::runtime_format(f));
  157|   245k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.2k, False: 224k]
  ------------------
  158|  20.2k|                break;
  159|  20.2k|            }
  160|   224k|            it = result->begin();
  161|   224k|        }
  162|  20.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.37k|    {
  166|  3.37k|        auto it = scn::ranges::begin(source);
  167|  53.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  53.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  53.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  53.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  53.2k|            auto result = scn::scan_value<T>(
  170|  53.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  53.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.37k, False: 49.8k]
  ------------------
  172|  3.37k|                break;
  173|  3.37k|            }
  174|  49.8k|            it = result->begin();
  175|  49.8k|        }
  176|  3.37k|    }
  177|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.37k|{
  133|       |    // Regular scan
  134|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.2k, False: 3.37k]
  ------------------
  135|  20.2k|        auto it = scn::ranges::begin(source);
  136|   248k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   248k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   248k|            auto result = scn::scan<T>(
  139|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   248k|                scn::runtime_format(f));
  141|   248k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.2k, False: 227k]
  ------------------
  142|  20.2k|                break;
  143|  20.2k|            }
  144|   227k|            it = result->begin();
  145|   227k|        }
  146|  20.2k|    }
  147|       |
  148|       |    // scan localized
  149|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.2k, False: 3.37k]
  ------------------
  150|  20.2k|        auto it = scn::ranges::begin(source);
  151|   248k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   248k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   248k|            auto result = scn::scan<T>(
  154|   248k|                global_locale,
  155|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   248k|                scn::runtime_format(f));
  157|   248k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.2k, False: 227k]
  ------------------
  158|  20.2k|                break;
  159|  20.2k|            }
  160|   227k|            it = result->begin();
  161|   227k|        }
  162|  20.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.37k|    {
  166|  3.37k|        auto it = scn::ranges::begin(source);
  167|  54.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  54.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  54.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  54.1k|            auto result = scn::scan_value<T>(
  170|  54.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  54.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.37k, False: 50.8k]
  ------------------
  172|  3.37k|                break;
  173|  3.37k|            }
  174|  50.8k|            it = result->begin();
  175|  50.8k|        }
  176|  3.37k|    }
  177|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.37k|{
  133|       |    // Regular scan
  134|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.2k, False: 3.37k]
  ------------------
  135|  20.2k|        auto it = scn::ranges::begin(source);
  136|   275k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   275k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   275k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   275k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   275k|            auto result = scn::scan<T>(
  139|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   275k|                scn::runtime_format(f));
  141|   275k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.2k, False: 255k]
  ------------------
  142|  20.2k|                break;
  143|  20.2k|            }
  144|   255k|            it = result->begin();
  145|   255k|        }
  146|  20.2k|    }
  147|       |
  148|       |    // scan localized
  149|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.2k, False: 3.37k]
  ------------------
  150|  20.2k|        auto it = scn::ranges::begin(source);
  151|   275k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   275k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   275k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   275k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   275k|            auto result = scn::scan<T>(
  154|   275k|                global_locale,
  155|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   275k|                scn::runtime_format(f));
  157|   275k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.2k, False: 255k]
  ------------------
  158|  20.2k|                break;
  159|  20.2k|            }
  160|   255k|            it = result->begin();
  161|   255k|        }
  162|  20.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.37k|    {
  166|  3.37k|        auto it = scn::ranges::begin(source);
  167|  55.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  55.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.7k|            auto result = scn::scan_value<T>(
  170|  55.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.37k, False: 52.3k]
  ------------------
  172|  3.37k|                break;
  173|  3.37k|            }
  174|  52.3k|            it = result->begin();
  175|  52.3k|        }
  176|  3.37k|    }
  177|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.37k|{
  133|       |    // Regular scan
  134|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.2k, False: 3.37k]
  ------------------
  135|  20.2k|        auto it = scn::ranges::begin(source);
  136|   289k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   289k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   289k|            auto result = scn::scan<T>(
  139|   289k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   289k|                scn::runtime_format(f));
  141|   289k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.2k, False: 268k]
  ------------------
  142|  20.2k|                break;
  143|  20.2k|            }
  144|   268k|            it = result->begin();
  145|   268k|        }
  146|  20.2k|    }
  147|       |
  148|       |    // scan localized
  149|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.2k, False: 3.37k]
  ------------------
  150|  20.2k|        auto it = scn::ranges::begin(source);
  151|   289k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   289k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   289k|            auto result = scn::scan<T>(
  154|   289k|                global_locale,
  155|   289k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   289k|                scn::runtime_format(f));
  157|   289k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.2k, False: 268k]
  ------------------
  158|  20.2k|                break;
  159|  20.2k|            }
  160|   268k|            it = result->begin();
  161|   268k|        }
  162|  20.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.37k|    {
  166|  3.37k|        auto it = scn::ranges::begin(source);
  167|  58.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  58.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  58.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  58.8k|            auto result = scn::scan_value<T>(
  170|  58.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  58.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.37k, False: 55.4k]
  ------------------
  172|  3.37k|                break;
  173|  3.37k|            }
  174|  55.4k|            it = result->begin();
  175|  55.4k|        }
  176|  3.37k|    }
  177|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.37k|{
  133|       |    // Regular scan
  134|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.2k, False: 3.37k]
  ------------------
  135|  20.2k|        auto it = scn::ranges::begin(source);
  136|   291k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   291k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   291k|            auto result = scn::scan<T>(
  139|   291k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   291k|                scn::runtime_format(f));
  141|   291k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.2k, False: 271k]
  ------------------
  142|  20.2k|                break;
  143|  20.2k|            }
  144|   271k|            it = result->begin();
  145|   271k|        }
  146|  20.2k|    }
  147|       |
  148|       |    // scan localized
  149|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.2k, False: 3.37k]
  ------------------
  150|  20.2k|        auto it = scn::ranges::begin(source);
  151|   291k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   291k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   291k|            auto result = scn::scan<T>(
  154|   291k|                global_locale,
  155|   291k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   291k|                scn::runtime_format(f));
  157|   291k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.2k, False: 271k]
  ------------------
  158|  20.2k|                break;
  159|  20.2k|            }
  160|   271k|            it = result->begin();
  161|   271k|        }
  162|  20.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.37k|    {
  166|  3.37k|        auto it = scn::ranges::begin(source);
  167|  59.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  59.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  59.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  59.4k|            auto result = scn::scan_value<T>(
  170|  59.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  59.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.37k, False: 56.0k]
  ------------------
  172|  3.37k|                break;
  173|  3.37k|            }
  174|  56.0k|            it = result->begin();
  175|  56.0k|        }
  176|  3.37k|    }
  177|  3.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.37k|{
   90|  3.37k|    using char_type = ranges::range_value_t<Source>;
   91|  3.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.37k|    deque.clear();
   93|  3.37k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.37k|              std::back_inserter(deque));
   95|  3.37k|    return deque;
   96|  3.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.37k|{
   79|  3.37k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  3.37k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  3.37k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.37k|{
  122|  3.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.37k|    buf.resize(sizeof...(Args));
  125|  3.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.37k|    return buf;
  127|  3.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.37k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  3.37k|    else {
  112|  3.37k|        return wformat_string_view_buffer;
  113|  3.37k|    }
  114|  3.37k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.74k|{
  185|  6.74k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.74k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.74k|                                   format_strings);
  188|  6.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.74k|{
  133|       |    // Regular scan
  134|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.4k, False: 6.74k]
  ------------------
  135|  40.4k|        auto it = scn::ranges::begin(source);
  136|   127k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   127k|            auto result = scn::scan<T>(
  139|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   127k|                scn::runtime_format(f));
  141|   127k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.4k, False: 87.1k]
  ------------------
  142|  40.4k|                break;
  143|  40.4k|            }
  144|  87.1k|            it = result->begin();
  145|  87.1k|        }
  146|  40.4k|    }
  147|       |
  148|       |    // scan localized
  149|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.4k, False: 6.74k]
  ------------------
  150|  40.4k|        auto it = scn::ranges::begin(source);
  151|   127k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   127k|            auto result = scn::scan<T>(
  154|   127k|                global_locale,
  155|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   127k|                scn::runtime_format(f));
  157|   127k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.4k, False: 87.1k]
  ------------------
  158|  40.4k|                break;
  159|  40.4k|            }
  160|  87.1k|            it = result->begin();
  161|  87.1k|        }
  162|  40.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.74k|    {
  166|  6.74k|        auto it = scn::ranges::begin(source);
  167|  23.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.5k|            auto result = scn::scan_value<T>(
  170|  23.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.74k, False: 16.8k]
  ------------------
  172|  6.74k|                break;
  173|  6.74k|            }
  174|  16.8k|            it = result->begin();
  175|  16.8k|        }
  176|  6.74k|    }
  177|  6.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.74k|{
  133|       |    // Regular scan
  134|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.4k, False: 6.74k]
  ------------------
  135|  40.4k|        auto it = scn::ranges::begin(source);
  136|   144k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   144k|            auto result = scn::scan<T>(
  139|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   144k|                scn::runtime_format(f));
  141|   144k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.4k, False: 103k]
  ------------------
  142|  40.4k|                break;
  143|  40.4k|            }
  144|   103k|            it = result->begin();
  145|   103k|        }
  146|  40.4k|    }
  147|       |
  148|       |    // scan localized
  149|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.4k, False: 6.74k]
  ------------------
  150|  40.4k|        auto it = scn::ranges::begin(source);
  151|   144k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   144k|            auto result = scn::scan<T>(
  154|   144k|                global_locale,
  155|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   144k|                scn::runtime_format(f));
  157|   144k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.4k, False: 103k]
  ------------------
  158|  40.4k|                break;
  159|  40.4k|            }
  160|   103k|            it = result->begin();
  161|   103k|        }
  162|  40.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.74k|    {
  166|  6.74k|        auto it = scn::ranges::begin(source);
  167|  29.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.0k|            auto result = scn::scan_value<T>(
  170|  29.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.74k, False: 22.3k]
  ------------------
  172|  6.74k|                break;
  173|  6.74k|            }
  174|  22.3k|            it = result->begin();
  175|  22.3k|        }
  176|  6.74k|    }
  177|  6.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.74k|{
  133|       |    // Regular scan
  134|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.4k, False: 6.74k]
  ------------------
  135|  40.4k|        auto it = scn::ranges::begin(source);
  136|   146k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   146k|            auto result = scn::scan<T>(
  139|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   146k|                scn::runtime_format(f));
  141|   146k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.4k, False: 106k]
  ------------------
  142|  40.4k|                break;
  143|  40.4k|            }
  144|   106k|            it = result->begin();
  145|   106k|        }
  146|  40.4k|    }
  147|       |
  148|       |    // scan localized
  149|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.4k, False: 6.74k]
  ------------------
  150|  40.4k|        auto it = scn::ranges::begin(source);
  151|   146k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   146k|            auto result = scn::scan<T>(
  154|   146k|                global_locale,
  155|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   146k|                scn::runtime_format(f));
  157|   146k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.4k, False: 106k]
  ------------------
  158|  40.4k|                break;
  159|  40.4k|            }
  160|   106k|            it = result->begin();
  161|   106k|        }
  162|  40.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.74k|    {
  166|  6.74k|        auto it = scn::ranges::begin(source);
  167|  29.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.9k|            auto result = scn::scan_value<T>(
  170|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.74k, False: 23.2k]
  ------------------
  172|  6.74k|                break;
  173|  6.74k|            }
  174|  23.2k|            it = result->begin();
  175|  23.2k|        }
  176|  6.74k|    }
  177|  6.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.74k|{
  133|       |    // Regular scan
  134|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.4k, False: 6.74k]
  ------------------
  135|  40.4k|        auto it = scn::ranges::begin(source);
  136|   127k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   127k|            auto result = scn::scan<T>(
  139|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   127k|                scn::runtime_format(f));
  141|   127k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.4k, False: 87.0k]
  ------------------
  142|  40.4k|                break;
  143|  40.4k|            }
  144|  87.0k|            it = result->begin();
  145|  87.0k|        }
  146|  40.4k|    }
  147|       |
  148|       |    // scan localized
  149|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.4k, False: 6.74k]
  ------------------
  150|  40.4k|        auto it = scn::ranges::begin(source);
  151|   127k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   127k|            auto result = scn::scan<T>(
  154|   127k|                global_locale,
  155|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   127k|                scn::runtime_format(f));
  157|   127k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.4k, False: 87.0k]
  ------------------
  158|  40.4k|                break;
  159|  40.4k|            }
  160|  87.0k|            it = result->begin();
  161|  87.0k|        }
  162|  40.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.74k|    {
  166|  6.74k|        auto it = scn::ranges::begin(source);
  167|  23.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.5k|            auto result = scn::scan_value<T>(
  170|  23.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.74k, False: 16.7k]
  ------------------
  172|  6.74k|                break;
  173|  6.74k|            }
  174|  16.7k|            it = result->begin();
  175|  16.7k|        }
  176|  6.74k|    }
  177|  6.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.74k|{
  133|       |    // Regular scan
  134|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.4k, False: 6.74k]
  ------------------
  135|  40.4k|        auto it = scn::ranges::begin(source);
  136|   143k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   143k|            auto result = scn::scan<T>(
  139|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   143k|                scn::runtime_format(f));
  141|   143k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.4k, False: 103k]
  ------------------
  142|  40.4k|                break;
  143|  40.4k|            }
  144|   103k|            it = result->begin();
  145|   103k|        }
  146|  40.4k|    }
  147|       |
  148|       |    // scan localized
  149|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.4k, False: 6.74k]
  ------------------
  150|  40.4k|        auto it = scn::ranges::begin(source);
  151|   143k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   143k|            auto result = scn::scan<T>(
  154|   143k|                global_locale,
  155|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   143k|                scn::runtime_format(f));
  157|   143k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.4k, False: 103k]
  ------------------
  158|  40.4k|                break;
  159|  40.4k|            }
  160|   103k|            it = result->begin();
  161|   103k|        }
  162|  40.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.74k|    {
  166|  6.74k|        auto it = scn::ranges::begin(source);
  167|  29.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.0k|            auto result = scn::scan_value<T>(
  170|  29.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.74k, False: 22.2k]
  ------------------
  172|  6.74k|                break;
  173|  6.74k|            }
  174|  22.2k|            it = result->begin();
  175|  22.2k|        }
  176|  6.74k|    }
  177|  6.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.74k|{
  133|       |    // Regular scan
  134|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 40.4k, False: 6.74k]
  ------------------
  135|  40.4k|        auto it = scn::ranges::begin(source);
  136|   146k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   146k|            auto result = scn::scan<T>(
  139|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   146k|                scn::runtime_format(f));
  141|   146k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 40.4k, False: 106k]
  ------------------
  142|  40.4k|                break;
  143|  40.4k|            }
  144|   106k|            it = result->begin();
  145|   106k|        }
  146|  40.4k|    }
  147|       |
  148|       |    // scan localized
  149|  40.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 40.4k, False: 6.74k]
  ------------------
  150|  40.4k|        auto it = scn::ranges::begin(source);
  151|   146k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   146k|            auto result = scn::scan<T>(
  154|   146k|                global_locale,
  155|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   146k|                scn::runtime_format(f));
  157|   146k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 40.4k, False: 106k]
  ------------------
  158|  40.4k|                break;
  159|  40.4k|            }
  160|   106k|            it = result->begin();
  161|   106k|        }
  162|  40.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.74k|    {
  166|  6.74k|        auto it = scn::ranges::begin(source);
  167|  29.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.9k|            auto result = scn::scan_value<T>(
  170|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.74k, False: 23.1k]
  ------------------
  172|  6.74k|                break;
  173|  6.74k|            }
  174|  23.1k|            it = result->begin();
  175|  23.1k|        }
  176|  6.74k|    }
  177|  6.74k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.74k|{
   90|  6.74k|    using char_type = ranges::range_value_t<Source>;
   91|  6.74k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.74k|    deque.clear();
   93|  6.74k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.74k|              std::back_inserter(deque));
   95|  6.74k|    return deque;
   96|  6.74k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.74k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  6.74k|    else {
   83|  6.74k|        return wnoncontiguous_buffer;
   84|  6.74k|    }
   85|  6.74k|}

