_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.87M|{
 3778|  5.87M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.87M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.87M|    }
 3781|  5.87M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.87M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.87M|    }
 3784|  5.87M|    else {
 3785|       |        // utf-32
 3786|  5.87M|        static_assert(sizeof(U) == 4);
 3787|  5.87M|        SCN_UNUSED(ch);
 3788|  5.87M|        return 1;
 3789|  5.87M|    }
 3790|  5.87M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.87M|{
 3742|  5.87M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.87M|    SCN_GCC_COMPAT_PUSH
 3745|  5.87M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.87M|    constexpr char lengths[] =
 3747|  5.87M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.87M|        "\1\1\1\1\1\1\1\1"
 3749|  5.87M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.87M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.87M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.87M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.87M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.87M|    SCN_GCC_COMPAT_POP
 3756|  5.87M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.36M|{
 3984|  5.36M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.36M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.36M|    }
 3987|  5.36M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.36M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.36M|    }
 3990|  5.36M|    else {
 3991|  5.36M|        SCN_EXPECT(input.size() == 1);
 3992|  5.36M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.36M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.36M|            return invalid_code_point;
 3995|  5.36M|        }
 3996|  5.36M|        return cp;
 3997|  5.36M|    }
 3998|  5.36M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.36M|{
 3797|  5.36M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.36M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.36M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.36M|    };
 3802|       |
 3803|  5.36M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 4.80M, False: 559k]
  ------------------
 3804|  4.80M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 48, False: 4.80M]
  ------------------
 3805|     48|            SCN_UNLIKELY_ATTR
 3806|     48|            return invalid_code_point;
 3807|     48|        }
 3808|  4.80M|        return static_cast<char32_t>(input[0]);
 3809|  4.80M|    }
 3810|       |
 3811|   559k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 528k, False: 30.3k]
  ------------------
 3812|   528k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 18, False: 528k]
  ------------------
 3813|     18|            SCN_UNLIKELY_ATTR
 3814|     18|            return invalid_code_point;
 3815|     18|        }
 3816|   528k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 5.55k, False: 523k]
  ------------------
 3817|  5.55k|            SCN_UNLIKELY_ATTR
 3818|  5.55k|            return invalid_code_point;
 3819|  5.55k|        }
 3820|       |
 3821|   523k|        char32_t cp{};
 3822|   523k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   523k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   523k|        return cp;
 3825|   528k|    }
 3826|       |
 3827|  30.3k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 21.5k, False: 8.87k]
  ------------------
 3828|  21.5k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 6, False: 21.5k]
  ------------------
 3829|      6|            SCN_UNLIKELY_ATTR
 3830|      6|            return invalid_code_point;
 3831|      6|        }
 3832|  21.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 2.94k, False: 18.5k]
  ------------------
 3833|  21.5k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 901, False: 17.6k]
  ------------------
 3834|  3.84k|            SCN_UNLIKELY_ATTR
 3835|  3.84k|            return invalid_code_point;
 3836|  3.84k|        }
 3837|       |
 3838|  17.6k|        char32_t cp{};
 3839|  17.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|  17.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|  17.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|  17.6k|        return cp;
 3843|  21.5k|    }
 3844|       |
 3845|  8.87k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 8.87k, False: 0]
  ------------------
 3846|  8.87k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 8.87k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  8.87k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 421, False: 8.45k]
  ------------------
 3851|    421|            SCN_UNLIKELY_ATTR
 3852|    421|            return invalid_code_point;
 3853|    421|        }
 3854|  8.45k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 650, False: 7.80k]
  ------------------
 3855|  8.45k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 295, False: 7.50k]
  ------------------
 3856|  8.45k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 251, False: 7.25k]
  ------------------
 3857|  1.19k|            SCN_UNLIKELY_ATTR
 3858|  1.19k|            return invalid_code_point;
 3859|  1.19k|        }
 3860|       |
 3861|  7.25k|        char32_t cp{};
 3862|  7.25k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  7.25k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  7.25k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  7.25k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  7.25k|        return cp;
 3867|  8.45k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   592k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   592k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   592k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  1.91M|{
 3670|  1.91M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  1.91M|                                          decltype(first), decltype(last)> &&
 3672|  1.91M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  1.91M|        return {first, last};
 3674|  1.91M|    }
 3675|  1.91M|    else {
 3676|  1.91M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  1.91M|                                       to_address(first), to_address(last)))};
 3678|  1.91M|    }
 3679|  1.91M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  5.77M|{
  322|  5.77M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.77M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  5.86M|{
  302|  5.86M|    return p;
  303|  5.86M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  1.06M|{
 3701|  1.06M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  1.06M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  1.06M|                      decltype(it)> &&
 3704|  1.06M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  1.06M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.06M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  1.06M|        return it;
 3707|  1.06M|    }
 3708|  1.06M|    else {
 3709|  1.06M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  1.06M|    }
 3711|  1.06M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5095|  8.37k|{
 5096|  8.37k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  8.37k|                  "Scan argument types must be default constructible");
 5098|  8.37k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  8.37k|                  "Scan argument types must be Destructible");
 5100|  8.37k|    static_assert(
 5101|  8.37k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  8.37k|        "Scan argument types must not be references");
 5103|  8.37k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4948|  8.37k|    {
 4949|  8.37k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4949:23): [Folded - Ignored]
  |  Branch (4949:23): [Folded - Ignored]
  ------------------
 4950|  8.37k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4950:23): [Folded - Ignored]
  ------------------
 4951|  8.37k|            return val;
 4952|  8.37k|        }
 4953|  8.37k|        else if constexpr (is_type_disabled<char_type>) {
 4954|  8.37k|            return unscannable_disabled{val};
 4955|  8.37k|        }
 4956|  8.37k|        else {
 4957|  8.37k|            SCN_UNUSED(val);
 4958|  8.37k|            return unscannable_char{};
 4959|  8.37k|        }
 4960|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5049|  8.37k|{
 5050|  8.37k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  8.37k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  8.37k|    constexpr bool scannable_char =
 5054|  8.37k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  8.37k|    static_assert(scannable_char,
 5056|  8.37k|                  "Cannot scan an argument of an unsupported character "
 5057|  8.37k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  8.37k|    constexpr bool scannable_const =
 5060|  8.37k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  8.37k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  8.37k|    constexpr bool scannable_disabled =
 5064|  8.37k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  8.37k|    static_assert(scannable_disabled,
 5066|  8.37k|                  "Cannot scan an argument that has been disabled by "
 5067|  8.37k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  8.37k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  8.37k|    static_assert(
 5071|  8.37k|        scannable,
 5072|  8.37k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  8.37k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  8.37k|    return arg_value{arg};
 5076|  8.37k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4862|  8.37k|    {
 4863|  8.37k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  37.6k|{
 8615|  37.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  37.6k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|  37.6k|{
 8552|  37.6k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  37.6k|    auto result = vscan_impl(buffer, format, args);
 8555|  37.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.3k, False: 1.33k]
  |  |  ------------------
  ------------------
 8556|  36.3k|        return unexpected(result.error());
 8557|  36.3k|    }
 8558|  1.33k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  37.6k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4680|  75.3k|{
 4681|  75.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  75.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  75.3k|                  "\n"
 4685|  75.3k|                  "Unsupported range type given as input to a scanning "
 4686|  75.3k|                  "function.\n"
 4687|  75.3k|                  "A range needs to have a character type (value type) "
 4688|  75.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  75.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  75.3k|                  "to be included.\n"
 4691|  75.3k|                  "See the scnlib documentation for more details.");
 4692|  75.3k|    static_assert(
 4693|  75.3k|        !std::is_same_v<T, custom_char_traits>,
 4694|  75.3k|        "\n"
 4695|  75.3k|        "Unsupported range type given as input to a scanning "
 4696|  75.3k|        "function.\n"
 4697|  75.3k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  75.3k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  75.3k|        "not supported.");
 4700|  75.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  75.3k|                  "\n"
 4702|  75.3k|                  "Unsupported range type given as input to a scanning "
 4703|  75.3k|                  "function.\n"
 4704|  75.3k|                  "file_marker_found cannot be used as an "
 4705|  75.3k|                  "source range type to scn::scan.\n"
 4706|  75.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  75.3k|                  "and do not provide an explicit source range, "
 4708|  75.3k|                  "or use scn::scan with a FILE* directly.");
 4709|  75.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  75.3k|                  "\n"
 4711|  75.3k|                  "Unsupported range type given as input to a scanning "
 4712|  75.3k|                  "function.\n"
 4713|  75.3k|                  "In order to be scannable, a range needs to satisfy "
 4714|  75.3k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  75.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  75.3k|                  "\n"
 4717|  75.3k|                  "Unsupported range type given as input to a scanning "
 4718|  75.3k|                  "function.\n"
 4719|  75.3k|                  "A range needs to model forward_range and have a valid "
 4720|  75.3k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  75.3k|                  "Examples of scannable ranges are std::string, "
 4722|  75.3k|                  "std::string_view, "
 4723|  75.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  75.3k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  75.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  75.3k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|  75.3k|{
 4573|  75.3k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|  75.3k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|  75.3k|    }
 4577|  75.3k|    else {
 4578|  75.3k|        return invalid_char_type{};
 4579|  75.3k|    }
 4580|  75.3k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|   246k|    {
 1569|   246k|        return has_value();
 1570|   246k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   493k|    {
  481|   493k|        return m_has_value;
  482|   493k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|   243k|    {
 1575|   243k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   243k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   243k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   243k|        return this->get_unexpected().error();
 1577|   243k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   243k|    {
  464|   243k|        return m_unexpected;
  465|   243k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  1.55M|    {
  357|  1.55M|        return m_unexpected;
  358|  1.55M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   813k|    {
  343|   813k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   813k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   813k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  72.6k|    {
 1447|  72.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  72.6k|    {
  443|  72.6k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   901k|    {
  352|   901k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   901k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   901k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  75.3k|    {
 1148|  75.3k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|  2.67k|{
 5884|  2.67k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.67k|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.67k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.67k|    }
 5888|  2.67k|    else {
 5889|  2.67k|        auto it = ranges::begin(source);
 5890|  2.67k|        while (n > 0) {
 5891|  2.67k|            --n;
 5892|  2.67k|            ++it;
 5893|  2.67k|        }
 5894|  2.67k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.67k|    }
 5896|  2.67k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.67k|    {
 2695|  2.67k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.67k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.67k|    {
 2676|  2.67k|        return decay_copy(t.begin());
 2677|  2.67k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|   125k|{
 1920|   125k|    return SCN_FWD(t);
  ------------------
  |  |  930|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   125k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5870|  2.67k|{
 5871|  2.67k|    return ranges::end(source);
 5872|  2.67k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.67k|    {
 2752|  2.67k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.67k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.67k|    {
 2734|  2.67k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.67k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|   859k|    {
 3287|   859k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  2.91k|    {
 1624|  2.91k|        return value();
 1625|  2.91k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  2.91k|    {
 1598|  2.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.91k|        return this->get_value();
 1600|  2.91k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  2.91k|    {
  447|  2.91k|        return m_value;
  448|  2.91k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.67k|    {
 1401|  2.67k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.67k|    {
  433|  2.67k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|  75.3k|    {
 5439|  75.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.22k, False: 146]
  |  |  ------------------
  ------------------
 8782|  8.22k|        return unexpected(result.error());
 8783|  8.22k|    }
 8784|    146|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    146|    static_cast<    \
  |  |  929|    146|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    146|    static_cast<    \
  |  |  929|    146|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|  75.3k|    {
 1569|  75.3k|        return has_value();
 1570|  75.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   150k|    {
  481|   150k|        return m_has_value;
  482|   150k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|  72.6k|    {
 1575|  72.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  72.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  72.6k|        return this->get_unexpected().error();
 1577|  72.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  72.6k|    {
  464|  72.6k|        return m_unexpected;
  465|  72.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.22k|    {
 1447|  8.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.22k|    {
  443|  8.22k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  2.67k|    {
 1624|  2.67k|        return value();
 1625|  2.67k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.67k|    {
 1598|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.67k|        return this->get_value();
 1600|  2.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.67k|    {
  447|  2.67k|        return m_value;
  448|  2.67k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5790|    146|    {
 5791|    146|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|  2.67k|    {
 5642|  2.67k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5576|    146|    {
 5577|    146|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|    146|    {
 1401|    146|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    146|    {
  433|    146|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|  75.3k|{
 7652|  75.3k|    return s;
 7653|  75.3k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|  75.3k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  37.6k|{
 8633|  37.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  37.6k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|  37.6k|{
 8568|  37.6k|#if !SCN_DISABLE_LOCALE
 8569|  37.6k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  37.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  37.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  37.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  37.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.3k, False: 1.33k]
  |  |  ------------------
  ------------------
 8576|  36.3k|        return unexpected(result.error());
 8577|  36.3k|    }
 8578|  1.33k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  37.6k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5095|  25.1k|{
 5096|  25.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  25.1k|                  "Scan argument types must be default constructible");
 5098|  25.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  25.1k|                  "Scan argument types must be Destructible");
 5100|  25.1k|    static_assert(
 5101|  25.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  25.1k|        "Scan argument types must not be references");
 5103|  25.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5049|  25.1k|{
 5050|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  25.1k|    constexpr bool scannable_char =
 5054|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  25.1k|    static_assert(scannable_char,
 5056|  25.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  25.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  25.1k|    constexpr bool scannable_const =
 5060|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  25.1k|    constexpr bool scannable_disabled =
 5064|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  25.1k|    static_assert(scannable_disabled,
 5066|  25.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  25.1k|    static_assert(
 5071|  25.1k|        scannable,
 5072|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  25.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  25.1k|    return arg_value{arg};
 5076|  25.1k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4862|  25.1k|    {
 4863|  25.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.37k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.37k|        return unexpected(result.error());
 8783|  8.37k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.37k|    {
 1447|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.37k|    {
  443|  8.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5095|  25.1k|{
 5096|  25.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  25.1k|                  "Scan argument types must be default constructible");
 5098|  25.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  25.1k|                  "Scan argument types must be Destructible");
 5100|  25.1k|    static_assert(
 5101|  25.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  25.1k|        "Scan argument types must not be references");
 5103|  25.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5049|  25.1k|{
 5050|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  25.1k|    constexpr bool scannable_char =
 5054|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  25.1k|    static_assert(scannable_char,
 5056|  25.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  25.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  25.1k|    constexpr bool scannable_const =
 5060|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  25.1k|    constexpr bool scannable_disabled =
 5064|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  25.1k|    static_assert(scannable_disabled,
 5066|  25.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  25.1k|    static_assert(
 5071|  25.1k|        scannable,
 5072|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  25.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  25.1k|    return arg_value{arg};
 5076|  25.1k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4862|  25.1k|    {
 4863|  25.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.37k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.37k|        return unexpected(result.error());
 8783|  8.37k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.37k|    {
 1447|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.37k|    {
  443|  8.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  25.1k|{
 5096|  25.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  25.1k|                  "Scan argument types must be default constructible");
 5098|  25.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  25.1k|                  "Scan argument types must be Destructible");
 5100|  25.1k|    static_assert(
 5101|  25.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  25.1k|        "Scan argument types must not be references");
 5103|  25.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  25.1k|{
 5050|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  25.1k|    constexpr bool scannable_char =
 5054|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  25.1k|    static_assert(scannable_char,
 5056|  25.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  25.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  25.1k|    constexpr bool scannable_const =
 5060|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  25.1k|    constexpr bool scannable_disabled =
 5064|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  25.1k|    static_assert(scannable_disabled,
 5066|  25.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  25.1k|    static_assert(
 5071|  25.1k|        scannable,
 5072|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  25.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  25.1k|    return arg_value{arg};
 5076|  25.1k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  25.1k|    {
 4863|  25.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.37k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.37k|        return unexpected(result.error());
 8783|  8.37k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.37k|    {
 1447|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.37k|    {
  443|  8.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5095|  25.1k|{
 5096|  25.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  25.1k|                  "Scan argument types must be default constructible");
 5098|  25.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  25.1k|                  "Scan argument types must be Destructible");
 5100|  25.1k|    static_assert(
 5101|  25.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  25.1k|        "Scan argument types must not be references");
 5103|  25.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5049|  25.1k|{
 5050|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  25.1k|    constexpr bool scannable_char =
 5054|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  25.1k|    static_assert(scannable_char,
 5056|  25.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  25.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  25.1k|    constexpr bool scannable_const =
 5060|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  25.1k|    constexpr bool scannable_disabled =
 5064|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  25.1k|    static_assert(scannable_disabled,
 5066|  25.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  25.1k|    static_assert(
 5071|  25.1k|        scannable,
 5072|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  25.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  25.1k|    return arg_value{arg};
 5076|  25.1k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4862|  25.1k|    {
 4863|  25.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.37k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.37k|        return unexpected(result.error());
 8783|  8.37k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.37k|    {
 1447|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.37k|    {
  443|  8.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5095|  25.1k|{
 5096|  25.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  25.1k|                  "Scan argument types must be default constructible");
 5098|  25.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  25.1k|                  "Scan argument types must be Destructible");
 5100|  25.1k|    static_assert(
 5101|  25.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  25.1k|        "Scan argument types must not be references");
 5103|  25.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5049|  25.1k|{
 5050|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  25.1k|    constexpr bool scannable_char =
 5054|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  25.1k|    static_assert(scannable_char,
 5056|  25.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  25.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  25.1k|    constexpr bool scannable_const =
 5060|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  25.1k|    constexpr bool scannable_disabled =
 5064|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  25.1k|    static_assert(scannable_disabled,
 5066|  25.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  25.1k|    static_assert(
 5071|  25.1k|        scannable,
 5072|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  25.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  25.1k|    return arg_value{arg};
 5076|  25.1k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4862|  25.1k|    {
 4863|  25.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.37k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.37k|        return unexpected(result.error());
 8783|  8.37k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  8.37k|    {
 1447|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  8.37k|    {
  443|  8.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5095|  25.1k|{
 5096|  25.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  25.1k|                  "Scan argument types must be default constructible");
 5098|  25.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  25.1k|                  "Scan argument types must be Destructible");
 5100|  25.1k|    static_assert(
 5101|  25.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  25.1k|        "Scan argument types must not be references");
 5103|  25.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5049|  25.1k|{
 5050|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  25.1k|    constexpr bool scannable_char =
 5054|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  25.1k|    static_assert(scannable_char,
 5056|  25.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  25.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  25.1k|    constexpr bool scannable_const =
 5060|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  25.1k|    constexpr bool scannable_disabled =
 5064|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  25.1k|    static_assert(scannable_disabled,
 5066|  25.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  25.1k|    static_assert(
 5071|  25.1k|        scannable,
 5072|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  25.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  25.1k|    return arg_value{arg};
 5076|  25.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4862|  25.1k|    {
 4863|  25.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.53k, False: 842]
  |  |  ------------------
  ------------------
 8782|  7.53k|        return unexpected(result.error());
 8783|  7.53k|    }
 8784|    842|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  7.53k|    {
 1447|  7.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.53k|    {
  622|  7.53k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.53k|    {
  685|  7.53k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.53k|                                  std::forward<Args>(args)...);
  687|  7.53k|        m_has_value = false;
  688|  7.53k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  48.4k|{
  388|  48.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  48.4k|        T(std::forward<Args>(args)...);
  390|  48.4k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.0k|    {
  714|  15.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|    842|    {
 5791|    842|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|    902|    {
 5577|    902|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|    842|    {
 1401|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    842|    {
  612|    842|        construct(std::forward<Args>(args)...);
  613|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    842|    {
  678|    842|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    842|        m_has_value = true;
  680|    842|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    842|{
  388|    842|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    842|        T(std::forward<Args>(args)...);
  390|    842|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|    842|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.68k|    {
  702|  1.68k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.68k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.68k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|  1.68k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  8.37k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.37k|    {
  627|  8.37k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 842, False: 7.53k]
  ------------------
  628|    842|            destroy_value();
  629|    842|        }
  630|  7.53k|        else {
  631|  7.53k|            destroy_unexpected();
  632|  7.53k|        }
  633|  8.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.37k|    {
  671|  8.37k|        return m_has_value;
  672|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    842|    {
  692|    842|        scn::detail::destroy_at(value_ptr());
  693|    842|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|    842|{
  394|    842|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    842|        for (auto& elem : *p) {
  396|    842|            scn::detail::destroy_at(&elem);
  397|    842|        }
  398|    842|    }
  399|    842|    else {
  400|    842|        p->~T();
  401|    842|    }
  402|    842|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.53k|    {
  696|  7.53k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.53k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  48.4k|{
  394|  48.4k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  48.4k|        for (auto& elem : *p) {
  396|  48.4k|            scn::detail::destroy_at(&elem);
  397|  48.4k|        }
  398|  48.4k|    }
  399|  48.4k|    else {
  400|  48.4k|        p->~T();
  401|  48.4k|    }
  402|  48.4k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5095|  25.1k|{
 5096|  25.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  25.1k|                  "Scan argument types must be default constructible");
 5098|  25.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  25.1k|                  "Scan argument types must be Destructible");
 5100|  25.1k|    static_assert(
 5101|  25.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  25.1k|        "Scan argument types must not be references");
 5103|  25.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5049|  25.1k|{
 5050|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  25.1k|    constexpr bool scannable_char =
 5054|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  25.1k|    static_assert(scannable_char,
 5056|  25.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  25.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  25.1k|    constexpr bool scannable_const =
 5060|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  25.1k|    constexpr bool scannable_disabled =
 5064|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  25.1k|    static_assert(scannable_disabled,
 5066|  25.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  25.1k|    static_assert(
 5071|  25.1k|        scannable,
 5072|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  25.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  25.1k|    return arg_value{arg};
 5076|  25.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4862|  25.1k|    {
 4863|  25.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.53k, False: 842]
  |  |  ------------------
  ------------------
 8782|  7.53k|        return unexpected(result.error());
 8783|  7.53k|    }
 8784|    842|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  7.53k|    {
 1447|  7.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.53k|    {
  622|  7.53k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.53k|    {
  685|  7.53k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.53k|                                  std::forward<Args>(args)...);
  687|  7.53k|        m_has_value = false;
  688|  7.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.0k|    {
  714|  15.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|    842|    {
 5791|    842|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|    902|    {
 5577|    902|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|    842|    {
 1401|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    842|    {
  612|    842|        construct(std::forward<Args>(args)...);
  613|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    842|    {
  678|    842|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    842|        m_has_value = true;
  680|    842|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    842|{
  388|    842|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    842|        T(std::forward<Args>(args)...);
  390|    842|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|    842|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.68k|    {
  702|  1.68k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.68k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.68k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|  1.68k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  8.37k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.37k|    {
  627|  8.37k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 842, False: 7.53k]
  ------------------
  628|    842|            destroy_value();
  629|    842|        }
  630|  7.53k|        else {
  631|  7.53k|            destroy_unexpected();
  632|  7.53k|        }
  633|  8.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.37k|    {
  671|  8.37k|        return m_has_value;
  672|  8.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    842|    {
  692|    842|        scn::detail::destroy_at(value_ptr());
  693|    842|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|    842|{
  394|    842|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    842|        for (auto& elem : *p) {
  396|    842|            scn::detail::destroy_at(&elem);
  397|    842|        }
  398|    842|    }
  399|    842|    else {
  400|    842|        p->~T();
  401|    842|    }
  402|    842|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.53k|    {
  696|  7.53k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.53k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.18k|{
 8828|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.18k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5356|  8.37k|{
 5357|  8.37k|    detail::check_scan_arg_types<Args...>();
 5358|  8.37k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.37k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5095|  8.37k|{
 5096|  8.37k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  8.37k|                  "Scan argument types must be default constructible");
 5098|  8.37k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  8.37k|                  "Scan argument types must be Destructible");
 5100|  8.37k|    static_assert(
 5101|  8.37k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  8.37k|        "Scan argument types must not be references");
 5103|  8.37k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5309|  8.37k|    {
 5310|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  8.37k|    {
 5321|  8.37k|        return {detail::make_arg<
 5322|  8.37k|            kind, Context,
 5323|  8.37k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.37k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.37k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5130|  8.37k|{
 5131|  8.37k|    return make_value<Context>(value).ref_value;
 5132|  8.37k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5080|  8.37k|{
 5081|  8.37k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.37k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.37k|                                  needs_context_tag>) {
 5085|  8.37k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.37k|    }
 5087|  8.37k|    else {
 5088|  8.37k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.37k|            value, context_tag<Context>{}));
 5090|  8.37k|    }
 5091|  8.37k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4919|  8.37k|    {                                                                        \
 4920|  8.37k|        return val;                                                          \
 4921|  8.37k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5049|  8.37k|{
 5050|  8.37k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  8.37k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  8.37k|    constexpr bool scannable_char =
 5054|  8.37k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  8.37k|    static_assert(scannable_char,
 5056|  8.37k|                  "Cannot scan an argument of an unsupported character "
 5057|  8.37k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  8.37k|    constexpr bool scannable_const =
 5060|  8.37k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  8.37k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  8.37k|    constexpr bool scannable_disabled =
 5064|  8.37k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  8.37k|    static_assert(scannable_disabled,
 5066|  8.37k|                  "Cannot scan an argument that has been disabled by "
 5067|  8.37k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  8.37k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  8.37k|    static_assert(
 5071|  8.37k|        scannable,
 5072|  8.37k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  8.37k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  8.37k|    return arg_value{arg};
 5076|  8.37k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4862|  8.37k|    {
 4863|  8.37k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7935|  8.37k|    {
 7936|  8.37k|        return m_str;
 7937|  8.37k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.37k|    {
 5387|  8.37k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5339|  8.37k|    {
 5340|  8.37k|        return m_argptrs;
 5341|  8.37k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  8.37k|{
 8781|  8.37k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.53k, False: 842]
  |  |  ------------------
  ------------------
 8782|  7.53k|        return unexpected(result.error());
 8783|  7.53k|    }
 8784|    842|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.37k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  7.53k|    {
 1447|  7.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  7.53k|    {
  443|  7.53k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.37k|    {
 1148|  8.37k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|    842|    {
 5791|    842|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|    842|    {
 5577|    842|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|    842|    {
 1401|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|    842|    {
  433|    842|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5334|  8.37k|    {
 5335|  8.37k|        return m_args;
 5336|  8.37k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.37k|    {
 7932|  8.37k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.18k|{
 8895|  4.18k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.18k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.18k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.18k|    static_cast<    \
  |  |  929|  4.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.18k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5095|  16.7k|{
 5096|  16.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  16.7k|                  "Scan argument types must be default constructible");
 5098|  16.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  16.7k|                  "Scan argument types must be Destructible");
 5100|  16.7k|    static_assert(
 5101|  16.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  16.7k|        "Scan argument types must not be references");
 5103|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5049|  16.7k|{
 5050|  16.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  16.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  16.7k|    constexpr bool scannable_char =
 5054|  16.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  16.7k|    static_assert(scannable_char,
 5056|  16.7k|                  "Cannot scan an argument of an unsupported character "
 5057|  16.7k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  16.7k|    constexpr bool scannable_const =
 5060|  16.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  16.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  16.7k|    constexpr bool scannable_disabled =
 5064|  16.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  16.7k|    static_assert(scannable_disabled,
 5066|  16.7k|                  "Cannot scan an argument that has been disabled by "
 5067|  16.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  16.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  16.7k|    static_assert(
 5071|  16.7k|        scannable,
 5072|  16.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  16.7k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  16.7k|    return arg_value{arg};
 5076|  16.7k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4862|  16.7k|    {
 4863|  16.7k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|  75.3k|{
 8552|  75.3k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  75.3k|    auto result = vscan_impl(buffer, format, args);
 8555|  75.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.2k, False: 120]
  |  |  ------------------
  ------------------
 8556|  75.2k|        return unexpected(result.error());
 8557|  75.2k|    }
 8558|    120|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  75.3k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4680|   150k|{
 4681|   150k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   150k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   150k|                  "\n"
 4685|   150k|                  "Unsupported range type given as input to a scanning "
 4686|   150k|                  "function.\n"
 4687|   150k|                  "A range needs to have a character type (value type) "
 4688|   150k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   150k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   150k|                  "to be included.\n"
 4691|   150k|                  "See the scnlib documentation for more details.");
 4692|   150k|    static_assert(
 4693|   150k|        !std::is_same_v<T, custom_char_traits>,
 4694|   150k|        "\n"
 4695|   150k|        "Unsupported range type given as input to a scanning "
 4696|   150k|        "function.\n"
 4697|   150k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   150k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   150k|        "not supported.");
 4700|   150k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   150k|                  "\n"
 4702|   150k|                  "Unsupported range type given as input to a scanning "
 4703|   150k|                  "function.\n"
 4704|   150k|                  "file_marker_found cannot be used as an "
 4705|   150k|                  "source range type to scn::scan.\n"
 4706|   150k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   150k|                  "and do not provide an explicit source range, "
 4708|   150k|                  "or use scn::scan with a FILE* directly.");
 4709|   150k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   150k|                  "\n"
 4711|   150k|                  "Unsupported range type given as input to a scanning "
 4712|   150k|                  "function.\n"
 4713|   150k|                  "In order to be scannable, a range needs to satisfy "
 4714|   150k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   150k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   150k|                  "\n"
 4717|   150k|                  "Unsupported range type given as input to a scanning "
 4718|   150k|                  "function.\n"
 4719|   150k|                  "A range needs to model forward_range and have a valid "
 4720|   150k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   150k|                  "Examples of scannable ranges are std::string, "
 4722|   150k|                  "std::string_view, "
 4723|   150k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   150k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   150k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   150k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|   150k|{
 4573|   150k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|   150k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|   150k|    }
 4577|   150k|    else {
 4578|   150k|        return invalid_char_type{};
 4579|   150k|    }
 4580|   150k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   150k|    {
 1447|   150k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   150k|    {
  443|   150k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   150k|    {
 1148|   150k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|    240|{
 5884|    240|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|    240|                      ranges::iterator_t<SourceRange>>) {
 5886|    240|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|    240|    }
 5888|    240|    else {
 5889|    240|        auto it = ranges::begin(source);
 5890|    240|        while (n > 0) {
 5891|    240|            --n;
 5892|    240|            ++it;
 5893|    240|        }
 5894|    240|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|    240|    }
 5896|    240|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|    240|    {
 2695|    240|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|    240|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|    240|    {
 2676|    240|        return decay_copy(t.begin());
 2677|    240|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|  67.2k|{
 1920|  67.2k|    return SCN_FWD(t);
  ------------------
  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  67.2k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5870|    240|{
 5871|    240|    return ranges::end(source);
 5872|    240|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|    240|    {
 2752|    240|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|    240|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|    240|    {
 2734|    240|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|    240|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|   779k|    {
 3287|   779k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|    240|    {
 1401|    240|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|    240|    {
  433|    240|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|   150k|    {
 5439|   150k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 60]
  |  |  ------------------
  ------------------
 8782|  16.6k|        return unexpected(result.error());
 8783|  16.6k|    }
 8784|     60|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|   150k|    {
 1569|   150k|        return has_value();
 1570|   150k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   301k|    {
  481|   301k|        return m_has_value;
  482|   301k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|   150k|    {
 1575|   150k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   150k|        return this->get_unexpected().error();
 1577|   150k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   150k|    {
  464|   150k|        return m_unexpected;
  465|   150k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.6k|    {
 1447|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.6k|    {
  443|  16.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|    240|    {
 1624|    240|        return value();
 1625|    240|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|    240|    {
 1598|    240|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    240|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    240|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    240|        return this->get_value();
 1600|    240|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|    240|    {
  447|    240|        return m_value;
  448|    240|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5790|     60|    {
 5791|     60|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|    240|    {
 5642|    240|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5576|     60|    {
 5577|     60|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|     60|    {
 1401|     60|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|     60|    {
  433|     60|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|   150k|{
 7657|   150k|    return s;
 7658|   150k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|   150k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|  75.3k|{
 8568|  75.3k|#if !SCN_DISABLE_LOCALE
 8569|  75.3k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  75.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  75.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  75.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  75.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.2k, False: 120]
  |  |  ------------------
  ------------------
 8576|  75.2k|        return unexpected(result.error());
 8577|  75.2k|    }
 8578|    120|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  75.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.7k|        return unexpected(result.error());
 8783|  16.7k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.7k|    {
 1447|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.7k|    {
  443|  16.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.7k|        return unexpected(result.error());
 8783|  16.7k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.7k|    {
 1447|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.7k|    {
  443|  16.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.7k|        return unexpected(result.error());
 8783|  16.7k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.7k|    {
 1447|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.7k|    {
  443|  16.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.7k|        return unexpected(result.error());
 8783|  16.7k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.7k|    {
 1447|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.7k|    {
  443|  16.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.7k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.7k|        return unexpected(result.error());
 8783|  16.7k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  16.7k|    {
 1447|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  16.7k|    {
  443|  16.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 60]
  |  |  ------------------
  ------------------
 8782|  16.6k|        return unexpected(result.error());
 8783|  16.6k|    }
 8784|     60|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  16.6k|    {
 1447|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  16.6k|    {
  622|  16.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  16.6k|    {
  685|  16.6k|        scn::detail::construct_at(unexpected_ptr(),
  686|  16.6k|                                  std::forward<Args>(args)...);
  687|  16.6k|        m_has_value = false;
  688|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  33.3k|    {
  714|  33.3k|        return reinterpret_cast<unexpected<E>*>(
  715|  33.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  33.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  33.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|     60|    {
 5791|     60|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|     60|    {
 1401|     60|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     60|    {
  612|     60|        construct(std::forward<Args>(args)...);
  613|     60|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     60|    {
  678|     60|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     60|        m_has_value = true;
  680|     60|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     60|{
  388|     60|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     60|        T(std::forward<Args>(args)...);
  390|     60|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|     60|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    120|    {
  702|    120|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    120|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|    120|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  16.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.7k|    {
  627|  16.7k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 60, False: 16.6k]
  ------------------
  628|     60|            destroy_value();
  629|     60|        }
  630|  16.6k|        else {
  631|  16.6k|            destroy_unexpected();
  632|  16.6k|        }
  633|  16.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  16.7k|    {
  671|  16.7k|        return m_has_value;
  672|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     60|    {
  692|     60|        scn::detail::destroy_at(value_ptr());
  693|     60|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|     60|{
  394|     60|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     60|        for (auto& elem : *p) {
  396|     60|            scn::detail::destroy_at(&elem);
  397|     60|        }
  398|     60|    }
  399|     60|    else {
  400|     60|        p->~T();
  401|     60|    }
  402|     60|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  16.6k|    {
  696|  16.6k|        scn::detail::destroy_at(unexpected_ptr());
  697|  16.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 60]
  |  |  ------------------
  ------------------
 8782|  16.6k|        return unexpected(result.error());
 8783|  16.6k|    }
 8784|     60|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  16.6k|    {
 1447|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  16.6k|    {
  622|  16.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  16.6k|    {
  685|  16.6k|        scn::detail::construct_at(unexpected_ptr(),
  686|  16.6k|                                  std::forward<Args>(args)...);
  687|  16.6k|        m_has_value = false;
  688|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  33.3k|    {
  714|  33.3k|        return reinterpret_cast<unexpected<E>*>(
  715|  33.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  33.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  33.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|     60|    {
 5791|     60|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|     60|    {
 1401|     60|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     60|    {
  612|     60|        construct(std::forward<Args>(args)...);
  613|     60|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     60|    {
  678|     60|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     60|        m_has_value = true;
  680|     60|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     60|{
  388|     60|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     60|        T(std::forward<Args>(args)...);
  390|     60|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|     60|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    120|    {
  702|    120|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    120|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|    120|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  16.7k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.7k|    {
  627|  16.7k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 60, False: 16.6k]
  ------------------
  628|     60|            destroy_value();
  629|     60|        }
  630|  16.6k|        else {
  631|  16.6k|            destroy_unexpected();
  632|  16.6k|        }
  633|  16.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  16.7k|    {
  671|  16.7k|        return m_has_value;
  672|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     60|    {
  692|     60|        scn::detail::destroy_at(value_ptr());
  693|     60|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|     60|{
  394|     60|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     60|        for (auto& elem : *p) {
  396|     60|            scn::detail::destroy_at(&elem);
  397|     60|        }
  398|     60|    }
  399|     60|    else {
  400|     60|        p->~T();
  401|     60|    }
  402|     60|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  16.6k|    {
  696|  16.6k|        scn::detail::destroy_at(unexpected_ptr());
  697|  16.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5356|  16.7k|{
 5357|  16.7k|    detail::check_scan_arg_types<Args...>();
 5358|  16.7k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.7k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5095|  16.7k|{
 5096|  16.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  16.7k|                  "Scan argument types must be default constructible");
 5098|  16.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  16.7k|                  "Scan argument types must be Destructible");
 5100|  16.7k|    static_assert(
 5101|  16.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  16.7k|        "Scan argument types must not be references");
 5103|  16.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5309|  16.7k|    {
 5310|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  16.7k|    {
 5321|  16.7k|        return {detail::make_arg<
 5322|  16.7k|            kind, Context,
 5323|  16.7k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.7k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.7k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5130|  16.7k|{
 5131|  16.7k|    return make_value<Context>(value).ref_value;
 5132|  16.7k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5080|  16.7k|{
 5081|  16.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.7k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.7k|                                  needs_context_tag>) {
 5085|  16.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.7k|    }
 5087|  16.7k|    else {
 5088|  16.7k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.7k|            value, context_tag<Context>{}));
 5090|  16.7k|    }
 5091|  16.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4919|  16.7k|    {                                                                        \
 4920|  16.7k|        return val;                                                          \
 4921|  16.7k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5049|  16.7k|{
 5050|  16.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  16.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  16.7k|    constexpr bool scannable_char =
 5054|  16.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  16.7k|    static_assert(scannable_char,
 5056|  16.7k|                  "Cannot scan an argument of an unsupported character "
 5057|  16.7k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  16.7k|    constexpr bool scannable_const =
 5060|  16.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  16.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  16.7k|    constexpr bool scannable_disabled =
 5064|  16.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  16.7k|    static_assert(scannable_disabled,
 5066|  16.7k|                  "Cannot scan an argument that has been disabled by "
 5067|  16.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  16.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  16.7k|    static_assert(
 5071|  16.7k|        scannable,
 5072|  16.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  16.7k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  16.7k|    return arg_value{arg};
 5076|  16.7k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4862|  16.7k|    {
 4863|  16.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7935|  16.7k|    {
 7936|  16.7k|        return m_str;
 7937|  16.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.7k|    {
 5387|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5339|  16.7k|    {
 5340|  16.7k|        return m_argptrs;
 5341|  16.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  16.7k|{
 8781|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 60]
  |  |  ------------------
  ------------------
 8782|  16.6k|        return unexpected(result.error());
 8783|  16.6k|    }
 8784|     60|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  16.6k|    {
 1447|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  16.6k|    {
  443|  16.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.7k|    {
 1148|  16.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|     60|    {
 5791|     60|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|     60|    {
 5577|     60|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|     60|    {
 1401|     60|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|     60|    {
  433|     60|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5334|  16.7k|    {
 5335|  16.7k|        return m_args;
 5336|  16.7k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.7k|    {
 7932|  16.7k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|   436k|    {
 3539|   436k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   436k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|   436k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  3.69M|    {
 3545|  3.69M|        return m_code == good;
 3546|  3.69M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|  99.7k|    {
 3556|  99.7k|        return m_code;
 3557|  99.7k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6141|  3.80k|    {
 6142|  3.80k|        return m_size;
 6143|  3.80k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6182|  12.7k|    {
 6183|  12.7k|        SCN_GCC_COMPAT_PUSH
 6184|  12.7k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6185|  12.7k|        switch (type) {
 6186|  1.94k|            case presentation_type::none:
  ------------------
  |  Branch (6186:13): [True: 1.94k, False: 10.8k]
  ------------------
 6187|  1.94k|                return 10;
 6188|     46|            case presentation_type::int_generic:
  ------------------
  |  Branch (6188:13): [True: 46, False: 12.7k]
  ------------------
 6189|     46|                return 0;
 6190|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6190:13): [True: 0, False: 12.7k]
  ------------------
 6191|      0|                return arbitrary_base;
 6192|       |
 6193|     28|            case presentation_type::int_binary:
  ------------------
  |  Branch (6193:13): [True: 28, False: 12.7k]
  ------------------
 6194|     28|                return 2;
 6195|     46|            case presentation_type::int_octal:
  ------------------
  |  Branch (6195:13): [True: 46, False: 12.7k]
  ------------------
 6196|     46|                return 8;
 6197|     58|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6197:13): [True: 58, False: 12.7k]
  ------------------
 6198|     90|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6198:13): [True: 32, False: 12.7k]
  ------------------
 6199|     90|                return 10;
 6200|  10.6k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6200:13): [True: 10.6k, False: 2.15k]
  ------------------
 6201|  10.6k|                return 16;
 6202|       |
 6203|      0|            default:
  ------------------
  |  Branch (6203:13): [True: 0, False: 12.7k]
  ------------------
 6204|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6205|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6206|  12.7k|        }
 6207|  12.7k|        SCN_GCC_COMPAT_POP
 6208|  12.7k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  63.2k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6223|  8.67k|    {
 6224|  8.67k|        m_specs.align = align;
 6225|  8.67k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|    200|    {
 6233|    200|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    200|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|    200|            m_specs.localized = true;
 6235|    200|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|    200|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6242|  7.93k|    {
 6243|  7.93k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6243:13): [True: 0, False: 7.93k]
  |  Branch (6243:39): [True: 0, False: 0]
  ------------------
 6244|       |            // clang-format off
 6245|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6246|       |            // clang-format on
 6247|      0|        }
 6248|       |
 6249|  7.93k|        m_specs.width = width;
 6250|  7.93k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6252|  8.39k|    {
 6253|  8.39k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6253:13): [True: 160, False: 8.23k]
  ------------------
 6254|       |            // clang-format off
 6255|    160|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6256|       |            // clang-format on
 6257|    160|        }
 6258|       |
 6259|  8.23k|        m_specs.precision = prec;
 6260|  8.23k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  84.7k|    {
 6264|  84.7k|        m_specs.type = type;
 6265|  84.7k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6268|  2.20M|    {
 6269|  2.20M|        const auto cp_value = static_cast<unsigned>(cp);
 6270|  2.20M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.96M, False: 246k]
  |  |  ------------------
  ------------------
 6271|  1.96M|            m_specs.charset_literals[cp_value / 8] |=
 6272|  1.96M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6273|  1.96M|        }
 6274|   246k|        else {
 6275|   246k|            m_specs.charset_has_nonascii = true;
 6276|   246k|        }
 6277|  2.20M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6280|  11.1k|    {
 6281|  11.1k|        const auto begin_value = static_cast<unsigned>(begin);
 6282|  11.1k|        const auto end_value = static_cast<unsigned>(end);
 6283|  11.1k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6284|       |
 6285|  11.1k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  11.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.40k, False: 5.79k]
  |  |  ------------------
  ------------------
 6286|       |            // No need to bit-twiddle with a mask, because with the
 6287|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6288|  5.40k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  5.40k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6289|   384k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6289:40): [True: 378k, False: 5.40k]
  ------------------
 6290|   378k|                m_specs.charset_literals[v / 8] |=
 6291|   378k|                    static_cast<unsigned char>(1ul << (v % 8));
 6292|   378k|            }
 6293|  5.40k|        }
 6294|  5.79k|        else {
 6295|  5.79k|            m_specs.charset_has_nonascii = true;
 6296|  5.79k|        }
 6297|  11.1k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6300|  2.42k|    {
 6301|  2.42k|        m_specs.charset_is_inverted = true;
 6302|  2.42k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6319|  32.4k|    {
 6320|  32.4k|        m_specs.regexp_flags = flags;
 6321|  32.4k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6325|  10.6k|    {
 6326|  10.6k|        SCN_UNLIKELY_ATTR
 6327|  10.6k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6328|  10.6k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  2.28M|    {
 6337|  2.28M|        return static_cast<bool>(m_error);
 6338|  2.28M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|  99.7k|{
 3580|  99.7k|    return a.code() == b;
 3581|  99.7k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|  99.7k|{
 3584|  99.7k|    return !(a == b);
 3585|  99.7k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3878|   206k|{
 3879|   206k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3880|       |
 3881|   206k|    const auto is_trailing_code_unit = [](char ch) {
 3882|   206k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|   206k|    };
 3884|       |
 3885|   206k|    if (input.size() == 1) {
  ------------------
  |  Branch (3885:9): [True: 185k, False: 20.9k]
  ------------------
 3886|   185k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3887|   185k|        return static_cast<char32_t>(input[0]);
 3888|   185k|    }
 3889|       |
 3890|  20.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (3890:9): [True: 19.9k, False: 994]
  ------------------
 3891|  19.9k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3892|  19.9k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3893|       |
 3894|  19.9k|        char32_t cp{};
 3895|  19.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3896|  19.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3897|  19.9k|        return cp;
 3898|  19.9k|    }
 3899|       |
 3900|    994|    if (input.size() == 3) {
  ------------------
  |  Branch (3900:9): [True: 638, False: 356]
  ------------------
 3901|    638|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    638|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    638|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3902|    638|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    638|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    638|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3903|    638|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    638|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    638|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3904|       |
 3905|    638|        char32_t cp{};
 3906|    638|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3907|    638|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3908|    638|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3909|    638|        return cp;
 3910|    638|    }
 3911|       |
 3912|    356|    if (input.size() == 4) {
  ------------------
  |  Branch (3912:9): [True: 356, False: 0]
  ------------------
 3913|    356|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3914|    356|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3915|    356|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|    356|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|    356|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|    356|        char32_t cp{};
 3920|    356|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3921|    356|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3922|    356|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3923|    356|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3924|    356|        return cp;
 3925|    356|    }
 3926|       |
 3927|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3928|       |    // gcc 7 thinks we'll get here, even when we won't
 3929|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3930|      0|#endif
 3931|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3932|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6071|  46.6k|{
 6072|  46.6k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6073|  46.6k|                                    static_cast<unsigned>(b));
 6074|  46.6k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6076|  5.08k|{
 6077|  5.08k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6078|  5.08k|                                    static_cast<unsigned>(b));
 6079|  5.08k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6091|  5.08k|{
 6092|  5.08k|    return a = a | b;
 6093|  5.08k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|    618|{
 7024|    618|    switch (type) {
 7025|    168|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 168, False: 450]
  ------------------
 7026|    168|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 618]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 618]
  ------------------
 7030|     50|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 50, False: 568]
  ------------------
 7031|     50|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 618]
  ------------------
 7032|     50|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 618]
  ------------------
 7033|     50|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 618]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 618]
  ------------------
 7037|     50|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 50, False: 568]
  ------------------
 7038|     50|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 618]
  ------------------
 7039|     50|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 618]
  ------------------
 7040|     50|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|     50|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 50, False: 568]
  ------------------
 7043|     50|            return arg_type_category::pointer;
 7044|     50|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 50, False: 568]
  ------------------
 7045|     50|            return arg_type_category::boolean;
 7046|     42|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 42, False: 576]
  ------------------
 7047|     50|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 8, False: 610]
  ------------------
 7048|     50|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 618]
  ------------------
 7049|     50|            return arg_type_category::character;
 7050|       |
 7051|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 0, False: 618]
  ------------------
 7052|     50|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 50, False: 568]
  ------------------
 7053|     50|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 0, False: 618]
  ------------------
 7054|     50|            return arg_type_category::floating;
 7055|       |
 7056|     42|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 42, False: 576]
  ------------------
 7057|     92|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 50, False: 568]
  ------------------
 7058|    100|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 8, False: 610]
  ------------------
 7059|    150|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 50, False: 568]
  ------------------
 7060|    150|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 618]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 618]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|    618|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|    618|            SCN_CLANG_POP
 7071|    618|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|    618|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3624|    934|{
 3625|    934|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    934|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    934|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7109|  12.6k|{
 7110|  12.6k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 2.13k]
  |  |  ------------------
  ------------------
 7111|  10.5k|        return handler.on_error("Invalid type specifier for integer type");
 7112|  10.5k|    }
 7113|  2.13k|    if (specs.localized) {
  ------------------
  |  Branch (7113:9): [True: 60, False: 2.07k]
  ------------------
 7114|     60|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 52]
  |  |  ------------------
  ------------------
 7115|       |            // clang-format off
 7116|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7117|       |            // clang-format on
 7118|      8|            return;
 7119|      8|        }
 7120|     52|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52]
  |  |  ------------------
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|     52|    }
 7126|  2.13k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|     74|{
 1920|     74|    return SCN_FWD(t);
  ------------------
  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|     74|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  2.20k|{
 3625|  2.20k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.20k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|  6.32k|{
 7154|  6.32k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 5.34k, False: 978]
  ------------------
 7155|  6.32k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 90, False: 5.25k]
  ------------------
 7156|  5.34k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 5.18k, False: 72]
  ------------------
 7157|  5.27k|        SCN_UNLIKELY_ATTR
 7158|  5.27k|        return handler.on_error("Invalid type specifier for float type");
 7159|  5.27k|    }
 7160|  6.32k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  480|  20.7k|    {
  481|  20.7k|        return m_has_value;
  482|  20.7k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1568|  10.3k|    {
 1569|  10.3k|        return has_value();
 1570|  10.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  446|  10.3k|    {
  447|  10.3k|        return m_value;
  448|  10.3k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1597|  10.3k|    {
 1598|  10.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  10.3k|        return this->get_value();
 1600|  10.3k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1633|  10.3k|    {
 1634|  10.3k|        return std::move(value());
 1635|  10.3k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3624|  5.85k|{
 3625|  5.85k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  5.85k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3624|  2.85k|{
 3625|  2.85k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.85k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3624|    156|{
 3625|    156|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    156|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3624|    360|{
 3625|    360|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    360|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3624|  1.10k|{
 3625|  1.10k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.10k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7165|  18.8k|{
 7166|  18.8k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7166:9): [True: 2.87k, False: 15.9k]
  ------------------
 7167|  18.8k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7167:9): [True: 540, False: 15.4k]
  ------------------
 7168|  18.8k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7168:9): [True: 4.06k, False: 11.3k]
  ------------------
 7169|  18.8k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7169:9): [True: 9.71k, False: 1.66k]
  ------------------
 7170|  18.8k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7170:9): [True: 1.03k, False: 630]
  ------------------
 7171|  18.2k|        return;
 7172|  18.2k|    }
 7173|    630|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7173:9): [True: 150, False: 480]
  ------------------
 7174|    150|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 126]
  |  |  ------------------
  ------------------
 7175|       |            // clang-format off
 7176|     24|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7177|       |            // clang-format on
 7178|     24|        }
 7179|    126|        return;
 7180|    150|    }
 7181|    480|    SCN_UNLIKELY_ATTR
 7182|    480|    handler.on_error("Invalid type specifier for string");
 7183|    480|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3624|  21.4k|{
 3625|  21.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  21.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3624|     24|{
 3625|     24|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|     24|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7199|  6.32k|{
 7200|  6.32k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7200:9): [True: 5.34k, False: 978]
  ------------------
 7201|  6.32k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7201:9): [True: 5.16k, False: 184]
  ------------------
 7202|  6.32k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7202:9): [True: 5.14k, False: 18]
  ------------------
 7203|  6.32k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7203:9): [True: 5.13k, False: 6]
  ------------------
 7204|  6.32k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7204:9): [True: 5.12k, False: 16]
  ------------------
 7205|  6.32k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7205:9): [True: 5.11k, False: 12]
  ------------------
 7206|  6.32k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7206:9): [True: 5.09k, False: 16]
  ------------------
 7207|  6.32k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7207:9): [True: 5.07k, False: 22]
  ------------------
 7208|  5.07k|        SCN_UNLIKELY_ATTR
 7209|  5.07k|        return handler.on_error("Invalid type specifier for boolean");
 7210|  5.07k|    }
 7211|  6.32k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7131|  6.28k|{
 7132|  6.28k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7132:9): [True: 5.24k, False: 1.03k]
  ------------------
 7133|  6.28k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7133:9): [True: 0, False: 1.03k]
  ------------------
 7134|  5.24k|        SCN_UNLIKELY_ATTR
 7135|  5.24k|        return handler.on_error("Invalid type specifier for character type");
 7136|  5.24k|    }
 7137|  6.28k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  6.28k|{
 7189|  6.28k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 5.32k, False: 958]
  ------------------
 7190|  6.28k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7190:9): [True: 5.31k, False: 12]
  ------------------
 7191|  5.31k|        SCN_UNLIKELY_ATTR
 7192|  5.31k|        return handler.on_error("Invalid type specifier for pointer");
 7193|  5.31k|    }
 7194|  6.28k|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   170k|{
 3686|   170k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   170k|                                          const CharT*, const CharT*>) {
 3688|   170k|        return {first, last};
 3689|   170k|    }
 3690|   170k|    else {
 3691|   170k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   170k|    }
 3693|   170k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   308M|{
 3686|   308M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   308M|                                          const CharT*, const CharT*>) {
 3688|   308M|        return {first, last};
 3689|   308M|    }
 3690|   308M|    else {
 3691|   308M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   308M|    }
 3693|   308M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  2.05M|    {
 3301|  2.05M|        return m_iterator;
 3302|  2.05M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  2.43M|    {
 3305|  2.43M|        return m_sentinel;
 3306|  2.43M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|  1.75M|    {
 3301|  1.75M|        return m_iterator;
 3302|  1.75M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|   618M|    {
 3305|   618M|        return m_sentinel;
 3306|   618M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|   127k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|     90|{
 1182|     90|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|     90|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  1.31k|    {
  357|  1.31k|        return m_unexpected;
  358|  1.31k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3624|  30.8k|{
 3625|  30.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  30.8k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  76.0k|    {
  343|  76.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  76.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  76.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  86.8k|    {
 1447|  86.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  87.7k|    {
  443|  87.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   118k|    {
 1148|   118k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  22.7k|    {
 1401|  22.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  22.7k|    {
  433|  22.7k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|   119k|    {
 1569|   119k|        return has_value();
 1570|   119k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|   236k|    {
  481|   236k|        return m_has_value;
  482|   236k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|  86.8k|    {
 1575|  86.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  86.8k|        return this->get_unexpected().error();
 1577|  86.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  86.8k|    {
  464|  86.8k|        return m_unexpected;
  465|  86.8k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  19.9k|    {
 1634|  19.9k|        return std::move(value());
 1635|  19.9k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  30.0k|    {
 1598|  30.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  30.0k|        return this->get_value();
 1600|  30.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  30.0k|    {
  447|  30.0k|        return m_value;
  448|  30.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   107k|    {
 1447|   107k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   116k|    {
  443|   116k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   294k|    {
 1148|   294k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|   176k|    {
 1401|   176k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   176k|    {
  433|   176k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|   303k|    {
 1569|   303k|        return has_value();
 1570|   303k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|   579k|    {
  481|   579k|        return m_has_value;
  482|   579k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|   107k|    {
 1575|   107k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   107k|        return this->get_unexpected().error();
 1577|   107k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   107k|    {
  464|   107k|        return m_unexpected;
  465|   107k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|   132k|    {
 1634|   132k|        return std::move(value());
 1635|   132k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|   168k|    {
 1598|   168k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   168k|        return this->get_value();
 1600|   168k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   168k|    {
  447|   168k|        return m_value;
  448|   168k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  8.69k|    {
 1808|  8.69k|        return detail::transform_error_impl(std::move(*this),
 1809|  8.69k|                                            std::forward<F>(f));
 1810|  8.69k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  8.69k|{
 1294|  8.69k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  8.69k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  8.69k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  8.69k|            return result(*std::forward<Exp>(exp));
 1298|  8.69k|        }
 1299|       |
 1300|  8.69k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  8.69k|        return result(unexpect, monostate{});
 1302|  8.69k|    }
 1303|  8.69k|    else {
 1304|  8.69k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  8.69k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.69k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.69k, False: 0]
  |  |  ------------------
  ------------------
 1306|  8.69k|                   ? result(*std::forward<Exp>(exp))
 1307|  8.69k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  8.69k|    }
 1311|  8.69k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   105k|    {
  481|   105k|        return m_has_value;
  482|   105k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  10.6k|    {
 1634|  10.6k|        return std::move(value());
 1635|  10.6k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  49.9k|    {
 1598|  49.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  49.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  49.9k|        return this->get_value();
 1600|  49.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  49.9k|    {
  447|  49.9k|        return m_value;
  448|  49.9k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|    104|    {
 1585|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    104|        return std::move(this->get_unexpected().error());
 1587|    104|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    104|    {
  464|    104|        return m_unexpected;
  465|    104|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|    962|    {
 1457|    962|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|   351k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6147|  2.88k|    {
 6148|  2.88k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6149|  2.88k|        CharT r{};
 6150|  2.88k|        std::memcpy(&r, m_data, m_size);
 6151|  2.88k|        return r;
 6152|  2.88k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|    660|    {
  343|    660|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    660|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|    750|    {
  352|    750|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    750|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|    750|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6156|    530|    {
 6157|    530|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6158|    530|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2932|     74|    {
 2933|     74|        return fn::impl(std::forward<T>(t));
 2934|     74|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2923|     74|    {
 2924|     74|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|     74|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|     74|    {
 2901|     74|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|     74|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2866|     74|    {
 2867|     74|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|     74|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|     90|    {
  343|     90|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|     90|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|     90|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|      8|    {
  343|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  77.2k|    {
  357|  77.2k|        return m_unexpected;
  358|  77.2k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  11.6k|    {
  352|  11.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  11.6k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|   129k|    {
  343|   129k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   129k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|   129k|    {
  357|   129k|        return m_unexpected;
  358|   129k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|   129k|    {
  352|   129k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   129k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|    474|{
 1182|    474|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|    474|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  11.1k|    {
  343|  11.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  11.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  11.1k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1181|  1.13k|{
 1182|  1.13k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  1.13k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  92.7k|{
  322|  92.7k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  92.7k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|   157k|    {
 3317|   157k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|   157k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    218|    {
 1447|    218|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    218|    {
  443|    218|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  55.5k|    {
 1148|  55.5k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  55.3k|    {
 1401|  55.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  55.3k|    {
  433|  55.3k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|  44.8k|    {
 1569|  44.8k|        return has_value();
 1570|  44.8k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|  39.2k|    {
 1624|  39.2k|        return value();
 1625|  39.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1400|  8.06k|    {
 1401|  8.06k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  8.06k|    {
  433|  8.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.43k|    {
 1148|  8.43k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|    376|    {
 1447|    376|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    376|    {
  443|    376|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1568|  2.57k|    {
 1569|  2.57k|        return has_value();
 1570|  2.57k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  14.5k|    {
  481|  14.5k|        return m_has_value;
  482|  14.5k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1623|    232|    {
 1624|    232|        return value();
 1625|    232|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1597|  5.79k|    {
 1598|  5.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  5.79k|        return this->get_value();
 1600|  5.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  5.79k|    {
  447|  5.79k|        return m_value;
  448|  5.79k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  3.55k|    {
 1808|  3.55k|        return detail::transform_error_impl(std::move(*this),
 1809|  3.55k|                                            std::forward<F>(f));
 1810|  3.55k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1293|  3.55k|{
 1294|  3.55k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  3.55k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  3.55k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  3.55k|            return result(*std::forward<Exp>(exp));
 1298|  3.55k|        }
 1299|       |
 1300|  3.55k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  3.55k|        return result(unexpect, monostate{});
 1302|  3.55k|    }
 1303|  3.55k|    else {
 1304|  3.55k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  3.55k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.55k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.46k, False: 90]
  |  |  ------------------
  ------------------
 1306|  3.55k|                   ? result(*std::forward<Exp>(exp))
 1307|  3.55k|                   : result(unexpect,
 1308|     90|                            trivial_invoke(std::forward<F>(f),
 1309|     90|                                           std::forward<Exp>(exp).error()));
 1310|  3.55k|    }
 1311|  3.55k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1633|  5.56k|    {
 1634|  5.56k|        return std::move(value());
 1635|  5.56k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1400|  5.05k|    {
 1401|  5.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  5.05k|    {
  433|  5.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  12.7k|    {
 1148|  12.7k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1584|    304|    {
 1585|    304|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    304|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    304|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    304|        return std::move(this->get_unexpected().error());
 1587|    304|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    304|    {
  464|    304|        return m_unexpected;
  465|    304|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1456|  1.95k|    {
 1457|  1.95k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  6.92k|    {
  443|  6.92k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|     90|    {
 1447|     90|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|     90|    {
  443|     90|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  26.2k|    {
 1148|  26.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  26.1k|    {
 1401|  26.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  26.1k|    {
  433|  26.1k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|  26.2k|    {
 1569|  26.2k|        return has_value();
 1570|  26.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  52.5k|    {
  481|  52.5k|        return m_has_value;
  482|  52.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|     90|    {
 1575|     90|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     90|        return this->get_unexpected().error();
 1577|     90|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|     90|    {
  464|     90|        return m_unexpected;
  465|     90|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  26.1k|    {
 1634|  26.1k|        return std::move(value());
 1635|  26.1k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  26.1k|    {
 1598|  26.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  26.1k|        return this->get_value();
 1600|  26.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  26.1k|    {
  447|  26.1k|        return m_value;
  448|  26.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  4.97k|    {
 1447|  4.97k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|    578|    {
 1447|    578|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    792|    {
  443|    792|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.82k|    {
 1148|  8.82k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  5.93k|    {
 1447|  5.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  5.93k|    {
  443|  5.93k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1568|  8.05k|    {
 1569|  8.05k|        return has_value();
 1570|  8.05k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  15.9k|    {
  481|  15.9k|        return m_has_value;
  482|  15.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1574|  2.81k|    {
 1575|  2.81k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  2.81k|        return this->get_unexpected().error();
 1577|  2.81k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  3.95k|    {
  464|  3.95k|        return m_unexpected;
  465|  3.95k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1400|  1.51k|    {
 1401|  1.51k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|  1.51k|    {
  433|  1.51k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.51k|    {
 1148|  1.51k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1597|  2.09k|    {
 1598|  2.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.09k|        return this->get_value();
 1600|  2.09k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|  2.09k|    {
  447|  2.09k|        return m_value;
  448|  2.09k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1568|  1.14k|    {
 1569|  1.14k|        return has_value();
 1570|  1.14k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  3.02k|    {
  481|  3.02k|        return m_has_value;
  482|  3.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.14k|    {
 1148|  1.14k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1633|  1.51k|    {
 1634|  1.51k|        return std::move(value());
 1635|  1.51k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1597|  1.51k|    {
 1598|  1.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.51k|        return this->get_value();
 1600|  1.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|  1.51k|    {
  447|  1.51k|        return m_value;
  448|  1.51k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3304|   275k|    {
 3305|   275k|        return m_sentinel;
 3306|   275k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  2.30k|    {
 1808|  2.30k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.30k|                                            std::forward<F>(f));
 1810|  2.30k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1293|  2.30k|{
 1294|  2.30k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.30k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.30k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.30k|            return result(*std::forward<Exp>(exp));
 1298|  2.30k|        }
 1299|       |
 1300|  2.30k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.30k|        return result(unexpect, monostate{});
 1302|  2.30k|    }
 1303|  2.30k|    else {
 1304|  2.30k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.30k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.30k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.09k, False: 214]
  |  |  ------------------
  ------------------
 1306|  2.30k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.30k|                   : result(unexpect,
 1308|    214|                            trivial_invoke(std::forward<F>(f),
 1309|    214|                                           std::forward<Exp>(exp).error()));
 1310|  2.30k|    }
 1311|  2.30k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1400|  2.09k|    {
 1401|  2.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  2.09k|    {
  433|  2.09k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1456|    214|    {
 1457|    214|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1633|  2.09k|    {
 1634|  2.09k|        return std::move(value());
 1635|  2.09k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3300|   442k|    {
 3301|   442k|        return m_iterator;
 3302|   442k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1400|  1.14k|    {
 1401|  1.14k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|  1.14k|    {
  433|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1807|  1.14k|    {
 1808|  1.14k|        return detail::transform_error_impl(std::move(*this),
 1809|  1.14k|                                            std::forward<F>(f));
 1810|  1.14k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|  1.14k|{
 1294|  1.14k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  1.14k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  1.14k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  1.14k|            return result(*std::forward<Exp>(exp));
 1298|  1.14k|        }
 1299|       |
 1300|  1.14k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  1.14k|        return result(unexpect, monostate{});
 1302|  1.14k|    }
 1303|  1.14k|    else {
 1304|  1.14k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  1.14k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.14k, False: 0]
  |  |  ------------------
  ------------------
 1306|  1.14k|                   ? result(*std::forward<Exp>(exp))
 1307|  1.14k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  1.14k|    }
 1311|  1.14k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  2.29k|    {
  481|  2.29k|        return m_has_value;
  482|  2.29k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1633|  1.14k|    {
 1634|  1.14k|        return std::move(value());
 1635|  1.14k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1597|  1.14k|    {
 1598|  1.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.14k|        return this->get_value();
 1600|  1.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|  1.14k|    {
  447|  1.14k|        return m_value;
  448|  1.14k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1400|  1.14k|    {
 1401|  1.14k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|  1.14k|    {
  433|  1.14k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.14k|    {
 1148|  1.14k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1568|  1.14k|    {
 1569|  1.14k|        return has_value();
 1570|  1.14k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  2.29k|    {
  481|  2.29k|        return m_has_value;
  482|  2.29k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1633|  1.14k|    {
 1634|  1.14k|        return std::move(value());
 1635|  1.14k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1597|  1.14k|    {
 1598|  1.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.14k|        return this->get_value();
 1600|  1.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  1.14k|    {
  447|  1.14k|        return m_value;
  448|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  1.13k|    {
 1808|  1.13k|        return detail::transform_error_impl(std::move(*this),
 1809|  1.13k|                                            std::forward<F>(f));
 1810|  1.13k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1293|  1.13k|{
 1294|  1.13k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  1.13k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  1.13k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  1.13k|            return result(*std::forward<Exp>(exp));
 1298|  1.13k|        }
 1299|       |
 1300|  1.13k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  1.13k|        return result(unexpect, monostate{});
 1302|  1.13k|    }
 1303|  1.13k|    else {
 1304|  1.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  1.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.13k]
  |  |  ------------------
  ------------------
 1306|  1.13k|                   ? result(*std::forward<Exp>(exp))
 1307|  1.13k|                   : result(unexpect,
 1308|  1.13k|                            trivial_invoke(std::forward<F>(f),
 1309|  1.13k|                                           std::forward<Exp>(exp).error()));
 1310|  1.13k|    }
 1311|  1.13k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1584|  1.13k|    {
 1585|  1.13k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  1.13k|        return std::move(this->get_unexpected().error());
 1587|  1.13k|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3618|  1.86k|    {
 3619|  1.86k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3286|   155k|    {
 3287|   155k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.02k|    {
 2695|  2.02k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.02k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.02k|    {
 2676|  2.02k|        return decay_copy(t.begin());
 2677|  2.02k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1919|  4.40k|{
 1920|  4.40k|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  4.40k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3300|  2.02k|    {
 3301|  2.02k|        return m_iterator;
 3302|  2.02k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.02k|    {
 2752|  2.02k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.02k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.02k|    {
 2734|  2.02k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.02k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3304|  2.02k|    {
 3305|  2.02k|        return m_sentinel;
 3306|  2.02k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3286|  2.02k|    {
 3287|  2.02k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|     16|    {
 1447|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  621|     16|    {
  622|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  684|     16|    {
  685|     16|        scn::detail::construct_at(unexpected_ptr(),
  686|     16|                                  std::forward<Args>(args)...);
  687|     16|        m_has_value = false;
  688|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     48|    {
  714|     48|        return reinterpret_cast<unexpected<E>*>(
  715|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     16|    {
 1148|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1568|     16|    {
 1569|     16|        return has_value();
 1570|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     48|    {
  671|     48|        return m_has_value;
  672|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1574|     16|    {
 1575|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     16|        return this->get_unexpected().error();
 1577|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     16|    {
  654|     16|        return *unexpected_ptr();
  655|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  626|     16|    {
  627|     16|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 16]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     16|        else {
  631|     16|            destroy_unexpected();
  632|     16|        }
  633|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     16|    {
  696|     16|        scn::detail::destroy_at(unexpected_ptr());
  697|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1568|  13.1k|    {
 1569|  13.1k|        return has_value();
 1570|  13.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  25.4k|    {
  481|  25.4k|        return m_has_value;
  482|  25.4k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1574|  6.56k|    {
 1575|  6.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.56k|        return this->get_unexpected().error();
 1577|  6.56k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  6.56k|    {
  464|  6.56k|        return m_unexpected;
  465|  6.56k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1633|  5.05k|    {
 1634|  5.05k|        return std::move(value());
 1635|  5.05k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1597|  5.81k|    {
 1598|  5.81k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  5.81k|        return this->get_value();
 1600|  5.81k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  5.81k|    {
  447|  5.81k|        return m_value;
  448|  5.81k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  1.04k|    {
 1447|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.14k|    {
  443|  1.14k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.2k|    {
 1148|  14.2k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  11.2k|    {
 1447|  11.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  11.2k|    {
  443|  11.2k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|  15.2k|    {
 1569|  15.2k|        return has_value();
 1570|  15.2k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  23.7k|    {
  481|  23.7k|        return m_has_value;
  482|  23.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|  5.64k|    {
 1575|  5.64k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  5.64k|        return this->get_unexpected().error();
 1577|  5.64k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.64k|    {
  464|  5.64k|        return m_unexpected;
  465|  5.64k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  3.65k|    {
 1401|  3.65k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.65k|    {
  433|  3.65k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.65k|    {
 1148|  3.65k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  1.92k|    {
 1598|  1.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.92k|        return this->get_value();
 1600|  1.92k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  1.92k|    {
  447|  1.92k|        return m_value;
  448|  1.92k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  2.72k|    {
 1569|  2.72k|        return has_value();
 1570|  2.72k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.30k|    {
  481|  7.30k|        return m_has_value;
  482|  7.30k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.72k|    {
 1148|  2.72k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.65k|    {
 1634|  3.65k|        return std::move(value());
 1635|  3.65k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.65k|    {
 1598|  3.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.65k|        return this->get_value();
 1600|  3.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.65k|    {
  447|  3.65k|        return m_value;
  448|  3.65k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|   122k|    {
 3192|   122k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 1.69k, False: 120k]
  ------------------
 3193|   122k|                   ? nullptr
 3194|   122k|                   : std::addressof(*ranges::begin(derived()));
 3195|   122k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   122k|    {
 2976|   122k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   122k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   122k|    {
 2949|   122k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   122k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|   122k|    {
 3310|   122k|        return m_iterator == m_sentinel;
 3311|   122k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|   242k|    {
 3151|   242k|        return static_cast<D&>(*this);
 3152|   242k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   120k|    {
 2695|   120k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   120k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   120k|    {
 2676|   120k|        return decay_copy(t.begin());
 2677|   120k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  1.92k|    {
 1401|  1.92k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.92k|    {
  433|  1.92k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|  2.72k|    {
 1401|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.72k|    {
  433|  2.72k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.72k|    {
 1808|  2.72k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.72k|                                            std::forward<F>(f));
 1810|  2.72k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|  2.72k|{
 1294|  2.72k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.72k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.72k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.72k|            return result(*std::forward<Exp>(exp));
 1298|  2.72k|        }
 1299|       |
 1300|  2.72k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.72k|        return result(unexpect, monostate{});
 1302|  2.72k|    }
 1303|  2.72k|    else {
 1304|  2.72k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.72k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.72k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.72k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.72k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.72k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.72k|    }
 1311|  2.72k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.44k|    {
  481|  5.44k|        return m_has_value;
  482|  5.44k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.72k|    {
 1634|  2.72k|        return std::move(value());
 1635|  2.72k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.72k|    {
 1598|  2.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.72k|        return this->get_value();
 1600|  2.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.72k|    {
  447|  2.72k|        return m_value;
  448|  2.72k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  2.72k|    {
 1401|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.72k|    {
  433|  2.72k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.72k|    {
 1148|  2.72k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1568|  2.72k|    {
 1569|  2.72k|        return has_value();
 1570|  2.72k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.44k|    {
  481|  5.44k|        return m_has_value;
  482|  5.44k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.72k|    {
 1634|  2.72k|        return std::move(value());
 1635|  2.72k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.72k|    {
 1598|  2.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.72k|        return this->get_value();
 1600|  2.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.72k|    {
  447|  2.72k|        return m_value;
  448|  2.72k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1446|     24|    {
 1447|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|     24|    {
  622|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|     24|    {
  685|     24|        scn::detail::construct_at(unexpected_ptr(),
  686|     24|                                  std::forward<Args>(args)...);
  687|     24|        m_has_value = false;
  688|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     72|    {
  714|     72|        return reinterpret_cast<unexpected<E>*>(
  715|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     72|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     24|    {
 1148|     24|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1568|     24|    {
 1569|     24|        return has_value();
 1570|     24|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     72|    {
  671|     72|        return m_has_value;
  672|     72|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1574|     24|    {
 1575|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     24|        return this->get_unexpected().error();
 1577|     24|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     24|    {
  654|     24|        return *unexpected_ptr();
  655|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|     24|    {
  627|     24|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 24]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     24|        else {
  631|     24|            destroy_unexpected();
  632|     24|        }
  633|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     24|    {
  696|     24|        scn::detail::destroy_at(unexpected_ptr());
  697|     24|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   107k|    {
 2826|   107k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   107k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   107k|    {
 2807|   107k|        return t.data();
 2808|   107k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  5.75k|    {
 1401|  5.75k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.75k|    {
  433|  5.75k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|   243k|    {
 1447|   243k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   243k|    {
  443|   243k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   246k|    {
 1148|   246k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  2.91k|    {
 1401|  2.91k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  2.91k|    {
  433|  2.91k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|  11.0k|{
 1182|  11.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  11.0k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1807|    364|    {
 1808|    364|        return detail::transform_error_impl(std::move(*this),
 1809|    364|                                            std::forward<F>(f));
 1810|    364|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1293|    364|{
 1294|    364|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    364|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    364|        if (SCN_LIKELY(exp.has_value())) {
 1297|    364|            return result(*std::forward<Exp>(exp));
 1298|    364|        }
 1299|       |
 1300|    364|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    364|        return result(unexpect, monostate{});
 1302|    364|    }
 1303|    364|    else {
 1304|    364|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    364|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    364|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 364, False: 0]
  |  |  ------------------
  ------------------
 1306|    364|                   ? result(*std::forward<Exp>(exp))
 1307|    364|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    364|    }
 1311|    364|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1400|    364|    {
 1401|    364|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    364|    {
  433|    364|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    364|    {
 1148|    364|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|    364|    {
 1569|    364|        return has_value();
 1570|    364|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    728|    {
  481|    728|        return m_has_value;
  482|    728|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1633|    364|    {
 1634|    364|        return std::move(value());
 1635|    364|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1597|    364|    {
 1598|    364|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    364|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    364|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    364|        return this->get_value();
 1600|    364|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    364|    {
  447|    364|        return m_value;
  448|    364|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1793|    728|    {
 1794|    728|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|    728|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1293|    728|{
 1294|    728|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    728|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    728|        if (SCN_LIKELY(exp.has_value())) {
 1297|    728|            return result(*std::forward<Exp>(exp));
 1298|    728|        }
 1299|       |
 1300|    728|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    728|        return result(unexpect, monostate{});
 1302|    728|    }
 1303|    728|    else {
 1304|    728|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    728|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    728|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 728]
  |  |  ------------------
  ------------------
 1306|    728|                   ? result(*std::forward<Exp>(exp))
 1307|    728|                   : result(unexpect,
 1308|    728|                            trivial_invoke(std::forward<F>(f),
 1309|    728|                                           std::forward<Exp>(exp).error()));
 1310|    728|    }
 1311|    728|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1623|    762|    {
 1624|    762|        return value();
 1625|    762|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3638|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|    362|    {
 2695|    362|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|    362|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|    362|    {
 2676|    362|        return decay_copy(t.begin());
 2677|    362|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3638|    352|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|    928|    {
 1808|    928|        return detail::transform_error_impl(std::move(*this),
 1809|    928|                                            std::forward<F>(f));
 1810|    928|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|    928|{
 1294|    928|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    928|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    928|        if (SCN_LIKELY(exp.has_value())) {
 1297|    928|            return result(*std::forward<Exp>(exp));
 1298|    928|        }
 1299|       |
 1300|    928|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    928|        return result(unexpect, monostate{});
 1302|    928|    }
 1303|    928|    else {
 1304|    928|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    928|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    928|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 928, False: 0]
  |  |  ------------------
  ------------------
 1306|    928|                   ? result(*std::forward<Exp>(exp))
 1307|    928|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    928|    }
 1311|    928|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|    928|    {
 1401|    928|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    928|    {
  433|    928|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    928|    {
 1148|    928|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|    928|    {
 1569|    928|        return has_value();
 1570|    928|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.85k|    {
  481|  1.85k|        return m_has_value;
  482|  1.85k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|    928|    {
 1634|    928|        return std::move(value());
 1635|    928|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|    928|    {
 1598|    928|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    928|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    928|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    928|        return this->get_value();
 1600|    928|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    928|    {
  447|    928|        return m_value;
  448|    928|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|    962|    {
 1794|    962|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|    962|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|    962|{
 1294|    962|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    962|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    962|        if (SCN_LIKELY(exp.has_value())) {
 1297|    962|            return result(*std::forward<Exp>(exp));
 1298|    962|        }
 1299|       |
 1300|    962|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    962|        return result(unexpect, monostate{});
 1302|    962|    }
 1303|    962|    else {
 1304|    962|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    962|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    962|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 962]
  |  |  ------------------
  ------------------
 1306|    962|                   ? result(*std::forward<Exp>(exp))
 1307|    962|                   : result(unexpect,
 1308|    962|                            trivial_invoke(std::forward<F>(f),
 1309|    962|                                           std::forward<Exp>(exp).error()));
 1310|    962|    }
 1311|    962|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|    962|    {
 3619|    962|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  10.0k|    {
 1624|  10.0k|        return value();
 1625|  10.0k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6657|  3.45k|{
 6658|  3.45k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  3.45k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  3.45k|    auto start = begin;
 6662|  3.45k|    ++begin;
 6663|       |
 6664|  3.45k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  3.45k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 408, False: 3.04k]
  ------------------
 6671|    408|        handler.on_charset_inverted();
 6672|    408|        ++begin;
 6673|    408|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|    408|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 6, False: 402]
  ------------------
 6680|      6|            handler.on_charset_single(char32_t{']'});
 6681|      6|            ++begin;
 6682|      6|        }
 6683|    408|    }
 6684|  3.04k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 3.04k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|   738k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 738k, False: 0]
  ------------------
 6689|   738k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 738k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|   738k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 3.45k, False: 735k]
  ------------------
 6694|  3.45k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  3.45k|        }
 6696|       |
 6697|   735k|        parse_presentation_set_literal(begin, end, handler);
 6698|   735k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  3.45k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6621|   735k|{
 6622|   735k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|   735k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|   735k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 735k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|   735k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 735k, False: 0]
  |  Branch (6629:25): [True: 3.46k, False: 731k]
  |  Branch (6629:49): [True: 3.46k, False: 0]
  ------------------
 6630|   735k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 3.39k, False: 66]
  ------------------
 6631|  3.39k|        ++begin;
 6632|       |
 6633|  3.39k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  3.39k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.39k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  3.39k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.39k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  3.39k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  3.39k|        return;
 6647|  3.39k|    }
 6648|       |
 6649|   731k|    handler.on_charset_single(cp_first);
 6650|   731k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6597|   738k|{
 6598|   738k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   738k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   738k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|   738k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|   738k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 738k]
  |  |  |  Branch (859:45): [True: 0, False: 738k]
  |  |  |  Branch (859:45): [True: 0, False: 738k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|   738k|    const auto cp =
 6607|   738k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|   738k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 738k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|   738k|    begin += len;
 6614|   738k|    return cp;
 6615|   738k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  10.3k|    {
 1148|  10.3k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1400|  10.3k|    {
 1401|  10.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  432|  10.3k|    {
  433|  10.3k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6212|  14.2k|    {
 6213|  14.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6214|  14.2k|                charset_string_size};
 6215|  14.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1400|    762|    {
 1401|    762|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  432|    762|    {
  433|    762|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|  2.41k|    {
 1401|  2.41k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  2.41k|    {
  433|  2.41k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4003|   206k|{
 4004|   206k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4004:19): [Folded - Ignored]
  ------------------
 4005|   206k|        return decode_utf8_code_point_exhaustive_valid(input);
 4006|   206k|    }
 4007|   206k|    else if constexpr (sizeof(CharT) == 2) {
 4008|   206k|        return decode_utf16_code_point_exhaustive_valid(input);
 4009|   206k|    }
 4010|   206k|    else {
 4011|   206k|        SCN_EXPECT(input.size() == 1);
 4012|   206k|        return static_cast<char32_t>(input.front());
 4013|   206k|    }
 4014|   206k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3881|  22.3k|    const auto is_trailing_code_unit = [](char ch) {
 3882|  22.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|  22.3k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6147|    388|    {
 6148|    388|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    388|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    388|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6149|    388|        CharT r{};
 6150|    388|        std::memcpy(&r, m_data, m_size);
 6151|    388|        return r;
 6152|    388|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   309M|{
 3778|   309M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   309M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   309M|    }
 3781|   309M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   309M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   309M|    }
 3784|   309M|    else {
 3785|       |        // utf-32
 3786|   309M|        static_assert(sizeof(U) == 4);
 3787|   309M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   309M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   309M|        return 1;
 3789|   309M|    }
 3790|   309M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   309M|{
 3984|   309M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   309M|        return decode_utf8_code_point_exhaustive(input);
 3986|   309M|    }
 3987|   309M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   309M|        return decode_utf16_code_point_exhaustive(input);
 3989|   309M|    }
 3990|   309M|    else {
 3991|   309M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   309M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   309M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   309M|        auto cp = static_cast<char32_t>(input.front());
 3993|   309M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   309M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.8k, False: 309M]
  |  |  ------------------
  ------------------
 3994|  73.8k|            return invalid_code_point;
 3995|  73.8k|        }
 3996|   309M|        return cp;
 3997|   309M|    }
 3998|   309M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|   135k|{
 3670|   135k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|   135k|                                          decltype(first), decltype(last)> &&
 3672|   135k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|   135k|        return {first, last};
 3674|   135k|    }
 3675|   135k|    else {
 3676|   135k|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|   135k|                                       to_address(first), to_address(last)))};
 3678|   135k|    }
 3679|   135k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   407k|{
  322|   407k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   407k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   407k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   409k|{
  302|   409k|    return p;
  303|   409k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  7.14k|{
 3701|  7.14k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  7.14k|                      typename std::basic_string_view<CharT>::iterator,
 3703|  7.14k|                      decltype(it)> &&
 3704|  7.14k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  7.14k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.14k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  7.14k|        return it;
 3707|  7.14k|    }
 3708|  7.14k|    else {
 3709|  7.14k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  7.14k|    }
 3711|  7.14k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.64k|{
  322|  1.64k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.64k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|   125k|    {
 3317|   125k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|   125k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    156|    {
 1447|    156|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    156|    {
  443|    156|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   205k|    {
 1148|   205k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|   205k|    {
 1401|   205k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   205k|    {
  433|   205k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|  56.3k|    {
 1569|  56.3k|        return has_value();
 1570|  56.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   355k|    {
  481|   355k|        return m_has_value;
  482|   355k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|   149k|    {
 1598|   149k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   149k|        return this->get_value();
 1600|   149k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   149k|    {
  447|   149k|        return m_value;
  448|   149k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  4.29k|    {
 1148|  4.29k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  4.29k|    {
 1401|  4.29k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  4.29k|    {
  433|  4.29k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  93.1k|    {
 1808|  93.1k|        return detail::transform_error_impl(std::move(*this),
 1809|  93.1k|                                            std::forward<F>(f));
 1810|  93.1k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  93.1k|{
 1294|  93.1k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  93.1k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  93.1k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  93.1k|            return result(*std::forward<Exp>(exp));
 1298|  93.1k|        }
 1299|       |
 1300|  93.1k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  93.1k|        return result(unexpect, monostate{});
 1302|  93.1k|    }
 1303|  93.1k|    else {
 1304|  93.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  93.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  93.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 93.1k, False: 0]
  |  |  ------------------
  ------------------
 1306|  93.1k|                   ? result(*std::forward<Exp>(exp))
 1307|  93.1k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  93.1k|    }
 1311|  93.1k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|   149k|    {
 1634|   149k|        return std::move(value());
 1635|   149k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|    156|    {
 1585|    156|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    156|        return std::move(this->get_unexpected().error());
 1587|    156|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    156|    {
  464|    156|        return m_unexpected;
  465|    156|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  9.38k|    {
 1457|  9.38k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|  4.29k|    {
 1569|  4.29k|        return has_value();
 1570|  4.29k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  8.58k|    {
  481|  8.58k|        return m_has_value;
  482|  8.58k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  4.29k|    {
 1634|  4.29k|        return std::move(value());
 1635|  4.29k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  4.29k|    {
 1598|  4.29k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  4.29k|        return this->get_value();
 1600|  4.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  4.29k|    {
  447|  4.29k|        return m_value;
  448|  4.29k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  9.53k|    {
 1447|  9.53k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  9.69k|    {
  443|  9.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   178k|    {
 1148|   178k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   112k|    {
 1447|   112k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|   112k|    {
  443|   112k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|   187k|    {
 1569|   187k|        return has_value();
 1570|   187k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|   309k|    {
  481|   309k|        return m_has_value;
  482|   309k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|  56.4k|    {
 1575|  56.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  56.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  56.4k|        return this->get_unexpected().error();
 1577|  56.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  56.4k|    {
  464|  56.4k|        return m_unexpected;
  465|  56.4k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  37.5k|    {
 1401|  37.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  37.5k|    {
  433|  37.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  37.5k|    {
 1148|  37.5k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  56.1k|    {
 1598|  56.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  56.1k|        return this->get_value();
 1600|  56.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  56.1k|    {
  447|  56.1k|        return m_value;
  448|  56.1k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  28.1k|    {
 1569|  28.1k|        return has_value();
 1570|  28.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  75.0k|    {
  481|  75.0k|        return m_has_value;
  482|  75.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  28.1k|    {
 1148|  28.1k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  37.5k|    {
 1634|  37.5k|        return std::move(value());
 1635|  37.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  37.5k|    {
 1598|  37.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  37.5k|        return this->get_value();
 1600|  37.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  37.5k|    {
  447|  37.5k|        return m_value;
  448|  37.5k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  56.3k|    {
 1808|  56.3k|        return detail::transform_error_impl(std::move(*this),
 1809|  56.3k|                                            std::forward<F>(f));
 1810|  56.3k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  56.3k|{
 1294|  56.3k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  56.3k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  56.3k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  56.3k|            return result(*std::forward<Exp>(exp));
 1298|  56.3k|        }
 1299|       |
 1300|  56.3k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  56.3k|        return result(unexpect, monostate{});
 1302|  56.3k|    }
 1303|  56.3k|    else {
 1304|  56.3k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  56.3k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  56.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 56.1k, False: 156]
  |  |  ------------------
  ------------------
 1306|  56.3k|                   ? result(*std::forward<Exp>(exp))
 1307|  56.3k|                   : result(unexpect,
 1308|    156|                            trivial_invoke(std::forward<F>(f),
 1309|    156|                                           std::forward<Exp>(exp).error()));
 1310|  56.3k|    }
 1311|  56.3k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  56.1k|    {
 1401|  56.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  56.1k|    {
  433|  56.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|    156|    {
 1457|    156|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  56.1k|    {
 1634|  56.1k|        return std::move(value());
 1635|  56.1k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|  28.1k|    {
 1401|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  28.1k|    {
  433|  28.1k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  28.1k|    {
 1808|  28.1k|        return detail::transform_error_impl(std::move(*this),
 1809|  28.1k|                                            std::forward<F>(f));
 1810|  28.1k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|  28.1k|{
 1294|  28.1k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  28.1k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  28.1k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  28.1k|            return result(*std::forward<Exp>(exp));
 1298|  28.1k|        }
 1299|       |
 1300|  28.1k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  28.1k|        return result(unexpect, monostate{});
 1302|  28.1k|    }
 1303|  28.1k|    else {
 1304|  28.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  28.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  28.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.1k, False: 0]
  |  |  ------------------
  ------------------
 1306|  28.1k|                   ? result(*std::forward<Exp>(exp))
 1307|  28.1k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  28.1k|    }
 1311|  28.1k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|  56.3k|    {
  481|  56.3k|        return m_has_value;
  482|  56.3k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|  28.1k|    {
 1634|  28.1k|        return std::move(value());
 1635|  28.1k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|  28.1k|    {
 1598|  28.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  28.1k|        return this->get_value();
 1600|  28.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|  28.1k|    {
  447|  28.1k|        return m_value;
  448|  28.1k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  28.1k|    {
 1401|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  28.1k|    {
  433|  28.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  28.1k|    {
 1148|  28.1k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1568|  28.1k|    {
 1569|  28.1k|        return has_value();
 1570|  28.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|  56.3k|    {
  481|  56.3k|        return m_has_value;
  482|  56.3k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  28.1k|    {
 1634|  28.1k|        return std::move(value());
 1635|  28.1k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  28.1k|    {
 1598|  28.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  28.1k|        return this->get_value();
 1600|  28.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|  28.1k|    {
  447|  28.1k|        return m_value;
  448|  28.1k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|     12|    {
 1447|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  621|     12|    {
  622|     12|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  684|     12|    {
  685|     12|        scn::detail::construct_at(unexpected_ptr(),
  686|     12|                                  std::forward<Args>(args)...);
  687|     12|        m_has_value = false;
  688|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     36|    {
  714|     36|        return reinterpret_cast<unexpected<E>*>(
  715|     36|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     36|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     36|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     12|    {
 1148|     12|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|     12|    {
 1569|     12|        return has_value();
 1570|     12|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|     36|    {
  671|     36|        return m_has_value;
  672|     36|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1574|     12|    {
 1575|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     12|        return this->get_unexpected().error();
 1577|     12|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     12|    {
  654|     12|        return *unexpected_ptr();
  655|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|     12|    {
  627|     12|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 12]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     12|        else {
  631|     12|            destroy_unexpected();
  632|     12|        }
  633|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     12|    {
  696|     12|        scn::detail::destroy_at(unexpected_ptr());
  697|     12|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  69.3k|    {
 2826|  69.3k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  69.3k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  69.3k|    {
 2807|  69.3k|        return t.data();
 2808|  69.3k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|  69.3k|    {
 3192|  69.3k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 2.59k, False: 66.7k]
  ------------------
 3193|  69.3k|                   ? nullptr
 3194|  69.3k|                   : std::addressof(*ranges::begin(derived()));
 3195|  69.3k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  69.3k|    {
 2976|  69.3k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  69.3k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  69.3k|    {
 2949|  69.3k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  69.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  69.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|  69.3k|    {
 3310|  69.3k|        return m_iterator == m_sentinel;
 3311|  69.3k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|   136k|    {
 3151|   136k|        return static_cast<D&>(*this);
 3152|   136k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  66.7k|    {
 2695|  66.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  66.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  66.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  66.7k|    {
 2676|  66.7k|        return decay_copy(t.begin());
 2677|  66.7k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  1.01k|    {
 1401|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.01k|    {
  433|  1.01k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|  9.37k|    {
 1808|  9.37k|        return detail::transform_error_impl(std::move(*this),
 1809|  9.37k|                                            std::forward<F>(f));
 1810|  9.37k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|  9.37k|{
 1294|  9.37k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  9.37k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  9.37k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  9.37k|            return result(*std::forward<Exp>(exp));
 1298|  9.37k|        }
 1299|       |
 1300|  9.37k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  9.37k|        return result(unexpect, monostate{});
 1302|  9.37k|    }
 1303|  9.37k|    else {
 1304|  9.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  9.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.37k, False: 0]
  |  |  ------------------
  ------------------
 1306|  9.37k|                   ? result(*std::forward<Exp>(exp))
 1307|  9.37k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  9.37k|    }
 1311|  9.37k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  9.37k|    {
 1401|  9.37k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  9.37k|    {
  433|  9.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.37k|    {
 1148|  9.37k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  9.37k|    {
 1569|  9.37k|        return has_value();
 1570|  9.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  18.7k|    {
  481|  18.7k|        return m_has_value;
  482|  18.7k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  9.37k|    {
 1634|  9.37k|        return std::move(value());
 1635|  9.37k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  9.37k|    {
 1598|  9.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  9.37k|        return this->get_value();
 1600|  9.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  9.37k|    {
  447|  9.37k|        return m_value;
  448|  9.37k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|  9.38k|    {
 1794|  9.38k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  9.38k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|  9.38k|{
 1294|  9.38k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  9.38k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  9.38k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  9.38k|            return result(*std::forward<Exp>(exp));
 1298|  9.38k|        }
 1299|       |
 1300|  9.38k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  9.38k|        return result(unexpect, monostate{});
 1302|  9.38k|    }
 1303|  9.38k|    else {
 1304|  9.38k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  9.38k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.38k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 9.38k]
  |  |  ------------------
  ------------------
 1306|  9.38k|                   ? result(*std::forward<Exp>(exp))
 1307|  9.38k|                   : result(unexpect,
 1308|  9.38k|                            trivial_invoke(std::forward<F>(f),
 1309|  9.38k|                                           std::forward<Exp>(exp).error()));
 1310|  9.38k|    }
 1311|  9.38k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|  9.38k|    {
 3619|  9.38k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  35.9k|    {
 1624|  35.9k|        return value();
 1625|  35.9k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|  10.2k|{
 3625|  10.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  10.2k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|  75.3k|    {
 5427|  75.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.3k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  75.3k|        return static_cast<std::size_t>(m_desc &
 5432|  75.3k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  75.3k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|   137k|    {
 5452|   137k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   137k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|  62.3k|    {
 5395|  62.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 62.3k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  62.3k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 62.2k]
  |  |  ------------------
  ------------------
 5403|     86|            return {};
 5404|     86|        }
 5405|       |
 5406|  62.2k|        const auto t = type(id);
 5407|  62.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 60.7k]
  |  |  ------------------
  ------------------
 5408|  1.48k|            return {};
 5409|  1.48k|        }
 5410|       |
 5411|  60.7k|        basic_scan_arg<Context> arg;
 5412|  60.7k|        arg.m_type = t;
 5413|  60.7k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 60.7k, False: 0]
  ------------------
 5414|  60.7k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  60.7k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  60.7k|        return arg;
 5420|  62.2k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|  62.3k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|   150k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|  62.2k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  62.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  62.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  62.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  62.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|  60.7k|    {
 5456|  60.7k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  60.7k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|   120k|    {
 5208|   120k|        return m_type != detail::arg_type::none_type;
 5209|   120k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  5.92k|{
 8378|  5.92k|#define SCN_VISIT(Type)                                         \
 8379|  5.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  5.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  5.92k|    }                                                           \
 8382|  5.92k|    else {                                                      \
 8383|  5.92k|        return vis(monostate_val);                              \
 8384|  5.92k|    }
 8385|       |
 8386|  5.92k|    monostate monostate_val{};
 8387|       |
 8388|  5.92k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 5.92k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 5.92k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|    658|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 658, False: 5.26k]
  ------------------
 8394|    658|            SCN_VISIT(int);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 5.92k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 5.92k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 5.92k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 5.92k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|    658|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 658, False: 5.26k]
  ------------------
 8404|    658|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 5.92k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 5.92k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|    658|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 658, False: 5.26k]
  ------------------
 8410|    658|            SCN_VISIT(void*);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8411|    658|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 658, False: 5.26k]
  ------------------
 8412|    658|            SCN_VISIT(bool);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8413|    658|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 658, False: 5.26k]
  ------------------
 8414|    658|            SCN_VISIT(char);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 5.92k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 5.92k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 5.92k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|    658|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 658, False: 5.26k]
  ------------------
 8422|    658|            SCN_VISIT(double);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 5.92k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|    658|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 658, False: 5.26k]
  ------------------
 8426|    658|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8427|    658|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 658, False: 5.26k]
  ------------------
 8428|    658|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 5.92k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|    658|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 658, False: 5.26k]
  ------------------
 8432|    658|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|    658|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    658|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    658|    }                                                           \
  |  | 8382|    658|    else {                                                      \
  |  | 8383|    658|        return vis(monostate_val);                              \
  |  | 8384|    658|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 5.92k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 5.92k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.92k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.92k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 5.92k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  5.92k|            SCN_CLANG_POP
 8456|  5.92k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  2.03k|    {
 1808|  2.03k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.03k|                                            std::forward<F>(f));
 1810|  2.03k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  2.03k|{
 1294|  2.03k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.03k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.03k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.03k|            return result(*std::forward<Exp>(exp));
 1298|  2.03k|        }
 1299|       |
 1300|  2.03k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.03k|        return result(unexpect, monostate{});
 1302|  2.03k|    }
 1303|  2.03k|    else {
 1304|  2.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.92k, False: 104]
  |  |  ------------------
  ------------------
 1306|  2.03k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.03k|                   : result(unexpect,
 1308|    104|                            trivial_invoke(std::forward<F>(f),
 1309|    104|                                           std::forward<Exp>(exp).error()));
 1310|  2.03k|    }
 1311|  2.03k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|    104|    {
 1457|    104|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  1.92k|    {
 1634|  1.92k|        return std::move(value());
 1635|  1.92k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|  75.3k|    {
 5506|  75.3k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|  75.3k|    {
 8017|  75.3k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  75.3k|{
 7005|  75.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  75.3k|    handler.check_args_exhausted();
 7007|  75.3k|    return handler.get_error();
 7008|  75.3k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  75.3k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  75.3k|    auto begin = format.data();
 6974|  75.3k|    auto it = begin;
 6975|  75.3k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   285k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 278k, False: 6.92k]
  ------------------
 6978|   278k|        const auto ch = *it++;
 6979|   278k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 79.5k, False: 198k]
  ------------------
 6980|  79.5k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  79.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  79.5k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 66.9k, False: 12.6k]
  ------------------
 6984|  66.9k|                return;
 6985|  66.9k|            }
 6986|  79.5k|        }
 6987|   198k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 2.92k, False: 195k]
  ------------------
 6988|  2.92k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  5.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.45k, False: 1.47k]
  |  |  |  Branch (859:45): [True: 378, False: 2.55k]
  |  |  |  Branch (859:45): [True: 1.07k, False: 1.47k]
  |  |  ------------------
  ------------------
 6989|  1.45k|                handler.on_error("Unmatched '}' in format string");
 6990|  1.45k|                return;
 6991|  1.45k|            }
 6992|       |
 6993|  1.47k|            handler.on_literal_text(begin, it);
 6994|  1.47k|            begin = ++it;
 6995|  1.47k|        }
 6996|   278k|    }
 6997|       |
 6998|  6.92k|    handler.on_literal_text(begin, end);
 6999|  6.92k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|  79.5k|{
 6903|  79.5k|    struct id_adapter {
 6904|  79.5k|        constexpr void operator()()
 6905|  79.5k|        {
 6906|  79.5k|            arg_id = handler.on_arg_id();
 6907|  79.5k|        }
 6908|  79.5k|        constexpr void operator()(std::size_t id)
 6909|  79.5k|        {
 6910|  79.5k|            arg_id = handler.on_arg_id(id);
 6911|  79.5k|        }
 6912|       |
 6913|  79.5k|        constexpr void on_error(const char* msg)
 6914|  79.5k|        {
 6915|  79.5k|            SCN_UNLIKELY_ATTR
 6916|  79.5k|            handler.on_error(msg);
 6917|  79.5k|        }
 6918|       |
 6919|  79.5k|        Handler& handler;
 6920|  79.5k|        std::size_t arg_id;
 6921|  79.5k|    };
 6922|       |
 6923|  79.5k|    ++begin;
 6924|  79.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  79.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 79.5k]
  |  |  ------------------
  ------------------
 6925|     76|        handler.on_error("Unexpected end of replacement field");
 6926|     76|        return begin;
 6927|     76|    }
 6928|       |
 6929|  79.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 5.92k, False: 73.5k]
  ------------------
 6930|  5.92k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|  5.92k|    }
 6932|  73.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 5.17k, False: 68.4k]
  ------------------
 6933|  5.17k|        handler.on_literal_text(begin, begin + 1);
 6934|  5.17k|    }
 6935|  68.4k|    else {
 6936|  68.4k|        auto adapter = id_adapter{handler, 0};
 6937|  68.4k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  68.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 68.2k]
  |  |  ------------------
  ------------------
 6940|    110|            handler.on_error("Missing '}' in format string");
 6941|    110|            return begin;
 6942|    110|        }
 6943|       |
 6944|  68.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 158, False: 68.1k]
  ------------------
 6945|    158|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|    158|        }
 6947|  68.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 56.3k, False: 11.8k]
  ------------------
 6948|  56.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  56.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 56.2k]
  |  |  ------------------
  ------------------
 6949|     74|                handler.on_error("Unexpected end of replacement field");
 6950|     74|                return begin;
 6951|     74|            }
 6952|  56.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  56.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.05k, False: 53.1k]
  |  |  |  Branch (859:45): [True: 0, False: 56.2k]
  |  |  |  Branch (859:45): [True: 3.05k, False: 53.1k]
  |  |  ------------------
  ------------------
 6954|  3.05k|                handler.on_error("Unknown format specifier");
 6955|  3.05k|                return begin;
 6956|  3.05k|            }
 6957|  56.2k|        }
 6958|  11.8k|        else {
 6959|  11.8k|            SCN_UNLIKELY_ATTR
 6960|  11.8k|            handler.on_error("Missing '}' in format string");
 6961|  11.8k|            return begin;
 6962|  11.8k|        }
 6963|  68.2k|    }
 6964|  64.4k|    return begin + 1;
 6965|  79.5k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|  62.3k|    {
 8000|  62.3k|        return m_args.get(id);
 8001|  62.3k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8004|  6.08k|    {
 8005|  6.08k|        return m_args;
 8006|  6.08k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|  58.9k|    {
 8010|  58.9k|        return m_locale;
 8011|  58.9k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|  58.9k|    {
 5527|  58.9k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 58.8k]
  |  |  ------------------
  ------------------
 5528|     42|            on_error(
 5529|     42|                "Cannot switch from manual to automatic argument indexing");
 5530|     42|            return 0;
 5531|     42|        }
 5532|       |
 5533|  58.8k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  58.8k|        do_check_arg_id(id);
 5535|  58.8k|        return id;
 5536|  58.9k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5550|    112|    {
 5551|    112|        return detail::handle_error(
 5552|    112|            scan_error{scan_error::invalid_format_string, msg});
 5553|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|  62.2k|{
 6015|  62.2k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  62.2k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  62.2k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  68.4k|{
 6404|  68.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  68.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 68.4k, False: 0]
  |  Branch (6405:26): [True: 15.4k, False: 52.9k]
  ------------------
 6406|  15.4k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|  15.4k|    }
 6408|       |
 6409|  52.9k|    handler();
 6410|  52.9k|    return begin;
 6411|  68.4k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|  15.4k|{
 6374|  15.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|  15.4k|    CharT c = *begin;
 6377|  15.4k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 11.4k, False: 3.96k]
  |  Branch (6377:27): [True: 258, False: 3.70k]
  ------------------
 6378|  11.7k|        handler.on_error("Invalid argument ID");
 6379|  11.7k|        return begin;
 6380|  11.7k|    }
 6381|       |
 6382|  3.70k|    int idx = 0;
 6383|  3.70k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 354, False: 3.34k]
  ------------------
 6384|    354|        idx = parse_simple_int(begin, end);
 6385|    354|    }
 6386|  3.34k|    else {
 6387|  3.34k|        ++begin;
 6388|  3.34k|    }
 6389|       |
 6390|  3.70k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 110, False: 3.59k]
  |  Branch (6390:26): [True: 3.43k, False: 158]
  |  Branch (6390:50): [True: 84, False: 3.35k]
  ------------------
 6391|    194|        handler.on_error("Invalid argument ID");
 6392|    194|        return begin;
 6393|    194|    }
 6394|  3.50k|    handler(idx);
 6395|       |
 6396|  3.50k|    return begin;
 6397|  3.70k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|  11.9k|        {
 6915|  11.9k|            SCN_UNLIKELY_ATTR
 6916|  11.9k|            handler.on_error(msg);
 6917|  11.9k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6352|  13.2k|{
 6353|  13.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  13.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  13.2k|    unsigned long long value = 0;
 6357|  67.0k|    do {
 6358|  67.0k|        value *= 10;
 6359|  67.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  67.0k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 122, False: 66.9k]
  ------------------
 6361|  67.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|    122|            return -1;
 6363|    122|        }
 6364|  66.9k|        ++begin;
 6365|  66.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 66.6k, False: 282]
  |  Branch (6365:30): [True: 63.3k, False: 3.30k]
  |  Branch (6365:47): [True: 53.8k, False: 9.50k]
  ------------------
 6366|  13.0k|    return static_cast<int>(value);
 6367|  13.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|  3.50k|        {
 6910|  3.50k|            arg_id = handler.on_arg_id(id);
 6911|  3.50k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5539|  3.50k|    {
 5540|  3.50k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  3.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 3.43k]
  |  |  ------------------
  ------------------
 5541|     70|            on_error(
 5542|     70|                "Cannot switch from manual to automatic argument indexing");
 5543|     70|            return;
 5544|     70|        }
 5545|  3.43k|        m_next_arg_id = -1;
 5546|  3.43k|        do_check_arg_id(id);
 5547|  3.43k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  52.9k|        {
 6906|  52.9k|            arg_id = handler.on_arg_id();
 6907|  52.9k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|   112k|    {
 5213|   112k|        return m_type;
 5214|   112k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|  52.8k|    {
 5522|  52.8k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  52.8k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|   109k|    {
 5511|   109k|        return m_format.data();
 5512|   109k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  56.2k|    {
 7083|  56.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  56.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  56.2k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|  56.2k|{
 6819|  56.2k|    auto do_presentation = [&]() -> const CharT* {
 6820|  56.2k|        if (*begin == CharT{'['}) {
 6821|  56.2k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  56.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  56.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  56.2k|                return begin;
 6827|  56.2k|            }
 6828|  56.2k|            handler.on_character_set_string(set);
 6829|  56.2k|            return begin;
 6830|  56.2k|        }
 6831|  56.2k|        if (*begin == CharT{'/'}) {
 6832|  56.2k|            return parse_presentation_regex(begin, end, handler);
 6833|  56.2k|        }
 6834|  56.2k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  56.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  56.2k|            handler.on_error("Invalid type specifier in format string");
 6837|  56.2k|            return begin;
 6838|  56.2k|        }
 6839|  56.2k|        handler.on_type(type);
 6840|  56.2k|        return begin;
 6841|  56.2k|    };
 6842|       |
 6843|  56.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 55.1k, False: 1.10k]
  |  Branch (6843:28): [True: 2.31k, False: 52.8k]
  ------------------
 6844|  56.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 968, False: 1.34k]
  |  Branch (6844:36): [True: 916, False: 52]
  ------------------
 6845|    916|        return do_presentation();
 6846|    916|    }
 6847|       |
 6848|  55.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.3k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  55.3k|    begin = parse_align(begin, end, handler);
 6854|  55.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 55.2k]
  |  |  ------------------
  ------------------
 6855|    118|        handler.on_error("Unexpected end of format string");
 6856|    118|        return begin;
 6857|    118|    }
 6858|       |
 6859|  55.2k|    begin = parse_width(begin, end, handler);
 6860|  55.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 55.0k]
  |  |  ------------------
  ------------------
 6861|    120|        handler.on_error("Unexpected end of format string");
 6862|    120|        return begin;
 6863|    120|    }
 6864|       |
 6865|  55.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 8.34k, False: 46.7k]
  ------------------
 6866|  8.34k|        ++begin;
 6867|  8.34k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 8.31k]
  |  |  ------------------
  ------------------
 6868|     34|            handler.on_error("Unexpected end of format string");
 6869|     34|            return begin;
 6870|     34|        }
 6871|  8.31k|        begin = parse_precision(begin, end, handler);
 6872|  8.31k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 8.22k]
  |  |  ------------------
  ------------------
 6873|     84|            handler.on_error("Unexpected end of format string");
 6874|     84|            return begin;
 6875|     84|        }
 6876|  8.31k|    }
 6877|       |
 6878|  54.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 428, False: 54.5k]
  ------------------
 6879|    428|        handler.on_localized();
 6880|    428|        ++begin;
 6881|    428|    }
 6882|  54.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 54.9k]
  |  |  ------------------
  ------------------
 6883|     52|        handler.on_error("Unexpected end of format string");
 6884|     52|        return begin;
 6885|     52|    }
 6886|       |
 6887|  54.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 54.9k, False: 0]
  |  Branch (6887:25): [True: 49.5k, False: 5.33k]
  ------------------
 6888|  49.5k|        do_presentation();
 6889|  49.5k|    }
 6890|  54.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 52.8k]
  |  |  ------------------
  ------------------
 6891|  2.06k|        handler.on_error("Unexpected end of format string");
 6892|  2.06k|        return begin;
 6893|  2.06k|    }
 6894|       |
 6895|  52.8k|    return begin;
 6896|  54.9k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|  2.31k|{
 6468|  2.31k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 914, False: 1.40k]
  |  Branch (6468:33): [True: 844, False: 70]
  ------------------
 6469|  2.31k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 232, False: 1.24k]
  |  Branch (6469:33): [True: 124, False: 108]
  ------------------
 6470|  2.31k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  50.5k|    auto do_presentation = [&]() -> const CharT* {
 6820|  50.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 13.0k, False: 37.4k]
  ------------------
 6821|  13.0k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  13.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 850, False: 12.2k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|    850|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|    850|                return begin;
 6827|    850|            }
 6828|  12.2k|            handler.on_character_set_string(set);
 6829|  12.2k|            return begin;
 6830|  13.0k|        }
 6831|  37.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 32.8k, False: 4.56k]
  ------------------
 6832|  32.8k|            return parse_presentation_regex(begin, end, handler);
 6833|  32.8k|        }
 6834|  4.56k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  4.56k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 632, False: 3.93k]
  |  |  ------------------
  ------------------
 6836|    632|            handler.on_error("Invalid type specifier in format string");
 6837|    632|            return begin;
 6838|    632|        }
 6839|  3.93k|        handler.on_type(type);
 6840|  3.93k|        return begin;
 6841|  4.56k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  13.0k|{
 6658|  13.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  13.0k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  13.0k|    auto start = begin;
 6662|  13.0k|    ++begin;
 6663|       |
 6664|  13.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 13.0k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     42|        return {};
 6669|     42|    }
 6670|  13.0k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 2.26k, False: 10.7k]
  ------------------
 6671|  2.26k|        handler.on_charset_inverted();
 6672|  2.26k|        ++begin;
 6673|  2.26k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.23k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|     34|            return {};
 6678|     34|        }
 6679|  2.23k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 54, False: 2.17k]
  ------------------
 6680|     54|            handler.on_charset_single(char32_t{']'});
 6681|     54|            ++begin;
 6682|     54|        }
 6683|  2.23k|    }
 6684|  10.7k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 34, False: 10.7k]
  ------------------
 6685|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|     34|    }
 6687|       |
 6688|  2.23M|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 2.23M, False: 526]
  ------------------
 6689|  2.23M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214, False: 2.22M]
  |  |  ------------------
  ------------------
 6690|    214|            break;
 6691|    214|        }
 6692|       |
 6693|  2.22M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 12.2k, False: 2.21M]
  ------------------
 6694|  12.2k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  12.2k|        }
 6696|       |
 6697|  2.21M|        parse_presentation_set_literal(begin, end, handler);
 6698|  2.21M|    }
 6699|       |
 6700|    740|    SCN_UNLIKELY_ATTR
 6701|    740|    handler.on_error("Invalid [character set] specifier in format string");
 6702|    740|    return {};
 6703|  12.9k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6621|  2.21M|{
 6622|  2.21M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  2.21M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  2.21M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 2.21M]
  |  |  ------------------
  ------------------
 6626|    102|        return;
 6627|    102|    }
 6628|       |
 6629|  2.21M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 2.21M, False: 230]
  |  Branch (6629:25): [True: 11.3k, False: 2.20M]
  |  Branch (6629:49): [True: 11.3k, False: 34]
  ------------------
 6630|  2.21M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 11.0k, False: 232]
  ------------------
 6631|  11.0k|        ++begin;
 6632|       |
 6633|  11.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  11.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 10.9k]
  |  |  ------------------
  ------------------
 6635|     70|            return;
 6636|     70|        }
 6637|       |
 6638|  10.9k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 10.9k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|     34|            return;
 6643|     34|        }
 6644|       |
 6645|  10.9k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  10.9k|        return;
 6647|  10.9k|    }
 6648|       |
 6649|  2.20M|    handler.on_charset_single(cp_first);
 6650|  2.20M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6597|  2.22M|{
 6598|  2.22M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  2.22M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  2.22M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 2.22M]
  |  |  |  Branch (859:45): [True: 72, False: 2.22M]
  |  |  |  Branch (859:45): [True: 26, False: 2.22M]
  |  |  ------------------
  ------------------
 6602|     98|        handler.on_error("Invalid encoding in format string");
 6603|     98|        return invalid_code_point;
 6604|     98|    }
 6605|       |
 6606|  2.22M|    const auto cp =
 6607|  2.22M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  2.22M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 2.22M]
  |  |  ------------------
  ------------------
 6609|     74|        handler.on_error("Invalid encoding in format string");
 6610|     74|        return invalid_code_point;
 6611|     74|    }
 6612|       |
 6613|  2.22M|    begin += len;
 6614|  2.22M|    return cp;
 6615|  2.22M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  12.2k|    {
 6307|  12.2k|        m_specs.charset_string_data = fmt.data();
 6308|  12.2k|        m_specs.charset_string_size = fmt.size();
 6309|  12.2k|        on_type(presentation_type::string_set);
 6310|  12.2k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6709|  32.8k|{
 6710|  32.8k|#if !SCN_DISABLE_REGEX
 6711|  32.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|  32.8k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|  32.8k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  65.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|  32.8k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|  32.8k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|  32.8k|        return begin;
 6718|  32.8k|    }
 6719|       |
 6720|  32.8k|    auto start = begin;
 6721|  32.8k|    ++begin;
 6722|       |
 6723|  32.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 32.8k]
  |  |  ------------------
  ------------------
 6724|     34|        handler.on_error("Unexpected end of regex in format string");
 6725|     34|        return begin;
 6726|     34|    }
 6727|       |
 6728|  32.8k|    handler.on_type(presentation_type::regex);
 6729|  7.49M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 7.49M, False: 232]
  ------------------
 6730|  7.49M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 66.5k, False: 7.42M]
  ------------------
 6731|  66.5k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 32.5k, False: 33.9k]
  ------------------
 6732|  32.5k|                break;
 6733|  32.5k|            }
 6734|  33.9k|            else {
 6735|  33.9k|                handler.on_type(presentation_type::regex_escaped);
 6736|  33.9k|            }
 6737|  66.5k|        }
 6738|  7.49M|    }
 6739|  32.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 232, False: 32.5k]
  |  |  ------------------
  ------------------
 6740|    232|        handler.on_error("Unexpected end of regex in format string");
 6741|    232|        return begin;
 6742|    232|    }
 6743|       |
 6744|  32.5k|    auto regex_end = begin;
 6745|  32.5k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|  32.5k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 32.5k]
  |  |  ------------------
  ------------------
 6747|     52|        handler.on_error("Invalid (empty) regex in format string");
 6748|     52|        return begin;
 6749|     52|    }
 6750|  32.5k|    handler.on_regex_pattern(regex_pattern);
 6751|  32.5k|    ++begin;
 6752|       |
 6753|  32.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 32.5k]
  |  |  ------------------
  ------------------
 6754|     34|        handler.on_error("Unexpected end of regex in format string");
 6755|     34|        return begin;
 6756|     34|    }
 6757|       |
 6758|  32.5k|    regex_flags flags{regex_flags::none};
 6759|  32.5k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|  32.5k|        {{'m', regex_flags::multiline},
 6761|  32.5k|         {'s', regex_flags::singleline},
 6762|  32.5k|         {'i', regex_flags::nocase},
 6763|  32.5k|         {'n', regex_flags::nocapture}}};
 6764|  37.5k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 37.5k, False: 58]
  ------------------
 6765|  37.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 32.2k, False: 5.24k]
  ------------------
 6766|  32.2k|            break;
 6767|  32.2k|        }
 6768|  5.24k|        bool found_flag = false;
 6769|  14.1k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 14.1k, False: 130]
  ------------------
 6770|  14.1k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 9.04k, False: 5.11k]
  ------------------
 6771|  9.04k|                continue;
 6772|  9.04k|            }
 6773|  5.11k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 34, False: 5.08k]
  ------------------
 6774|     34|                handler.on_error("Flag set multiple times in regex");
 6775|     34|                return begin;
 6776|     34|            }
 6777|  5.08k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|  5.08k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 48, False: 5.03k]
  ------------------
 6779|       |                // clang-format off
 6780|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|     48|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|  5.08k|#endif
 6791|  5.08k|            flags |= flag.second;
 6792|  5.08k|            found_flag = true;
 6793|  5.08k|            break;
 6794|  5.11k|        }
 6795|  5.21k|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 130, False: 5.08k]
  ------------------
 6796|    130|            handler.on_error("Invalid flag in regex");
 6797|    130|            return begin;
 6798|    130|        }
 6799|  5.21k|    }
 6800|  32.3k|    handler.on_regex_flags(flags);
 6801|       |
 6802|  32.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 32.2k]
  |  |  ------------------
  ------------------
 6803|     58|        handler.on_error("Unexpected end of regex in format string");
 6804|     58|        return begin;
 6805|     58|    }
 6806|       |
 6807|  32.2k|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|  32.3k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|  32.5k|    {
 6315|  32.5k|        m_specs.charset_string_data = pattern.data();
 6316|  32.5k|        m_specs.charset_string_size = pattern.size();
 6317|  32.5k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|  4.56k|{
 6416|  4.56k|    switch (type) {
 6417|    142|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 142, False: 4.42k]
  ------------------
 6418|    194|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 52, False: 4.51k]
  ------------------
 6419|    194|            return presentation_type::int_binary;
 6420|    216|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 216, False: 4.35k]
  ------------------
 6421|    216|            return presentation_type::int_decimal;
 6422|    178|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 178, False: 4.39k]
  ------------------
 6423|    178|            return presentation_type::int_generic;
 6424|     88|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 88, False: 4.48k]
  ------------------
 6425|     88|            return presentation_type::int_unsigned_decimal;
 6426|    124|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 124, False: 4.44k]
  ------------------
 6427|    124|            return presentation_type::int_octal;
 6428|     66|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 66, False: 4.50k]
  ------------------
 6429|    100|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 34, False: 4.53k]
  ------------------
 6430|    100|            return presentation_type::int_hex;
 6431|     34|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 34, False: 4.53k]
  ------------------
 6432|     68|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 34, False: 4.53k]
  ------------------
 6433|     68|            return presentation_type::int_arbitrary_base;
 6434|    106|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 106, False: 4.46k]
  ------------------
 6435|    194|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 88, False: 4.48k]
  ------------------
 6436|    194|            return presentation_type::float_hex;
 6437|    106|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 106, False: 4.46k]
  ------------------
 6438|    158|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 52, False: 4.51k]
  ------------------
 6439|    158|            return presentation_type::float_scientific;
 6440|    232|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 232, False: 4.33k]
  ------------------
 6441|    356|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 124, False: 4.44k]
  ------------------
 6442|    356|            return presentation_type::float_fixed;
 6443|     78|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 78, False: 4.49k]
  ------------------
 6444|    136|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 58, False: 4.51k]
  ------------------
 6445|    136|            return presentation_type::float_general;
 6446|  1.56k|        case 's':
  ------------------
  |  Branch (6446:9): [True: 1.56k, False: 3.00k]
  ------------------
 6447|  1.56k|            return presentation_type::string;
 6448|    430|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 430, False: 4.13k]
  ------------------
 6449|    430|            return presentation_type::character;
 6450|     34|        case '?':
  ------------------
  |  Branch (6450:9): [True: 34, False: 4.53k]
  ------------------
 6451|     34|            return presentation_type::escaped_character;
 6452|     96|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 96, False: 4.47k]
  ------------------
 6453|     96|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 4.56k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 4.56k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|    632|        default:
  ------------------
  |  Branch (6460:9): [True: 632, False: 3.93k]
  ------------------
 6461|    632|            return presentation_type::none;
 6462|  4.56k|    }
 6463|  4.56k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|  55.3k|{
 6493|  55.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  55.3k|    auto check_align = [](wchar_t ch) {
 6496|  55.3k|        switch (ch) {
 6497|  55.3k|            case L'<':
 6498|  55.3k|                return align_type::left;
 6499|  55.3k|            case L'>':
 6500|  55.3k|                return align_type::right;
 6501|  55.3k|            case L'^':
 6502|  55.3k|                return align_type::center;
 6503|  55.3k|            default:
 6504|  55.3k|                return align_type::none;
 6505|  55.3k|        }
 6506|  55.3k|    };
 6507|       |
 6508|  55.3k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  55.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 55.2k]
  |  |  |  Branch (859:45): [True: 38, False: 55.2k]
  |  |  |  Branch (859:45): [True: 4, False: 55.2k]
  |  |  ------------------
  ------------------
 6510|  55.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|     42|        handler.on_error("Invalid encoding in fill character");
 6512|     42|        return begin;
 6513|     42|    }
 6514|       |
 6515|  55.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  55.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  55.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  55.2k|    const auto begin_before_fill = begin;
 6520|  55.2k|    begin += potential_fill_len;
 6521|       |
 6522|  55.2k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 1.06k, False: 54.2k]
  ------------------
 6523|  1.06k|        return begin_before_fill;
 6524|  1.06k|    }
 6525|       |
 6526|  54.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  54.2k|    const auto begin_after_fill = begin;
 6528|  54.2k|    ++begin;
 6529|       |
 6530|  54.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 53.3k, False: 860]
  ------------------
 6531|  53.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 53.2k]
  |  |  ------------------
  ------------------
 6532|    108|            handler.on_error("Invalid fill character '{' in format string");
 6533|    108|            return begin;
 6534|    108|        }
 6535|  53.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 9.98k, False: 43.2k]
  ------------------
 6536|  9.98k|            return begin_before_fill;
 6537|  9.98k|        }
 6538|  53.2k|    }
 6539|       |
 6540|  44.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 39.6k, False: 4.44k]
  ------------------
 6541|  39.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 3.44k, False: 36.2k]
  ------------------
 6542|  3.44k|            handler.on_align(potential_align_on_fill);
 6543|  3.44k|            return begin_after_fill;
 6544|  3.44k|        }
 6545|  36.2k|        return begin_before_fill;
 6546|  39.6k|    }
 6547|       |
 6548|  4.44k|    handler.on_fill(potential_fill);
 6549|  4.44k|    handler.on_align(potential_align_after_fill);
 6550|  4.44k|    return begin;
 6551|  44.1k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|  55.3k|{
 6475|  55.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  55.3k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  55.3k|        return 1;
 6478|  55.3k|    }
 6479|  55.3k|    else {
 6480|  55.3k|        const auto lengths =
 6481|  55.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  55.3k|            "\3\4";
 6483|  55.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  55.3k|        return len;
 6485|  55.3k|    }
 6486|  55.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|   109k|    auto check_align = [](wchar_t ch) {
 6496|   109k|        switch (ch) {
 6497|    944|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 944, False: 108k]
  ------------------
 6498|    944|                return align_type::left;
 6499|  2.12k|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 2.12k, False: 107k]
  ------------------
 6500|  2.12k|                return align_type::right;
 6501|  6.33k|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 6.33k, False: 103k]
  ------------------
 6502|  6.33k|                return align_type::center;
 6503|   100k|            default:
  ------------------
  |  Branch (6503:13): [True: 100k, False: 9.40k]
  ------------------
 6504|   100k|                return align_type::none;
 6505|   109k|        }
 6506|   109k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|  4.44k|    {
 6229|  4.44k|        m_specs.fill = fill;
 6230|  4.44k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|  4.44k|    {
 6110|  4.44k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  4.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|  4.44k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  4.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|  4.44k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|  10.3k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6113:32): [True: 5.89k, False: 4.44k]
  ------------------
 6114|  5.89k|                SCN_GCC_PUSH
 6115|  5.89k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|  5.89k|                m_data[i] = s[i];
 6117|  5.89k|                SCN_GCC_POP
 6118|  5.89k|            }
 6119|  4.44k|            m_size = static_cast<unsigned char>(s.size());
 6120|  4.44k|        }
 6121|  4.44k|        else if constexpr (sizeof(CharT) == 2) {
 6122|  4.44k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|  4.44k|            m_data[1] =
 6124|  4.44k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|  4.44k|            if (s.size() == 1) {
 6126|  4.44k|                return;
 6127|  4.44k|            }
 6128|  4.44k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|  4.44k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|  4.44k|        }
 6131|  4.44k|        else {
 6132|  4.44k|            const auto front = static_cast<unsigned>(s.front());
 6133|  4.44k|            m_data[0] = static_cast<char>(front);
 6134|  4.44k|            m_data[1] = static_cast<char>(front >> 8);
 6135|  4.44k|            m_data[2] = static_cast<char>(front >> 16);
 6136|  4.44k|            m_data[3] = static_cast<char>(front >> 24);
 6137|  4.44k|        }
 6138|  4.44k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|  55.2k|{
 6558|  55.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  55.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 16.9k, False: 38.3k]
  |  Branch (6560:33): [True: 4.61k, False: 12.2k]
  ------------------
 6561|  4.61k|        int width = parse_simple_int(begin, end);
 6562|  4.61k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.61k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.58k, False: 34]
  |  |  ------------------
  ------------------
 6563|  4.58k|            handler.on_width(width);
 6564|  4.58k|        }
 6565|     34|        else {
 6566|     34|            handler.on_error("Invalid field width");
 6567|     34|            return begin;
 6568|     34|        }
 6569|  4.61k|    }
 6570|  55.1k|    return begin;
 6571|  55.2k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6577|  8.31k|{
 6578|  8.31k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6579|       |
 6580|  8.31k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6580:9): [True: 8.27k, False: 34]
  |  Branch (6580:33): [True: 8.23k, False: 40]
  ------------------
 6581|  8.23k|        int prec = parse_simple_int(begin, end);
 6582|  8.23k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  8.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.18k, False: 54]
  |  |  ------------------
  ------------------
 6583|  8.18k|            handler.on_precision(prec);
 6584|  8.18k|        }
 6585|     54|        else {
 6586|     54|            handler.on_error("Invalid field precision");
 6587|     54|            return begin;
 6588|     54|        }
 6589|  8.23k|    }
 6590|  8.25k|    return begin;
 6591|  8.31k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|    428|    {
 7088|    428|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    428|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 386, False: 42]
  ------------------
 7090|    428|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 344, False: 42]
  ------------------
 7091|    428|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 302, False: 42]
  ------------------
 7092|    428|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 260, False: 42]
  ------------------
 7093|    260|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|    260|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|    260|        }
 7098|       |
 7099|    168|        Handler::on_localized();
 7100|    168|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  52.7k|{
 8378|  52.7k|#define SCN_VISIT(Type)                                         \
 8379|  52.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  52.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  52.7k|    }                                                           \
 8382|  52.7k|    else {                                                      \
 8383|  52.7k|        return vis(monostate_val);                              \
 8384|  52.7k|    }
 8385|       |
 8386|  52.7k|    monostate monostate_val{};
 8387|       |
 8388|  52.7k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 52.7k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 52.7k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|  5.87k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 5.87k, False: 46.8k]
  ------------------
 8394|  5.87k|            SCN_VISIT(int);
  ------------------
  |  | 8379|  5.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.87k|    }                                                           \
  |  | 8382|  5.87k|    else {                                                      \
  |  | 8383|  5.87k|        return vis(monostate_val);                              \
  |  | 8384|  5.87k|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 52.7k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 52.7k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 52.7k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 52.7k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|  5.87k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 5.87k, False: 46.8k]
  ------------------
 8404|  5.87k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|  5.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.87k|    }                                                           \
  |  | 8382|  5.87k|    else {                                                      \
  |  | 8383|  5.87k|        return vis(monostate_val);                              \
  |  | 8384|  5.87k|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 52.7k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 52.7k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|  5.84k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 5.84k, False: 46.8k]
  ------------------
 8410|  5.84k|            SCN_VISIT(void*);
  ------------------
  |  | 8379|  5.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.84k|    }                                                           \
  |  | 8382|  5.84k|    else {                                                      \
  |  | 8383|  5.84k|        return vis(monostate_val);                              \
  |  | 8384|  5.84k|    }
  ------------------
 8411|  5.87k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 5.87k, False: 46.8k]
  ------------------
 8412|  5.87k|            SCN_VISIT(bool);
  ------------------
  |  | 8379|  5.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.87k|    }                                                           \
  |  | 8382|  5.87k|    else {                                                      \
  |  | 8383|  5.87k|        return vis(monostate_val);                              \
  |  | 8384|  5.87k|    }
  ------------------
 8413|  5.84k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 5.84k, False: 46.8k]
  ------------------
 8414|  5.84k|            SCN_VISIT(char);
  ------------------
  |  | 8379|  5.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.84k|    }                                                           \
  |  | 8382|  5.84k|    else {                                                      \
  |  | 8383|  5.84k|        return vis(monostate_val);                              \
  |  | 8384|  5.84k|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 52.7k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 52.7k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 52.7k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|  5.87k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 5.87k, False: 46.8k]
  ------------------
 8422|  5.87k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  5.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.87k|    }                                                           \
  |  | 8382|  5.87k|    else {                                                      \
  |  | 8383|  5.87k|        return vis(monostate_val);                              \
  |  | 8384|  5.87k|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 52.7k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  5.84k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 5.84k, False: 46.8k]
  ------------------
 8426|  5.84k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  5.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.84k|    }                                                           \
  |  | 8382|  5.84k|    else {                                                      \
  |  | 8383|  5.84k|        return vis(monostate_val);                              \
  |  | 8384|  5.84k|    }
  ------------------
 8427|  5.84k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 5.84k, False: 46.8k]
  ------------------
 8428|  5.84k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  5.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.84k|    }                                                           \
  |  | 8382|  5.84k|    else {                                                      \
  |  | 8383|  5.84k|        return vis(monostate_val);                              \
  |  | 8384|  5.84k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 52.7k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  5.84k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 5.84k, False: 46.8k]
  ------------------
 8432|  5.84k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  5.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.84k|    }                                                           \
  |  | 8382|  5.84k|    else {                                                      \
  |  | 8383|  5.84k|        return vis(monostate_val);                              \
  |  | 8384|  5.84k|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 52.7k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 52.7k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 52.7k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 52.7k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 52.7k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  52.7k|            SCN_CLANG_POP
 8456|  52.7k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|   150k|    {
 5427|   150k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   150k|        return static_cast<std::size_t>(m_desc &
 5432|   150k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   150k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|   238k|    {
 5452|   238k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   238k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|  87.9k|    {
 5395|  87.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.9k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  87.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 87.8k]
  |  |  ------------------
  ------------------
 5403|    128|            return {};
 5404|    128|        }
 5405|       |
 5406|  87.8k|        const auto t = type(id);
 5407|  87.8k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  87.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.39k, False: 86.4k]
  |  |  ------------------
  ------------------
 5408|  1.39k|            return {};
 5409|  1.39k|        }
 5410|       |
 5411|  86.4k|        basic_scan_arg<Context> arg;
 5412|  86.4k|        arg.m_type = t;
 5413|  86.4k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 86.4k, False: 0]
  ------------------
 5414|  86.4k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  86.4k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  86.4k|        return arg;
 5420|  87.8k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|  87.9k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|  87.8k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  87.8k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  87.8k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  87.8k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  87.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|  86.4k|    {
 5456|  86.4k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  86.4k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|   172k|    {
 5208|   172k|        return m_type != detail::arg_type::none_type;
 5209|   172k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  80.7k|{
 8378|  80.7k|#define SCN_VISIT(Type)                                         \
 8379|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  80.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  80.7k|    }                                                           \
 8382|  80.7k|    else {                                                      \
 8383|  80.7k|        return vis(monostate_val);                              \
 8384|  80.7k|    }
 8385|       |
 8386|  80.7k|    monostate monostate_val{};
 8387|       |
 8388|  80.7k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 80.7k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 80.7k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|  8.97k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 8.97k, False: 71.7k]
  ------------------
 8394|  8.97k|            SCN_VISIT(int);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 80.7k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 80.7k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 80.7k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 80.7k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|  8.97k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 8.97k, False: 71.7k]
  ------------------
 8404|  8.97k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 80.7k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 80.7k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|  8.97k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 8.97k, False: 71.7k]
  ------------------
 8410|  8.97k|            SCN_VISIT(void*);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8411|  8.97k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 8.97k, False: 71.7k]
  ------------------
 8412|  8.97k|            SCN_VISIT(bool);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 80.7k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|  8.97k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 8.97k, False: 71.7k]
  ------------------
 8416|  8.97k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 80.7k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 80.7k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|  8.97k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 8.97k, False: 71.7k]
  ------------------
 8422|  8.97k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 80.7k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 80.7k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|  8.97k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 8.97k, False: 71.7k]
  ------------------
 8428|  8.97k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8429|  8.97k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 8.97k, False: 71.7k]
  ------------------
 8430|  8.97k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8431|  8.97k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 8.97k, False: 71.7k]
  ------------------
 8432|  8.97k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  8.97k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  8.97k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  8.97k|    }                                                           \
  |  | 8382|  8.97k|    else {                                                      \
  |  | 8383|  8.97k|        return vis(monostate_val);                              \
  |  | 8384|  8.97k|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 80.7k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 80.7k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 80.7k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 80.7k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 80.7k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  80.7k|            SCN_CLANG_POP
 8456|  80.7k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|   150k|    {
 5506|   150k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|   150k|    {
 8017|   150k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   150k|{
 7005|   150k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   150k|    handler.check_args_exhausted();
 7007|   150k|    return handler.get_error();
 7008|   150k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   150k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   150k|    auto begin = format.data();
 6974|   150k|    auto it = begin;
 6975|   150k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   311M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 311M, False: 64.1k]
  ------------------
 6978|   311M|        const auto ch = *it++;
 6979|   311M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 122k, False: 311M]
  ------------------
 6980|   122k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   122k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   122k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 86.1k, False: 36.0k]
  ------------------
 6984|  86.1k|                return;
 6985|  86.1k|            }
 6986|   122k|        }
 6987|   311M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 610, False: 311M]
  ------------------
 6988|    610|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 424, False: 186]
  |  |  |  Branch (859:45): [True: 196, False: 414]
  |  |  |  Branch (859:45): [True: 228, False: 186]
  |  |  ------------------
  ------------------
 6989|    424|                handler.on_error("Unmatched '}' in format string");
 6990|    424|                return;
 6991|    424|            }
 6992|       |
 6993|    186|            handler.on_literal_text(begin, it);
 6994|    186|            begin = ++it;
 6995|    186|        }
 6996|   311M|    }
 6997|       |
 6998|  64.1k|    handler.on_literal_text(begin, end);
 6999|  64.1k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|   122k|{
 6903|   122k|    struct id_adapter {
 6904|   122k|        constexpr void operator()()
 6905|   122k|        {
 6906|   122k|            arg_id = handler.on_arg_id();
 6907|   122k|        }
 6908|   122k|        constexpr void operator()(std::size_t id)
 6909|   122k|        {
 6910|   122k|            arg_id = handler.on_arg_id(id);
 6911|   122k|        }
 6912|       |
 6913|   122k|        constexpr void on_error(const char* msg)
 6914|   122k|        {
 6915|   122k|            SCN_UNLIKELY_ATTR
 6916|   122k|            handler.on_error(msg);
 6917|   122k|        }
 6918|       |
 6919|   122k|        Handler& handler;
 6920|   122k|        std::size_t arg_id;
 6921|   122k|    };
 6922|       |
 6923|   122k|    ++begin;
 6924|   122k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 122k]
  |  |  ------------------
  ------------------
 6925|     72|        handler.on_error("Unexpected end of replacement field");
 6926|     72|        return begin;
 6927|     72|    }
 6928|       |
 6929|   122k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 80.7k, False: 41.3k]
  ------------------
 6930|  80.7k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|  80.7k|    }
 6932|  41.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 180, False: 41.1k]
  ------------------
 6933|    180|        handler.on_literal_text(begin, begin + 1);
 6934|    180|    }
 6935|  41.1k|    else {
 6936|  41.1k|        auto adapter = id_adapter{handler, 0};
 6937|  41.1k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  41.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 41.0k]
  |  |  ------------------
  ------------------
 6940|    112|            handler.on_error("Missing '}' in format string");
 6941|    112|            return begin;
 6942|    112|        }
 6943|       |
 6944|  41.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 100, False: 40.9k]
  ------------------
 6945|    100|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|    100|        }
 6947|  40.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 7.09k, False: 33.8k]
  ------------------
 6948|  7.09k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 7.04k]
  |  |  ------------------
  ------------------
 6949|     42|                handler.on_error("Unexpected end of replacement field");
 6950|     42|                return begin;
 6951|     42|            }
 6952|  7.04k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  7.04k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.30k, False: 4.74k]
  |  |  |  Branch (859:45): [True: 0, False: 7.04k]
  |  |  |  Branch (859:45): [True: 2.30k, False: 4.74k]
  |  |  ------------------
  ------------------
 6954|  2.30k|                handler.on_error("Unknown format specifier");
 6955|  2.30k|                return begin;
 6956|  2.30k|            }
 6957|  7.04k|        }
 6958|  33.8k|        else {
 6959|  33.8k|            SCN_UNLIKELY_ATTR
 6960|  33.8k|            handler.on_error("Missing '}' in format string");
 6961|  33.8k|            return begin;
 6962|  33.8k|        }
 6963|  41.0k|    }
 6964|  85.8k|    return begin + 1;
 6965|   122k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|  87.9k|    {
 8000|  87.9k|        return m_args.get(id);
 8001|  87.9k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8004|  80.8k|    {
 8005|  80.8k|        return m_args;
 8006|  80.8k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|  85.1k|    {
 8010|  85.1k|        return m_locale;
 8011|  85.1k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|  87.7k|    {
 5527|  87.7k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  87.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.7k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  87.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  87.7k|        do_check_arg_id(id);
 5535|  87.7k|        return id;
 5536|  87.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5550|    144|    {
 5551|    144|        return detail::handle_error(
 5552|    144|            scan_error{scan_error::invalid_format_string, msg});
 5553|    144|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|  87.8k|{
 6015|  87.8k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  87.8k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  87.8k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  41.1k|{
 6404|  41.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  41.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 41.1k, False: 0]
  |  Branch (6405:26): [True: 34.2k, False: 6.92k]
  ------------------
 6406|  34.2k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|  34.2k|    }
 6408|       |
 6409|  6.92k|    handler();
 6410|  6.92k|    return begin;
 6411|  41.1k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|  34.2k|{
 6374|  34.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|  34.2k|    CharT c = *begin;
 6377|  34.2k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 142, False: 34.0k]
  |  Branch (6377:27): [True: 120, False: 33.9k]
  ------------------
 6378|    262|        handler.on_error("Invalid argument ID");
 6379|    262|        return begin;
 6380|    262|    }
 6381|       |
 6382|  33.9k|    int idx = 0;
 6383|  33.9k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 33.7k, False: 202]
  ------------------
 6384|  33.7k|        idx = parse_simple_int(begin, end);
 6385|  33.7k|    }
 6386|    202|    else {
 6387|    202|        ++begin;
 6388|    202|    }
 6389|       |
 6390|  33.9k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 112, False: 33.8k]
  |  Branch (6390:26): [True: 33.7k, False: 100]
  |  Branch (6390:50): [True: 33.5k, False: 170]
  ------------------
 6391|  33.6k|        handler.on_error("Invalid argument ID");
 6392|  33.6k|        return begin;
 6393|  33.6k|    }
 6394|    270|    handler(idx);
 6395|       |
 6396|    270|    return begin;
 6397|  33.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|  33.9k|        {
 6915|  33.9k|            SCN_UNLIKELY_ATTR
 6916|  33.9k|            handler.on_error(msg);
 6917|  33.9k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6352|  37.3k|{
 6353|  37.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  37.3k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  37.3k|    unsigned long long value = 0;
 6357|  37.6k|    do {
 6358|  37.6k|        value *= 10;
 6359|  37.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  37.6k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 37.6k]
  ------------------
 6361|  37.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  37.6k|        ++begin;
 6365|  37.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 37.3k, False: 270]
  |  Branch (6365:30): [True: 3.59k, False: 33.7k]
  |  Branch (6365:47): [True: 294, False: 3.29k]
  ------------------
 6366|  37.3k|    return static_cast<int>(value);
 6367|  37.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|    270|        {
 6910|    270|            arg_id = handler.on_arg_id(id);
 6911|    270|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5539|    270|    {
 5540|    270|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 126]
  |  |  ------------------
  ------------------
 5541|    144|            on_error(
 5542|    144|                "Cannot switch from manual to automatic argument indexing");
 5543|    144|            return;
 5544|    144|        }
 5545|    126|        m_next_arg_id = -1;
 5546|    126|        do_check_arg_id(id);
 5547|    126|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  6.92k|        {
 6906|  6.92k|            arg_id = handler.on_arg_id();
 6907|  6.92k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|  14.0k|    {
 5213|  14.0k|        return m_type;
 5214|  14.0k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|  4.22k|    {
 5522|  4.22k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  4.22k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|  11.2k|    {
 5511|  11.2k|        return m_format.data();
 5512|  11.2k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  7.04k|    {
 7083|  7.04k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  7.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  7.04k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|  7.04k|{
 6819|  7.04k|    auto do_presentation = [&]() -> const CharT* {
 6820|  7.04k|        if (*begin == CharT{'['}) {
 6821|  7.04k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  7.04k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  7.04k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  7.04k|                return begin;
 6827|  7.04k|            }
 6828|  7.04k|            handler.on_character_set_string(set);
 6829|  7.04k|            return begin;
 6830|  7.04k|        }
 6831|  7.04k|        if (*begin == CharT{'/'}) {
 6832|  7.04k|            return parse_presentation_regex(begin, end, handler);
 6833|  7.04k|        }
 6834|  7.04k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  7.04k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  7.04k|            handler.on_error("Invalid type specifier in format string");
 6837|  7.04k|            return begin;
 6838|  7.04k|        }
 6839|  7.04k|        handler.on_type(type);
 6840|  7.04k|        return begin;
 6841|  7.04k|    };
 6842|       |
 6843|  7.04k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 6.09k, False: 958]
  |  Branch (6843:28): [True: 3.52k, False: 2.56k]
  ------------------
 6844|  7.04k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 362, False: 3.16k]
  |  Branch (6844:36): [True: 292, False: 70]
  ------------------
 6845|    292|        return do_presentation();
 6846|    292|    }
 6847|       |
 6848|  6.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.75k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  6.75k|    begin = parse_align(begin, end, handler);
 6854|  6.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 6.62k]
  |  |  ------------------
  ------------------
 6855|    130|        handler.on_error("Unexpected end of format string");
 6856|    130|        return begin;
 6857|    130|    }
 6858|       |
 6859|  6.62k|    begin = parse_width(begin, end, handler);
 6860|  6.62k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 6.54k]
  |  |  ------------------
  ------------------
 6861|     82|        handler.on_error("Unexpected end of format string");
 6862|     82|        return begin;
 6863|     82|    }
 6864|       |
 6865|  6.54k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 348, False: 6.19k]
  ------------------
 6866|    348|        ++begin;
 6867|    348|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 308]
  |  |  ------------------
  ------------------
 6868|     40|            handler.on_error("Unexpected end of format string");
 6869|     40|            return begin;
 6870|     40|        }
 6871|    308|        begin = parse_precision(begin, end, handler);
 6872|    308|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 206]
  |  |  ------------------
  ------------------
 6873|    102|            handler.on_error("Unexpected end of format string");
 6874|    102|            return begin;
 6875|    102|        }
 6876|    308|    }
 6877|       |
 6878|  6.40k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 190, False: 6.21k]
  ------------------
 6879|    190|        handler.on_localized();
 6880|    190|        ++begin;
 6881|    190|    }
 6882|  6.40k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 6.33k]
  |  |  ------------------
  ------------------
 6883|     66|        handler.on_error("Unexpected end of format string");
 6884|     66|        return begin;
 6885|     66|    }
 6886|       |
 6887|  6.33k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 6.33k, False: 0]
  |  Branch (6887:25): [True: 2.64k, False: 3.69k]
  ------------------
 6888|  2.64k|        do_presentation();
 6889|  2.64k|    }
 6890|  6.33k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60k, False: 4.73k]
  |  |  ------------------
  ------------------
 6891|  1.60k|        handler.on_error("Unexpected end of format string");
 6892|  1.60k|        return begin;
 6893|  1.60k|    }
 6894|       |
 6895|  4.73k|    return begin;
 6896|  6.33k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|  3.52k|{
 6468|  3.52k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 290, False: 3.23k]
  |  Branch (6468:33): [True: 256, False: 34]
  ------------------
 6469|  3.52k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 230, False: 3.03k]
  |  Branch (6469:33): [True: 106, False: 124]
  ------------------
 6470|  3.52k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  2.93k|    auto do_presentation = [&]() -> const CharT* {
 6820|  2.93k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 710, False: 2.22k]
  ------------------
 6821|    710|            auto set = parse_presentation_set(begin, end, handler);
 6822|    710|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|    710|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 612, False: 98]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|    612|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|    612|                return begin;
 6827|    612|            }
 6828|     98|            handler.on_character_set_string(set);
 6829|     98|            return begin;
 6830|    710|        }
 6831|  2.22k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 356, False: 1.87k]
  ------------------
 6832|    356|            return parse_presentation_regex(begin, end, handler);
 6833|    356|        }
 6834|  1.87k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.87k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 476, False: 1.39k]
  |  |  ------------------
  ------------------
 6836|    476|            handler.on_error("Invalid type specifier in format string");
 6837|    476|            return begin;
 6838|    476|        }
 6839|  1.39k|        handler.on_type(type);
 6840|  1.39k|        return begin;
 6841|  1.87k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|    710|{
 6658|    710|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    710|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    710|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|    710|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    710|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    710|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|    710|    auto start = begin;
 6662|    710|    ++begin;
 6663|       |
 6664|    710|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    710|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 664]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     46|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     46|        return {};
 6669|     46|    }
 6670|    664|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 158, False: 506]
  ------------------
 6671|    158|        handler.on_charset_inverted();
 6672|    158|        ++begin;
 6673|    158|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 130]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     28|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|     28|            return {};
 6678|     28|        }
 6679|    130|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 34, False: 96]
  ------------------
 6680|     34|            handler.on_charset_single(char32_t{']'});
 6681|     34|            ++begin;
 6682|     34|        }
 6683|    130|    }
 6684|    506|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 90, False: 416]
  ------------------
 6685|     90|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|     90|    }
 6687|       |
 6688|  2.58k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 2.34k, False: 242]
  ------------------
 6689|  2.34k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 206, False: 2.13k]
  |  |  ------------------
  ------------------
 6690|    206|            break;
 6691|    206|        }
 6692|       |
 6693|  2.13k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 98, False: 2.04k]
  ------------------
 6694|     98|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|     98|        }
 6696|       |
 6697|  2.04k|        parse_presentation_set_literal(begin, end, handler);
 6698|  2.04k|    }
 6699|       |
 6700|    448|    SCN_UNLIKELY_ATTR
 6701|    448|    handler.on_error("Invalid [character set] specifier in format string");
 6702|    448|    return {};
 6703|    546|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6621|  2.04k|{
 6622|  2.04k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  2.04k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  2.04k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154, False: 1.88k]
  |  |  ------------------
  ------------------
 6626|    154|        return;
 6627|    154|    }
 6628|       |
 6629|  1.88k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 1.78k, False: 100]
  |  Branch (6629:25): [True: 384, False: 1.40k]
  |  Branch (6629:49): [True: 356, False: 28]
  ------------------
 6630|  1.88k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 310, False: 46]
  ------------------
 6631|    310|        ++begin;
 6632|       |
 6633|    310|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|    310|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 270]
  |  |  ------------------
  ------------------
 6635|     40|            return;
 6636|     40|        }
 6637|       |
 6638|    270|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 232]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|     38|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|     38|            return;
 6643|     38|        }
 6644|       |
 6645|    232|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|    232|        return;
 6647|    270|    }
 6648|       |
 6649|  1.57k|    handler.on_charset_single(cp_first);
 6650|  1.57k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6597|  2.35k|{
 6598|  2.35k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  2.35k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  2.35k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35k]
  |  |  |  Branch (859:45): [True: 0, False: 2.35k]
  |  |  |  Branch (859:45): [True: 0, False: 2.35k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  2.35k|    const auto cp =
 6607|  2.35k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  2.35k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194, False: 2.15k]
  |  |  ------------------
  ------------------
 6609|    194|        handler.on_error("Invalid encoding in format string");
 6610|    194|        return invalid_code_point;
 6611|    194|    }
 6612|       |
 6613|  2.15k|    begin += len;
 6614|  2.15k|    return cp;
 6615|  2.35k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|     98|    {
 6307|     98|        m_specs.charset_string_data = fmt.data();
 6308|     98|        m_specs.charset_string_size = fmt.size();
 6309|     98|        on_type(presentation_type::string_set);
 6310|     98|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6709|    356|{
 6710|    356|#if !SCN_DISABLE_REGEX
 6711|    356|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|    356|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|    356|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    712|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|    356|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|    356|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|    356|        return begin;
 6718|    356|    }
 6719|       |
 6720|    356|    auto start = begin;
 6721|    356|    ++begin;
 6722|       |
 6723|    356|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 310]
  |  |  ------------------
  ------------------
 6724|     46|        handler.on_error("Unexpected end of regex in format string");
 6725|     46|        return begin;
 6726|     46|    }
 6727|       |
 6728|    310|    handler.on_type(presentation_type::regex);
 6729|  2.02k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 1.92k, False: 96]
  ------------------
 6730|  1.92k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 214, False: 1.71k]
  ------------------
 6731|    214|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 214, False: 0]
  ------------------
 6732|    214|                break;
 6733|    214|            }
 6734|      0|            else {
 6735|      0|                handler.on_type(presentation_type::regex_escaped);
 6736|      0|            }
 6737|    214|        }
 6738|  1.92k|    }
 6739|    310|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 214]
  |  |  ------------------
  ------------------
 6740|     96|        handler.on_error("Unexpected end of regex in format string");
 6741|     96|        return begin;
 6742|     96|    }
 6743|       |
 6744|    214|    auto regex_end = begin;
 6745|    214|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|    214|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 182]
  |  |  ------------------
  ------------------
 6747|     32|        handler.on_error("Invalid (empty) regex in format string");
 6748|     32|        return begin;
 6749|     32|    }
 6750|    182|    handler.on_regex_pattern(regex_pattern);
 6751|    182|    ++begin;
 6752|       |
 6753|    182|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 124]
  |  |  ------------------
  ------------------
 6754|     58|        handler.on_error("Unexpected end of regex in format string");
 6755|     58|        return begin;
 6756|     58|    }
 6757|       |
 6758|    124|    regex_flags flags{regex_flags::none};
 6759|    124|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|    124|        {{'m', regex_flags::multiline},
 6761|    124|         {'s', regex_flags::singleline},
 6762|    124|         {'i', regex_flags::nocase},
 6763|    124|         {'n', regex_flags::nocapture}}};
 6764|    124|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 124, False: 0]
  ------------------
 6765|    124|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 72, False: 52]
  ------------------
 6766|     72|            break;
 6767|     72|        }
 6768|     52|        bool found_flag = false;
 6769|    208|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 208, False: 52]
  ------------------
 6770|    208|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 208, False: 0]
  ------------------
 6771|    208|                continue;
 6772|    208|            }
 6773|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 0, False: 0]
  ------------------
 6774|      0|                handler.on_error("Flag set multiple times in regex");
 6775|      0|                return begin;
 6776|      0|            }
 6777|      0|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|      0|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 0, False: 0]
  ------------------
 6779|       |                // clang-format off
 6780|      0|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|      0|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|      0|#endif
 6791|      0|            flags |= flag.second;
 6792|      0|            found_flag = true;
 6793|      0|            break;
 6794|      0|        }
 6795|     52|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 52, False: 0]
  ------------------
 6796|     52|            handler.on_error("Invalid flag in regex");
 6797|     52|            return begin;
 6798|     52|        }
 6799|     52|    }
 6800|     72|    handler.on_regex_flags(flags);
 6801|       |
 6802|     72|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  ------------------
  ------------------
 6803|      0|        handler.on_error("Unexpected end of regex in format string");
 6804|      0|        return begin;
 6805|      0|    }
 6806|       |
 6807|     72|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|     72|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|    182|    {
 6315|    182|        m_specs.charset_string_data = pattern.data();
 6316|    182|        m_specs.charset_string_size = pattern.size();
 6317|    182|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|  1.87k|{
 6416|  1.87k|    switch (type) {
 6417|     74|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 74, False: 1.79k]
  ------------------
 6418|    124|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 50, False: 1.82k]
  ------------------
 6419|    124|            return presentation_type::int_binary;
 6420|     78|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 78, False: 1.79k]
  ------------------
 6421|     78|            return presentation_type::int_decimal;
 6422|     66|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 66, False: 1.80k]
  ------------------
 6423|     66|            return presentation_type::int_generic;
 6424|     94|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 94, False: 1.77k]
  ------------------
 6425|     94|            return presentation_type::int_unsigned_decimal;
 6426|    102|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 102, False: 1.77k]
  ------------------
 6427|    102|            return presentation_type::int_octal;
 6428|     50|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 50, False: 1.82k]
  ------------------
 6429|     78|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 28, False: 1.84k]
  ------------------
 6430|     78|            return presentation_type::int_hex;
 6431|     64|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 64, False: 1.80k]
  ------------------
 6432|     92|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 28, False: 1.84k]
  ------------------
 6433|     92|            return presentation_type::int_arbitrary_base;
 6434|     84|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 84, False: 1.78k]
  ------------------
 6435|    124|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 40, False: 1.83k]
  ------------------
 6436|    124|            return presentation_type::float_hex;
 6437|     52|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 52, False: 1.82k]
  ------------------
 6438|    104|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 52, False: 1.82k]
  ------------------
 6439|    104|            return presentation_type::float_scientific;
 6440|     36|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 36, False: 1.83k]
  ------------------
 6441|    112|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 76, False: 1.79k]
  ------------------
 6442|    112|            return presentation_type::float_fixed;
 6443|     46|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 46, False: 1.82k]
  ------------------
 6444|     80|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 34, False: 1.83k]
  ------------------
 6445|     80|            return presentation_type::float_general;
 6446|    142|        case 's':
  ------------------
  |  Branch (6446:9): [True: 142, False: 1.73k]
  ------------------
 6447|    142|            return presentation_type::string;
 6448|     96|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 96, False: 1.77k]
  ------------------
 6449|     96|            return presentation_type::character;
 6450|     34|        case '?':
  ------------------
  |  Branch (6450:9): [True: 34, False: 1.83k]
  ------------------
 6451|     34|            return presentation_type::escaped_character;
 6452|     70|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 70, False: 1.80k]
  ------------------
 6453|     70|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 1.87k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 1.87k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|    476|        default:
  ------------------
  |  Branch (6460:9): [True: 476, False: 1.39k]
  ------------------
 6461|    476|            return presentation_type::none;
 6462|  1.87k|    }
 6463|  1.87k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  6.75k|{
 6493|  6.75k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  6.75k|    auto check_align = [](wchar_t ch) {
 6496|  6.75k|        switch (ch) {
 6497|  6.75k|            case L'<':
 6498|  6.75k|                return align_type::left;
 6499|  6.75k|            case L'>':
 6500|  6.75k|                return align_type::right;
 6501|  6.75k|            case L'^':
 6502|  6.75k|                return align_type::center;
 6503|  6.75k|            default:
 6504|  6.75k|                return align_type::none;
 6505|  6.75k|        }
 6506|  6.75k|    };
 6507|       |
 6508|  6.75k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  6.75k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.75k]
  |  |  |  Branch (859:45): [True: 0, False: 6.75k]
  |  |  |  Branch (859:45): [True: 0, False: 6.75k]
  |  |  ------------------
  ------------------
 6510|  6.75k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  6.75k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  6.75k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  6.75k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  6.75k|    const auto begin_before_fill = begin;
 6520|  6.75k|    begin += potential_fill_len;
 6521|       |
 6522|  6.75k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 958, False: 5.79k]
  ------------------
 6523|    958|        return begin_before_fill;
 6524|    958|    }
 6525|       |
 6526|  5.79k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  5.79k|    const auto begin_after_fill = begin;
 6528|  5.79k|    ++begin;
 6529|       |
 6530|  5.79k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 5.79k, False: 0]
  ------------------
 6531|  5.79k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 5.75k]
  |  |  ------------------
  ------------------
 6532|     44|            handler.on_error("Invalid fill character '{' in format string");
 6533|     44|            return begin;
 6534|     44|        }
 6535|  5.75k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 664, False: 5.09k]
  ------------------
 6536|    664|            return begin_before_fill;
 6537|    664|        }
 6538|  5.75k|    }
 6539|       |
 6540|  5.09k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 4.67k, False: 412]
  ------------------
 6541|  4.67k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 378, False: 4.30k]
  ------------------
 6542|    378|            handler.on_align(potential_align_on_fill);
 6543|    378|            return begin_after_fill;
 6544|    378|        }
 6545|  4.30k|        return begin_before_fill;
 6546|  4.67k|    }
 6547|       |
 6548|    412|    handler.on_fill(potential_fill);
 6549|    412|    handler.on_align(potential_align_after_fill);
 6550|    412|    return begin;
 6551|  5.09k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  6.75k|{
 6475|  6.75k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  6.75k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  6.75k|        return 1;
 6478|  6.75k|    }
 6479|  6.75k|    else {
 6480|  6.75k|        const auto lengths =
 6481|  6.75k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  6.75k|            "\3\4";
 6483|  6.75k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  6.75k|        return len;
 6485|  6.75k|    }
 6486|  6.75k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  12.5k|    auto check_align = [](wchar_t ch) {
 6496|  12.5k|        switch (ch) {
 6497|    298|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 298, False: 12.2k]
  ------------------
 6498|    298|                return align_type::left;
 6499|    140|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 140, False: 12.4k]
  ------------------
 6500|    140|                return align_type::right;
 6501|    564|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 564, False: 11.9k]
  ------------------
 6502|    564|                return align_type::center;
 6503|  11.5k|            default:
  ------------------
  |  Branch (6503:13): [True: 11.5k, False: 1.00k]
  ------------------
 6504|  11.5k|                return align_type::none;
 6505|  12.5k|        }
 6506|  12.5k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|    412|    {
 6229|    412|        m_specs.fill = fill;
 6230|    412|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|    412|    {
 6110|    412|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    412|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    412|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|    412|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    412|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    412|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|    412|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|    412|            for (size_t i = 0; i < s.size(); ++i) {
 6114|    412|                SCN_GCC_PUSH
 6115|    412|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|    412|                m_data[i] = s[i];
 6117|    412|                SCN_GCC_POP
 6118|    412|            }
 6119|    412|            m_size = static_cast<unsigned char>(s.size());
 6120|    412|        }
 6121|    412|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6121:28): [Folded - Ignored]
  ------------------
 6122|    412|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|    412|            m_data[1] =
 6124|    412|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|    412|            if (s.size() == 1) {
 6126|    412|                return;
 6127|    412|            }
 6128|    412|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|    412|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|    412|        }
 6131|    412|        else {
 6132|    412|            const auto front = static_cast<unsigned>(s.front());
 6133|    412|            m_data[0] = static_cast<char>(front);
 6134|    412|            m_data[1] = static_cast<char>(front >> 8);
 6135|    412|            m_data[2] = static_cast<char>(front >> 16);
 6136|    412|            m_data[3] = static_cast<char>(front >> 24);
 6137|    412|        }
 6138|    412|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  6.62k|{
 6558|  6.62k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  6.62k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 6.03k, False: 590]
  |  Branch (6560:33): [True: 3.35k, False: 2.68k]
  ------------------
 6561|  3.35k|        int width = parse_simple_int(begin, end);
 6562|  3.35k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.35k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.35k, False: 0]
  |  |  ------------------
  ------------------
 6563|  3.35k|            handler.on_width(width);
 6564|  3.35k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  3.35k|    }
 6570|  6.62k|    return begin;
 6571|  6.62k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6577|    308|{
 6578|    308|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    308|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    308|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6579|       |
 6580|    308|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6580:9): [True: 274, False: 34]
  |  Branch (6580:33): [True: 214, False: 60]
  ------------------
 6581|    214|        int prec = parse_simple_int(begin, end);
 6582|    214|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|    214|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 214, False: 0]
  |  |  ------------------
  ------------------
 6583|    214|            handler.on_precision(prec);
 6584|    214|        }
 6585|      0|        else {
 6586|      0|            handler.on_error("Invalid field precision");
 6587|      0|            return begin;
 6588|      0|        }
 6589|    214|    }
 6590|    308|    return begin;
 6591|    308|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|    190|    {
 7088|    190|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    190|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 182, False: 8]
  ------------------
 7090|    190|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 174, False: 8]
  ------------------
 7091|    190|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 166, False: 8]
  ------------------
 7092|    190|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 158, False: 8]
  ------------------
 7093|    158|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|    158|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|    158|        }
 7098|       |
 7099|     32|        Handler::on_localized();
 7100|     32|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  4.02k|{
 8378|  4.02k|#define SCN_VISIT(Type)                                         \
 8379|  4.02k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  4.02k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  4.02k|    }                                                           \
 8382|  4.02k|    else {                                                      \
 8383|  4.02k|        return vis(monostate_val);                              \
 8384|  4.02k|    }
 8385|       |
 8386|  4.02k|    monostate monostate_val{};
 8387|       |
 8388|  4.02k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 4.02k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 4.02k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|    450|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 450, False: 3.57k]
  ------------------
 8394|    450|            SCN_VISIT(int);
  ------------------
  |  | 8379|    450|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    450|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    450|    }                                                           \
  |  | 8382|    450|    else {                                                      \
  |  | 8383|    450|        return vis(monostate_val);                              \
  |  | 8384|    450|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 4.02k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 4.02k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 4.02k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 4.02k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|    450|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 450, False: 3.57k]
  ------------------
 8404|    450|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|    450|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    450|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    450|    }                                                           \
  |  | 8382|    450|    else {                                                      \
  |  | 8383|    450|        return vis(monostate_val);                              \
  |  | 8384|    450|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 4.02k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 4.02k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|    444|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 444, False: 3.57k]
  ------------------
 8410|    444|            SCN_VISIT(void*);
  ------------------
  |  | 8379|    444|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    444|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    444|    }                                                           \
  |  | 8382|    444|    else {                                                      \
  |  | 8383|    444|        return vis(monostate_val);                              \
  |  | 8384|    444|    }
  ------------------
 8411|    450|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 450, False: 3.57k]
  ------------------
 8412|    450|            SCN_VISIT(bool);
  ------------------
  |  | 8379|    450|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    450|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    450|    }                                                           \
  |  | 8382|    450|    else {                                                      \
  |  | 8383|    450|        return vis(monostate_val);                              \
  |  | 8384|    450|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 4.02k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|    444|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 444, False: 3.57k]
  ------------------
 8416|    444|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|    444|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    444|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    444|    }                                                           \
  |  | 8382|    444|    else {                                                      \
  |  | 8383|    444|        return vis(monostate_val);                              \
  |  | 8384|    444|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 4.02k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 4.02k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|    450|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 450, False: 3.57k]
  ------------------
 8422|    450|            SCN_VISIT(double);
  ------------------
  |  | 8379|    450|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    450|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    450|    }                                                           \
  |  | 8382|    450|    else {                                                      \
  |  | 8383|    450|        return vis(monostate_val);                              \
  |  | 8384|    450|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 4.02k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 4.02k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|    444|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 444, False: 3.57k]
  ------------------
 8428|    444|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|    444|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    444|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    444|    }                                                           \
  |  | 8382|    444|    else {                                                      \
  |  | 8383|    444|        return vis(monostate_val);                              \
  |  | 8384|    444|    }
  ------------------
 8429|    444|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 444, False: 3.57k]
  ------------------
 8430|    444|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|    444|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    444|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    444|    }                                                           \
  |  | 8382|    444|    else {                                                      \
  |  | 8383|    444|        return vis(monostate_val);                              \
  |  | 8384|    444|    }
  ------------------
 8431|    444|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 444, False: 3.57k]
  ------------------
 8432|    444|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|    444|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    444|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    444|    }                                                           \
  |  | 8382|    444|    else {                                                      \
  |  | 8383|    444|        return vis(monostate_val);                              \
  |  | 8384|    444|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 4.02k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 4.02k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.02k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 4.02k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 4.02k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  4.02k|            SCN_CLANG_POP
 8456|  4.02k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  75.3k|{
   44|  75.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  75.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  75.3k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  75.3k|{
   60|  75.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  75.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  75.3k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.37k|{
   89|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.37k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.37k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.37k|{
  127|  8.37k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.37k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.37k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.37k|    static_cast<    \
  |  |  929|  8.37k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.37k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   113k|{
  653|   113k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   113k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    100|{
  659|    100|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    100|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 50, False: 50]
  ------------------
  661|    100|                    : std::locale{};
  662|    100|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    894|{
 1221|    894|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    894|                                  m_nan_payload_buffer, value);
 1223|    894|    value = this->setsign(value);
 1224|    894|    return n;
 1225|    894|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  9.37k|{
 1221|  9.37k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  9.37k|                                  m_nan_payload_buffer, value);
 1223|  9.37k|    value = this->setsign(value);
 1224|  9.37k|    return n;
 1225|  9.37k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     20|{
 1461|     20|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     20|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     20|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     20|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     20|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20, False: 0]
  ------------------
 1467|     20|        SCN_UNLIKELY_ATTR
 1468|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     20|                                     "Invalid integer value");
 1470|     20|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    898|{
 1461|    898|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    898|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    898|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    898|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    898|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 898, False: 0]
  ------------------
 1467|    898|        SCN_UNLIKELY_ATTR
 1468|    898|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    898|                                     "Invalid integer value");
 1470|    898|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  9.40k|{
 1461|  9.40k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  9.40k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  9.40k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  9.40k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  9.40k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 9.40k, False: 0]
  ------------------
 1467|  9.40k|        SCN_UNLIKELY_ATTR
 1468|  9.40k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  9.40k|                                     "Invalid integer value");
 1470|  9.40k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    898|{
 1461|    898|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    898|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    898|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    898|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    898|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 898, False: 0]
  ------------------
 1467|    898|        SCN_UNLIKELY_ATTR
 1468|    898|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    898|                                     "Invalid integer value");
 1470|    898|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  9.38k|{
 1461|  9.38k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  9.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  9.38k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  9.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  9.38k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  9.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  9.38k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  9.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  9.38k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 9.38k, False: 0]
  ------------------
 1467|  9.38k|        SCN_UNLIKELY_ATTR
 1468|  9.38k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  9.38k|                                     "Invalid integer value");
 1470|  9.38k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    882|{
 1461|    882|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    882|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    882|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    882|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    882|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 882, False: 0]
  ------------------
 1467|    882|        SCN_UNLIKELY_ATTR
 1468|    882|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    882|                                     "Invalid integer value");
 1470|    882|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  9.36k|{
 1461|  9.36k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  9.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  9.36k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  9.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  9.36k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  9.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  9.36k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  9.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  9.36k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 9.36k, False: 0]
  ------------------
 1467|  9.36k|        SCN_UNLIKELY_ATTR
 1468|  9.36k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  9.36k|                                     "Invalid integer value");
 1470|  9.36k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  37.6k|{
 2176|  37.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  37.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  75.3k|{
 2200|  75.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  75.3k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.87k|{
  194|  3.87k|    return find_classic_impl(
  195|  3.87k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.87k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.87k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  92.8k|{
  202|  92.8k|    return find_classic_impl(
  203|  92.8k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  92.8k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  92.8k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    256|{
  673|    256|    return e;
  674|    256|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  37.6k|{
 2133|  37.6k|    return vscan_internal(source, format, args);
 2134|  37.6k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  75.3k|{
 2153|  75.3k|    return vscan_internal(source, format, args);
 2154|  75.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.87k|{
  118|  3.87k|    auto it = source.begin();
  119|       |
  120|  16.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 13.7k, False: 3.10k]
  ------------------
  121|  13.7k|        auto sv =
  122|  13.7k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  13.7k|                .substr(0, 8);
  124|       |
  125|  13.7k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 5.35k, False: 8.38k]
  ------------------
  126|  5.35k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  5.35k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  5.35k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 474, False: 4.88k]
  ------------------
  129|    474|                break;
  130|    474|            }
  131|  4.88k|            continue;
  132|  5.35k|        }
  133|       |
  134|  35.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 27.0k, False: 8.08k]
  ------------------
  135|  27.0k|            auto tmp =
  136|  27.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  27.0k|            auto res = get_next_code_point(tmp);
  138|  27.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 300, False: 26.7k]
  ------------------
  139|    300|                return it;
  140|    300|            }
  141|  26.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  26.7k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  26.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  26.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  26.7k|        }
  145|  8.38k|    }
  146|       |
  147|  3.57k|    return detail::make_string_view_iterator(source, it);
  148|  3.87k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   104k|{
  105|   104k|    static_assert(sizeof(*source.data()) == 1);
  106|   104k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   104k|    uint64_t word{};
  108|   104k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   104k|    return has_byte_greater(word, 127) != 0;
  111|   104k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  36.0k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  27.0k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  92.8k|{
  118|  92.8k|    auto it = source.begin();
  119|       |
  120|  94.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 91.1k, False: 3.73k]
  ------------------
  121|  91.1k|        auto sv =
  122|  91.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  91.1k|                .substr(0, 8);
  124|       |
  125|  91.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 74.1k, False: 17.0k]
  ------------------
  126|  74.1k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  74.1k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  74.1k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 73.3k, False: 766]
  ------------------
  129|  73.3k|                break;
  130|  73.3k|            }
  131|    766|            continue;
  132|  74.1k|        }
  133|       |
  134|  21.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 19.9k, False: 1.30k]
  ------------------
  135|  19.9k|            auto tmp =
  136|  19.9k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  19.9k|            auto res = get_next_code_point(tmp);
  138|  19.9k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 15.7k, False: 4.21k]
  ------------------
  139|  15.7k|                return it;
  140|  15.7k|            }
  141|  4.21k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  4.21k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  4.21k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  4.21k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  4.21k|        }
  145|  17.0k|    }
  146|       |
  147|  77.0k|    return detail::make_string_view_iterator(source, it);
  148|  92.8k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  79.2k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  19.9k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    894|{
 1138|    894|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 894]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    894|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 894]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    894|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 894]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    894|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 894]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    894|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    894|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 10, False: 884]
  ------------------
 1185|     10|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 1186|     10|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     10|                                         "Invalid floating-point digit");
 1188|     10|        }
 1189|     10|    }
 1190|    884|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 884, False: 0]
  |  |  ------------------
  ------------------
 1191|    884|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    884|                                     "Invalid floating-point digit");
 1193|    884|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  9.37k|{
 1138|  9.37k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 9.37k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  9.37k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 9.37k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  9.37k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 9.37k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  9.37k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 9.37k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  9.37k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  9.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  9.37k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 6, False: 9.36k]
  ------------------
 1185|      6|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 1186|      6|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      6|                                         "Invalid floating-point digit");
 1188|      6|        }
 1189|      6|    }
 1190|  9.36k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.36k, False: 0]
  |  |  ------------------
  ------------------
 1191|  9.36k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.36k|                                     "Invalid floating-point digit");
 1193|  9.36k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  75.3k|{
 1625|  75.3k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 75.0k, False: 360]
  ------------------
 1626|  75.0k|        return false;
 1627|  75.0k|    }
 1628|    360|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 234]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  75.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  75.3k|    {
 1903|  75.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   226k|    {
 1722|   226k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   226k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  75.3k|    {
 1853|  75.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  75.3k|{
 2030|  75.3k|    const auto beg = handler.get_ctx().begin();
 2031|  75.3k|    detail::parse_format_string<false>(format, handler);
 2032|  75.3k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.6k, False: 2.66k]
  |  |  ------------------
  ------------------
 2033|  72.6k|        return unexpected(handler.error);
 2034|  72.6k|    }
 2035|  2.66k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  75.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   820k|    {
 2014|   820k|        return ctx.get();
 2015|   820k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   820k|    {
 1857|   820k|        return contiguous_ctx;
 1858|   820k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  93.1k|    {
 1907|   226k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 138k, False: 87.7k]
  ------------------
 1908|   138k|            auto it = get_ctx().begin();
 1909|   138k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.08k, False: 137k]
  ------------------
 1910|  1.08k|                SCN_UNLIKELY_ATTR
 1911|  1.08k|                return on_error("Unexpected end of source");
 1912|  1.08k|            }
 1913|       |
 1914|   137k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   137k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   137k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.55k, False: 134k]
  ------------------
 1917|  2.55k|                return on_error("Invalid encoding in format string");
 1918|  2.55k|            }
 1919|   134k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 82.4k, False: 52.5k]
  ------------------
 1920|  82.4k|                get_ctx().advance_to(
 1921|  82.4k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  82.4k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  82.4k|                continue;
 1924|  82.4k|            }
 1925|       |
 1926|  52.5k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 1.73k, False: 50.7k]
  ------------------
 1927|  1.73k|                SCN_UNLIKELY_ATTR
 1928|  1.73k|                return on_error("Unexpected literal character in source");
 1929|  1.73k|            }
 1930|  50.7k|            get_ctx().advance_to(ranges::next(it));
 1931|  50.7k|        }
 1932|  93.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1963|  6.08k|    {
 1964|  6.08k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  6.08k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  6.08k|        on_visit_scan_arg(
 1968|  6.08k|            impl::default_arg_reader<context_type>{
 1969|  6.08k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  6.08k|            arg);
 1971|  6.08k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  62.3k|{
 1681|  62.3k|    auto arg = ctx.arg(id);
 1682|  62.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 60.7k]
  |  |  ------------------
  ------------------
 1683|  1.57k|        handler.on_error("Failed to find argument with ID");
 1684|  1.57k|    }
 1685|  62.3k|    return arg;
 1686|  62.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   150k|    {
 1797|   150k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.09k, False: 147k]
  |  |  ------------------
  ------------------
 1798|  3.09k|            on_error("Invalid out-of-range argument ID");
 1799|  3.09k|            return;
 1800|  3.09k|        }
 1801|       |
 1802|   147k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 147k]
  |  |  ------------------
  ------------------
 1803|    134|            return on_error("Argument with this ID has already been scanned");
 1804|    134|        }
 1805|       |
 1806|   147k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 147k, False: 0]
  |  |  ------------------
  ------------------
 1807|   147k|            visited_args_lower64 |= (1ull << id);
 1808|   147k|            return;
 1809|   147k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   147k|    {
 1782|   147k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   147k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 147k, False: 0]
  |  |  ------------------
  ------------------
 1788|   147k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   147k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  6.08k|    {
 1948|  6.08k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 182, False: 5.90k]
  |  Branch (1948:23): [True: 0, False: 5.90k]
  ------------------
 1949|    182|            SCN_UNLIKELY_ATTR
 1950|    182|            return;
 1951|    182|        }
 1952|       |
 1953|  5.90k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  5.90k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.05k, False: 1.85k]
  |  |  ------------------
  ------------------
 1955|  4.05k|            on_error(r.error());
 1956|  4.05k|        }
 1957|  1.85k|        else {
 1958|  1.85k|            get_ctx().advance_to(*r);
 1959|  1.85k|        }
 1960|  5.90k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  99.7k|    {
 1766|  99.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 99.7k, False: 0]
  |  |  ------------------
  ------------------
 1767|  99.7k|            error = err;
 1768|  99.7k|        }
 1769|  99.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  58.9k|    {
 1936|  58.9k|        return parse_ctx.next_arg_id();
 1937|  58.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1939|  3.50k|    {
 1940|  3.50k|        parse_ctx.check_arg_id(id);
 1941|  3.50k|        return id;
 1942|  3.50k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  56.2k|    {
 1977|  56.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  56.2k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  56.2k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 56.2k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  56.2k|        auto specs = detail::format_specs{};
 1990|  56.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  56.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  56.2k|            arg.type()};
 1993|       |
 1994|  56.2k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  56.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.47k, False: 53.7k]
  |  Branch (1995:29): [True: 744, False: 53.0k]
  ------------------
 1996|  3.21k|            SCN_UNLIKELY_ATTR
 1997|  3.21k|            on_error("Missing '}' in format string");
 1998|  3.21k|            return parse_ctx.begin();
 1999|  3.21k|        }
 2000|  53.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 204, False: 52.8k]
  |  |  ------------------
  ------------------
 2001|    204|            return parse_ctx.begin();
 2002|    204|        }
 2003|  52.8k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  52.8k|        on_visit_scan_arg(
 2006|  52.8k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  52.8k|                                           get_ctx().locale()},
 2008|  52.8k|            arg);
 2009|  52.8k|        return parse_ctx.begin();
 2010|  53.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  56.2k|    {
 1701|  56.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  52.8k|    {
 1948|  52.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 120, False: 52.7k]
  |  Branch (1948:23): [True: 0, False: 52.7k]
  ------------------
 1949|    120|            SCN_UNLIKELY_ATTR
 1950|    120|            return;
 1951|    120|        }
 1952|       |
 1953|  52.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  52.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.9k, False: 5.75k]
  |  |  ------------------
  ------------------
 1955|  46.9k|            on_error(r.error());
 1956|  46.9k|        }
 1957|  5.75k|        else {
 1958|  5.75k|            get_ctx().advance_to(*r);
 1959|  5.75k|        }
 1960|  52.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   294k|    {
 1761|   294k|        SCN_UNLIKELY_ATTR
 1762|   294k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   226k|    {
 1729|   226k|        {
 1730|   226k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 226k]
  ------------------
 1731|   226k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 226k]
  ------------------
 1732|   226k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   226k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   226k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 79.0k, False: 147k]
  ------------------
 1736|  79.0k|                return on_error("Argument list not exhausted");
 1737|  79.0k|            }
 1738|   226k|        }
 1739|       |
 1740|   147k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 147k, False: 0]
  ------------------
 1741|   147k|            return;
 1742|   147k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   226k|    {
 1777|   226k|        return error;
 1778|   226k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   571k|    {
 1773|   571k|        return static_cast<bool>(error);
 1774|   571k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  75.3k|{
 2045|  75.3k|    const auto argcount = args.size();
 2046|  75.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 75.3k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|  75.3k|    auto handler = format_handler<true, CharT>{
 2052|  75.3k|        ranges::subrange<const CharT*>{source.data(),
 2053|  75.3k|                                       source.data() + source.size()},
 2054|  75.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  75.3k|    static_cast<    \
  |  |  929|  75.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  75.3k|    static_cast<    \
  |  |  929|  75.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  75.3k|    return vscan_parse_format_string(format, handler);
 2056|  75.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   150k|{
 2045|   150k|    const auto argcount = args.size();
 2046|   150k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 150k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|   150k|    auto handler = format_handler<true, CharT>{
 2052|   150k|        ranges::subrange<const CharT*>{source.data(),
 2053|   150k|                                       source.data() + source.size()},
 2054|   150k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   150k|    return vscan_parse_format_string(format, handler);
 2056|   150k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   150k|{
 1625|   150k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 139k, False: 10.9k]
  ------------------
 1626|   139k|        return false;
 1627|   139k|    }
 1628|  10.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 10.8k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   150k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   150k|    {
 1903|   150k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   150k|    {
 1853|   150k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   150k|{
 2030|   150k|    const auto beg = handler.get_ctx().begin();
 2031|   150k|    detail::parse_format_string<false>(format, handler);
 2032|   150k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 232]
  |  |  ------------------
  ------------------
 2033|   150k|        return unexpected(handler.error);
 2034|   150k|    }
 2035|    232|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   150k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   926M|    {
 2014|   926M|        return ctx.get();
 2015|   926M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   926M|    {
 1857|   926M|        return contiguous_ctx;
 1858|   926M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   186k|    {
 1907|   308M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 308M, False: 88.4k]
  ------------------
 1908|   308M|            auto it = get_ctx().begin();
 1909|   308M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 774, False: 308M]
  ------------------
 1910|    774|                SCN_UNLIKELY_ATTR
 1911|    774|                return on_error("Unexpected end of source");
 1912|    774|            }
 1913|       |
 1914|   308M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   308M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   308M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 63.6k, False: 308M]
  ------------------
 1917|  63.6k|                return on_error("Invalid encoding in format string");
 1918|  63.6k|            }
 1919|   308M|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 1.64k, False: 308M]
  ------------------
 1920|  1.64k|                get_ctx().advance_to(
 1921|  1.64k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  1.64k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  1.64k|                continue;
 1924|  1.64k|            }
 1925|       |
 1926|   308M|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 33.8k, False: 308M]
  ------------------
 1927|  33.8k|                SCN_UNLIKELY_ATTR
 1928|  33.8k|                return on_error("Unexpected literal character in source");
 1929|  33.8k|            }
 1930|   308M|            get_ctx().advance_to(ranges::next(it));
 1931|   308M|        }
 1932|   186k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1963|  80.8k|    {
 1964|  80.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  80.8k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  80.8k|        on_visit_scan_arg(
 1968|  80.8k|            impl::default_arg_reader<context_type>{
 1969|  80.8k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  80.8k|            arg);
 1971|  80.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  87.9k|{
 1681|  87.9k|    auto arg = ctx.arg(id);
 1682|  87.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.52k, False: 86.4k]
  |  |  ------------------
  ------------------
 1683|  1.52k|        handler.on_error("Failed to find argument with ID");
 1684|  1.52k|    }
 1685|  87.9k|    return arg;
 1686|  87.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  80.8k|    {
 1948|  80.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 156, False: 80.7k]
  |  Branch (1948:23): [True: 0, False: 80.7k]
  ------------------
 1949|    156|            SCN_UNLIKELY_ATTR
 1950|    156|            return;
 1951|    156|        }
 1952|       |
 1953|  80.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  80.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.7k, False: 34.9k]
  |  |  ------------------
  ------------------
 1955|  45.7k|            on_error(r.error());
 1956|  45.7k|        }
 1957|  34.9k|        else {
 1958|  34.9k|            get_ctx().advance_to(*r);
 1959|  34.9k|        }
 1960|  80.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  87.7k|    {
 1936|  87.7k|        return parse_ctx.next_arg_id();
 1937|  87.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1939|    270|    {
 1940|    270|        parse_ctx.check_arg_id(id);
 1941|    270|        return id;
 1942|    270|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  7.04k|    {
 1977|  7.04k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  7.04k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  7.04k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 7.04k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  7.04k|        auto specs = detail::format_specs{};
 1990|  7.04k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  7.04k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  7.04k|            arg.type()};
 1993|       |
 1994|  7.04k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  7.04k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.02k, False: 5.02k]
  |  Branch (1995:29): [True: 730, False: 4.29k]
  ------------------
 1996|  2.75k|            SCN_UNLIKELY_ATTR
 1997|  2.75k|            on_error("Missing '}' in format string");
 1998|  2.75k|            return parse_ctx.begin();
 1999|  2.75k|        }
 2000|  4.29k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 4.22k]
  |  |  ------------------
  ------------------
 2001|     72|            return parse_ctx.begin();
 2002|     72|        }
 2003|  4.22k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  4.22k|        on_visit_scan_arg(
 2006|  4.22k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  4.22k|                                           get_ctx().locale()},
 2008|  4.22k|            arg);
 2009|  4.22k|        return parse_ctx.begin();
 2010|  4.29k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  7.04k|    {
 1701|  7.04k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  4.22k|    {
 1948|  4.22k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 204, False: 4.02k]
  |  Branch (1948:23): [True: 0, False: 4.02k]
  ------------------
 1949|    204|            SCN_UNLIKELY_ATTR
 1950|    204|            return;
 1951|    204|        }
 1952|       |
 1953|  4.02k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  4.02k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.00k, False: 1.01k]
  |  |  ------------------
  ------------------
 1955|  3.00k|            on_error(r.error());
 1956|  3.00k|        }
 1957|  1.01k|        else {
 1958|  1.01k|            get_ctx().advance_to(*r);
 1959|  1.01k|        }
 1960|  4.02k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.18k|{
 1363|  4.18k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.18k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.18k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.18k|            std::u32string tmp;
 1368|  4.18k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.18k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.18k|                std::u32string_view{tmp}, dest);
 1371|  4.18k|        }
 1372|  4.18k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.18k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.18k|        }
 1375|  4.18k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.18k|{
 1256|  4.18k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.18k|    auto it = src.begin();
 1259|   626k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 621k, False: 4.18k]
  ------------------
 1260|   621k|        auto res = get_next_code_point(
 1261|   621k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   621k|                                                                 src.end()));
 1263|   621k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.82k, False: 613k]
  |  |  ------------------
  ------------------
 1264|  8.82k|            dest.push_back(DestCharT{0xfffd});
 1265|  8.82k|        }
 1266|   613k|        else {
 1267|   613k|            dest.push_back(res.value);
 1268|   613k|        }
 1269|   621k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   621k|    }
 1271|  4.18k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   856k|{
 1169|   856k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   856k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   856k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   856k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   856k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.2k, False: 844k]
  |  |  ------------------
  ------------------
 1173|  11.2k|        return {get_start_for_next_code_point(input),
 1174|  11.2k|                detail::invalid_code_point};
 1175|  11.2k|    }
 1176|   844k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   844k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.24k, False: 842k]
  |  |  ------------------
  ------------------
 1177|  2.24k|        return {input.end(), detail::invalid_code_point};
 1178|  2.24k|    }
 1179|       |
 1180|   842k|    return {input.begin() + len,
 1181|   842k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   844k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  11.2k|{
 1155|  11.2k|    auto it = input.begin();
 1156|  38.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 36.2k, False: 2.07k]
  ------------------
 1157|  36.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.22k, False: 27.0k]
  ------------------
 1158|  9.22k|            break;
 1159|  9.22k|        }
 1160|  36.2k|    }
 1161|  11.2k|    return it;
 1162|  11.2k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|   197k|    {
  809|   197k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   197k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|   197k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  67.1k|    {
  823|  67.1k|        return a.m_code == b.m_code;
  824|  67.1k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  31.9k|    {
 2931|  31.9k|        SCN_UNLIKELY_ATTR
 2932|  31.9k|        m_msg = msg;
 2933|  31.9k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  56.7k|    {
 2936|  56.7k|        return m_msg == nullptr;
 2937|  56.7k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|  1.04k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4990|   731k|    {
 4991|   731k|        on_charset_range(cp, cp + 1);
 4992|   731k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4995|   735k|    {
 4996|   735k|        if (end <= 127) {
  ------------------
  |  Branch (4996:13): [True: 416k, False: 318k]
  ------------------
 4997|   416k|            return;
 4998|   416k|        }
 4999|       |
 5000|  70.2M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5000:25): [True: 70.2M, False: 318k]
  ------------------
 5001|       |            // TODO: check for overlap
 5002|  70.2M|            if (elem.first == end) {
  ------------------
  |  Branch (5002:17): [True: 108, False: 70.2M]
  ------------------
 5003|    108|                elem.first = begin;
 5004|    108|                return;
 5005|    108|            }
 5006|       |
 5007|  70.2M|            if (elem.second == begin) {
  ------------------
  |  Branch (5007:17): [True: 258, False: 70.2M]
  ------------------
 5008|    258|                elem.second = end;
 5009|    258|                return;
 5010|    258|            }
 5011|  70.2M|        }
 5012|       |
 5013|   318k|        extra_ranges.push_back(std::make_pair(begin, end));
 5014|   318k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5017|    408|    {
 5018|       |        // no-op
 5019|    408|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5032|   742k|    {
 5033|   742k|        return static_cast<bool>(err);
 5034|   742k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5350|  1.23k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   115k|{
  458|   115k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   115k|        static_cast<unsigned char>(ch))];
  460|   115k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   575k|{
  469|   575k|    return static_cast<unsigned char>(ch) <= 127;
  470|   575k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   626k|{
  483|   626k|    return cp <= 127;
  484|   626k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   104k|{
  539|   104k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   104k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|   276k|{
  784|   276k|    return e != eof_error::good;
  785|   276k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|     90|{
  798|     90|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|     90|    return scan_error{scan_error::end_of_range, "EOF"};
  800|     90|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    482|{
  845|    482|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    482|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    482|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    482|    return parse_error::eof;
  847|    482|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  12.2k|{
  854|  12.2k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 12.2k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  12.2k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 36, False: 12.1k]
  ------------------
  859|     36|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     36|    }
  861|       |
  862|  12.1k|    return scan_error{code, msg};
  863|  12.2k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  12.2k|{
  868|  12.2k|    return [code, msg](parse_error err) {
  869|  12.2k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  12.2k|    };
  871|  12.2k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   309M|{
 1200|       |    // Pattern_White_Space property
 1201|   309M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 482k, False: 308M]
  |  Branch (1201:27): [True: 106k, False: 376k]
  ------------------
 1202|   309M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 4.19k, False: 309M]
  ------------------
 1203|   309M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 9.26k, False: 309M]
  ------------------
 1204|   309M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 924, False: 309M]
  ------------------
 1205|   309M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 1.64k, False: 309M]
  ------------------
 1206|   309M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 816, False: 309M]
  ------------------
 1207|   309M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 20, False: 309M]
  ------------------
 1208|   309M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.70k|{
 2220|  3.70k|    unsigned char running_diff{0};
 2221|  12.9k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.24k, False: 3.70k]
  ------------------
 2222|  9.24k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.24k|    }
 2224|  3.70k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.70k]
  |  Branch (2224:33): [True: 0, False: 3.70k]
  ------------------
 2225|  3.70k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   229k|{
 2303|   229k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 9.54k, False: 219k]
  ------------------
 2304|   229k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 90, False: 9.45k]
  ------------------
 2305|  9.54k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 9.38k]
  ------------------
 2306|  9.54k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 78, False: 9.30k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  9.54k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 6.56k, False: 2.73k]
  |  Branch (2308:27): [True: 824, False: 5.74k]
  |  Branch (2308:43): [True: 704, False: 120]
  ------------------
 2309|  9.54k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 5.74k, False: 2.85k]
  |  Branch (2309:27): [True: 72, False: 5.67k]
  ------------------
 2310|  9.54k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 5.67k, False: 2.85k]
  |  Branch (2310:27): [True: 112, False: 5.55k]
  ------------------
 2311|  9.54k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 5.55k, False: 2.85k]
  |  Branch (2311:27): [True: 126, False: 5.43k]
  ------------------
 2312|  9.54k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 5.43k, False: 2.85k]
  |  Branch (2312:27): [True: 1.44k, False: 3.98k]
  ------------------
 2313|  9.54k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 3.96k, False: 2.87k]
  |  Branch (2313:27): [True: 36, False: 3.93k]
  ------------------
 2314|  9.54k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 3.93k, False: 2.87k]
  |  Branch (2314:27): [True: 102, False: 3.82k]
  ------------------
 2315|  9.54k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 3.69k, False: 3.01k]
  |  Branch (2315:28): [True: 174, False: 3.52k]
  ------------------
 2316|  9.54k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 3.52k, False: 3.01k]
  |  Branch (2316:28): [True: 306, False: 3.21k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  9.54k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 3.34k, False: 2.88k]
  |  Branch (2318:28): [True: 102, False: 3.24k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  9.54k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 3.24k, False: 2.88k]
  |  Branch (2320:28): [True: 24, False: 3.21k]
  ------------------
 2321|  3.44k|        return 2;
 2322|  3.44k|    }
 2323|   226k|    return 1;
 2324|   229k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   172k|{
 2328|   172k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   172k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    160|{
 2343|    160|    return calculate_text_width_for_fmt_v10(cp);
 2344|    160|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  74.7k|{
 3123|  74.7k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  74.7k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  65.7k|{
 3127|  65.7k|#if WCHAR_MIN < 0
 3128|  65.7k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 65.7k, False: 0]
  |  Branch (3128:20): [True: 65.7k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  65.7k|        return char_to_int(static_cast<char>(ch));
 3133|  65.7k|    }
 3134|      0|    return 255;
 3135|  65.7k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4271|  10.3k|{
 4272|  10.3k|    std::regex_constants::syntax_option_type result{};
 4273|  10.3k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4273:9): [True: 276, False: 10.1k]
  ------------------
 4274|    276|#if SCN_HAS_STD_REGEX_MULTILINE
 4275|    276|        result |= std::regex_constants::multiline;
 4276|       |#else
 4277|       |        return unexpected_scan_error(
 4278|       |            scan_error::invalid_format_string,
 4279|       |            "/m flag for regex isn't supported by regex backend");
 4280|       |#endif
 4281|    276|    }
 4282|  10.3k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4282:9): [True: 0, False: 10.3k]
  ------------------
 4283|  10.3k|        detail::regex_flags::none) {
 4284|      0|        return unexpected_scan_error(
 4285|      0|            scan_error::invalid_format_string,
 4286|      0|            "/s flag for regex isn't supported by regex backend");
 4287|      0|    }
 4288|  10.3k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4288:9): [True: 1.36k, False: 9.03k]
  ------------------
 4289|  1.36k|        result |= std::regex_constants::icase;
 4290|  1.36k|    }
 4291|  10.3k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4291:9): [True: 6, False: 10.3k]
  ------------------
 4292|      6|        result |= std::regex_constants::nosubs;
 4293|      6|    }
 4294|  10.3k|    return result;
 4295|  10.3k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4638|  1.03k|{
 4639|  1.03k|    std::string result{pattern};
 4640|  12.2k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4640:24): [True: 11.2k, False: 1.03k]
  ------------------
 4641|  11.2k|        result.replace(n, 2, "/");
 4642|  11.2k|        ++n;
 4643|  11.2k|    }
 4644|  1.03k|    return result;
 4645|  1.03k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6008|  7.59k|{
 6009|  7.59k|    if (specs.width != 0) {
  ------------------
  |  Branch (6009:9): [True: 1.87k, False: 5.72k]
  ------------------
 6010|  1.87k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6010:13): [True: 772, False: 1.10k]
  ------------------
 6011|    772|            return {scan_error::invalid_scanned_value,
 6012|    772|                    "Scanned value too narrow, width did not exceed what "
 6013|    772|                    "was specified in the format string"};
 6014|    772|        }
 6015|  1.87k|    }
 6016|  6.82k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6016:9): [True: 1.59k, False: 5.23k]
  ------------------
 6017|  1.59k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6017:13): [True: 50, False: 1.54k]
  ------------------
 6018|     50|            return {scan_error::invalid_scanned_value,
 6019|     50|                    "Scanned value too wide, width exceeded the specified "
 6020|     50|                    "precision"};
 6021|     50|        }
 6022|  1.59k|    }
 6023|  6.77k|    return {};
 6024|  6.82k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   135k|    {
  304|   135k|        ranges::advance(x, n);
  305|   135k|        return x;
  306|   135k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   135k|    {
  268|   135k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   135k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   191k|    {
  151|   191k|        i += n;
  152|   191k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   129k|    {
  108|   129k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   129k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   129k|    {
   87|   129k|        return s - i;
   88|   129k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  56.1k|    {
  304|  56.1k|        ranges::advance(x, n);
  305|  56.1k|        return x;
  306|  56.1k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  56.1k|    {
  268|  56.1k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  56.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  56.1k|    {
  151|  56.1k|        i += n;
  152|  56.1k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|    240|    {
  108|    240|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|    240|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|    240|    {
   87|    240|        return s - i;
   88|    240|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5624|  5.84k|    {
 5625|  5.84k|        reader_error_handler eh{};
 5626|  5.84k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5626:23): [Folded - Ignored]
  ------------------
 5627|  5.84k|            detail::check_code_point_type_specs(specs, eh);
 5628|  5.84k|        }
 5629|  5.84k|        else {
 5630|  5.84k|            detail::check_char_type_specs(specs, eh);
 5631|  5.84k|        }
 5632|  5.84k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.21k, False: 628]
  |  |  ------------------
  ------------------
 5633|  5.21k|            return {scan_error::invalid_format_string, eh.m_msg};
 5634|  5.21k|        }
 5635|    628|        return {};
 5636|  5.84k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  24.3k|    {
  763|  24.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  24.3k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  4.54k|    {
  754|  4.54k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  8.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.15k|              cvref<T> obj = *get<T>(fn);
  745|  8.15k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.15k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.15k|              }
  748|  8.15k|              else {
  749|  8.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.15k|              }
  751|  8.15k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  8.15k|    {
  684|  8.15k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.15k|            return static_cast<T*>(s.m_cp);
  686|  8.15k|        }
  687|  8.15k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.15k|            return static_cast<T*>(s.m_p);
  689|  8.15k|        }
  690|  8.15k|        else {
  691|  8.15k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.15k|        }
  693|  8.15k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  4.54k|        {
  662|  4.54k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.59M|    {
  763|  1.59M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.59M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  82.7k|    {
  754|  82.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   701k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   701k|              cvref<T> obj = *get<T>(fn);
  745|   701k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   701k|                  obj(static_cast<decltype(args)>(args)...);
  747|   701k|              }
  748|   701k|              else {
  749|   701k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   701k|              }
  751|   701k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   701k|    {
  684|   701k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   701k|            return static_cast<T*>(s.m_cp);
  686|   701k|        }
  687|   701k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   701k|            return static_cast<T*>(s.m_p);
  689|   701k|        }
  690|   701k|        else {
  691|   701k|            return reinterpret_cast<T*>(s.m_fp);
  692|   701k|        }
  693|   701k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  82.7k|        {
  662|  82.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5619|  1.85k|    {
 5620|  1.85k|        return false;
 5621|  1.85k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  12.2k|    return [code, msg](parse_error err) {
  869|  12.2k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  12.2k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     58|    {
 1780|     58|        auto stdloc = loc.get<std::locale>();
 1781|     58|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     58|        grouping = numpunct.grouping();
 1783|     58|        thousands_sep =
 1784|     58|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 58]
  ------------------
 1785|     58|        decimal_point = numpunct.decimal_point();
 1786|     58|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     76|{
 1717|     76|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 76, False: 0]
  ------------------
 1718|     76|        return std::use_facet<Facet>(stdloc);
 1719|     76|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     76|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  41.1k|{
 2349|  41.1k|    size_t count{0};
 2350|  41.1k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  41.1k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  41.1k|    });
 2353|  41.1k|    return count;
 2354|  41.1k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  41.1k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  41.1k|    auto it = input.begin();
 1448|  90.9k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 49.8k, False: 41.1k]
  ------------------
 1449|  49.8k|        auto res = get_next_code_point(
 1450|  49.8k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  49.8k|        cb(res.value);
 1452|  49.8k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  49.8k|    }
 1454|  41.1k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  56.9k|    {
  763|  56.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  56.9k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  41.1k|    {
  754|  41.1k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  49.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.8k|              cvref<T> obj = *get<T>(fn);
  745|  49.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  49.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  49.8k|              }
  748|  49.8k|              else {
  749|  49.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.8k|              }
  751|  49.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  49.8k|    {
  684|  49.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  49.8k|            return static_cast<T*>(s.m_cp);
  686|  49.8k|        }
  687|  49.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  49.8k|            return static_cast<T*>(s.m_p);
  689|  49.8k|        }
  690|  49.8k|        else {
  691|  49.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  49.8k|        }
  693|  49.8k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  49.8k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  49.8k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  49.8k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  41.1k|        {
  662|  41.1k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  4.22k|    {
 1582|  4.22k|        return m_view;
 1583|  4.22k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.60k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  24.8k|    {
 2382|  24.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  1.26k|    {
 2421|  1.26k|        return m_multibyte_left;
 2422|  1.26k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   452k|    {
 2426|   452k|        return *m_current;
 2427|   452k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   365k|    {
 2435|   365k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   365k|        _increment_current();
 2437|   365k|        return *this;
 2438|   365k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   365k|    {
 2668|   365k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 212k, False: 152k]
  ------------------
 2669|   212k|            auto cplen = _get_cp_length_at_current();
 2670|   212k|            m_multibyte_left = cplen - 1;
 2671|   212k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   212k|        }
 2673|   152k|        else {
 2674|   152k|            --m_multibyte_left;
 2675|   152k|        }
 2676|       |
 2677|   365k|        ++m_current;
 2678|   365k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   212k|    {
 2639|   212k|        return static_cast<difference_type>(
 2640|   212k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   212k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   212k|    {
 2645|   212k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 988, False: 211k]
  |  |  ------------------
  ------------------
 2646|    988|            return 0;
 2647|    988|        }
 2648|       |
 2649|   211k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 172k, False: 39.0k]
  ------------------
 2650|   172k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   172k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   172k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   172k|        }
 2654|       |
 2655|  39.0k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  39.0k|                                           cplen);
 2657|  39.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 38.9k]
  |  |  ------------------
  ------------------
 2658|    108|            return 0;
 2659|    108|        }
 2660|       |
 2661|  38.9k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  38.9k|        return static_cast<difference_type>(
 2663|  38.9k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  39.0k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  41.3k|{
 1857|  41.3k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  41.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  41.3k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  41.3k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  41.3k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 218, False: 41.1k]
  ------------------
 1862|    218|            return unexpected(eof_error::eof);
 1863|    218|        }
 1864|       |
 1865|  41.1k|        return ranges::next(range.begin(), count);
 1866|  41.3k|    }
 1867|  41.3k|    else {
 1868|  41.3k|        auto it = range.begin();
 1869|  41.3k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  41.3k|            return ranges::next(it, count);
 1871|  41.3k|        }
 1872|       |
 1873|  41.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  41.3k|            if (it == range.end()) {
 1875|  41.3k|                return unexpected(eof_error::eof);
 1876|  41.3k|            }
 1877|  41.3k|        }
 1878|       |
 1879|  41.3k|        return it;
 1880|  41.3k|    }
 1881|  41.3k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  4.25k|    {
  268|  4.25k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.25k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  4.25k|    {
  161|  4.25k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  4.25k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 4.25k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  4.25k|        else {
  169|  4.25k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 4.25k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  4.25k|        }
  173|  4.25k|    }
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   198k|    {
 2531|   198k|        return !(a == b);
 2532|   198k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   200k|    {
 2523|   200k|        return a.m_current == b.m_current;
 2524|   200k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   143k|    {
 1890|   143k|        return !codepoint.empty();
 1891|   143k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  9.09k|    {
 2832|  9.09k|        return take_width_view{r, n};
 2833|  9.09k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  9.09k|    {
 2801|  9.09k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  9.09k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5663|    388|    {
 5664|    388|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5664:13): [True: 348, False: 40]
  ------------------
 5665|    388|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5665:13): [True: 0, False: 40]
  ------------------
 5666|    348|            return read_default(range, value, loc);
 5667|    348|        }
 5668|       |
 5669|     40|        reader_impl_for_int<CharT> reader{};
 5670|     40|        signed char tmp_value{};
 5671|     40|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5672|     40|        value = static_cast<signed char>(value);
 5673|     40|        return ret;
 5674|    388|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5645|    348|    {
 5646|    348|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    348|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5647|    348|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5647:23): [Folded - Ignored]
  ------------------
 5648|    348|            return code_unit_reader<char>{}.read(range, value);
 5649|    348|        }
 5650|    348|        else {
 5651|    348|            SCN_UNUSED(range);
 5652|    348|            SCN_EXPECT(false);
 5653|    348|            SCN_UNREACHABLE;
 5654|    348|        }
 5655|    348|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5564|    348|    {
 5565|    348|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|    348|        ch = *range.begin();
 5567|    348|        return it;
 5568|    348|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  2.62k|{
 1846|  2.62k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.62k|    return ranges::next(range.begin());
 1851|  2.62k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.62k|{
  950|  2.62k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.62k|    return eof_error::good;
  954|  2.62k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.62k|{
  944|  2.62k|    return is_range_eof(r.begin(), r.end());
  945|  2.62k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   148k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   148k|    {
  937|   148k|        return begin == end;
  938|   148k|    }
  939|   148k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   363k|        {
 2770|   363k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 1.26k, False: 362k]
  |  Branch (2770:39): [True: 822, False: 440]
  ------------------
 2771|   363k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 948, False: 361k]
  ------------------
 2772|   363k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   225k|    {
 2816|   225k|        return sentinel<true>{m_base.get().end()};
 2817|   225k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   275k|    {
 2717|   275k|        return view;
 2718|   275k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   225k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.65k|    {
  296|  2.65k|        ++x;
  297|  2.65k|        return x;
  298|  2.65k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  24.8k|    {
 2810|  24.8k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  24.8k|                                      m_count};
 2812|  24.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|     40|    {
 3540|     40|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 40]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     40|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     40|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 40]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     40|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 40]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     40|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     40|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3566|     40|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     40|    }                                                  \
  |  |  |  | 3642|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|  1.14k|{
 3326|  1.14k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  1.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  1.14k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  1.14k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  1.14k|        parse_integer_base_prefix(
 3331|  1.14k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  1.14k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 1.14k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  1.14k|    else {
 3344|  1.14k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 1.14k]
  |  Branch (3344:13): [True: 1.14k, False: 0]
  ------------------
 3345|  1.14k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 1.14k, False: 0]
  ------------------
 3346|  1.14k|            digits_begin_it = base_prefix_begin_it;
 3347|  1.14k|        }
 3348|  1.14k|    }
 3349|       |
 3350|  1.14k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 1.14k, False: 0]
  ------------------
 3351|  1.14k|        sign = sign_type::plus_sign;
 3352|  1.14k|    }
 3353|  1.14k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  1.14k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  1.14k|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.51k|{
 3141|  1.51k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.51k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.51k, False: 0]
  ------------------
 3143|  1.51k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.51k, False: 0]
  ------------------
 3144|  1.51k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.51k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.51k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.51k|{
 2272|  1.51k|    auto it = read_code_unit(range);
 2273|  1.51k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.51k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  3.02k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 3.02k, False: 1.51k]
  ------------------
 2278|  3.02k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 3.02k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  3.02k|    }
 2282|       |
 2283|  1.51k|    return unexpected(parse_error::error);
 2284|  1.51k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|  1.14k|{
 3293|  1.14k|    switch (base) {
 3294|     10|        case 2:
  ------------------
  |  Branch (3294:9): [True: 10, False: 1.13k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     10|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     10|                    false};
 3298|       |
 3299|      6|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 6, False: 1.14k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|      6|            bool zero_parsed = false;
 3302|      6|            auto it = apply_opt(
 3303|      6|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|      6|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    354|        case 16:
  ------------------
  |  Branch (3307:9): [True: 354, False: 794]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    354|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    354|                    false};
 3311|       |
 3312|     28|        case 0:
  ------------------
  |  Branch (3312:9): [True: 28, False: 1.12k]
  ------------------
 3313|       |            // detect base
 3314|     28|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    750|        default:
  ------------------
  |  Branch (3316:9): [True: 750, False: 398]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    750|            return {range.begin(), base, false};
 3319|  1.14k|    }
 3320|  1.14k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    370|{
 2291|    370|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 370, False: 0]
  ------------------
 2292|    370|        return range.begin();
 2293|    370|    }
 2294|      0|    return *result;
 2295|    370|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     38|{
 3244|     38|    return read_matching_string_classic_nocase(range, "0b");
 3245|     38|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.53k|{
 2231|  1.53k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.53k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.53k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.53k|        if (range.size() < str.size()) {
 2236|  1.53k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.53k|        }
 2238|  1.53k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.53k|            return unexpected(parse_error::error);
 2240|  1.53k|        }
 2241|  1.53k|        return ranges::next(range.begin(), str.size());
 2242|  1.53k|    }
 2243|  1.53k|    else {
 2244|  1.53k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.53k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.53k|                return ch;
 2247|  1.53k|            }
 2248|  1.53k|            return static_cast<char_type>(ch +
 2249|  1.53k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.53k|        };
 2251|       |
 2252|  1.53k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 1.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    120|    }                                                  \
  |  |  |  | 3642|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.41k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.41k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.41k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.41k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.41k|                    return ascii_tolower(a) ==
 2259|  1.41k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.41k|                }))) {
 2261|  1.41k|            return unexpected(parse_error::error);
 2262|  1.41k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.41k|    }
 2266|  1.53k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  1.79k|{
 1857|  1.79k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.79k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.79k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.79k|        if (sz < count) {
 1862|  1.79k|            return unexpected(eof_error::eof);
 1863|  1.79k|        }
 1864|       |
 1865|  1.79k|        return ranges::next(range.begin(), count);
 1866|  1.79k|    }
 1867|  1.79k|    else {
 1868|  1.79k|        auto it = range.begin();
 1869|  1.79k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.79k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  6.15k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 4.54k, False: 1.60k]
  ------------------
 1874|  4.54k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 192, False: 4.35k]
  ------------------
 1875|    192|                return unexpected(eof_error::eof);
 1876|    192|            }
 1877|  4.54k|        }
 1878|       |
 1879|  1.60k|        return it;
 1880|  1.79k|    }
 1881|  1.79k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  1.79k|{
 1095|  1.79k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.79k|        return r.size();
 1097|  1.79k|    }
 1098|  1.79k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.79k|                           ranges::const_iterator_t<Range>,
 1100|  1.79k|                           typename detail::basic_scan_buffer<
 1101|  1.79k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.79k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.79k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.79k|        }
 1105|  1.79k|        else {
 1106|  1.79k|            if (r.begin().stores_parent()) {
 1107|  1.79k|                return static_cast<size_t>(
 1108|  1.79k|                    r.begin().parent()->chars_available() -
 1109|  1.79k|                    r.begin().position());
 1110|  1.79k|            }
 1111|  1.79k|            return r.begin().contiguous_segment().size();
 1112|  1.79k|        }
 1113|  1.79k|    }
 1114|  1.79k|    else {
 1115|  1.79k|        return 0;
 1116|  1.79k|    }
 1117|  1.79k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.41k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.41k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 48, False: 1.36k]
  |  Branch (2245:29): [True: 1.36k, False: 0]
  ------------------
 2246|  1.41k|                return ch;
 2247|  1.41k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.41k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.79k|{
  950|  2.79k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 2.70k]
  |  |  ------------------
  ------------------
  951|     90|        return eof_error::eof;
  952|     90|    }
  953|  2.70k|    return eof_error::good;
  954|  2.79k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   146k|{
  944|   146k|    return is_range_eof(r.begin(), r.end());
  945|   146k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    382|{
 3251|    382|    return read_matching_string_classic_nocase(range, "0x");
 3252|    382|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     28|{
 3274|     28|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 28]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     28|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 28]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     28|    {
 3281|     28|        bool zero_parsed{false};
 3282|     28|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 28]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     28|    }
 3286|     28|    return {range.begin(), 10, false};
 3287|     28|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3360|  1.13k|{
 3361|  1.13k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  1.13k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  1.13k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3365|  1.13k|            return unexpected_scan_error(
 3366|  1.13k|                scan_error::invalid_scanned_value,
 3367|  1.13k|                "Failed to parse integer: No digits found");
 3368|  1.13k|        }
 3369|  1.13k|        return range.end();
 3370|  1.13k|    }
 3371|  1.13k|    else {
 3372|  1.13k|        return read_while1_code_unit(range,
 3373|  1.13k|                                     [&](char_type ch) noexcept {
 3374|  1.13k|                                         return char_to_int(ch) < base;
 3375|  1.13k|                                     })
 3376|  1.13k|            .transform_error(map_parse_error_to_scan_error(
 3377|  1.13k|                scan_error::invalid_scanned_value,
 3378|  1.13k|                "Failed to parse integer: No digits found"));
 3379|  1.13k|    }
 3380|  1.13k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.49k|{
 1996|  1.49k|    auto it = read_while_code_unit(range, pred);
 1997|  1.49k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.49k, False: 0]
  ------------------
 1998|  1.49k|        return unexpected(parse_error::error);
 1999|  1.49k|    }
 2000|      0|    return it;
 2001|  1.49k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.49k|{
 1976|  1.49k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.49k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.49k|{
 1957|  1.49k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.49k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.49k|    }
 1960|  1.49k|    else {
 1961|  1.49k|        auto first = range.begin();
 1962|  1.49k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.49k, False: 0]
  ------------------
 1963|  1.49k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.49k, False: 0]
  ------------------
 1964|  1.49k|                return first;
 1965|  1.49k|            }
 1966|  1.49k|        }
 1967|      0|        return first;
 1968|  1.49k|    }
 1969|  1.49k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   205k|        {
 2781|   205k|            return !(y == x);
 2782|   205k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|  1.13k|    {
  754|  1.13k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.13k|              cvref<T> obj = *get<T>(fn);
  745|  1.13k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.13k|              }
  748|  1.13k|              else {
  749|  1.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.13k|              }
  751|  1.13k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.13k|    {
  684|  1.13k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.13k|            return static_cast<T*>(s.m_cp);
  686|  1.13k|        }
  687|  1.13k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.13k|            return static_cast<T*>(s.m_p);
  689|  1.13k|        }
  690|  1.13k|        else {
  691|  1.13k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.13k|        }
  693|  1.13k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3373|  1.13k|                                     [&](char_type ch) noexcept {
 3374|  1.13k|                                         return char_to_int(ch) < base;
 3375|  1.13k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|  1.13k|        {
  662|  1.13k|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  2.02k|{
 1683|  2.02k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.02k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.02k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.02k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  2.02k|    }
 1688|  2.02k|    else {
 1689|  2.02k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  2.02k|    }
 1691|  2.02k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  2.02k|    {
 1537|  2.02k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  2.02k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  2.02k|    {
 1621|  2.02k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.02k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.02k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.02k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.02k|            m_storage.reset();
 1627|  2.02k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.02k|        }
 1629|  2.02k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.02k|                                          std::basic_string<CharT>>) {
 1631|  2.02k|            m_storage.emplace(SCN_FWD(range));
 1632|  2.02k|            m_view = string_view_type{*m_storage};
 1633|  2.02k|        }
 1634|  2.02k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.02k|                                          typename detail::basic_scan_buffer<
 1636|  2.02k|                                              value_t>::forward_iterator> &&
 1637|  2.02k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.02k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.02k|            auto end_seg = range.end().contiguous_segment();
 1640|  2.02k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.02k|                             detail::to_address(end_seg.end()))) {
 1642|  2.02k|                auto& str = m_storage.emplace();
 1643|  2.02k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.02k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.02k|                m_view = string_view_type{str};
 1646|  2.02k|                return;
 1647|  2.02k|            }
 1648|       |
 1649|  2.02k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.02k|                                                            end_seg.data());
 1651|  2.02k|            m_storage.reset();
 1652|  2.02k|        }
 1653|  2.02k|        else {
 1654|  2.02k|            auto& str = m_storage.emplace();
 1655|  2.02k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  2.02k|                str.reserve(range.size());
 1657|  2.02k|            }
 1658|  2.02k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  2.02k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.02k|                          std::back_inserter(str));
 1661|  2.02k|            }
 1662|  2.02k|            else {
 1663|  2.02k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.02k|                     ++it) {
 1665|  2.02k|                    str.push_back(*it);
 1666|  2.02k|                }
 1667|  2.02k|            }
 1668|  2.02k|            m_view = string_view_type{str};
 1669|  2.02k|        }
 1670|  2.02k|    }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3390|     16|{
 3391|     16|    std::basic_string<CharT> output;
 3392|     16|    std::string thsep_indices;
 3393|     16|    auto it = range.begin();
 3394|     16|    bool digit_matched = false;
 3395|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 16, False: 0]
  ------------------
 3396|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 16]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 16, False: 0]
  ------------------
 3401|     16|            break;
 3402|     16|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     16|    }
 3408|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3409|     16|        return unexpected_scan_error(
 3410|     16|            scan_error::invalid_scanned_value,
 3411|     16|            "Failed to parse integer: No digits found");
 3412|     16|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   369k|    {
 2413|   369k|        return m_current;
 2414|   369k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   369k|    {
 2417|   369k|        return m_count;
 2418|   369k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5663|    240|    {
 5664|    240|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5664:13): [True: 220, False: 20]
  ------------------
 5665|    240|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5665:13): [True: 0, False: 20]
  ------------------
 5666|    220|            return read_default(range, value, loc);
 5667|    220|        }
 5668|       |
 5669|     20|        reader_impl_for_int<CharT> reader{};
 5670|     20|        signed char tmp_value{};
 5671|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5672|     20|        value = static_cast<signed char>(value);
 5673|     20|        return ret;
 5674|    240|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5645|    878|    {
 5646|    878|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    878|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5647|    878|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5647:23): [Folded - Ignored]
  ------------------
 5648|    878|            return code_unit_reader<char>{}.read(range, value);
 5649|    878|        }
 5650|    878|        else {
 5651|    878|            SCN_UNUSED(range);
 5652|    878|            SCN_EXPECT(false);
 5653|    878|            SCN_UNREACHABLE;
 5654|    878|        }
 5655|    878|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5564|    878|    {
 5565|    878|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|    878|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    878|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    878|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    878|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 878]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    878|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    878|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|    878|        ch = *range.begin();
 5567|    878|        return it;
 5568|    878|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.38k|{
 1846|  6.38k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.38k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.38k|    return ranges::next(range.begin());
 1851|  6.38k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.9k|{
  950|  21.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.9k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.9k|    return eof_error::good;
  954|  21.9k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   558k|{
  944|   558k|    return is_range_eof(r.begin(), r.end());
  945|   558k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   697k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   697k|    {
  937|   697k|        return begin == end;
  938|   697k|    }
  939|   697k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  57.1k|    {
  296|  57.1k|        ++x;
  297|  57.1k|        return x;
  298|  57.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|     20|    {
 3540|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     20|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 20]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 20]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3566|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|     20|                    parse_integer_digits_without_thsep(
 3568|     20|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|     20|                        prefix_result.parsed_base));
 3570|       |
 3571|     20|            auto buf = make_contiguous_buffer(
 3572|     20|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|     20|            SCN_TRY(result_it,
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     20|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|     20|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.72k|{
 3326|  2.72k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.72k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.72k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.72k|        parse_integer_base_prefix(
 3331|  2.72k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.72k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.72k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  2.72k|    else {
 3344|  2.72k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 2.72k]
  ------------------
 3345|  2.72k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 2.72k, False: 0]
  ------------------
 3346|  2.72k|            digits_begin_it = base_prefix_begin_it;
 3347|  2.72k|        }
 3348|  2.72k|    }
 3349|       |
 3350|  2.72k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 2.72k, False: 0]
  ------------------
 3351|  2.72k|        sign = sign_type::plus_sign;
 3352|  2.72k|    }
 3353|  2.72k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  2.72k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  2.72k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.65k|{
 3141|  3.65k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.65k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.65k, False: 0]
  ------------------
 3143|  3.65k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.65k, False: 0]
  ------------------
 3144|  3.65k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.65k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.65k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.65k|{
 2272|  3.65k|    auto it = read_code_unit(range);
 2273|  3.65k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.65k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.30k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.30k, False: 3.65k]
  ------------------
 2278|  7.30k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.30k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.30k|    }
 2282|       |
 2283|  3.65k|    return unexpected(parse_error::error);
 2284|  3.65k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.72k|{
 3293|  2.72k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.71k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     22|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 22, False: 2.70k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     22|            bool zero_parsed = false;
 3302|     22|            auto it = apply_opt(
 3303|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     22|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    888|        case 16:
  ------------------
  |  Branch (3307:9): [True: 888, False: 1.83k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    888|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    888|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.71k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.78k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.78k, False: 934]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.78k|            return {range.begin(), base, false};
 3319|  2.72k|    }
 3320|  2.72k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    922|{
 2291|    922|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 922, False: 0]
  ------------------
 2292|    922|        return range.begin();
 2293|    922|    }
 2294|      0|    return *result;
 2295|    922|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     24|{
 3244|     24|    return read_matching_string_classic_nocase(range, "0b");
 3245|     24|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.70k|{
 2231|  3.70k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.70k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.70k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.70k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.70k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.70k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.70k, False: 0]
  ------------------
 2239|  3.70k|            return unexpected(parse_error::error);
 2240|  3.70k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.70k|    }
 2243|  3.70k|    else {
 2244|  3.70k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.70k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.70k|                return ch;
 2247|  3.70k|            }
 2248|  3.70k|            return static_cast<char_type>(ch +
 2249|  3.70k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.70k|        };
 2251|       |
 2252|  3.70k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.70k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.70k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.70k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.70k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.70k|                    return ascii_tolower(a) ==
 2259|  3.70k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.70k|                }))) {
 2261|  3.70k|            return unexpected(parse_error::error);
 2262|  3.70k|        }
 2263|       |
 2264|  3.70k|        return it;
 2265|  3.70k|    }
 2266|  3.70k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.85k|{
 2146|  1.85k|    auto it = read_code_unit(range);
 2147|  1.85k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.85k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.85k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.85k|        return unexpected(parse_error::error);
 2154|  1.85k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.85k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    900|{
 3251|    900|    return read_matching_string_classic_nocase(range, "0x");
 3252|    900|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|  2.69k|{
 3361|  2.69k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  2.69k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  2.69k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.69k]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|  2.69k|        return range.end();
 3370|  2.69k|    }
 3371|  2.69k|    else {
 3372|  2.69k|        return read_while1_code_unit(range,
 3373|  2.69k|                                     [&](char_type ch) noexcept {
 3374|  2.69k|                                         return char_to_int(ch) < base;
 3375|  2.69k|                                     })
 3376|  2.69k|            .transform_error(map_parse_error_to_scan_error(
 3377|  2.69k|                scan_error::invalid_scanned_value,
 3378|  2.69k|                "Failed to parse integer: No digits found"));
 3379|  2.69k|    }
 3380|  2.69k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3390|     24|{
 3391|     24|    std::basic_string<CharT> output;
 3392|     24|    std::string thsep_indices;
 3393|     24|    auto it = range.begin();
 3394|     24|    bool digit_matched = false;
 3395|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 24, False: 0]
  ------------------
 3396|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 24]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 24, False: 0]
  ------------------
 3401|     24|            break;
 3402|     24|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     24|    }
 3408|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3409|     24|        return unexpected_scan_error(
 3410|     24|            scan_error::invalid_scanned_value,
 3411|     24|            "Failed to parse integer: No digits found");
 3412|     24|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     24|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  14.3k|{
 1683|  14.3k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  14.3k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  14.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  14.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  14.3k|    }
 1688|  14.3k|    else {
 1689|  14.3k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  14.3k|    }
 1691|  14.3k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  14.3k|    {
 1490|  14.3k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   202k|    {
 1503|   202k|        return sv;
 1504|   202k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5951|  3.14k|{
 5952|  3.14k|    using char_type = detail::char_t<Range>;
 5953|  3.14k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5954|       |
 5955|  3.14k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5955:9): [True: 2.71k, False: 422]
  ------------------
 5956|  2.71k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5957|  2.71k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5958|       |
 5959|  2.71k|        if (max_width == 0) {
  ------------------
  |  Branch (5959:13): [True: 1.76k, False: 954]
  ------------------
 5960|  1.76k|            auto it = read_while_code_unit(range, pred);
 5961|       |
 5962|  1.76k|            if (want_skipped_width) {
  ------------------
  |  Branch (5962:17): [True: 160, False: 1.60k]
  ------------------
 5963|    160|                auto prefix_width =
 5964|    160|                    static_cast<std::ptrdiff_t>(
 5965|    160|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5966|    160|                    ranges::distance(range.begin(), it);
 5967|    160|                return result_type{it, prefix_width};
 5968|    160|            }
 5969|  1.60k|            return result_type{it, 0};
 5970|  1.76k|        }
 5971|       |
 5972|    954|        auto max_width_view = take_width(range, max_width);
 5973|    954|        auto w_it = read_while_code_unit(max_width_view, pred);
 5974|       |
 5975|    954|        if (want_skipped_width) {
  ------------------
  |  Branch (5975:13): [True: 954, False: 0]
  ------------------
 5976|    954|            return result_type{w_it.base(), max_width - w_it.count()};
 5977|    954|        }
 5978|      0|        return result_type{w_it.base(), 0};
 5979|    954|    }
 5980|       |
 5981|    422|    const auto fill_chars = fill.template get_code_units<char_type>();
 5982|    422|    if (max_width == 0) {
  ------------------
  |  Branch (5982:9): [True: 178, False: 244]
  ------------------
 5983|    178|        auto it = read_while_code_units(range, fill_chars);
 5984|       |
 5985|    178|        if (want_skipped_width) {
  ------------------
  |  Branch (5985:13): [True: 74, False: 104]
  ------------------
 5986|     74|            auto prefix_width =
 5987|     74|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5988|     74|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5989|     74|            return result_type{it, prefix_width};
 5990|     74|        }
 5991|    104|        return result_type{it, 0};
 5992|    178|    }
 5993|       |
 5994|    244|    auto max_width_view = take_width(range, max_width);
 5995|    244|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5996|       |
 5997|    244|    if (want_skipped_width) {
  ------------------
  |  Branch (5997:9): [True: 244, False: 0]
  ------------------
 5998|    244|        return result_type{w_it.base(), max_width - w_it.count()};
 5999|    244|    }
 6000|      0|    return result_type{w_it.base(), 0};
 6001|    244|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  2.00k|{
 1976|  2.00k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.00k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.31k|{
 1957|  2.31k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.31k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.31k|    }
 1960|  2.31k|    else {
 1961|  2.31k|        auto first = range.begin();
 1962|  2.31k|        for (; first != range.end(); ++first) {
 1963|  2.31k|            if (pred(*first)) {
 1964|  2.31k|                return first;
 1965|  2.31k|            }
 1966|  2.31k|        }
 1967|  2.31k|        return first;
 1968|  2.31k|    }
 1969|  2.31k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.71k|    {
  754|  2.71k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.36k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.36k|              cvref<T> obj = *get<T>(fn);
  745|  3.36k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.36k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.36k|              }
  748|  3.36k|              else {
  749|  3.36k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.36k|              }
  751|  3.36k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  3.36k|    {
  684|  3.36k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.36k|            return static_cast<T*>(s.m_cp);
  686|  3.36k|        }
  687|  3.36k|        else if constexpr (std::is_object_v<T>) {
  688|  3.36k|            return static_cast<T*>(s.m_p);
  689|  3.36k|        }
  690|  3.36k|        else {
  691|  3.36k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.36k|        }
  693|  3.36k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5957|  3.36k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.71k|        {
  667|  2.71k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|  1.03k|{
 1976|  1.03k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.03k|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.21k|{
 1957|  1.21k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.21k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.21k|    }
 1960|  1.21k|    else {
 1961|  1.21k|        auto first = range.begin();
 1962|  4.11k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 4.04k, False: 74]
  ------------------
 1963|  4.04k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.14k, False: 2.89k]
  ------------------
 1964|  1.14k|                return first;
 1965|  1.14k|            }
 1966|  4.04k|        }
 1967|     74|        return first;
 1968|  1.21k|    }
 1969|  1.21k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    178|{
 2037|    178|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    178|    auto it = range.begin();
 2040|    250|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 250, False: 0]
  ------------------
 2041|    250|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    250|                                           needle.size());
 2043|    250|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 244]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    244|        static_assert(
 2047|    244|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    244|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 172, False: 72]
  ------------------
 2049|    172|            return it;
 2050|    172|        }
 2051|     72|        it = *r;
 2052|     72|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    244|{
 2037|    244|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    244|    auto it = range.begin();
 2040|    286|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 262, False: 24]
  ------------------
 2041|    262|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    262|                                           needle.size());
 2043|    262|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 72, False: 190]
  ------------------
 2044|     72|            return it;
 2045|     72|        }
 2046|    190|        static_assert(
 2047|    190|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    190|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 148, False: 42]
  ------------------
 2049|    148|            return it;
 2050|    148|        }
 2051|     42|        it = *r;
 2052|     42|    }
 2053|     24|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     24|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     24|    return it;
 2055|     24|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  3.20k|{
 2951|  3.20k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.76k, False: 448]
  ------------------
 2952|  2.76k|        auto it = read_while_classic_space(range);
 2953|  2.76k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.76k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 2.67k]
  |  |  ------------------
  ------------------
 2955|     90|            return unexpected(e);
 2956|     90|        }
 2957|       |
 2958|  2.67k|        return it;
 2959|  2.76k|    }
 2960|       |
 2961|    448|    return read_while_classic_space(range);
 2962|  3.20k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  3.20k|{
 2117|  3.20k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.20k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.20k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.20k|        auto buf = make_contiguous_buffer(range);
 2121|  3.20k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.20k|        return ranges::next(range.begin(),
 2123|  3.20k|                            ranges::distance(buf.view().begin(), it));
 2124|  3.20k|    }
 2125|  3.20k|    else {
 2126|  3.20k|        auto it = range.begin();
 2127|       |
 2128|  3.20k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.20k|            auto seg = get_contiguous_beginning(range);
 2130|  3.20k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.20k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 3.20k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  3.20k|            ranges::advance(it, seg.size());
 2135|  3.20k|        }
 2136|       |
 2137|  3.20k|        return read_while_code_point(
 2138|  3.20k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.20k|    }
 2140|  3.20k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  4.25k|{
 1039|  4.25k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  4.25k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  4.25k|        return r;
 1042|  4.25k|    }
 1043|  4.25k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  4.25k|                           ranges::const_iterator_t<Range>,
 1045|  4.25k|                           typename detail::basic_scan_buffer<
 1046|  4.25k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  4.25k|        if constexpr (ranges::common_range<Range>) {
 1048|  4.25k|            auto seg = r.begin().contiguous_segment();
 1049|  4.25k|            auto dist =
 1050|  4.25k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  4.25k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  4.25k|        }
 1053|  4.25k|        else {
 1054|  4.25k|            return r.begin().contiguous_segment();
 1055|  4.25k|        }
 1056|  4.25k|    }
 1057|  4.25k|    else {
 1058|  4.25k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  4.25k|    }
 1060|  4.25k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  3.70k|{
 2082|  3.70k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.70k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  3.78k|{
 2061|  3.78k|    auto it = range.begin();
 2062|   103k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 103k, False: 252]
  ------------------
 2063|   103k|        const auto val =
 2064|   103k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   103k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   103k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 102k, False: 446]
  |  |  ------------------
  ------------------
 2066|   102k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   102k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   102k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.53k, False: 99.4k]
  ------------------
 2069|  3.53k|                return it;
 2070|  3.53k|            }
 2071|   102k|        }
 2072|  99.8k|        it = val.iterator;
 2073|  99.8k|    }
 2074|       |
 2075|    252|    return it;
 2076|  3.78k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   143k|{
 1899|   143k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   143k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   143k|    auto it = range.begin();
 1903|   143k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   143k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.68k, False: 138k]
  |  |  ------------------
  ------------------
 1906|  4.68k|        ++it;
 1907|  4.68k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.68k|        return {it, {}};
 1909|  4.68k|    }
 1910|       |
 1911|   138k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 126k, False: 12.0k]
  ------------------
 1912|   126k|        ++it;
 1913|   126k|        return {it, string_type(1, *range.begin())};
 1914|   126k|    }
 1915|       |
 1916|  12.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  12.0k|    return {it, string_type{range.begin(), it}};
 1918|   138k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  4.68k|{
 1155|  4.68k|    auto it = input.begin();
 1156|  25.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 25.0k, False: 132]
  ------------------
 1157|  25.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.55k, False: 20.5k]
  ------------------
 1158|  4.55k|            break;
 1159|  4.55k|        }
 1160|  25.0k|    }
 1161|  4.68k|    return it;
 1162|  4.68k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  12.0k|    {
  283|  12.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  12.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  12.0k|    {
  227|  12.0k|        constexpr iter_difference_t<I> zero{0};
  228|  12.0k|        iter_difference_t<I> counter{0};
  229|       |
  230|  12.0k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 12.0k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  12.0k|        else {
  237|  38.1k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 26.1k, False: 11.9k]
  |  Branch (237:34): [True: 26.1k, False: 48]
  ------------------
  238|  26.1k|                ++i;
  239|  26.1k|                ++counter;
  240|  26.1k|            }
  241|  12.0k|        }
  242|       |
  243|  12.0k|        return counter;
  244|  12.0k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  3.20k|    {
  754|  3.20k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  9.81k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.81k|              cvref<T> obj = *get<T>(fn);
  745|  9.81k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.81k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.81k|              }
  748|  9.81k|              else {
  749|  9.81k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.81k|              }
  751|  9.81k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  9.81k|    {
  684|  9.81k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.81k|            return static_cast<T*>(s.m_cp);
  686|  9.81k|        }
  687|  9.81k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.81k|            return static_cast<T*>(s.m_p);
  689|  9.81k|        }
  690|  9.81k|        else {
  691|  9.81k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.81k|        }
  693|  9.81k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  9.81k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  3.20k|        {
  662|  3.20k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.15k|{
 2951|  7.15k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.95k, False: 200]
  ------------------
 2952|  6.95k|        auto it = read_while_classic_space(range);
 2953|  6.95k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.95k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.95k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.95k|        return it;
 2959|  6.95k|    }
 2960|       |
 2961|    200|    return read_while_classic_space(range);
 2962|  7.15k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  89.5k|{
 2117|  89.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  89.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  89.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  89.5k|        auto buf = make_contiguous_buffer(range);
 2121|  89.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  89.5k|        return ranges::next(range.begin(),
 2123|  89.5k|                            ranges::distance(buf.view().begin(), it));
 2124|  89.5k|    }
 2125|  89.5k|    else {
 2126|  89.5k|        auto it = range.begin();
 2127|       |
 2128|  89.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  89.5k|            auto seg = get_contiguous_beginning(range);
 2130|  89.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  89.5k|                seg_it != seg.end()) {
 2132|  89.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  89.5k|            }
 2134|  89.5k|            ranges::advance(it, seg.size());
 2135|  89.5k|        }
 2136|       |
 2137|  89.5k|        return read_while_code_point(
 2138|  89.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  89.5k|    }
 2140|  89.5k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  92.4k|{
 1683|  92.4k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  92.4k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  92.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  92.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  92.4k|    }
 1688|  92.4k|    else {
 1689|  92.4k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  92.4k|    }
 1691|  92.4k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  92.4k|    {
 1490|  92.4k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  11.7k|    {
 3040|  11.7k|        reader_error_handler eh{};
 3041|  11.7k|        get_derived().check_specs_impl(specs, eh);
 3042|  11.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 1.29k]
  |  |  ------------------
  ------------------
 3043|  10.4k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  10.4k|        }
 3045|  1.29k|        return {};
 3046|  11.7k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  11.7k|    {
 3051|  11.7k|        return static_cast<Derived&>(*this);
 3052|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|  11.7k|    {
 3486|  11.7k|        detail::check_int_type_specs(specs, eh);
 3487|  11.7k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.61k|    {
 3035|  2.61k|        return true;
 3036|  2.61k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    380|    {
 3540|    380|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    380|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    380|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 380]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    380|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 380]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    380|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    380|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 372, False: 8]
  |  |  ------------------
  ------------------
 3566|    372|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 372, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    372|    }                                                  \
  |  |  |  | 3642|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      8|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      8|            localized_number_formatting_options<CharT>{loc};
 3587|      8|#endif
 3588|       |
 3589|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    252|    {
 3540|    252|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    252|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    252|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 252]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    252|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 252]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    252|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 240, False: 12]
  |  |  ------------------
  ------------------
 3566|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    240|                    parse_integer_digits_without_thsep(
 3568|    240|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    240|                        prefix_result.parsed_base));
 3570|       |
 3571|    240|            auto buf = make_contiguous_buffer(
 3572|    240|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    240|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    240|    }                                                  \
  |  |  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    240|        }
 3581|       |
 3582|     12|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     12|            localized_number_formatting_options<CharT>{loc};
 3587|     12|#endif
 3588|       |
 3589|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     12|    }                                                  \
  |  |  |  | 3642|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    380|    {
 3540|    380|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    380|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    380|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 380]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    380|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 380]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    380|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    380|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 372, False: 8]
  |  |  ------------------
  ------------------
 3566|    372|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 372, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    372|    }                                                  \
  |  |  |  | 3642|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      8|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      8|            localized_number_formatting_options<CharT>{loc};
 3587|      8|#endif
 3588|       |
 3589|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    252|    {
 3540|    252|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    252|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    252|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 252]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    252|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 252]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    252|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 240, False: 12]
  |  |  ------------------
  ------------------
 3566|    240|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    240|                    parse_integer_digits_without_thsep(
 3568|    240|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    240|                        prefix_result.parsed_base));
 3570|       |
 3571|    240|            auto buf = make_contiguous_buffer(
 3572|    240|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    240|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 240, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    240|    }                                                  \
  |  |  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    240|        }
 3581|       |
 3582|     12|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     12|            localized_number_formatting_options<CharT>{loc};
 3587|     12|#endif
 3588|       |
 3589|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     12|    }                                                  \
  |  |  |  | 3642|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    348|    {
 3540|    348|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    348|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    348|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 348]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    348|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 348]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    348|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    348|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 348, False: 0]
  |  |  ------------------
  ------------------
 3566|    348|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 348, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    348|    }                                                  \
  |  |  |  | 3642|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    882|    {
 3540|    882|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 882]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    882|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    882|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 882]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    882|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 882]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    882|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    882|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 882, False: 0]
  |  |  ------------------
  ------------------
 3566|    882|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 882]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    882|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    882|                    parse_integer_digits_without_thsep(
 3568|    882|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    882|                        prefix_result.parsed_base));
 3570|       |
 3571|    882|            auto buf = make_contiguous_buffer(
 3572|    882|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    882|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 882, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    882|    }                                                  \
  |  |  |  | 3642|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    882|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.87k|    {
 3040|  5.87k|        reader_error_handler eh{};
 3041|  5.87k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.87k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.23k, False: 644]
  |  |  ------------------
  ------------------
 3043|  5.23k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.23k|        }
 3045|    644|        return {};
 3046|  5.87k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  5.87k|    {
 3051|  5.87k|        return static_cast<Derived&>(*this);
 3052|  5.87k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|  5.87k|    {
 4146|  5.87k|        detail::check_float_type_specs(specs, eh);
 4147|  5.87k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.30k|    {
 3035|  1.30k|        return true;
 3036|  1.30k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4217|    634|    {
 4218|    634|        unsigned options{};
 4219|    634|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 18, False: 616]
  ------------------
 4220|     18|            options |= float_reader_base::allow_thsep;
 4221|     18|        }
 4222|       |
 4223|    634|        SCN_GCC_COMPAT_PUSH
 4224|    634|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|    634|        switch (specs.type) {
 4227|     32|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 32, False: 602]
  ------------------
 4228|     32|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|     10|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 10, False: 624]
  ------------------
 4231|     10|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 12, False: 622]
  ------------------
 4234|     12|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 2, False: 632]
  ------------------
 4237|      2|                return options | float_reader_base::allow_scientific |
 4238|      2|                       float_reader_base::allow_fixed;
 4239|       |
 4240|    578|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 578, False: 56]
  ------------------
 4241|    578|                return options | float_reader_base::allow_scientific |
 4242|    578|                       float_reader_base::allow_fixed |
 4243|    578|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 634]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|    634|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|    634|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|    634|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|    634|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.29k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.58k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|    894|    {
 4058|    894|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 894, False: 0]
  ------------------
 4059|    894|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 894, False: 0]
  ------------------
 4060|    894|            return;
 4061|    894|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    828|    {
 1587|    828|        return m_storage.has_value();
 1588|    828|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    414|    {
 1592|    414|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    414|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    414|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    414|        return *m_storage;
 1594|    414|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    364|    {
  763|    364|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    364|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3679|      8|    {
 3680|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|      8|        return read_source_impl(range);
 3686|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3705|    364|    {
 3706|    364|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|    364|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|    364|        auto it = sign_result.first;
 3709|    364|        m_sign = sign_result.second;
 3710|       |
 3711|    364|        auto digits_begin = it;
 3712|    364|        auto r = ranges::subrange{it, range.end()};
 3713|    364|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    364|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|    364|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|    364|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|    364|                SCN_TRY_ASSIGN(
 3718|    364|                    it,
 3719|    364|                    do_read_source_impl(
 3720|    364|                        r,
 3721|    364|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|    364|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|    364|            }
 3724|    364|            else {
 3725|    364|                auto cb = [&](const auto& rr)
 3726|    364|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    364|                    auto res = read_all(rr);
 3728|    364|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|    364|                        return unexpected_scan_error(
 3730|    364|                            scan_error::invalid_scanned_value,
 3731|    364|                            "Invalid float value");
 3732|    364|                    }
 3733|    364|                    return res;
 3734|    364|                };
 3735|    364|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|    364|            }
 3737|    364|        }
 3738|    364|        else {
 3739|    364|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 364, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    364|    }                                                  \
  |  | 3642|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|      0|                it,
 3741|      0|                do_read_source_impl(
 3742|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|      0|        }
 3745|       |
 3746|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  |  Branch (3748:48): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 0, False: 0]
  ------------------
 3751|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|      0|        }
 3753|       |
 3754|      0|        handle_separators();
 3755|       |
 3756|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|      0|        return it;
 3769|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4000|    364|    {
 4001|    364|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|    364|        const bool allowed_nonhex =
 4003|    364|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|    364|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|    364|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 364, False: 0]
  |  Branch (4006:45): [True: 0, False: 364]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|    364|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 364]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|    364|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 364, False: 0]
  |  Branch (4015:45): [True: 0, False: 364]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|    364|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 364]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|    364|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 354, False: 10]
  |  Branch (4022:28): [True: 2, False: 352]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|      2|            auto it = range.begin();
 4026|       |
 4027|      2|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 2]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|      2|            else {
 4032|      2|                m_kind = float_kind::hex_without_prefix;
 4033|      2|            }
 4034|       |
 4035|      2|            return read_hex(ranges::subrange{it, range.end()});
 4036|      2|        }
 4037|    362|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 10, False: 352]
  |  Branch (4037:29): [True: 10, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|     10|            m_kind = float_kind::generic;
 4041|     10|            return read_regular_float(range);
 4042|     10|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    352|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 352]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    352|        m_kind = float_kind::generic;
 4053|    352|        return read_regular(range);
 4054|    352|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3811|    364|    {
 3812|    364|        auto it = range.begin();
 3813|    364|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 364, False: 0]
  ------------------
 3814|    364|            return unexpected(r.error());
 3815|    364|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3834|    364|    {
 3835|    364|        auto it = range.begin();
 3836|    364|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 364, False: 0]
  ------------------
 3837|    364|            return r.transform_error(map_parse_error_to_scan_error(
 3838|    364|                scan_error::invalid_scanned_value,
 3839|    364|                "Invalid floating-point NaN value"));
 3840|    364|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3804|    354|    {
 3805|    354|        return read_matching_string_classic_nocase(range, "0x");
 3806|    354|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3904|      2|    {
 3905|      2|        auto it = range.begin();
 3906|       |
 3907|      2|        std::ptrdiff_t digits_count = 0;
 3908|      2|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3910|      2|            return r.transform_error(map_parse_error_to_scan_error(
 3911|      2|                scan_error::invalid_scanned_value,
 3912|      2|                "Invalid hexadecimal floating-point value"));
 3913|      2|        }
 3914|      0|        else {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        m_integral_part_length = digits_count;
 3920|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 0, False: 0]
  ------------------
 3921|      0|                                             m_locale_options.decimal_point)) {
 3922|      0|            it = *r;
 3923|      0|        }
 3924|       |
 3925|      0|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 0, False: 0]
  ------------------
 3926|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|      0|            digits_count += ranges::distance(it, *r);
 3928|      0|            it = *r;
 3929|      0|        }
 3930|       |
 3931|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|      0|        return it;
 3939|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3789|      2|    {
 3790|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2]
  |  |  |  Branch (859:45): [True: 0, False: 2]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|      2|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|      2|        return read_while1_code_unit(
 3799|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|      2|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      2|    {
  754|      2|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|      2|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      2|                  obj(static_cast<decltype(args)>(args)...);
  747|      2|              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      2|    {
  684|      2|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      2|            return static_cast<T*>(s.m_cp);
  686|      2|        }
  687|      2|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      2|            return static_cast<T*>(s.m_p);
  689|      2|        }
  690|      2|        else {
  691|      2|            return reinterpret_cast<T*>(s.m_fp);
  692|      2|        }
  693|      2|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3799|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      2|        {
  662|      2|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3944|    362|    {
 3945|    362|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|    362|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 354, False: 8]
  |  Branch (3946:50): [True: 2, False: 352]
  ------------------
 3947|       |
 3948|    362|        auto it = ranges::begin(range);
 3949|    362|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|    362|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|    362|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  ------------------
  ------------------
 3953|    362|            return r.transform_error(
 3954|    362|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|    362|                                              "Invalid floating-point value"));
 3956|    362|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3774|    362|    {
 3775|    362|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  Branch (859:45): [True: 0, False: 362]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|    362|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|    362|        return read_while1_code_unit(
 3784|    362|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|    362|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    362|    {
  754|    362|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    362|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    362|              cvref<T> obj = *get<T>(fn);
  745|    362|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    362|                  obj(static_cast<decltype(args)>(args)...);
  747|    362|              }
  748|    362|              else {
  749|    362|                  return obj(static_cast<decltype(args)>(args)...);
  750|    362|              }
  751|    362|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    362|    {
  684|    362|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    362|            return static_cast<T*>(s.m_cp);
  686|    362|        }
  687|    362|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    362|            return static_cast<T*>(s.m_p);
  689|    362|        }
  690|    362|        else {
  691|    362|            return reinterpret_cast<T*>(s.m_fp);
  692|    362|        }
  693|    362|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3784|    362|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    362|        {
  662|    362|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3665|    356|    {
 3666|    356|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    356|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 356]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|    356|        return read_source_impl(range);
 3672|    356|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    928|    {
  763|    928|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    928|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    928|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|     10|    {
 3680|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|     10|        return read_source_impl(range);
 3686|     10|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|    928|    {
 3706|    928|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|    928|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    928|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    928|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 928]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    928|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    928|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|    928|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|    928|        auto it = sign_result.first;
 3709|    928|        m_sign = sign_result.second;
 3710|       |
 3711|    928|        auto digits_begin = it;
 3712|    928|        auto r = ranges::subrange{it, range.end()};
 3713|    928|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    928|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|    928|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 928]
  |  |  |  Branch (859:45): [True: 0, False: 928]
  |  |  |  Branch (859:45): [True: 0, False: 928]
  |  |  ------------------
  ------------------
 3716|    928|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|    928|            else {
 3725|    928|                auto cb = [&](const auto& rr)
 3726|    928|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    928|                    auto res = read_all(rr);
 3728|    928|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|    928|                        return unexpected_scan_error(
 3730|    928|                            scan_error::invalid_scanned_value,
 3731|    928|                            "Invalid float value");
 3732|    928|                    }
 3733|    928|                    return res;
 3734|    928|                };
 3735|    928|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|    928|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    928|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 34, False: 894]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     34|    }                                                  \
  |  | 3642|    928|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    928|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|    894|            }
 3737|    928|        }
 3738|    894|        else {
 3739|    894|            SCN_TRY_ASSIGN(
 3740|    894|                it,
 3741|    894|                do_read_source_impl(
 3742|    894|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|    894|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|    894|        }
 3745|       |
 3746|    894|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|    894|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 894, False: 0]
  |  Branch (3748:48): [True: 894, False: 0]
  ------------------
 3749|    894|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 894, False: 0]
  ------------------
 3750|    894|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 894, False: 0]
  ------------------
 3751|    894|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|    894|        }
 3753|       |
 3754|    894|        handle_separators();
 3755|       |
 3756|    894|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 894]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|    894|        return it;
 3769|    894|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|    928|    {
 3812|    928|        auto it = range.begin();
 3813|    928|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 928, False: 0]
  ------------------
 3814|    928|            return unexpected(r.error());
 3815|    928|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|    928|    {
 3835|    928|        auto it = range.begin();
 3836|    928|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 928, False: 0]
  ------------------
 3837|    928|            return r.transform_error(map_parse_error_to_scan_error(
 3838|    928|                scan_error::invalid_scanned_value,
 3839|    928|                "Invalid floating-point NaN value"));
 3840|    928|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|    894|    {
 3805|    894|        return read_matching_string_classic_nocase(range, "0x");
 3806|    894|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     34|{
 1996|     34|    auto it = read_while_code_unit(range, pred);
 1997|     34|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 34, False: 0]
  ------------------
 1998|     34|        return unexpected(parse_error::error);
 1999|     34|    }
 2000|      0|    return it;
 2001|     34|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|     34|    {
 3945|     34|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|     34|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 10, False: 24]
  |  Branch (3946:50): [True: 8, False: 2]
  ------------------
 3947|       |
 3948|     34|        auto it = ranges::begin(range);
 3949|     34|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|     34|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|     34|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 3953|     34|            return r.transform_error(
 3954|     34|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|     34|                                              "Invalid floating-point value"));
 3956|     34|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|     34|    {
 3775|     34|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  |  Branch (859:45): [True: 0, False: 34]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|     34|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|     34|        return read_while1_code_unit(
 3784|     34|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|     34|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     34|    {
  684|     34|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     34|            return static_cast<T*>(s.m_cp);
  686|     34|        }
  687|     34|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     34|            return static_cast<T*>(s.m_p);
  689|     34|        }
  690|     34|        else {
  691|     34|            return reinterpret_cast<T*>(s.m_fp);
  692|     34|        }
  693|     34|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|     34|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|    928|    {
 4001|    928|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|    928|        const bool allowed_nonhex =
 4003|    928|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|    928|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|    928|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 928, False: 0]
  |  Branch (4006:45): [True: 0, False: 928]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|    928|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 928]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|    928|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 928, False: 0]
  |  Branch (4015:45): [True: 0, False: 928]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|    928|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 928]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|    928|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 894, False: 34]
  |  Branch (4022:28): [True: 10, False: 884]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|     10|            auto it = range.begin();
 4026|       |
 4027|     10|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 10]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|     10|            else {
 4032|     10|                m_kind = float_kind::hex_without_prefix;
 4033|     10|            }
 4034|       |
 4035|     10|            return read_hex(ranges::subrange{it, range.end()});
 4036|     10|        }
 4037|    918|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 34, False: 884]
  |  Branch (4037:29): [True: 34, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|     34|            m_kind = float_kind::generic;
 4041|     34|            return read_regular_float(range);
 4042|     34|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    884|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    884|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 884]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    884|        m_kind = float_kind::generic;
 4053|    884|        return read_regular(range);
 4054|    884|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|    894|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    894|                    auto res = read_all(rr);
 3728|    894|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 894]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|    894|                    return res;
 3734|    894|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    894|{
 1839|    894|    return ranges::next(range.begin(), range.end());
 1840|    894|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    894|    {
  313|    894|        ranges::advance(x, bound);
  314|    894|        return x;
  315|    894|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    894|    {
  275|    894|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    894|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    936|    {
  190|    936|        i = std::move(bound);
  191|    936|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    894|    {
 1577|    894|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    894|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    894|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    894|    {
 1621|    894|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    894|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    894|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    894|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    894|            m_storage.reset();
 1627|    894|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    894|        }
 1629|    894|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    894|                                          std::basic_string<CharT>>) {
 1631|    894|            m_storage.emplace(SCN_FWD(range));
 1632|    894|            m_view = string_view_type{*m_storage};
 1633|    894|        }
 1634|    894|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    894|                                          typename detail::basic_scan_buffer<
 1636|    894|                                              value_t>::forward_iterator> &&
 1637|    894|                           ranges::common_range<Range>) {
 1638|    894|            auto beg_seg = range.begin().contiguous_segment();
 1639|    894|            auto end_seg = range.end().contiguous_segment();
 1640|    894|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    894|                             detail::to_address(end_seg.end()))) {
 1642|    894|                auto& str = m_storage.emplace();
 1643|    894|                str.reserve(range.end().position() - range.begin().position());
 1644|    894|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    894|                m_view = string_view_type{str};
 1646|    894|                return;
 1647|    894|            }
 1648|       |
 1649|    894|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    894|                                                            end_seg.data());
 1651|    894|            m_storage.reset();
 1652|    894|        }
 1653|    894|        else {
 1654|    894|            auto& str = m_storage.emplace();
 1655|    894|            if constexpr (ranges::sized_range<Range>) {
 1656|    894|                str.reserve(range.size());
 1657|    894|            }
 1658|    894|            if constexpr (ranges::common_range<Range>) {
 1659|    894|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    894|                          std::back_inserter(str));
 1661|    894|            }
 1662|    894|            else {
 1663|    894|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    894|                     ++it) {
 1665|    894|                    str.push_back(*it);
 1666|    894|                }
 1667|    894|            }
 1668|    894|            m_view = string_view_type{str};
 1669|    894|        }
 1670|    894|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|    918|    {
 3666|    918|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|    918|        return read_source_impl(range);
 3672|    918|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|    894|    {
 3692|    894|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    894|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    894|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|    894|        const std::ptrdiff_t sign_len =
 3695|    894|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 894]
  ------------------
 3696|       |
 3697|    894|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|    894|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    894|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    894|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    894|    }                                                  \
  |  |  |  | 3642|    894|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|    894|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4170|    364|    {
 4171|    364|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    364|#if !SCN_DISABLE_LOCALE
 4174|    364|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 8, False: 356]
  ------------------
 4175|      8|            return read_impl<Range>(
 4176|      8|                range, rd,
 4177|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4178|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|      8|                },
 4180|      8|                value, loc);
 4181|      8|        }
 4182|    356|#endif
 4183|       |
 4184|    356|        return read_impl<Range>(
 4185|    356|            range, rd,
 4186|    356|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    356|                return r.read_source(SCN_FWD(args)...);
 4188|    356|            },
 4189|    356|            value);
 4190|    364|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|    364|    {
 4207|    364|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|    364|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 364, False: 0]
  |  |  ------------------
  ------------------
 4209|    364|            return unexpected(r.error());
 4210|    364|        }
 4211|       |
 4212|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4177|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4178|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    356|    {
  754|    356|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    356|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    356|              cvref<T> obj = *get<T>(fn);
  745|    356|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    356|                  obj(static_cast<decltype(args)>(args)...);
  747|    356|              }
  748|    356|              else {
  749|    356|                  return obj(static_cast<decltype(args)>(args)...);
  750|    356|              }
  751|    356|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    356|    {
  684|    356|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    356|            return static_cast<T*>(s.m_cp);
  686|    356|        }
  687|    356|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    356|            return static_cast<T*>(s.m_p);
  689|    356|        }
  690|    356|        else {
  691|    356|            return reinterpret_cast<T*>(s.m_fp);
  692|    356|        }
  693|    356|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4186|    356|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    356|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    356|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    356|        {
  662|    356|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|    270|    {
 4171|    270|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    270|#if !SCN_DISABLE_LOCALE
 4174|    270|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 10, False: 260]
  ------------------
 4175|     10|            return read_impl<Range>(
 4176|     10|                range, rd,
 4177|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|     10|                },
 4180|     10|                value, loc);
 4181|     10|        }
 4182|    260|#endif
 4183|       |
 4184|    260|        return read_impl<Range>(
 4185|    260|            range, rd,
 4186|    260|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    260|                return r.read_source(SCN_FWD(args)...);
 4188|    260|            },
 4189|    260|            value);
 4190|    270|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|    928|    {
 4207|    928|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|    928|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 894]
  |  |  ------------------
  ------------------
 4209|     34|            return unexpected(r.error());
 4210|     34|        }
 4211|       |
 4212|    894|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|    894|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    894|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    894|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    894|    }                                                  \
  |  |  |  | 3642|    894|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|    894|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    260|    {
  754|    260|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    260|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    260|              cvref<T> obj = *get<T>(fn);
  745|    260|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    260|                  obj(static_cast<decltype(args)>(args)...);
  747|    260|              }
  748|    260|              else {
  749|    260|                  return obj(static_cast<decltype(args)>(args)...);
  750|    260|              }
  751|    260|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    260|    {
  684|    260|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    260|            return static_cast<T*>(s.m_cp);
  686|    260|        }
  687|    260|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    260|            return static_cast<T*>(s.m_p);
  689|    260|        }
  690|    260|        else {
  691|    260|            return reinterpret_cast<T*>(s.m_fp);
  692|    260|        }
  693|    260|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|    260|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    260|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    260|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    260|        {
  662|    260|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5809|  6.50k|{
 5810|  6.50k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  6.50k|        return reader_impl_for_bool<CharT>{};
 5812|  6.50k|    }
 5813|  6.50k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  6.50k|        return reader_impl_for_char<CharT>{};
 5815|  6.50k|    }
 5816|  6.50k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  6.50k|        return reader_impl_for_wchar<CharT>{};
 5818|  6.50k|    }
 5819|  6.50k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  6.50k|        return reader_impl_for_code_point<CharT>{};
 5821|  6.50k|    }
 5822|  6.50k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.50k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  6.50k|        return reader_impl_for_string<CharT>{};
 5825|  6.50k|    }
 5826|  6.50k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.50k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  6.50k|        return reader_impl_for_string<CharT>{};
 5829|  6.50k|    }
 5830|  6.50k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  6.50k|                       std::is_same_v<T, wregex_matches>) {
 5832|  6.50k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  6.50k|    }
 5834|  6.50k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  6.50k|        return reader_impl_for_voidptr<CharT>{};
 5836|  6.50k|    }
 5837|  6.50k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  6.50k|        return reader_impl_for_float<CharT>{};
 5839|  6.50k|    }
 5840|  6.50k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  6.50k|                       !std::is_same_v<T, wchar_t> &&
 5842|  6.50k|                       !std::is_same_v<T, char32_t> &&
 5843|  6.50k|                       !std::is_same_v<T, bool>) {
 5844|  6.50k|        return reader_impl_for_int<CharT>{};
 5845|  6.50k|    }
 5846|  6.50k|    else {
 5847|  6.50k|        return reader_impl_for_monostate<CharT>{};
 5848|  6.50k|    }
 5849|  6.50k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5206|  19.5k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  17.5k|    {
 3040|  17.5k|        reader_error_handler eh{};
 3041|  17.5k|        get_derived().check_specs_impl(specs, eh);
 3042|  17.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 17.1k]
  |  |  ------------------
  ------------------
 3043|    384|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    384|        }
 3045|  17.1k|        return {};
 3046|  17.5k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  17.5k|    {
 3051|  17.5k|        return static_cast<Derived&>(*this);
 3052|  17.5k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|  17.5k|    {
 5211|  17.5k|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|  17.5k|        SCN_GCC_PUSH
 5214|  17.5k|        SCN_GCC_IGNORE("-Wswitch")
 5215|  17.5k|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|  17.5k|        SCN_CLANG_PUSH
 5218|  17.5k|        SCN_CLANG_IGNORE("-Wswitch")
 5219|  17.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|  17.5k|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 378, False: 17.1k]
  ------------------
 5222|  1.70k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 1.70k, False: 15.8k]
  ------------------
 5223|  1.70k|                m_type = reader_type::word;
 5224|  1.70k|                break;
 5225|       |
 5226|    498|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 498, False: 17.0k]
  ------------------
 5227|    498|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 102, False: 396]
  ------------------
 5228|    498|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 174, False: 222]
  ------------------
 5229|    276|                    m_type = reader_type::custom_word;
 5230|    276|                }
 5231|    222|                else {
 5232|    222|                    m_type = reader_type::word;
 5233|    222|                }
 5234|    498|                break;
 5235|      0|            }
 5236|       |
 5237|    132|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 132, False: 17.3k]
  ------------------
 5238|    132|                m_type = reader_type::character;
 5239|    132|                break;
 5240|       |
 5241|  4.06k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 4.06k, False: 13.4k]
  ------------------
 5242|  4.06k|                m_type = reader_type::character_set;
 5243|  4.06k|                break;
 5244|       |
 5245|  9.71k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 9.71k, False: 7.81k]
  ------------------
 5246|  9.71k|                m_type = reader_type::regex;
 5247|  9.71k|                break;
 5248|       |
 5249|  1.03k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 1.03k, False: 16.4k]
  ------------------
 5250|  1.03k|                m_type = reader_type::regex_escaped;
 5251|  1.03k|                break;
 5252|  17.5k|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|  17.5k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5259|  23.7k|    {
 5260|  23.7k|        return m_type == reader_type::word;
 5261|  23.7k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  11.2k|{
 1132|  11.2k|    auto it = src.begin();
 1133|   894k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 884k, False: 9.16k]
  ------------------
 1134|   884k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   884k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.43k, False: 883k]
  ------------------
 1136|  1.43k|            return false;
 1137|  1.43k|        }
 1138|   883k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 216, False: 883k]
  ------------------
 1139|    216|            return false;
 1140|    216|        }
 1141|   883k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   883k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   883k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 468, False: 882k]
  ------------------
 1144|    468|            return false;
 1145|    468|        }
 1146|   882k|        it += len;
 1147|   882k|    }
 1148|  9.16k|    return true;
 1149|  11.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    414|{
 2993|    414|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    414|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 414, False: 0]
  ------------------
 2995|    414|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    414|    static_cast<    \
  |  |  929|    414|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    414|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    414|    }
 3001|    414|    else {
 3002|    414|        return transcode_impl(source.view(), dest);
 3003|    414|    }
 3004|       |
 3005|    414|    return {};
 3006|    414|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5103|  4.06k|        {
 5104|  4.06k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5104:17): [True: 612, False: 3.45k]
  ------------------
 5105|    612|                return {};
 5106|    612|            }
 5107|       |
 5108|  3.45k|            auto charset_string = specs.charset_string<SourceCharT>();
 5109|  3.45k|            auto it = detail::to_address(charset_string.begin());
 5110|  3.45k|            auto set = detail::parse_presentation_set(
 5111|  3.45k|                it, detail::to_address(charset_string.end()), nonascii);
 5112|  3.45k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 5113|      0|                return nonascii.err;
 5114|      0|            }
 5115|  3.45k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  3.45k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|  3.45k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  3.45k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|       |
 5118|  3.45k|            std::sort(nonascii.extra_ranges.begin(),
 5119|  3.45k|                      nonascii.extra_ranges.end());
 5120|  3.45k|            return {};
 5121|  3.45k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5138|   626k|        {
 5139|   626k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5139:17): [True: 64.6k, False: 562k]
  ------------------
 5140|  64.6k|                return helper.is_char_set_in_extra_literals(cp);
 5141|  64.6k|            }
 5142|       |
 5143|   562k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5144|   626k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5086|  64.6k|        {
 5087|       |            // TODO: binary search?
 5088|  64.6k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5088:17): [True: 0, False: 64.6k]
  ------------------
 5089|      0|                return false;
 5090|      0|            }
 5091|       |
 5092|  64.6k|            const auto cp_val = static_cast<uint32_t>(cp);
 5093|  64.6k|            return std::find_if(
 5094|  64.6k|                       nonascii.extra_ranges.begin(),
 5095|  64.6k|                       nonascii.extra_ranges.end(),
 5096|  64.6k|                       [cp_val](const auto& pair) noexcept {
 5097|  64.6k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5098|  64.6k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5099|  64.6k|                       }) != nonascii.extra_ranges.end();
 5100|  64.6k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5096|  17.0M|                       [cp_val](const auto& pair) noexcept {
 5097|  17.0M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5097:35): [True: 17.0M, False: 6.26k]
  ------------------
 5098|  17.0M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5098:35): [True: 63.5k, False: 16.9M]
  ------------------
 5099|  17.0M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5076|   568k|        {
 5077|   568k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   568k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   568k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5078|   568k|            const auto val =
 5079|   568k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5080|   568k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5081|   568k|                    (val % 8)) &
 5082|   568k|                   1u;
 5083|   568k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5129|  7.24k|        {
 5130|  7.24k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5130:17): [True: 924, False: 6.32k]
  ------------------
 5131|    924|                return false;
 5132|    924|            }
 5133|       |
 5134|  6.32k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5135|  7.24k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5073|  4.06k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5277|    804|    {
 5278|    804|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    804|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    804|        return read_impl(range, specs, value);
 5280|    804|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5295|    804|    {
 5296|    804|        SCN_CLANG_PUSH
 5297|    804|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    804|        switch (m_type) {
 5300|    348|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 348, False: 456]
  ------------------
 5301|    348|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     28|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 28, False: 776]
  ------------------
 5304|     28|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     28|                                                                   value);
 5306|       |
 5307|     42|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 42, False: 762]
  ------------------
 5308|     42|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    266|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 266, False: 538]
  ------------------
 5311|    266|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    266|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      2|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2, False: 802]
  ------------------
 5316|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      2|                    range, specs.charset_string<SourceCharT>(),
 5318|      2|                    specs.regexp_flags, value);
 5319|       |
 5320|    118|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 118, False: 686]
  ------------------
 5321|    118|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    118|                    range,
 5323|    118|                    get_unescaped_regex_pattern(
 5324|    118|                        specs.charset_string<SourceCharT>()),
 5325|    118|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 804]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    804|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    804|        }
 5332|       |
 5333|    804|        SCN_CLANG_POP
 5334|    804|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4820|    348|    {
 4821|    348|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    348|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4752|    418|{
 4753|    418|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    418|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    418|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 204, False: 214]
  ------------------
 4757|    204|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    204|                                     "Invalid encoding in scanned string");
 4759|    204|    }
 4760|    214|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    214|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 214]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    214|    return SCN_MOVE(result);
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    214|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|  1.04k|{
 2088|  1.04k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.04k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.04k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.04k|        auto buf = make_contiguous_buffer(range);
 2092|  1.04k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.04k|        return ranges::next(range.begin(),
 2094|  1.04k|                            ranges::distance(buf.view().begin(), it));
 2095|  1.04k|    }
 2096|  1.04k|    else {
 2097|  1.04k|        auto it = range.begin();
 2098|       |
 2099|  1.04k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.04k|            auto seg = get_contiguous_beginning(range);
 2101|  1.04k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.04k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 1.04k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  1.04k|            ranges::advance(it, seg.size());
 2106|  1.04k|        }
 2107|       |
 2108|  1.04k|        return read_until_code_point(
 2109|  1.04k|            ranges::subrange{it, range.end()},
 2110|  1.04k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.04k|    }
 2112|  1.04k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|  1.04k|{
 2061|  1.04k|    auto it = range.begin();
 2062|  40.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 40.1k, False: 696]
  ------------------
 2063|  40.1k|        const auto val =
 2064|  40.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  40.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  40.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 35.8k, False: 4.24k]
  |  |  ------------------
  ------------------
 2066|  35.8k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  35.8k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  35.8k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 348, False: 35.5k]
  ------------------
 2069|    348|                return it;
 2070|    348|            }
 2071|  35.8k|        }
 2072|  39.7k|        it = val.iterator;
 2073|  39.7k|    }
 2074|       |
 2075|    696|    return it;
 2076|  1.04k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.04k|    {
  754|  1.04k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  35.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.8k|              cvref<T> obj = *get<T>(fn);
  745|  35.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.8k|              }
  748|  35.8k|              else {
  749|  35.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.8k|              }
  751|  35.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  35.8k|    {
  684|  35.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.8k|            return static_cast<T*>(s.m_cp);
  686|  35.8k|        }
  687|  35.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.8k|            return static_cast<T*>(s.m_p);
  689|  35.8k|        }
  690|  35.8k|        else {
  691|  35.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.8k|        }
  693|  35.8k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  35.8k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.04k|        {
  662|  1.04k|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4841|     28|    {
 4842|     28|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 14, False: 14]
  ------------------
 4843|     14|            return read_string_impl(
 4844|     14|                range,
 4845|     14|                read_until_code_unit(
 4846|     14|                    range,
 4847|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     14|                        SourceCharT ch) { return ch == until; }),
 4849|     14|                value);
 4850|     14|        }
 4851|     14|        return read_string_impl(
 4852|     14|            range,
 4853|     14|            read_until_code_units(
 4854|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|     14|            value);
 4856|     28|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|     44|    {
  684|     44|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     44|            return static_cast<T*>(s.m_cp);
  686|     44|        }
  687|     44|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     44|            return static_cast<T*>(s.m_p);
  689|     44|        }
  690|     44|        else {
  691|     44|            return reinterpret_cast<T*>(s.m_fp);
  692|     44|        }
  693|     44|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4848|     44|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|    132|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    132|            auto it = first;
 2017|    222|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    222|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 24, False: 198]
  ------------------
 2019|     24|                    return first;
 2020|     24|                }
 2021|    198|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 18, False: 180]
  ------------------
 2022|     18|                    return it;
 2023|     18|                }
 2024|    180|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 90, False: 90]
  ------------------
 2025|     90|                    break;
 2026|     90|                }
 2027|    180|            }
 2028|     90|            ++first;
 2029|     90|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4947|     42|    {
 4948|     42|        return read_impl(
 4949|     42|            range,
 4950|     42|            [&](const auto& rng) {
 4951|     42|                return read_string_impl(rng, read_all(rng), value);
 4952|     42|            },
 4953|     42|            detail::priority_tag<1>{});
 4954|     42|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     42|    {
 4975|     42|        return read_cb(range);
 4976|     42|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4950|     42|            [&](const auto& rng) {
 4951|     42|                return read_string_impl(rng, read_all(rng), value);
 4952|     42|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    126|{
 1839|    126|    return ranges::next(range.begin(), range.end());
 1840|    126|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    126|    {
  313|    126|        ranges::advance(x, bound);
  314|    126|        return x;
  315|    126|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    126|    {
  275|    126|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    126|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    126|    {
  203|  3.54k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 3.42k, False: 126]
  ------------------
  204|  3.42k|            ++i;
  205|  3.42k|        }
  206|    126|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5048|    266|    {
 5049|    266|        auto it = read_source_impl(range, {specs});
 5050|    266|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 254]
  |  |  ------------------
  ------------------
 5051|     12|            return unexpected(it.error());
 5052|     12|        }
 5053|       |
 5054|    254|        return read_string_impl(range, *it, value);
 5055|    266|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5153|    798|    {
 5154|    798|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|    798|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|    798|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    798|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 798]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|    798|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|    798|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 576, False: 222]
  ------------------
 5164|    576|            const auto cb = [&](char32_t cp) {
 5165|    576|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|    576|            };
 5167|       |
 5168|    576|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 78, False: 498]
  ------------------
 5169|     78|                auto it = read_until_code_point(range, cb);
 5170|     78|                return check_nonempty(it, range);
 5171|     78|            }
 5172|    498|            auto it = read_while_code_point(range, cb);
 5173|    498|            return check_nonempty(it, range);
 5174|    576|        }
 5175|       |
 5176|    222|        const auto cb = [&](SourceCharT ch) {
 5177|    222|            return cb_wrapper.on_ascii_only(ch);
 5178|    222|        };
 5179|       |
 5180|    222|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 138, False: 84]
  ------------------
 5181|    138|            auto it = read_until_code_unit(range, cb);
 5182|    138|            return check_nonempty(it, range);
 5183|    138|        }
 5184|     84|        auto it = read_while_code_unit(range, cb);
 5185|     84|        return check_nonempty(it, range);
 5186|    222|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    576|    {
  754|    576|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  93.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.1k|              cvref<T> obj = *get<T>(fn);
  745|  93.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  93.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.1k|              }
  748|  93.1k|              else {
  749|  93.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.1k|              }
  751|  93.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  93.1k|    {
  684|  93.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  93.1k|            return static_cast<T*>(s.m_cp);
  686|  93.1k|        }
  687|  93.1k|        else if constexpr (std::is_object_v<T>) {
  688|  93.1k|            return static_cast<T*>(s.m_p);
  689|  93.1k|        }
  690|  93.1k|        else {
  691|  93.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  93.1k|        }
  693|  93.1k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5164|  93.1k|            const auto cb = [&](char32_t cp) {
 5165|  93.1k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|  93.1k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    576|        {
  667|    576|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5191|    798|    {
 5192|    798|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 36, False: 762]
  ------------------
 5193|     36|            return unexpected_scan_error(
 5194|     36|                scan_error::invalid_scanned_value,
 5195|     36|                "No characters matched in [character set]");
 5196|     36|        }
 5197|       |
 5198|    762|        return it;
 5199|    798|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    222|    {
  754|    222|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  2.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.73k|              cvref<T> obj = *get<T>(fn);
  745|  2.73k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.73k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.73k|              }
  748|  2.73k|              else {
  749|  2.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.73k|              }
  751|  2.73k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  2.73k|    {
  684|  2.73k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.73k|            return static_cast<T*>(s.m_cp);
  686|  2.73k|        }
  687|  2.73k|        else if constexpr (std::is_object_v<T>) {
  688|  2.73k|            return static_cast<T*>(s.m_p);
  689|  2.73k|        }
  690|  2.73k|        else {
  691|  2.73k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.73k|        }
  693|  2.73k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5176|  2.73k|        const auto cb = [&](SourceCharT ch) {
 5177|  2.73k|            return cb_wrapper.on_ascii_only(ch);
 5178|  2.73k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    222|        {
  667|    222|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4752|    254|{
 4753|    254|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    254|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    254|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 54, False: 200]
  ------------------
 4757|     54|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|     54|                                     "Invalid encoding in scanned string");
 4759|     54|    }
 4760|    200|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    200|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    200|    return SCN_MOVE(result);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    200|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4891|    120|    {
 4892|    120|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    120|    }                                                  \
  |  |  |  | 3642|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|      0|        return read_string_impl(range, it, value);
 4894|    120|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4913|    360|    {
 4914|    360|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    720|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    360|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4915:23): [Folded - Ignored]
  ------------------
 4916|    360|            return unexpected_scan_error(
 4917|    360|                scan_error::invalid_scanned_value,
 4918|    360|                "Regex backend doesn't support wide strings as input");
 4919|    360|        }
 4920|    360|        else {
 4921|    360|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4921:17): [True: 360, False: 0]
  ------------------
 4922|    360|                return unexpected_scan_error(
 4923|    360|                    scan_error::invalid_scanned_value,
 4924|    360|                    "Cannot use regex with a non-contiguous source "
 4925|    360|                    "range");
 4926|    360|            }
 4927|       |
 4928|      0|            auto input = get_as_contiguous(range);
 4929|      0|            SCN_TRY(it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4930|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4931|      0|            return ranges::next(range.begin(),
 4932|      0|                                ranges::distance(input.begin(), it));
 4933|      0|        }
 4934|    360|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    360|{
  959|    360|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    360|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    360|        return true;
  962|    360|    }
  963|    360|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    360|                           ranges::const_iterator_t<Range>,
  965|    360|                           typename detail::basic_scan_buffer<
  966|    360|                               detail::char_t<Range>>::forward_iterator>) {
  967|    360|        auto beg = r.begin();
  968|    360|        if (!beg.stores_parent()) {
  969|    360|            return true;
  970|    360|        }
  971|    360|        return beg.parent()->is_contiguous();
  972|    360|    }
  973|    360|    else {
  974|    360|        return false;
  975|    360|    }
  976|    360|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  4.90k|    {
 5278|  4.90k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.90k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  4.90k|        return read_impl(range, specs, value);
 5280|  4.90k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  4.90k|    {
 5296|  4.90k|        SCN_CLANG_PUSH
 5297|  4.90k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  4.90k|        switch (m_type) {
 5300|    286|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 286, False: 4.61k]
  ------------------
 5301|    286|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     64|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 64, False: 4.83k]
  ------------------
 5304|     64|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     64|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 4.90k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  1.08k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 1.08k, False: 3.81k]
  ------------------
 5311|  1.08k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  1.08k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  3.23k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 3.23k, False: 1.66k]
  ------------------
 5316|  3.23k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  3.23k|                    range, specs.charset_string<SourceCharT>(),
 5318|  3.23k|                    specs.regexp_flags, value);
 5319|       |
 5320|    228|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 228, False: 4.67k]
  ------------------
 5321|    228|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    228|                    range,
 5323|    228|                    get_unescaped_regex_pattern(
 5324|    228|                        specs.charset_string<SourceCharT>()),
 5325|    228|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 4.90k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  4.90k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  4.90k|        }
 5332|       |
 5333|  4.90k|        SCN_CLANG_POP
 5334|  4.90k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|    944|    {
 4821|    944|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    944|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  1.00k|{
 4753|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 324, False: 684]
  ------------------
 4757|    324|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    324|                                     "Invalid encoding in scanned string");
 4759|    324|    }
 4760|    684|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    684|    static_cast<    \
  |  |  929|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    684|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    684|    return SCN_MOVE(result);
  ------------------
  |  |  928|    684|    static_cast<    \
  |  |  929|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    684|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.87k|{
 3012|  1.87k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.87k|        dest.assign(source.view());
 3014|  1.87k|    }
 3015|  1.87k|    else {
 3016|  1.87k|        return transcode_impl(source.view(), dest);
 3017|  1.87k|    }
 3018|       |
 3019|  1.87k|    return {};
 3020|  1.87k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.83k|{
 2088|  2.83k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.83k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.83k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.83k|        auto buf = make_contiguous_buffer(range);
 2092|  2.83k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.83k|        return ranges::next(range.begin(),
 2094|  2.83k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.83k|    }
 2096|  2.83k|    else {
 2097|  2.83k|        auto it = range.begin();
 2098|       |
 2099|  2.83k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.83k|            auto seg = get_contiguous_beginning(range);
 2101|  2.83k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.83k|                seg_it != seg.end()) {
 2103|  2.83k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.83k|            }
 2105|  2.83k|            ranges::advance(it, seg.size());
 2106|  2.83k|        }
 2107|       |
 2108|  2.83k|        return read_until_code_point(
 2109|  2.83k|            ranges::subrange{it, range.end()},
 2110|  2.83k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.83k|    }
 2112|  2.83k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4841|     64|    {
 4842|     64|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 42, False: 22]
  ------------------
 4843|     42|            return read_string_impl(
 4844|     42|                range,
 4845|     42|                read_until_code_unit(
 4846|     42|                    range,
 4847|     42|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     42|                        SourceCharT ch) { return ch == until; }),
 4849|     42|                value);
 4850|     42|        }
 4851|     22|        return read_string_impl(
 4852|     22|            range,
 4853|     22|            read_until_code_units(
 4854|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|     22|            value);
 4856|     64|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     42|    {
  754|     42|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.32k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.32k|              cvref<T> obj = *get<T>(fn);
  745|  1.32k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.32k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.32k|              }
  748|  1.32k|              else {
  749|  1.32k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.32k|              }
  751|  1.32k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.32k|    {
  684|  1.32k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.32k|            return static_cast<T*>(s.m_cp);
  686|  1.32k|        }
  687|  1.32k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.32k|            return static_cast<T*>(s.m_p);
  689|  1.32k|        }
  690|  1.32k|        else {
  691|  1.32k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.32k|        }
  693|  1.32k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4848|  1.32k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     42|        {
  662|     42|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     66|{
 2007|     66|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     66|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     66|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     66|                           needle.end());
 2012|     66|    }
 2013|     66|    else {
 2014|     66|        auto first = range.begin();
 2015|     66|        while (true) {
 2016|     66|            auto it = first;
 2017|     66|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     66|                if (needle_it == needle.end()) {
 2019|     66|                    return first;
 2020|     66|                }
 2021|     66|                if (it == range.end()) {
 2022|     66|                    return it;
 2023|     66|                }
 2024|     66|                if (*it != *needle_it) {
 2025|     66|                    break;
 2026|     66|                }
 2027|     66|            }
 2028|     66|            ++first;
 2029|     66|        }
 2030|     66|    }
 2031|     66|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  1.08k|    {
 5049|  1.08k|        auto it = read_source_impl(range, {specs});
 5050|  1.08k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 282, False: 806]
  |  |  ------------------
  ------------------
 5051|    282|            return unexpected(it.error());
 5052|    282|        }
 5053|       |
 5054|    806|        return read_string_impl(range, *it, value);
 5055|  1.08k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5153|  3.26k|    {
 5154|  3.26k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|  3.26k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|  3.26k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.26k]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|  3.26k|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|  3.26k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 2.87k, False: 390]
  ------------------
 5164|  2.87k|            const auto cb = [&](char32_t cp) {
 5165|  2.87k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|  2.87k|            };
 5167|       |
 5168|  2.87k|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 330, False: 2.54k]
  ------------------
 5169|    330|                auto it = read_until_code_point(range, cb);
 5170|    330|                return check_nonempty(it, range);
 5171|    330|            }
 5172|  2.54k|            auto it = read_while_code_point(range, cb);
 5173|  2.54k|            return check_nonempty(it, range);
 5174|  2.87k|        }
 5175|       |
 5176|    390|        const auto cb = [&](SourceCharT ch) {
 5177|    390|            return cb_wrapper.on_ascii_only(ch);
 5178|    390|        };
 5179|       |
 5180|    390|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 180, False: 210]
  ------------------
 5181|    180|            auto it = read_until_code_unit(range, cb);
 5182|    180|            return check_nonempty(it, range);
 5183|    180|        }
 5184|    210|        auto it = read_while_code_unit(range, cb);
 5185|    210|        return check_nonempty(it, range);
 5186|    390|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.87k|{
 2061|  2.87k|    auto it = range.begin();
 2062|   536k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 536k, False: 270]
  ------------------
 2063|   536k|        const auto val =
 2064|   536k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   536k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   536k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 533k, False: 3.04k]
  |  |  ------------------
  ------------------
 2066|   533k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   533k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   533k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.60k, False: 531k]
  ------------------
 2069|  2.60k|                return it;
 2070|  2.60k|            }
 2071|   533k|        }
 2072|   534k|        it = val.iterator;
 2073|   534k|    }
 2074|       |
 2075|    270|    return it;
 2076|  2.87k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   536k|{
 1899|   536k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   536k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   536k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   536k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   536k|    auto it = range.begin();
 1903|   536k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   536k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.04k, False: 533k]
  |  |  ------------------
  ------------------
 1906|  3.04k|        ++it;
 1907|  3.04k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  3.04k|        return {it, {}};
 1909|  3.04k|    }
 1910|       |
 1911|   533k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 477k, False: 56.1k]
  ------------------
 1912|   477k|        ++it;
 1913|   477k|        return {it, string_type(1, *range.begin())};
 1914|   477k|    }
 1915|       |
 1916|  56.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  56.1k|    return {it, string_type{range.begin(), it}};
 1918|   533k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  3.04k|{
 1155|  3.04k|    auto it = input.begin();
 1156|  10.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 10.4k, False: 126]
  ------------------
 1157|  10.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.91k, False: 7.48k]
  ------------------
 1158|  2.91k|            break;
 1159|  2.91k|        }
 1160|  10.4k|    }
 1161|  3.04k|    return it;
 1162|  3.04k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  56.1k|    {
  283|  56.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  56.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  56.1k|    {
  212|  56.1k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 42, False: 56.1k]
  ------------------
  213|     42|            auto dist = bound - i;
  214|     42|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     42|            return dist;
  216|     42|        }
  217|  56.1k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  56.1k|        return n;
  219|  56.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   112k|    {
  132|   112k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 112k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   112k|        return t;
  136|   112k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   536k|    {
 1890|   536k|        return !codepoint.empty();
 1891|   536k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.87k|    {
  754|  2.87k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   533k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   533k|              cvref<T> obj = *get<T>(fn);
  745|   533k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   533k|                  obj(static_cast<decltype(args)>(args)...);
  747|   533k|              }
  748|   533k|              else {
  749|   533k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   533k|              }
  751|   533k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   533k|    {
  684|   533k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   533k|            return static_cast<T*>(s.m_cp);
  686|   533k|        }
  687|   533k|        else if constexpr (std::is_object_v<T>) {
  688|   533k|            return static_cast<T*>(s.m_p);
  689|   533k|        }
  690|   533k|        else {
  691|   533k|            return reinterpret_cast<T*>(s.m_fp);
  692|   533k|        }
  693|   533k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5164|   533k|            const auto cb = [&](char32_t cp) {
 5165|   533k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|   533k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.87k|        {
  667|  2.87k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5191|  3.26k|    {
 5192|  3.26k|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 846, False: 2.41k]
  ------------------
 5193|    846|            return unexpected_scan_error(
 5194|    846|                scan_error::invalid_scanned_value,
 5195|    846|                "No characters matched in [character set]");
 5196|    846|        }
 5197|       |
 5198|  2.41k|        return it;
 5199|  3.26k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.54k|{
 2082|  2.54k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.54k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    390|    {
  754|    390|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.51k|              cvref<T> obj = *get<T>(fn);
  745|  4.51k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.51k|              }
  748|  4.51k|              else {
  749|  4.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.51k|              }
  751|  4.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.51k|    {
  684|  4.51k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.51k|            return static_cast<T*>(s.m_cp);
  686|  4.51k|        }
  687|  4.51k|        else if constexpr (std::is_object_v<T>) {
  688|  4.51k|            return static_cast<T*>(s.m_p);
  689|  4.51k|        }
  690|  4.51k|        else {
  691|  4.51k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.51k|        }
  693|  4.51k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5176|  4.51k|        const auto cb = [&](SourceCharT ch) {
 5177|  4.51k|            return cb_wrapper.on_ascii_only(ch);
 5178|  4.51k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    390|        {
  667|    390|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|  1.31k|{
 4753|  1.31k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.31k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.31k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 124, False: 1.19k]
  ------------------
 4757|    124|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    124|                                     "Invalid encoding in scanned string");
 4759|    124|    }
 4760|  1.19k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  1.19k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  1.19k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  1.19k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4891|  3.46k|    {
 4892|  3.46k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  3.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.95k, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.95k|    }                                                  \
  |  |  |  | 3642|  3.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|    510|        return read_string_impl(range, it, value);
 4894|  3.46k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4913|  10.3k|    {
 4914|  10.3k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  20.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  10.3k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4915:23): [Folded - Ignored]
  ------------------
 4916|  10.3k|            return unexpected_scan_error(
 4917|  10.3k|                scan_error::invalid_scanned_value,
 4918|  10.3k|                "Regex backend doesn't support wide strings as input");
 4919|  10.3k|        }
 4920|  10.3k|        else {
 4921|  10.3k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4921:17): [True: 0, False: 10.3k]
  ------------------
 4922|      0|                return unexpected_scan_error(
 4923|      0|                    scan_error::invalid_scanned_value,
 4924|      0|                    "Cannot use regex with a non-contiguous source "
 4925|      0|                    "range");
 4926|      0|            }
 4927|       |
 4928|  10.3k|            auto input = get_as_contiguous(range);
 4929|  10.3k|            SCN_TRY(it,
  ------------------
  |  | 3643|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.86k, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  8.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  8.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  8.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  8.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  8.86k|    }                                                  \
  |  |  |  | 3642|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4930|  1.53k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4931|  1.53k|            return ranges::next(range.begin(),
 4932|  1.53k|                                ranges::distance(input.begin(), it));
 4933|  10.3k|        }
 4934|  10.3k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  10.3k|{
  959|  10.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  10.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  10.3k|        return true;
  962|  10.3k|    }
  963|  10.3k|    else if constexpr (std::is_same_v<
  964|  10.3k|                           ranges::const_iterator_t<Range>,
  965|  10.3k|                           typename detail::basic_scan_buffer<
  966|  10.3k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  10.3k|        auto beg = r.begin();
  968|  10.3k|        if (!beg.stores_parent()) {
  969|  10.3k|            return true;
  970|  10.3k|        }
  971|  10.3k|        return beg.parent()->is_contiguous();
  972|  10.3k|    }
  973|  10.3k|    else {
  974|  10.3k|        return false;
  975|  10.3k|    }
  976|  10.3k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  10.3k|{
 1065|  10.3k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  10.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  10.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  10.3k|        return r;
 1070|  10.3k|    }
 1071|  10.3k|    else if constexpr (std::is_same_v<
 1072|  10.3k|                           ranges::const_iterator_t<Range>,
 1073|  10.3k|                           typename detail::basic_scan_buffer<
 1074|  10.3k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  10.3k|        if constexpr (ranges::common_range<Range>) {
 1076|  10.3k|            return detail::make_string_view_from_pointers(
 1077|  10.3k|                r.begin().to_contiguous_segment_iterator(),
 1078|  10.3k|                r.end().to_contiguous_segment_iterator());
 1079|  10.3k|        }
 1080|  10.3k|        else {
 1081|  10.3k|            return r.begin().contiguous_segment();
 1082|  10.3k|        }
 1083|  10.3k|    }
 1084|  10.3k|    else {
 1085|  10.3k|        SCN_EXPECT(false);
 1086|  10.3k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  10.3k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  10.3k|    }
 1090|  10.3k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  10.3k|{
  981|  10.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  10.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  10.3k|        return true;
  984|  10.3k|    }
  985|  10.3k|    else if constexpr (std::is_same_v<
  986|  10.3k|                           ranges::const_iterator_t<Range>,
  987|  10.3k|                           typename detail::basic_scan_buffer<
  988|  10.3k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  10.3k|        auto beg = r.begin();
  990|  10.3k|        if (beg.contiguous_segment().empty()) {
  991|  10.3k|            return false;
  992|  10.3k|        }
  993|  10.3k|        if constexpr (ranges::common_range<Range>) {
  994|  10.3k|            return beg.contiguous_segment().end() ==
  995|  10.3k|                   ranges::end(r).contiguous_segment().end();
  996|  10.3k|        }
  997|  10.3k|        else {
  998|  10.3k|            if (beg.stores_parent()) {
  999|  10.3k|                return beg.contiguous_segment().end() ==
 1000|  10.3k|                       beg.parent()->current_view().end();
 1001|  10.3k|            }
 1002|  10.3k|            return true;
 1003|  10.3k|        }
 1004|  10.3k|    }
 1005|  10.3k|    else {
 1006|  10.3k|        return false;
 1007|  10.3k|    }
 1008|  10.3k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4346|  10.3k|{
 4347|  10.3k|    static_assert(ranges::contiguous_range<Input> &&
 4348|  10.3k|                  ranges::borrowed_range<Input> &&
 4349|  10.3k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4350|       |
 4351|  10.3k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4352|  10.3k|    std::basic_regex<CharT> re{};
 4353|  10.3k|    try {
 4354|  10.3k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3643|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4355|  10.3k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4356|  10.3k|                                     re_flags | std::regex_constants::nosubs};
 4357|  10.3k|    }
 4358|  10.3k|    catch (const std::regex_error& err) {
 4359|  5.85k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4360|  5.85k|                                     "Invalid regex");
 4361|  5.85k|    }
 4362|       |
 4363|  4.54k|    std::match_results<const CharT*> matches{};
 4364|  4.54k|    try {
 4365|  4.54k|        bool found = std::regex_search(input.data(),
 4366|  4.54k|                                       input.data() + input.size(), matches, re,
 4367|  4.54k|                                       std::regex_constants::match_continuous);
 4368|  4.54k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4368:13): [True: 3.01k, False: 1.53k]
  |  Branch (4368:23): [True: 0, False: 1.53k]
  ------------------
 4369|  2.85k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4370|  2.85k|                                         "Regular expression didn't match");
 4371|  2.85k|        }
 4372|  4.54k|    }
 4373|  4.54k|    catch (const std::regex_error& err) {
 4374|    156|        return unexpected_scan_error(scan_error::invalid_format_string,
 4375|    156|                                     "Regex matching failed with an error");
 4376|    156|    }
 4377|       |
 4378|  1.53k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4379|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4380|       |    auto re =
 4381|       |#if SCN_REGEX_BOOST_USE_ICU
 4382|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4383|       |                             make_regex_flags(flags) |
 4384|       |                                 boost::regex_constants::no_except |
 4385|       |                                 boost::regex_constants::nosubs);
 4386|       |#else
 4387|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|       |                                  make_regex_flags(flags) |
 4389|       |                                      boost::regex_constants::no_except |
 4390|       |                                      boost::regex_constants::nosubs};
 4391|       |#endif
 4392|       |    if (re.status() != 0) {
 4393|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4394|       |                                     "Invalid regex");
 4395|       |    }
 4396|       |
 4397|       |    boost::match_results<const CharT*> matches{};
 4398|       |    try {
 4399|       |        bool found =
 4400|       |#if SCN_REGEX_BOOST_USE_ICU
 4401|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4402|       |                                   matches, re,
 4403|       |                                   boost::regex_constants::match_continuous);
 4404|       |#else
 4405|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4406|       |                                matches, re,
 4407|       |                                boost::regex_constants::match_continuous);
 4408|       |#endif
 4409|       |        if (!found || matches.prefix().matched) {
 4410|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4411|       |                                         "Regular expression didn't match");
 4412|       |        }
 4413|       |    }
 4414|       |    catch (const std::runtime_error& err) {
 4415|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4416|       |                                     "Regex matching failed with an error");
 4417|       |    }
 4418|       |
 4419|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4420|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4421|       |    static_assert(std::is_same_v<CharT, char>);
 4422|       |    std::string flagged_pattern{};
 4423|       |    auto re = [&]() {
 4424|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4425|       |        opts.set_never_capture(true);
 4426|       |        if (flagstr.empty()) {
 4427|       |            return re2::RE2{pattern, opts};
 4428|       |        }
 4429|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4430|       |        flagged_pattern.append(flagstr);
 4431|       |        flagged_pattern.append(pattern);
 4432|       |        return re2::RE2{flagged_pattern, opts};
 4433|       |    }();
 4434|       |    if (!re.ok()) {
 4435|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4436|       |                                     "Failed to parse regular expression");
 4437|       |    }
 4438|       |
 4439|       |    auto new_input = detail::make_string_view_from_pointers(
 4440|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4441|       |    bool found = re2::RE2::Consume(&new_input, re);
 4442|       |    if (!found) {
 4443|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4444|       |                                     "Regular expression didn't match");
 4445|       |    }
 4446|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4447|       |#endif  // SCN_REGEX_BACKEND == ...
 4448|  4.54k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5809|  6.50k|{
 5810|  6.50k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  6.50k|        return reader_impl_for_bool<CharT>{};
 5812|  6.50k|    }
 5813|  6.50k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  6.50k|        return reader_impl_for_char<CharT>{};
 5815|  6.50k|    }
 5816|  6.50k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  6.50k|        return reader_impl_for_wchar<CharT>{};
 5818|  6.50k|    }
 5819|  6.50k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  6.50k|        return reader_impl_for_code_point<CharT>{};
 5821|  6.50k|    }
 5822|  6.50k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.50k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  6.50k|        return reader_impl_for_string<CharT>{};
 5825|  6.50k|    }
 5826|  6.50k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.50k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  6.50k|        return reader_impl_for_string<CharT>{};
 5829|  6.50k|    }
 5830|  6.50k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  6.50k|                       std::is_same_v<T, wregex_matches>) {
 5832|  6.50k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  6.50k|    }
 5834|  6.50k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  6.50k|        return reader_impl_for_voidptr<CharT>{};
 5836|  6.50k|    }
 5837|  6.50k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  6.50k|        return reader_impl_for_float<CharT>{};
 5839|  6.50k|    }
 5840|  6.50k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  6.50k|                       !std::is_same_v<T, wchar_t> &&
 5842|  6.50k|                       !std::is_same_v<T, char32_t> &&
 5843|  6.50k|                       !std::is_same_v<T, bool>) {
 5844|  6.50k|        return reader_impl_for_int<CharT>{};
 5845|  6.50k|    }
 5846|  6.50k|    else {
 5847|  6.50k|        return reader_impl_for_monostate<CharT>{};
 5848|  6.50k|    }
 5849|  6.50k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    414|{
 2993|    414|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    414|        if (source.stores_allocated_string()) {
 2995|    414|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    414|        }
 2997|    414|        else {
 2998|    414|            dest.assign(source.view());
 2999|    414|        }
 3000|    414|    }
 3001|    414|    else {
 3002|    414|        return transcode_impl(source.view(), dest);
 3003|    414|    }
 3004|       |
 3005|      0|    return {};
 3006|    414|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.29k|{
 2968|  2.29k|    dst.clear();
 2969|  2.29k|    transcode_valid_to_string(src, dst);
 2970|  2.29k|    return {};
 2971|  2.29k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.29k|{
 1403|  2.29k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.29k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.29k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.29k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.29k|            std::u32string tmp;
 1410|  2.29k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.29k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.29k|                std::u32string_view{tmp}, dest);
 1413|  2.29k|        }
 1414|  2.29k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.29k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.29k|        }
 1417|  2.29k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.29k|{
 1277|  2.29k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.29k|    auto it = src.begin();
 1280|   208k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 206k, False: 2.29k]
  ------------------
 1281|   206k|        auto res = get_next_code_point_valid(
 1282|   206k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   206k|                                                                 src.end()));
 1284|   206k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   206k|        dest.push_back(res.value);
 1286|   206k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   206k|    }
 1288|  2.29k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   206k|{
 1189|   206k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   206k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   206k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   206k|    return {input.begin() + len,
 1195|   206k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   206k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5277|    804|    {
 5278|    804|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    804|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    804|        return read_impl(range, specs, value);
 5280|    804|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5295|    804|    {
 5296|    804|        SCN_CLANG_PUSH
 5297|    804|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    804|        switch (m_type) {
 5300|    348|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 348, False: 456]
  ------------------
 5301|    348|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     28|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 28, False: 776]
  ------------------
 5304|     28|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     28|                                                                   value);
 5306|       |
 5307|     42|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 42, False: 762]
  ------------------
 5308|     42|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    266|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 266, False: 538]
  ------------------
 5311|    266|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    266|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      2|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2, False: 802]
  ------------------
 5316|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      2|                    range, specs.charset_string<SourceCharT>(),
 5318|      2|                    specs.regexp_flags, value);
 5319|       |
 5320|    118|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 118, False: 686]
  ------------------
 5321|    118|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    118|                    range,
 5323|    118|                    get_unescaped_regex_pattern(
 5324|    118|                        specs.charset_string<SourceCharT>()),
 5325|    118|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 804]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    804|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    804|        }
 5332|       |
 5333|    804|        SCN_CLANG_POP
 5334|    804|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4820|    348|    {
 4821|    348|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    348|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4752|    418|{
 4753|    418|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    418|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    418|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 204, False: 214]
  ------------------
 4757|    204|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    204|                                     "Invalid encoding in scanned string");
 4759|    204|    }
 4760|    214|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    214|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 214]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    214|    return SCN_MOVE(result);
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    214|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4841|     28|    {
 4842|     28|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 14, False: 14]
  ------------------
 4843|     14|            return read_string_impl(
 4844|     14|                range,
 4845|     14|                read_until_code_unit(
 4846|     14|                    range,
 4847|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     14|                        SourceCharT ch) { return ch == until; }),
 4849|     14|                value);
 4850|     14|        }
 4851|     14|        return read_string_impl(
 4852|     14|            range,
 4853|     14|            read_until_code_units(
 4854|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|     14|            value);
 4856|     28|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|     44|    {
  684|     44|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     44|            return static_cast<T*>(s.m_cp);
  686|     44|        }
  687|     44|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     44|            return static_cast<T*>(s.m_p);
  689|     44|        }
  690|     44|        else {
  691|     44|            return reinterpret_cast<T*>(s.m_fp);
  692|     44|        }
  693|     44|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4848|     44|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4947|     42|    {
 4948|     42|        return read_impl(
 4949|     42|            range,
 4950|     42|            [&](const auto& rng) {
 4951|     42|                return read_string_impl(rng, read_all(rng), value);
 4952|     42|            },
 4953|     42|            detail::priority_tag<1>{});
 4954|     42|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     42|    {
 4975|     42|        return read_cb(range);
 4976|     42|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4950|     42|            [&](const auto& rng) {
 4951|     42|                return read_string_impl(rng, read_all(rng), value);
 4952|     42|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5048|    266|    {
 5049|    266|        auto it = read_source_impl(range, {specs});
 5050|    266|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 254]
  |  |  ------------------
  ------------------
 5051|     12|            return unexpected(it.error());
 5052|     12|        }
 5053|       |
 5054|    254|        return read_string_impl(range, *it, value);
 5055|    266|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4752|    254|{
 4753|    254|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    254|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    254|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 54, False: 200]
  ------------------
 4757|     54|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|     54|                                     "Invalid encoding in scanned string");
 4759|     54|    }
 4760|    200|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    200|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    200|    return SCN_MOVE(result);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    200|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4891|    120|    {
 4892|    120|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    120|    }                                                  \
  |  |  |  | 3642|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|      0|        return read_string_impl(range, it, value);
 4894|    120|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  4.90k|    {
 5278|  4.90k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.90k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  4.90k|        return read_impl(range, specs, value);
 5280|  4.90k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  4.90k|    {
 5296|  4.90k|        SCN_CLANG_PUSH
 5297|  4.90k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  4.90k|        switch (m_type) {
 5300|    286|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 286, False: 4.61k]
  ------------------
 5301|    286|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     64|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 64, False: 4.83k]
  ------------------
 5304|     64|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     64|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 4.90k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  1.08k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 1.08k, False: 3.81k]
  ------------------
 5311|  1.08k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  1.08k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  3.23k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 3.23k, False: 1.66k]
  ------------------
 5316|  3.23k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  3.23k|                    range, specs.charset_string<SourceCharT>(),
 5318|  3.23k|                    specs.regexp_flags, value);
 5319|       |
 5320|    228|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 228, False: 4.67k]
  ------------------
 5321|    228|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    228|                    range,
 5323|    228|                    get_unescaped_regex_pattern(
 5324|    228|                        specs.charset_string<SourceCharT>()),
 5325|    228|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 4.90k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  4.90k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  4.90k|        }
 5332|       |
 5333|  4.90k|        SCN_CLANG_POP
 5334|  4.90k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|    944|    {
 4821|    944|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    944|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  1.00k|{
 4753|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 324, False: 684]
  ------------------
 4757|    324|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    324|                                     "Invalid encoding in scanned string");
 4759|    324|    }
 4760|    684|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    684|    static_cast<    \
  |  |  929|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    684|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    684|    return SCN_MOVE(result);
  ------------------
  |  |  928|    684|    static_cast<    \
  |  |  929|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    684|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.87k|{
 3012|  1.87k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.87k|        dest.assign(source.view());
 3014|  1.87k|    }
 3015|  1.87k|    else {
 3016|  1.87k|        return transcode_impl(source.view(), dest);
 3017|  1.87k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.87k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4841|     64|    {
 4842|     64|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 42, False: 22]
  ------------------
 4843|     42|            return read_string_impl(
 4844|     42|                range,
 4845|     42|                read_until_code_unit(
 4846|     42|                    range,
 4847|     42|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     42|                        SourceCharT ch) { return ch == until; }),
 4849|     42|                value);
 4850|     42|        }
 4851|     22|        return read_string_impl(
 4852|     22|            range,
 4853|     22|            read_until_code_units(
 4854|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|     22|            value);
 4856|     64|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     42|    {
  754|     42|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.32k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.32k|              cvref<T> obj = *get<T>(fn);
  745|  1.32k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.32k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.32k|              }
  748|  1.32k|              else {
  749|  1.32k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.32k|              }
  751|  1.32k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.32k|    {
  684|  1.32k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.32k|            return static_cast<T*>(s.m_cp);
  686|  1.32k|        }
  687|  1.32k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.32k|            return static_cast<T*>(s.m_p);
  689|  1.32k|        }
  690|  1.32k|        else {
  691|  1.32k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.32k|        }
  693|  1.32k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4848|  1.32k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     42|        {
  662|     42|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  1.08k|    {
 5049|  1.08k|        auto it = read_source_impl(range, {specs});
 5050|  1.08k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 282, False: 806]
  |  |  ------------------
  ------------------
 5051|    282|            return unexpected(it.error());
 5052|    282|        }
 5053|       |
 5054|    806|        return read_string_impl(range, *it, value);
 5055|  1.08k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|  1.31k|{
 4753|  1.31k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.31k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.31k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 124, False: 1.19k]
  ------------------
 4757|    124|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    124|                                     "Invalid encoding in scanned string");
 4759|    124|    }
 4760|  1.19k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  1.19k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  1.19k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  1.19k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4891|  3.46k|    {
 4892|  3.46k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  3.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.95k, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.95k|    }                                                  \
  |  |  |  | 3642|  3.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|    510|        return read_string_impl(range, it, value);
 4894|  3.46k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5809|  6.50k|{
 5810|  6.50k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  6.50k|        return reader_impl_for_bool<CharT>{};
 5812|  6.50k|    }
 5813|  6.50k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  6.50k|        return reader_impl_for_char<CharT>{};
 5815|  6.50k|    }
 5816|  6.50k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  6.50k|        return reader_impl_for_wchar<CharT>{};
 5818|  6.50k|    }
 5819|  6.50k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  6.50k|        return reader_impl_for_code_point<CharT>{};
 5821|  6.50k|    }
 5822|  6.50k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.50k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  6.50k|        return reader_impl_for_string<CharT>{};
 5825|  6.50k|    }
 5826|  6.50k|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|  6.50k|                       std::is_same_v<T, std::wstring>) {
 5828|  6.50k|        return reader_impl_for_string<CharT>{};
 5829|  6.50k|    }
 5830|  6.50k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  6.50k|                       std::is_same_v<T, wregex_matches>) {
 5832|  6.50k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  6.50k|    }
 5834|  6.50k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  6.50k|        return reader_impl_for_voidptr<CharT>{};
 5836|  6.50k|    }
 5837|  6.50k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  6.50k|        return reader_impl_for_float<CharT>{};
 5839|  6.50k|    }
 5840|  6.50k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  6.50k|                       !std::is_same_v<T, wchar_t> &&
 5842|  6.50k|                       !std::is_same_v<T, char32_t> &&
 5843|  6.50k|                       !std::is_same_v<T, bool>) {
 5844|  6.50k|        return reader_impl_for_int<CharT>{};
 5845|  6.50k|    }
 5846|  6.50k|    else {
 5847|  6.50k|        return reader_impl_for_monostate<CharT>{};
 5848|  6.50k|    }
 5849|  6.50k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    804|    {
 5278|    804|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    804|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    804|        return read_impl(range, specs, value);
 5280|    804|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    804|    {
 5296|    804|        SCN_CLANG_PUSH
 5297|    804|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    804|        switch (m_type) {
 5300|    348|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 348, False: 456]
  ------------------
 5301|    348|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     28|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 28, False: 776]
  ------------------
 5304|     28|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     28|                                                                   value);
 5306|       |
 5307|     42|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 42, False: 762]
  ------------------
 5308|     42|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    266|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 266, False: 538]
  ------------------
 5311|    266|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    266|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      2|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2, False: 802]
  ------------------
 5316|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      2|                    range, specs.charset_string<SourceCharT>(),
 5318|      2|                    specs.regexp_flags, value);
 5319|       |
 5320|    118|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 118, False: 686]
  ------------------
 5321|    118|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    118|                    range,
 5323|    118|                    get_unescaped_regex_pattern(
 5324|    118|                        specs.charset_string<SourceCharT>()),
 5325|    118|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 804]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    804|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    804|        }
 5332|       |
 5333|    804|        SCN_CLANG_POP
 5334|    804|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4827|    348|    {
 4828|    348|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|    348|                                     value);
 4830|    348|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4773|    418|{
 4774|    418|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    418|    auto src = [&]() {
 4777|    418|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    418|            return make_contiguous_buffer(
 4779|    418|                ranges::subrange{range.begin().base(), result.base()});
 4780|    418|        }
 4781|    418|        else {
 4782|    418|            return make_contiguous_buffer(
 4783|    418|                ranges::subrange{range.begin(), result});
 4784|    418|        }
 4785|    418|    }();
 4786|    418|    using src_type = decltype(src);
 4787|       |
 4788|    418|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    418|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    418|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    418|                                     "Cannot read a string_view from "
 4797|    418|                                     "this source range (would require "
 4798|    418|                                     "transcoding)");
 4799|    418|    }
 4800|    418|    else {
 4801|    418|        const auto view = src.view();
 4802|    418|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    418|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 204, False: 214]
  ------------------
 4805|    204|            return unexpected_scan_error(
 4806|    204|                scan_error::invalid_scanned_value,
 4807|    204|                "Invalid encoding in scanned string_view");
 4808|    204|        }
 4809|       |
 4810|    214|        return SCN_MOVE(result);
  ------------------
  |  |  928|    214|    static_cast<    \
  |  |  929|    214|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    418|    }
 4812|    418|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4776|    418|    auto src = [&]() {
 4777|    418|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    418|            return make_contiguous_buffer(
 4779|    418|                ranges::subrange{range.begin().base(), result.base()});
 4780|    418|        }
 4781|    418|        else {
 4782|    418|            return make_contiguous_buffer(
 4783|    418|                ranges::subrange{range.begin(), result});
 4784|    418|        }
 4785|    418|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4863|     28|    {
 4864|     28|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4864:13): [True: 14, False: 14]
  ------------------
 4865|     14|            return read_string_view_impl(
 4866|     14|                range,
 4867|     14|                read_until_code_unit(
 4868|     14|                    range,
 4869|     14|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4870|     14|                        SourceCharT ch) { return ch == until; }),
 4871|     14|                value);
 4872|     14|        }
 4873|     14|        return read_string_view_impl(
 4874|     14|            range,
 4875|     14|            read_until_code_units(
 4876|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4877|     14|            value);
 4878|     28|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|     44|    {
  684|     44|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     44|            return static_cast<T*>(s.m_cp);
  686|     44|        }
  687|     44|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     44|            return static_cast<T*>(s.m_p);
  689|     44|        }
  690|     44|        else {
  691|     44|            return reinterpret_cast<T*>(s.m_fp);
  692|     44|        }
  693|     44|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4870|     44|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4959|     42|    {
 4960|     42|        return read_impl(
 4961|     42|            range,
 4962|     42|            [&](const auto& rng) {
 4963|     42|                return read_string_view_impl(rng, read_all(rng), value);
 4964|     42|            },
 4965|     42|            detail::priority_tag<1>{});
 4966|     42|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     42|    {
 4975|     42|        return read_cb(range);
 4976|     42|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4962|     42|            [&](const auto& rng) {
 4963|     42|                return read_string_view_impl(rng, read_all(rng), value);
 4964|     42|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5062|    266|    {
 5063|    266|        auto it = read_source_impl(range, {specs});
 5064|    266|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 254]
  |  |  ------------------
  ------------------
 5065|     12|            return unexpected(it.error());
 5066|     12|        }
 5067|       |
 5068|    254|        return read_string_view_impl(range, *it, value);
 5069|    266|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4773|    254|{
 4774|    254|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    254|    auto src = [&]() {
 4777|    254|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    254|            return make_contiguous_buffer(
 4779|    254|                ranges::subrange{range.begin().base(), result.base()});
 4780|    254|        }
 4781|    254|        else {
 4782|    254|            return make_contiguous_buffer(
 4783|    254|                ranges::subrange{range.begin(), result});
 4784|    254|        }
 4785|    254|    }();
 4786|    254|    using src_type = decltype(src);
 4787|       |
 4788|    254|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    254|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    254|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    254|                                     "Cannot read a string_view from "
 4797|    254|                                     "this source range (would require "
 4798|    254|                                     "transcoding)");
 4799|    254|    }
 4800|    254|    else {
 4801|    254|        const auto view = src.view();
 4802|    254|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    254|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 54, False: 200]
  ------------------
 4805|     54|            return unexpected_scan_error(
 4806|     54|                scan_error::invalid_scanned_value,
 4807|     54|                "Invalid encoding in scanned string_view");
 4808|     54|        }
 4809|       |
 4810|    200|        return SCN_MOVE(result);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    254|    }
 4812|    254|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4776|    254|    auto src = [&]() {
 4777|    254|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    254|            return make_contiguous_buffer(
 4779|    254|                ranges::subrange{range.begin().base(), result.base()});
 4780|    254|        }
 4781|    254|        else {
 4782|    254|            return make_contiguous_buffer(
 4783|    254|                ranges::subrange{range.begin(), result});
 4784|    254|        }
 4785|    254|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4902|    120|    {
 4903|    120|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    120|    }                                                  \
  |  |  |  | 3642|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4904|      0|        return read_string_view_impl(range, it, value);
 4905|    120|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|  4.90k|    {
 5278|  4.90k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.90k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  4.90k|        return read_impl(range, specs, value);
 5280|  4.90k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|  4.90k|    {
 5296|  4.90k|        SCN_CLANG_PUSH
 5297|  4.90k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  4.90k|        switch (m_type) {
 5300|    286|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 286, False: 4.61k]
  ------------------
 5301|    286|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     64|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 64, False: 4.83k]
  ------------------
 5304|     64|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     64|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 4.90k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  1.08k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 1.08k, False: 3.81k]
  ------------------
 5311|  1.08k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  1.08k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  3.23k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 3.23k, False: 1.66k]
  ------------------
 5316|  3.23k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  3.23k|                    range, specs.charset_string<SourceCharT>(),
 5318|  3.23k|                    specs.regexp_flags, value);
 5319|       |
 5320|    228|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 228, False: 4.67k]
  ------------------
 5321|    228|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    228|                    range,
 5323|    228|                    get_unescaped_regex_pattern(
 5324|    228|                        specs.charset_string<SourceCharT>()),
 5325|    228|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 4.90k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  4.90k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  4.90k|        }
 5332|       |
 5333|  4.90k|        SCN_CLANG_POP
 5334|  4.90k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|    944|    {
 4828|    944|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|    944|                                     value);
 4830|    944|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|  1.00k|{
 4774|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  1.00k|    auto src = [&]() {
 4777|  1.00k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  1.00k|            return make_contiguous_buffer(
 4779|  1.00k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.00k|        }
 4781|  1.00k|        else {
 4782|  1.00k|            return make_contiguous_buffer(
 4783|  1.00k|                ranges::subrange{range.begin(), result});
 4784|  1.00k|        }
 4785|  1.00k|    }();
 4786|  1.00k|    using src_type = decltype(src);
 4787|       |
 4788|  1.00k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  1.00k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  1.00k|                                     "Cannot read a string_view from "
 4797|  1.00k|                                     "this source range (would require "
 4798|  1.00k|                                     "transcoding)");
 4799|  1.00k|    }
 4800|  1.00k|    else {
 4801|  1.00k|        const auto view = src.view();
 4802|  1.00k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  1.00k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 324, False: 684]
  ------------------
 4805|    324|            return unexpected_scan_error(
 4806|    324|                scan_error::invalid_scanned_value,
 4807|    324|                "Invalid encoding in scanned string_view");
 4808|    324|        }
 4809|       |
 4810|    684|        return SCN_MOVE(result);
  ------------------
  |  |  928|    684|    static_cast<    \
  |  |  929|    684|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  1.00k|    }
 4812|  1.00k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|  1.00k|    auto src = [&]() {
 4777|  1.00k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  1.00k|            return make_contiguous_buffer(
 4779|  1.00k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.00k|        }
 4781|  1.00k|        else {
 4782|  1.00k|            return make_contiguous_buffer(
 4783|  1.00k|                ranges::subrange{range.begin(), result});
 4784|  1.00k|        }
 4785|  1.00k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4863|     64|    {
 4864|     64|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4864:13): [True: 42, False: 22]
  ------------------
 4865|     42|            return read_string_view_impl(
 4866|     42|                range,
 4867|     42|                read_until_code_unit(
 4868|     42|                    range,
 4869|     42|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4870|     42|                        SourceCharT ch) { return ch == until; }),
 4871|     42|                value);
 4872|     42|        }
 4873|     22|        return read_string_view_impl(
 4874|     22|            range,
 4875|     22|            read_until_code_units(
 4876|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4877|     22|            value);
 4878|     64|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     42|    {
  754|     42|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|  1.32k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.32k|              cvref<T> obj = *get<T>(fn);
  745|  1.32k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.32k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.32k|              }
  748|  1.32k|              else {
  749|  1.32k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.32k|              }
  751|  1.32k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.32k|    {
  684|  1.32k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.32k|            return static_cast<T*>(s.m_cp);
  686|  1.32k|        }
  687|  1.32k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.32k|            return static_cast<T*>(s.m_p);
  689|  1.32k|        }
  690|  1.32k|        else {
  691|  1.32k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.32k|        }
  693|  1.32k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4870|  1.32k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     42|        {
  662|     42|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5062|  1.08k|    {
 5063|  1.08k|        auto it = read_source_impl(range, {specs});
 5064|  1.08k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 282, False: 806]
  |  |  ------------------
  ------------------
 5065|    282|            return unexpected(it.error());
 5066|    282|        }
 5067|       |
 5068|    806|        return read_string_view_impl(range, *it, value);
 5069|  1.08k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4773|  1.31k|{
 4774|  1.31k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  1.31k|    auto src = [&]() {
 4777|  1.31k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  1.31k|            return make_contiguous_buffer(
 4779|  1.31k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.31k|        }
 4781|  1.31k|        else {
 4782|  1.31k|            return make_contiguous_buffer(
 4783|  1.31k|                ranges::subrange{range.begin(), result});
 4784|  1.31k|        }
 4785|  1.31k|    }();
 4786|  1.31k|    using src_type = decltype(src);
 4787|       |
 4788|  1.31k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  1.31k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  1.31k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  1.31k|                                     "Cannot read a string_view from "
 4797|  1.31k|                                     "this source range (would require "
 4798|  1.31k|                                     "transcoding)");
 4799|  1.31k|    }
 4800|  1.31k|    else {
 4801|  1.31k|        const auto view = src.view();
 4802|  1.31k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  1.31k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 124, False: 1.19k]
  ------------------
 4805|    124|            return unexpected_scan_error(
 4806|    124|                scan_error::invalid_scanned_value,
 4807|    124|                "Invalid encoding in scanned string_view");
 4808|    124|        }
 4809|       |
 4810|  1.19k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  1.31k|    }
 4812|  1.31k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4776|  1.31k|    auto src = [&]() {
 4777|  1.31k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  1.31k|            return make_contiguous_buffer(
 4779|  1.31k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.31k|        }
 4781|  1.31k|        else {
 4782|  1.31k|            return make_contiguous_buffer(
 4783|  1.31k|                ranges::subrange{range.begin(), result});
 4784|  1.31k|        }
 4785|  1.31k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4902|  3.46k|    {
 4903|  3.46k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  3.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.95k, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.95k|    }                                                  \
  |  |  |  | 3642|  3.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4904|    510|        return read_string_view_impl(range, it, value);
 4905|  3.46k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5624|    444|    {
 5625|    444|        reader_error_handler eh{};
 5626|    444|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5626:23): [Folded - Ignored]
  ------------------
 5627|    444|            detail::check_code_point_type_specs(specs, eh);
 5628|    444|        }
 5629|    444|        else {
 5630|    444|            detail::check_char_type_specs(specs, eh);
 5631|    444|        }
 5632|    444|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 410]
  |  |  ------------------
  ------------------
 5633|     34|            return {scan_error::invalid_format_string, eh.m_msg};
 5634|     34|        }
 5635|    410|        return {};
 5636|    444|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|    908|    {
  763|    908|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    908|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|    392|    {
  754|    392|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|    392|        {
  662|    392|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5619|  9.77k|    {
 5620|  9.77k|        return false;
 5621|  9.77k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     18|    {
 1780|     18|        auto stdloc = loc.get<std::locale>();
 1781|     18|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     18|        grouping = numpunct.grouping();
 1783|     18|        thousands_sep =
 1784|     18|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 18]
  ------------------
 1785|     18|        decimal_point = numpunct.decimal_point();
 1786|     18|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     24|{
 1717|     24|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 24, False: 0]
  ------------------
 1718|     24|        return std::use_facet<Facet>(stdloc);
 1719|     24|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     24|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.68k|{
 2349|  3.68k|    size_t count{0};
 2350|  3.68k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.68k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.68k|    });
 2353|  3.68k|    return count;
 2354|  3.68k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.68k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.68k|    auto it = input.begin();
 1448|  10.8k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 7.14k, False: 3.68k]
  ------------------
 1449|  7.14k|        auto res = get_next_code_point(
 1450|  7.14k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  7.14k|        cb(res.value);
 1452|  7.14k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  7.14k|    }
 1454|  3.68k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   308M|{
 1169|   308M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   308M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   308M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   308M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   308M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   308M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 308M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   308M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   308M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 308M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   308M|    return {input.begin() + len,
 1181|   308M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   308M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.68k|    {
  754|  3.68k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  7.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.14k|              cvref<T> obj = *get<T>(fn);
  745|  7.14k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.14k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.14k|              }
  748|  7.14k|              else {
  749|  7.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.14k|              }
  751|  7.14k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.14k|    {
  684|  7.14k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.14k|            return static_cast<T*>(s.m_cp);
  686|  7.14k|        }
  687|  7.14k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.14k|            return static_cast<T*>(s.m_p);
  689|  7.14k|        }
  690|  7.14k|        else {
  691|  7.14k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.14k|        }
  693|  7.14k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  7.14k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  7.14k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  7.14k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.68k|        {
  662|  3.68k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  18.7k|    {
 1582|  18.7k|        return m_view;
 1583|  18.7k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  18.7k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  56.3k|{
 1857|  56.3k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  56.3k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  56.3k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  56.3k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 156, False: 56.1k]
  ------------------
 1862|    156|            return unexpected(eof_error::eof);
 1863|    156|        }
 1864|       |
 1865|  56.1k|        return ranges::next(range.begin(), count);
 1866|  56.3k|    }
 1867|  56.3k|    else {
 1868|  56.3k|        auto it = range.begin();
 1869|  56.3k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  56.3k|            return ranges::next(it, count);
 1871|  56.3k|        }
 1872|       |
 1873|  56.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  56.3k|            if (it == range.end()) {
 1875|  56.3k|                return unexpected(eof_error::eof);
 1876|  56.3k|            }
 1877|  56.3k|        }
 1878|       |
 1879|  56.3k|        return it;
 1880|  56.3k|    }
 1881|  56.3k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   218k|{
 1899|   218k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   218k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   218k|    auto it = range.begin();
 1903|   218k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   218k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   218k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 218k, False: 0]
  ------------------
 1912|   218k|        ++it;
 1913|   218k|        return {it, string_type(1, *range.begin())};
 1914|   218k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   218k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   468k|{
  944|   468k|    return is_range_eof(r.begin(), r.end());
  945|   468k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   309M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   309M|    {
  937|   309M|        return begin == end;
  938|   309M|    }
  939|   309M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  9.37k|    {
  190|  9.37k|        i = std::move(bound);
  191|  9.37k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   218k|    {
 1890|   218k|        return !codepoint.empty();
 1891|   218k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   249k|{
  950|   249k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|   249k|    return eof_error::good;
  954|   249k|}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5699|    410|    {
 5700|    410|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5700:13): [True: 390, False: 20]
  ------------------
 5701|    410|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5701:13): [True: 0, False: 20]
  ------------------
 5702|    390|            return read_default(range, value, loc);
 5703|    390|        }
 5704|       |
 5705|     20|        reader_impl_for_int<CharT> reader{};
 5706|     20|        using integer_type =
 5707|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5708|     20|        integer_type tmp_value{};
 5709|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     20|        value = static_cast<integer_type>(value);
 5711|     20|        return ret;
 5712|    410|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5683|  9.36k|    {
 5684|  9.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|  9.36k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5685:23): [Folded - Ignored]
  ------------------
 5686|  9.36k|            return code_point_reader<wchar_t>{}.read(range, value);
 5687|  9.36k|        }
 5688|  9.36k|        else {
 5689|  9.36k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5690|  9.36k|        }
 5691|  9.36k|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5564|  9.36k|    {
 5565|  9.36k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|  9.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|  9.36k|        ch = *range.begin();
 5567|  9.36k|        return it;
 5568|  9.36k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  65.7k|{
 1846|  65.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.7k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  65.7k|    return ranges::next(range.begin());
 1851|  65.7k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   308M|    {
  296|   308M|        ++x;
  297|   308M|        return x;
  298|   308M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    436|    {
 3540|    436|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    436|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    436|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    436|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 436]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    436|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 436]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    436|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    436|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 430, False: 6]
  |  |  ------------------
  ------------------
 3566|    430|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    430|                    parse_integer_digits_without_thsep(
 3568|    430|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    430|                        prefix_result.parsed_base));
 3570|       |
 3571|    430|            auto buf = make_contiguous_buffer(
 3572|    430|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    430|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 430, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    430|    }                                                  \
  |  |  |  | 3642|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    430|        }
 3581|       |
 3582|      6|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      6|            localized_number_formatting_options<CharT>{loc};
 3587|      6|#endif
 3588|       |
 3589|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      6|    }                                                  \
  |  |  |  | 3642|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  28.1k|{
 3326|  28.1k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  28.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  28.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  28.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 28.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  28.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  28.1k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  28.1k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  28.1k|        parse_integer_base_prefix(
 3331|  28.1k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  28.1k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 28.1k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  28.1k|    else {
 3344|  28.1k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 28.1k]
  ------------------
 3345|  28.1k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 28.1k, False: 0]
  ------------------
 3346|  28.1k|            digits_begin_it = base_prefix_begin_it;
 3347|  28.1k|        }
 3348|  28.1k|    }
 3349|       |
 3350|  28.1k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 28.1k, False: 0]
  ------------------
 3351|  28.1k|        sign = sign_type::plus_sign;
 3352|  28.1k|    }
 3353|  28.1k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  28.1k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  28.1k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  37.5k|{
 3141|  37.5k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  37.5k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 37.5k, False: 0]
  ------------------
 3143|  37.5k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 37.5k, False: 0]
  ------------------
 3144|  37.5k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  37.5k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  37.5k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  37.5k|{
 2272|  37.5k|    auto it = read_code_unit(range);
 2273|  37.5k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  75.0k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 75.0k, False: 37.5k]
  ------------------
 2278|  75.0k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 75.0k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  75.0k|    }
 2282|       |
 2283|  37.5k|    return unexpected(parse_error::error);
 2284|  37.5k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  28.1k|{
 3293|  28.1k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 28.1k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     18|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 18, False: 28.1k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     18|            bool zero_parsed = false;
 3302|     18|            auto it = apply_opt(
 3303|     18|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     18|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  9.37k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 9.37k, False: 18.7k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  9.37k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  9.37k|                    false};
 3311|       |
 3312|      6|        case 0:
  ------------------
  |  Branch (3312:9): [True: 6, False: 28.1k]
  ------------------
 3313|       |            // detect base
 3314|      6|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  18.7k|        default:
  ------------------
  |  Branch (3316:9): [True: 18.7k, False: 9.40k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  18.7k|            return {range.begin(), base, false};
 3319|  28.1k|    }
 3320|  28.1k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  9.39k|{
 2291|  9.39k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 9.39k, False: 0]
  ------------------
 2292|  9.39k|        return range.begin();
 2293|  9.39k|    }
 2294|      0|    return *result;
 2295|  9.39k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     12|{
 3244|     12|    return read_matching_string_classic_nocase(range, "0b");
 3245|     12|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  37.5k|{
 2231|  37.5k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  37.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  37.5k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  37.5k|        if (range.size() < str.size()) {
 2236|  37.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  37.5k|        }
 2238|  37.5k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  37.5k|            return unexpected(parse_error::error);
 2240|  37.5k|        }
 2241|  37.5k|        return ranges::next(range.begin(), str.size());
 2242|  37.5k|    }
 2243|  37.5k|    else {
 2244|  37.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  37.5k|            if (ch < 'A' || ch > 'Z') {
 2246|  37.5k|                return ch;
 2247|  37.5k|            }
 2248|  37.5k|            return static_cast<char_type>(ch +
 2249|  37.5k|                                          static_cast<char_type>('a' - 'A'));
 2250|  37.5k|        };
 2251|       |
 2252|  37.5k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  37.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  37.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  37.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 37.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|  37.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  37.5k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  37.5k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  37.5k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.5k, False: 0]
  |  |  ------------------
  ------------------
 2257|  37.5k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  37.5k|                    return ascii_tolower(a) ==
 2259|  37.5k|                           static_cast<detail::char_t<Range>>(b);
 2260|  37.5k|                }))) {
 2261|  37.5k|            return unexpected(parse_error::error);
 2262|  37.5k|        }
 2263|       |
 2264|      0|        return it;
 2265|  37.5k|    }
 2266|  37.5k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  37.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  37.5k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 8, False: 37.5k]
  |  Branch (2245:29): [True: 37.5k, False: 0]
  ------------------
 2246|  37.5k|                return ch;
 2247|  37.5k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  37.5k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     24|{
 3258|     24|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 24]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     24|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 24]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     24|    return unexpected(parse_error::error);
 3268|     24|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  18.8k|{
 2146|  18.8k|    auto it = read_code_unit(range);
 2147|  18.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.8k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  18.8k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 0]
  |  |  ------------------
  ------------------
 2152|  18.8k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  18.8k|        return unexpected(parse_error::error);
 2154|  18.8k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  18.8k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  9.37k|{
 3251|  9.37k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  9.37k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|      6|{
 3274|      6|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 6]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|      6|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 6]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|      6|    {
 3281|      6|        bool zero_parsed{false};
 3282|      6|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 6]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|      6|    }
 3286|      6|    return {range.begin(), 10, false};
 3287|      6|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|  28.1k|{
 3361|  28.1k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  28.1k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  28.1k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.1k]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|  28.1k|        return range.end();
 3370|  28.1k|    }
 3371|  28.1k|    else {
 3372|  28.1k|        return read_while1_code_unit(range,
 3373|  28.1k|                                     [&](char_type ch) noexcept {
 3374|  28.1k|                                         return char_to_int(ch) < base;
 3375|  28.1k|                                     })
 3376|  28.1k|            .transform_error(map_parse_error_to_scan_error(
 3377|  28.1k|                scan_error::invalid_scanned_value,
 3378|  28.1k|                "Failed to parse integer: No digits found"));
 3379|  28.1k|    }
 3380|  28.1k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3390|     12|{
 3391|     12|    std::basic_string<CharT> output;
 3392|     12|    std::string thsep_indices;
 3393|     12|    auto it = range.begin();
 3394|     12|    bool digit_matched = false;
 3395|     12|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 12, False: 0]
  ------------------
 3396|     12|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 12]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     12|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 12, False: 0]
  ------------------
 3401|     12|            break;
 3402|     12|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     12|    }
 3408|     12|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3409|     12|        return unexpected_scan_error(
 3410|     12|            scan_error::invalid_scanned_value,
 3411|     12|            "Failed to parse integer: No digits found");
 3412|     12|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     12|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  59.9k|{
 1683|  59.9k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  59.9k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  59.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  59.9k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  59.9k|    }
 1688|  59.9k|    else {
 1689|  59.9k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  59.9k|    }
 1691|  59.9k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  59.9k|    {
 1490|  59.9k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  77.9k|    {
 1503|  77.9k|        return sv;
 1504|  77.9k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5951|    388|{
 5952|    388|    using char_type = detail::char_t<Range>;
 5953|    388|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5954|       |
 5955|    388|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5955:9): [True: 388, False: 0]
  ------------------
 5956|    388|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5957|    388|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5958|       |
 5959|    388|        if (max_width == 0) {
  ------------------
  |  Branch (5959:13): [True: 388, False: 0]
  ------------------
 5960|    388|            auto it = read_while_code_unit(range, pred);
 5961|       |
 5962|    388|            if (want_skipped_width) {
  ------------------
  |  Branch (5962:17): [True: 0, False: 388]
  ------------------
 5963|      0|                auto prefix_width =
 5964|      0|                    static_cast<std::ptrdiff_t>(
 5965|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5966|      0|                    ranges::distance(range.begin(), it);
 5967|      0|                return result_type{it, prefix_width};
 5968|      0|            }
 5969|    388|            return result_type{it, 0};
 5970|    388|        }
 5971|       |
 5972|      0|        auto max_width_view = take_width(range, max_width);
 5973|      0|        auto w_it = read_while_code_unit(max_width_view, pred);
 5974|       |
 5975|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5975:13): [True: 0, False: 0]
  ------------------
 5976|      0|            return result_type{w_it.base(), max_width - w_it.count()};
 5977|      0|        }
 5978|      0|        return result_type{w_it.base(), 0};
 5979|      0|    }
 5980|       |
 5981|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5982|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5982:9): [True: 0, False: 0]
  ------------------
 5983|      0|        auto it = read_while_code_units(range, fill_chars);
 5984|       |
 5985|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5985:13): [True: 0, False: 0]
  ------------------
 5986|      0|            auto prefix_width =
 5987|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5988|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5989|      0|            return result_type{it, prefix_width};
 5990|      0|        }
 5991|      0|        return result_type{it, 0};
 5992|      0|    }
 5993|       |
 5994|      0|    auto max_width_view = take_width(range, max_width);
 5995|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5996|       |
 5997|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 0]
  ------------------
 5998|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5999|      0|    }
 6000|      0|    return result_type{w_it.base(), 0};
 6001|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    392|{
 1976|    392|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    392|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    392|{
 1957|    392|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    392|        return std::find_if(range.begin(), range.end(), pred);
 1959|    392|    }
 1960|    392|    else {
 1961|    392|        auto first = range.begin();
 1962|    392|        for (; first != range.end(); ++first) {
 1963|    392|            if (pred(*first)) {
 1964|    392|                return first;
 1965|    392|            }
 1966|    392|        }
 1967|    392|        return first;
 1968|    392|    }
 1969|    392|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    388|    {
  754|    388|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    450|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    450|              cvref<T> obj = *get<T>(fn);
  745|    450|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    450|                  obj(static_cast<decltype(args)>(args)...);
  747|    450|              }
  748|    450|              else {
  749|    450|                  return obj(static_cast<decltype(args)>(args)...);
  750|    450|              }
  751|    450|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    450|    {
  684|    450|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    450|            return static_cast<T*>(s.m_cp);
  686|    450|        }
  687|    450|        else if constexpr (std::is_object_v<T>) {
  688|    450|            return static_cast<T*>(s.m_p);
  689|    450|        }
  690|    450|        else {
  691|    450|            return reinterpret_cast<T*>(s.m_fp);
  692|    450|        }
  693|    450|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5957|    450|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    388|        {
  667|    388|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  74.8k|{
 2951|  74.8k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 74.5k, False: 282]
  ------------------
 2952|  74.5k|        auto it = read_while_classic_space(range);
 2953|  74.5k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  74.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  74.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.5k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  74.5k|        return it;
 2959|  74.5k|    }
 2960|       |
 2961|    282|    return read_while_classic_space(range);
 2962|  74.8k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  76.5k|{
 2117|  76.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  76.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  76.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  76.5k|        auto buf = make_contiguous_buffer(range);
 2121|  76.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  76.5k|        return ranges::next(range.begin(),
 2123|  76.5k|                            ranges::distance(buf.view().begin(), it));
 2124|  76.5k|    }
 2125|  76.5k|    else {
 2126|  76.5k|        auto it = range.begin();
 2127|       |
 2128|  76.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  76.5k|            auto seg = get_contiguous_beginning(range);
 2130|  76.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  76.5k|                seg_it != seg.end()) {
 2132|  76.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  76.5k|            }
 2134|  76.5k|            ranges::advance(it, seg.size());
 2135|  76.5k|        }
 2136|       |
 2137|  76.5k|        return read_while_code_point(
 2138|  76.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  76.5k|    }
 2140|  76.5k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  76.5k|{
 2082|  76.5k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  76.5k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   104k|{
 2061|   104k|    auto it = range.begin();
 2062|   221k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 218k, False: 2.80k]
  ------------------
 2063|   218k|        const auto val =
 2064|   218k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   218k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   218k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 218k, False: 0]
  |  |  ------------------
  ------------------
 2066|   218k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   218k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   218k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 101k, False: 117k]
  ------------------
 2069|   101k|                return it;
 2070|   101k|            }
 2071|   218k|        }
 2072|   117k|        it = val.iterator;
 2073|   117k|    }
 2074|       |
 2075|  2.80k|    return it;
 2076|   104k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  76.5k|    {
  754|  76.5k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  77.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.8k|              cvref<T> obj = *get<T>(fn);
  745|  77.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  77.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  77.8k|              }
  748|  77.8k|              else {
  749|  77.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.8k|              }
  751|  77.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  77.8k|    {
  684|  77.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  77.8k|            return static_cast<T*>(s.m_cp);
  686|  77.8k|        }
  687|  77.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  77.8k|            return static_cast<T*>(s.m_p);
  689|  77.8k|        }
  690|  77.8k|        else {
  691|  77.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  77.8k|        }
  693|  77.8k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  77.8k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  76.5k|        {
  662|  76.5k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    900|    {
 3040|    900|        reader_error_handler eh{};
 3041|    900|        get_derived().check_specs_impl(specs, eh);
 3042|    900|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 832]
  |  |  ------------------
  ------------------
 3043|     68|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     68|        }
 3045|    832|        return {};
 3046|    900|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|    900|    {
 3051|    900|        return static_cast<Derived&>(*this);
 3052|    900|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|    900|    {
 3486|    900|        detail::check_int_type_specs(specs, eh);
 3487|    900|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  18.7k|    {
 3035|  18.7k|        return true;
 3036|  18.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    416|    {
 3540|    416|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 416]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    416|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    416|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    416|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 416]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    416|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 416]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    416|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    416|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 410, False: 6]
  |  |  ------------------
  ------------------
 3566|    410|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    410|                    parse_integer_digits_without_thsep(
 3568|    410|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    410|                        prefix_result.parsed_base));
 3570|       |
 3571|    410|            auto buf = make_contiguous_buffer(
 3572|    410|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    410|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 410, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    410|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    410|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    410|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    410|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    410|    }                                                  \
  |  |  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    410|        }
 3581|       |
 3582|      6|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      6|            localized_number_formatting_options<CharT>{loc};
 3587|      6|#endif
 3588|       |
 3589|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      6|    }                                                  \
  |  |  |  | 3642|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|  9.36k|    {
 3540|  9.36k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|  9.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|  9.36k|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|  9.36k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 9.36k]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|  9.36k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 9.36k]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|  9.36k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  9.36k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.36k, False: 0]
  |  |  ------------------
  ------------------
 3566|  9.36k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  9.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|  9.36k|                    parse_integer_digits_without_thsep(
 3568|  9.36k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|  9.36k|                        prefix_result.parsed_base));
 3570|       |
 3571|  9.36k|            auto buf = make_contiguous_buffer(
 3572|  9.36k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|  9.36k|            SCN_TRY(result_it,
  ------------------
  |  | 3643|  9.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.36k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  9.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  9.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  9.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  9.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  9.36k|    }                                                  \
  |  |  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|  9.36k|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    450|    {
 3040|    450|        reader_error_handler eh{};
 3041|    450|        get_derived().check_specs_impl(specs, eh);
 3042|    450|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 406]
  |  |  ------------------
  ------------------
 3043|     44|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     44|        }
 3045|    406|        return {};
 3046|    450|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|    450|    {
 3051|    450|        return static_cast<Derived&>(*this);
 3052|    450|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|    450|    {
 4146|    450|        detail::check_float_type_specs(specs, eh);
 4147|    450|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  9.37k|    {
 3035|  9.37k|        return true;
 3036|  9.37k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4217|    406|    {
 4218|    406|        unsigned options{};
 4219|    406|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 6, False: 400]
  ------------------
 4220|      6|            options |= float_reader_base::allow_thsep;
 4221|      6|        }
 4222|       |
 4223|    406|        SCN_GCC_COMPAT_PUSH
 4224|    406|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|    406|        switch (specs.type) {
 4227|      2|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 2, False: 404]
  ------------------
 4228|      2|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|      2|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 2, False: 404]
  ------------------
 4231|      2|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|      6|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 6, False: 400]
  ------------------
 4234|      6|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 0, False: 406]
  ------------------
 4237|      0|                return options | float_reader_base::allow_scientific |
 4238|      0|                       float_reader_base::allow_fixed;
 4239|       |
 4240|    396|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 396, False: 10]
  ------------------
 4241|    396|                return options | float_reader_base::allow_scientific |
 4242|    396|                       float_reader_base::allow_fixed |
 4243|    396|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 406]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|    406|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|    406|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|    406|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|    406|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  9.37k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  18.7k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|  9.37k|    {
 4058|  9.37k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 9.37k, False: 0]
  ------------------
 4059|  9.37k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 9.37k, False: 0]
  ------------------
 4060|  9.37k|            return;
 4061|  9.37k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  9.37k|    {
  763|  9.37k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.37k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|      6|    {
 3680|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|      6|        return read_source_impl(range);
 3686|      6|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|  9.37k|    {
 3706|  9.37k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  9.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.37k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  9.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  9.37k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  9.37k|        auto it = sign_result.first;
 3709|  9.37k|        m_sign = sign_result.second;
 3710|       |
 3711|  9.37k|        auto digits_begin = it;
 3712|  9.37k|        auto r = ranges::subrange{it, range.end()};
 3713|  9.37k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  9.37k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  9.37k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.37k]
  |  |  |  Branch (859:45): [True: 0, False: 9.37k]
  |  |  |  Branch (859:45): [True: 0, False: 9.37k]
  |  |  ------------------
  ------------------
 3716|  9.37k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|  9.37k|            else {
 3725|  9.37k|                auto cb = [&](const auto& rr)
 3726|  9.37k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  9.37k|                    auto res = read_all(rr);
 3728|  9.37k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  9.37k|                        return unexpected_scan_error(
 3730|  9.37k|                            scan_error::invalid_scanned_value,
 3731|  9.37k|                            "Invalid float value");
 3732|  9.37k|                    }
 3733|  9.37k|                    return res;
 3734|  9.37k|                };
 3735|  9.37k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|  9.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  9.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4, False: 9.37k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      4|    }                                                  \
  |  | 3642|  9.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|  9.37k|            }
 3737|  9.37k|        }
 3738|  9.37k|        else {
 3739|  9.37k|            SCN_TRY_ASSIGN(
 3740|  9.37k|                it,
 3741|  9.37k|                do_read_source_impl(
 3742|  9.37k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  9.37k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  9.37k|        }
 3745|       |
 3746|  9.37k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  9.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  9.37k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 9.37k, False: 0]
  |  Branch (3748:48): [True: 9.37k, False: 0]
  ------------------
 3749|  9.37k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 9.37k, False: 0]
  ------------------
 3750|  9.37k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 9.37k, False: 0]
  ------------------
 3751|  9.37k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  9.37k|        }
 3753|       |
 3754|  9.37k|        handle_separators();
 3755|       |
 3756|  9.37k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 9.37k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  9.37k|        return it;
 3769|  9.37k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|  9.37k|    {
 3812|  9.37k|        auto it = range.begin();
 3813|  9.37k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 9.37k, False: 0]
  ------------------
 3814|  9.37k|            return unexpected(r.error());
 3815|  9.37k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|  9.37k|    {
 3835|  9.37k|        auto it = range.begin();
 3836|  9.37k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 9.37k, False: 0]
  ------------------
 3837|  9.37k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  9.37k|                scan_error::invalid_scanned_value,
 3839|  9.37k|                "Invalid floating-point NaN value"));
 3840|  9.37k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  9.37k|    {
 3805|  9.37k|        return read_matching_string_classic_nocase(range, "0x");
 3806|  9.37k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      4|{
 1996|      4|    auto it = read_while_code_unit(range, pred);
 1997|      4|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 4, False: 0]
  ------------------
 1998|      4|        return unexpected(parse_error::error);
 1999|      4|    }
 2000|      0|    return it;
 2001|      4|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|      4|    {
 3945|      4|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|      4|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 2, False: 2]
  |  Branch (3946:50): [True: 2, False: 0]
  ------------------
 3947|       |
 3948|      4|        auto it = ranges::begin(range);
 3949|      4|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|      4|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3953|      4|            return r.transform_error(
 3954|      4|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|      4|                                              "Invalid floating-point value"));
 3956|      4|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|      4|    {
 3775|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|      4|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|      4|        return read_while1_code_unit(
 3784|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|      4|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      4|    {
  684|      4|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      4|            return static_cast<T*>(s.m_cp);
  686|      4|        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      4|            return static_cast<T*>(s.m_p);
  689|      4|        }
  690|      4|        else {
  691|      4|            return reinterpret_cast<T*>(s.m_fp);
  692|      4|        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3784|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|  9.37k|    {
 4001|  9.37k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  9.37k|        const bool allowed_nonhex =
 4003|  9.37k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  9.37k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  9.37k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 9.37k, False: 0]
  |  Branch (4006:45): [True: 0, False: 9.37k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  9.37k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 9.37k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|  9.37k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 9.37k, False: 0]
  |  Branch (4015:45): [True: 0, False: 9.37k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|  9.37k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 9.37k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|  9.37k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 9.37k, False: 4]
  |  Branch (4022:28): [True: 6, False: 9.36k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|      6|            auto it = range.begin();
 4026|       |
 4027|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 6]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|      6|            else {
 4032|      6|                m_kind = float_kind::hex_without_prefix;
 4033|      6|            }
 4034|       |
 4035|      6|            return read_hex(ranges::subrange{it, range.end()});
 4036|      6|        }
 4037|  9.37k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 4, False: 9.36k]
  |  Branch (4037:29): [True: 4, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|      4|            m_kind = float_kind::generic;
 4041|      4|            return read_regular_float(range);
 4042|      4|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  9.36k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.36k]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|  9.36k|        m_kind = float_kind::generic;
 4053|  9.36k|        return read_regular(range);
 4054|  9.36k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  9.37k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  9.37k|                    auto res = read_all(rr);
 3728|  9.37k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.37k]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|  9.37k|                    return res;
 3734|  9.37k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  9.37k|{
 1839|  9.37k|    return ranges::next(range.begin(), range.end());
 1840|  9.37k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  9.37k|    {
  313|  9.37k|        ranges::advance(x, bound);
  314|  9.37k|        return x;
  315|  9.37k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  9.37k|    {
  275|  9.37k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  9.37k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  9.37k|    {
 1577|  9.37k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  9.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  9.37k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  9.37k|    {
 1621|  9.37k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  9.37k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  9.37k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  9.37k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  9.37k|            m_storage.reset();
 1627|  9.37k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  9.37k|        }
 1629|  9.37k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  9.37k|                                          std::basic_string<CharT>>) {
 1631|  9.37k|            m_storage.emplace(SCN_FWD(range));
 1632|  9.37k|            m_view = string_view_type{*m_storage};
 1633|  9.37k|        }
 1634|  9.37k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  9.37k|                                          typename detail::basic_scan_buffer<
 1636|  9.37k|                                              value_t>::forward_iterator> &&
 1637|  9.37k|                           ranges::common_range<Range>) {
 1638|  9.37k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  9.37k|            auto end_seg = range.end().contiguous_segment();
 1640|  9.37k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  9.37k|                             detail::to_address(end_seg.end()))) {
 1642|  9.37k|                auto& str = m_storage.emplace();
 1643|  9.37k|                str.reserve(range.end().position() - range.begin().position());
 1644|  9.37k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  9.37k|                m_view = string_view_type{str};
 1646|  9.37k|                return;
 1647|  9.37k|            }
 1648|       |
 1649|  9.37k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  9.37k|                                                            end_seg.data());
 1651|  9.37k|            m_storage.reset();
 1652|  9.37k|        }
 1653|  9.37k|        else {
 1654|  9.37k|            auto& str = m_storage.emplace();
 1655|  9.37k|            if constexpr (ranges::sized_range<Range>) {
 1656|  9.37k|                str.reserve(range.size());
 1657|  9.37k|            }
 1658|  9.37k|            if constexpr (ranges::common_range<Range>) {
 1659|  9.37k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  9.37k|                          std::back_inserter(str));
 1661|  9.37k|            }
 1662|  9.37k|            else {
 1663|  9.37k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  9.37k|                     ++it) {
 1665|  9.37k|                    str.push_back(*it);
 1666|  9.37k|                }
 1667|  9.37k|            }
 1668|  9.37k|            m_view = string_view_type{str};
 1669|  9.37k|        }
 1670|  9.37k|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|  9.37k|    {
 3666|  9.37k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.37k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  9.37k|        return read_source_impl(range);
 3672|  9.37k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  9.37k|    {
 3692|  9.37k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  9.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  9.37k|        const std::ptrdiff_t sign_len =
 3695|  9.37k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 9.37k]
  ------------------
 3696|       |
 3697|  9.37k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  9.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  9.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  9.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  9.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  9.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  9.37k|    }                                                  \
  |  |  |  | 3642|  9.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  9.37k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|    406|    {
 4171|    406|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    406|#if !SCN_DISABLE_LOCALE
 4174|    406|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 6, False: 400]
  ------------------
 4175|      6|            return read_impl<Range>(
 4176|      6|                range, rd,
 4177|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4178|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|      6|                },
 4180|      6|                value, loc);
 4181|      6|        }
 4182|    400|#endif
 4183|       |
 4184|    400|        return read_impl<Range>(
 4185|    400|            range, rd,
 4186|    400|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    400|                return r.read_source(SCN_FWD(args)...);
 4188|    400|            },
 4189|    400|            value);
 4190|    406|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  9.37k|    {
 4207|  9.37k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  9.37k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 9.37k]
  |  |  ------------------
  ------------------
 4209|      4|            return unexpected(r.error());
 4210|      4|        }
 4211|       |
 4212|  9.37k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  9.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  9.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  9.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  9.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  9.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  9.37k|    }                                                  \
  |  |  |  | 3642|  9.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|  9.37k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4178|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    400|    {
  754|    400|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    400|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    400|              cvref<T> obj = *get<T>(fn);
  745|    400|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    400|                  obj(static_cast<decltype(args)>(args)...);
  747|    400|              }
  748|    400|              else {
  749|    400|                  return obj(static_cast<decltype(args)>(args)...);
  750|    400|              }
  751|    400|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    400|    {
  684|    400|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    400|            return static_cast<T*>(s.m_cp);
  686|    400|        }
  687|    400|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    400|            return static_cast<T*>(s.m_p);
  689|    400|        }
  690|    400|        else {
  691|    400|            return reinterpret_cast<T*>(s.m_fp);
  692|    400|        }
  693|    400|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|    400|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    400|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    400|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    400|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    400|        {
  662|    400|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5809|  9.41k|{
 5810|  9.41k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  9.41k|        return reader_impl_for_bool<CharT>{};
 5812|  9.41k|    }
 5813|  9.41k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  9.41k|        return reader_impl_for_char<CharT>{};
 5815|  9.41k|    }
 5816|  9.41k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  9.41k|        return reader_impl_for_wchar<CharT>{};
 5818|  9.41k|    }
 5819|  9.41k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  9.41k|        return reader_impl_for_code_point<CharT>{};
 5821|  9.41k|    }
 5822|  9.41k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  9.41k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  9.41k|        return reader_impl_for_string<CharT>{};
 5825|  9.41k|    }
 5826|  9.41k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  9.41k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  9.41k|        return reader_impl_for_string<CharT>{};
 5829|  9.41k|    }
 5830|  9.41k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  9.41k|                       std::is_same_v<T, wregex_matches>) {
 5832|  9.41k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  9.41k|    }
 5834|  9.41k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  9.41k|        return reader_impl_for_voidptr<CharT>{};
 5836|  9.41k|    }
 5837|  9.41k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  9.41k|        return reader_impl_for_float<CharT>{};
 5839|  9.41k|    }
 5840|  9.41k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  9.41k|                       !std::is_same_v<T, wchar_t> &&
 5842|  9.41k|                       !std::is_same_v<T, char32_t> &&
 5843|  9.41k|                       !std::is_same_v<T, bool>) {
 5844|  9.41k|        return reader_impl_for_int<CharT>{};
 5845|  9.41k|    }
 5846|  9.41k|    else {
 5847|  9.41k|        return reader_impl_for_monostate<CharT>{};
 5848|  9.41k|    }
 5849|  9.41k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5206|  28.2k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.33k|    {
 3040|  1.33k|        reader_error_handler eh{};
 3041|  1.33k|        get_derived().check_specs_impl(specs, eh);
 3042|  1.33k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 1.21k]
  |  |  ------------------
  ------------------
 3043|    120|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    120|        }
 3045|  1.21k|        return {};
 3046|  1.33k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  1.33k|    {
 3051|  1.33k|        return static_cast<Derived&>(*this);
 3052|  1.33k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|  1.33k|    {
 5211|  1.33k|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|  1.33k|        SCN_GCC_PUSH
 5214|  1.33k|        SCN_GCC_IGNORE("-Wswitch")
 5215|  1.33k|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|  1.33k|        SCN_CLANG_PUSH
 5218|  1.33k|        SCN_CLANG_IGNORE("-Wswitch")
 5219|  1.33k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|  1.33k|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 102, False: 1.23k]
  ------------------
 5222|  1.17k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 1.17k, False: 162]
  ------------------
 5223|  1.17k|                m_type = reader_type::word;
 5224|  1.17k|                break;
 5225|       |
 5226|     42|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 42, False: 1.29k]
  ------------------
 5227|     42|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 0, False: 42]
  ------------------
 5228|     42|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 0, False: 42]
  ------------------
 5229|      0|                    m_type = reader_type::custom_word;
 5230|      0|                }
 5231|     42|                else {
 5232|     42|                    m_type = reader_type::word;
 5233|     42|                }
 5234|     42|                break;
 5235|      0|            }
 5236|       |
 5237|     18|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 18, False: 1.31k]
  ------------------
 5238|     18|                m_type = reader_type::character;
 5239|     18|                break;
 5240|       |
 5241|      0|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 0, False: 1.33k]
  ------------------
 5242|      0|                m_type = reader_type::character_set;
 5243|      0|                break;
 5244|       |
 5245|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 0, False: 1.33k]
  ------------------
 5246|      0|                m_type = reader_type::regex;
 5247|      0|                break;
 5248|       |
 5249|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 0, False: 1.33k]
  ------------------
 5250|      0|                m_type = reader_type::regex_escaped;
 5251|      0|                break;
 5252|  1.33k|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|  1.33k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5259|  28.3k|    {
 5260|  28.3k|        return m_type == reader_type::word;
 5261|  28.3k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  37.1k|{
 1132|  37.1k|    auto it = src.begin();
 1133|   164k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 128k, False: 35.9k]
  ------------------
 1134|   128k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   128k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 128k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   128k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 128k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   128k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   128k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   128k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.18k, False: 127k]
  ------------------
 1144|  1.18k|            return false;
 1145|  1.18k|        }
 1146|   127k|        it += len;
 1147|   127k|    }
 1148|  35.9k|    return true;
 1149|  37.1k|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  8.98k|{
 2968|  8.98k|    dst.clear();
 2969|  8.98k|    transcode_valid_to_string(src, dst);
 2970|  8.98k|    return {};
 2971|  8.98k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  8.98k|{
 1403|  8.98k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  8.98k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  8.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  8.98k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  8.98k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  8.98k|            std::u32string tmp;
 1410|  8.98k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  8.98k|            return transcode_to_string_impl_32to16<true>(
 1412|  8.98k|                std::u32string_view{tmp}, dest);
 1413|  8.98k|        }
 1414|  8.98k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  8.98k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  8.98k|        }
 1417|  8.98k|    }
 1418|  8.98k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  8.98k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  8.98k|            std::u32string tmp;
 1421|  8.98k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  8.98k|            return transcode_to_string_impl_32to8<true>(
 1423|  8.98k|                std::u32string_view{tmp}, dest);
 1424|  8.98k|        }
 1425|  8.98k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  8.98k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  8.98k|        }
 1428|  8.98k|    }
 1429|  8.98k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  8.98k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  8.98k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  8.98k|        }
 1433|  8.98k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  8.98k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  8.98k|        }
 1436|  8.98k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  8.98k|{
 1294|  8.98k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  8.98k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  29.8k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 29.8k, False: 8.98k]
  ------------------
 1298|  29.8k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  29.8k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  29.8k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 20.5k, False: 9.21k]
  ------------------
 1306|  20.5k|            dest.push_back(static_cast<char>(cp));
 1307|  20.5k|        }
 1308|  9.21k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 56, False: 9.15k]
  ------------------
 1309|     56|            dest.push_back(
 1310|     56|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|     56|            dest.push_back(
 1312|     56|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|     56|        }
 1314|  9.15k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 8.85k, False: 300]
  ------------------
 1315|  8.85k|            dest.push_back(
 1316|  8.85k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|  8.85k|            dest.push_back(static_cast<char>(
 1318|  8.85k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|  8.85k|            dest.push_back(
 1320|  8.85k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|  8.85k|        }
 1322|    300|        else {
 1323|    300|            dest.push_back(
 1324|    300|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    300|            dest.push_back(static_cast<char>(
 1326|    300|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    300|            dest.push_back(static_cast<char>(
 1328|    300|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    300|            dest.push_back(
 1330|    300|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    300|        }
 1332|  29.8k|    }
 1333|  8.98k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    404|    {
 5278|    404|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    404|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    404|        return read_impl(range, specs, value);
 5280|    404|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    404|    {
 5296|    404|        SCN_CLANG_PUSH
 5297|    404|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    404|        switch (m_type) {
 5300|    404|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 404, False: 0]
  ------------------
 5301|    404|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 404]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 404]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 404]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 404]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 404]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 404]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    404|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    404|        }
 5332|       |
 5333|    404|        SCN_CLANG_POP
 5334|    404|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|  9.37k|    {
 4821|  9.37k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  9.37k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  9.37k|{
 4753|  9.37k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  9.37k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  9.37k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 394, False: 8.98k]
  ------------------
 4757|    394|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    394|                                     "Invalid encoding in scanned string");
 4759|    394|    }
 4760|  8.98k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  8.98k|    static_cast<    \
  |  |  929|  8.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  8.98k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.98k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  8.98k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  8.98k|    static_cast<    \
  |  |  929|  8.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  8.98k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  8.98k|{
 3012|  8.98k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  8.98k|        dest.assign(source.view());
 3014|  8.98k|    }
 3015|  8.98k|    else {
 3016|  8.98k|        return transcode_impl(source.view(), dest);
 3017|  8.98k|    }
 3018|       |
 3019|      0|    return {};
 3020|  8.98k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  28.1k|{
 2088|  28.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  28.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  28.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  28.1k|        auto buf = make_contiguous_buffer(range);
 2092|  28.1k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  28.1k|        return ranges::next(range.begin(),
 2094|  28.1k|                            ranges::distance(buf.view().begin(), it));
 2095|  28.1k|    }
 2096|  28.1k|    else {
 2097|  28.1k|        auto it = range.begin();
 2098|       |
 2099|  28.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  28.1k|            auto seg = get_contiguous_beginning(range);
 2101|  28.1k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  28.1k|                seg_it != seg.end()) {
 2103|  28.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  28.1k|            }
 2105|  28.1k|            ranges::advance(it, seg.size());
 2106|  28.1k|        }
 2107|       |
 2108|  28.1k|        return read_until_code_point(
 2109|  28.1k|            ranges::subrange{it, range.end()},
 2110|  28.1k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  28.1k|    }
 2112|  28.1k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  28.1k|    {
  754|  28.1k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   140k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   140k|              cvref<T> obj = *get<T>(fn);
  745|   140k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   140k|                  obj(static_cast<decltype(args)>(args)...);
  747|   140k|              }
  748|   140k|              else {
  749|   140k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   140k|              }
  751|   140k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   140k|    {
  684|   140k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   140k|            return static_cast<T*>(s.m_cp);
  686|   140k|        }
  687|   140k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   140k|            return static_cast<T*>(s.m_p);
  689|   140k|        }
  690|   140k|        else {
  691|   140k|            return reinterpret_cast<T*>(s.m_fp);
  692|   140k|        }
  693|   140k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   140k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  28.1k|        {
  662|  28.1k|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5809|  9.41k|{
 5810|  9.41k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  9.41k|        return reader_impl_for_bool<CharT>{};
 5812|  9.41k|    }
 5813|  9.41k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  9.41k|        return reader_impl_for_char<CharT>{};
 5815|  9.41k|    }
 5816|  9.41k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  9.41k|        return reader_impl_for_wchar<CharT>{};
 5818|  9.41k|    }
 5819|  9.41k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  9.41k|        return reader_impl_for_code_point<CharT>{};
 5821|  9.41k|    }
 5822|  9.41k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  9.41k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  9.41k|        return reader_impl_for_string<CharT>{};
 5825|  9.41k|    }
 5826|  9.41k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  9.41k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  9.41k|        return reader_impl_for_string<CharT>{};
 5829|  9.41k|    }
 5830|  9.41k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  9.41k|                       std::is_same_v<T, wregex_matches>) {
 5832|  9.41k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  9.41k|    }
 5834|  9.41k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  9.41k|        return reader_impl_for_voidptr<CharT>{};
 5836|  9.41k|    }
 5837|  9.41k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  9.41k|        return reader_impl_for_float<CharT>{};
 5839|  9.41k|    }
 5840|  9.41k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  9.41k|                       !std::is_same_v<T, wchar_t> &&
 5842|  9.41k|                       !std::is_same_v<T, char32_t> &&
 5843|  9.41k|                       !std::is_same_v<T, bool>) {
 5844|  9.41k|        return reader_impl_for_int<CharT>{};
 5845|  9.41k|    }
 5846|  9.41k|    else {
 5847|  9.41k|        return reader_impl_for_monostate<CharT>{};
 5848|  9.41k|    }
 5849|  9.41k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    404|    {
 5278|    404|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    404|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    404|        return read_impl(range, specs, value);
 5280|    404|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    404|    {
 5296|    404|        SCN_CLANG_PUSH
 5297|    404|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    404|        switch (m_type) {
 5300|    404|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 404, False: 0]
  ------------------
 5301|    404|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 404]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 404]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 404]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 404]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 404]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 404]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    404|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    404|        }
 5332|       |
 5333|    404|        SCN_CLANG_POP
 5334|    404|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|  9.37k|    {
 4821|  9.37k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  9.37k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  9.37k|{
 4753|  9.37k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  9.37k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  9.37k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 394, False: 8.98k]
  ------------------
 4757|    394|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    394|                                     "Invalid encoding in scanned string");
 4759|    394|    }
 4760|  8.98k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  8.98k|    static_cast<    \
  |  |  929|  8.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  8.98k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.98k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  8.98k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  8.98k|    static_cast<    \
  |  |  929|  8.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  8.98k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  8.98k|{
 3012|  8.98k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  8.98k|        dest.assign(source.view());
 3014|  8.98k|    }
 3015|  8.98k|    else {
 3016|  8.98k|        return transcode_impl(source.view(), dest);
 3017|  8.98k|    }
 3018|       |
 3019|  8.98k|    return {};
 3020|  8.98k|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5809|  9.41k|{
 5810|  9.41k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  9.41k|        return reader_impl_for_bool<CharT>{};
 5812|  9.41k|    }
 5813|  9.41k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  9.41k|        return reader_impl_for_char<CharT>{};
 5815|  9.41k|    }
 5816|  9.41k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  9.41k|        return reader_impl_for_wchar<CharT>{};
 5818|  9.41k|    }
 5819|  9.41k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  9.41k|        return reader_impl_for_code_point<CharT>{};
 5821|  9.41k|    }
 5822|  9.41k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  9.41k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  9.41k|        return reader_impl_for_string<CharT>{};
 5825|  9.41k|    }
 5826|  9.41k|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|  9.41k|                       std::is_same_v<T, std::wstring>) {
 5828|  9.41k|        return reader_impl_for_string<CharT>{};
 5829|  9.41k|    }
 5830|  9.41k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  9.41k|                       std::is_same_v<T, wregex_matches>) {
 5832|  9.41k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  9.41k|    }
 5834|  9.41k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  9.41k|        return reader_impl_for_voidptr<CharT>{};
 5836|  9.41k|    }
 5837|  9.41k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  9.41k|        return reader_impl_for_float<CharT>{};
 5839|  9.41k|    }
 5840|  9.41k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  9.41k|                       !std::is_same_v<T, wchar_t> &&
 5842|  9.41k|                       !std::is_same_v<T, char32_t> &&
 5843|  9.41k|                       !std::is_same_v<T, bool>) {
 5844|  9.41k|        return reader_impl_for_int<CharT>{};
 5845|  9.41k|    }
 5846|  9.41k|    else {
 5847|  9.41k|        return reader_impl_for_monostate<CharT>{};
 5848|  9.41k|    }
 5849|  9.41k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|    404|    {
 5278|    404|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    404|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    404|        return read_impl(range, specs, value);
 5280|    404|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|    404|    {
 5296|    404|        SCN_CLANG_PUSH
 5297|    404|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    404|        switch (m_type) {
 5300|    404|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 404, False: 0]
  ------------------
 5301|    404|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 404]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 404]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 404]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 404]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 404]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 404]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    404|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    404|        }
 5332|       |
 5333|    404|        SCN_CLANG_POP
 5334|    404|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|  9.37k|    {
 4828|  9.37k|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|  9.37k|                                     value);
 4830|  9.37k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|  9.37k|{
 4774|  9.37k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  9.37k|    auto src = [&]() {
 4777|  9.37k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  9.37k|            return make_contiguous_buffer(
 4779|  9.37k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  9.37k|        }
 4781|  9.37k|        else {
 4782|  9.37k|            return make_contiguous_buffer(
 4783|  9.37k|                ranges::subrange{range.begin(), result});
 4784|  9.37k|        }
 4785|  9.37k|    }();
 4786|  9.37k|    using src_type = decltype(src);
 4787|       |
 4788|  9.37k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  9.37k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  9.37k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  9.37k|                                     "Cannot read a string_view from "
 4797|  9.37k|                                     "this source range (would require "
 4798|  9.37k|                                     "transcoding)");
 4799|  9.37k|    }
 4800|  9.37k|    else {
 4801|  9.37k|        const auto view = src.view();
 4802|  9.37k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  9.37k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 394, False: 8.98k]
  ------------------
 4805|    394|            return unexpected_scan_error(
 4806|    394|                scan_error::invalid_scanned_value,
 4807|    394|                "Invalid encoding in scanned string_view");
 4808|    394|        }
 4809|       |
 4810|  8.98k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  8.98k|    static_cast<    \
  |  |  929|  8.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  9.37k|    }
 4812|  9.37k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|  9.37k|    auto src = [&]() {
 4777|  9.37k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  9.37k|            return make_contiguous_buffer(
 4779|  9.37k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  9.37k|        }
 4781|  9.37k|        else {
 4782|  9.37k|            return make_contiguous_buffer(
 4783|  9.37k|                ranges::subrange{range.begin(), result});
 4784|  9.37k|        }
 4785|  9.37k|    }();
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|    894|    {
 4101|    894|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 0, False: 894]
  ------------------
 4102|      0|            return std::copysign(value, T{-1.0});
 4103|      0|        }
 4104|    894|        return std::copysign(value, T{1.0});
 4105|    894|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|  9.37k|    {
 4101|  9.37k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 0, False: 9.37k]
  ------------------
 4102|      0|            return std::copysign(value, T{-1.0});
 4103|      0|        }
 4104|  9.37k|        return std::copysign(value, T{1.0});
 4105|  9.37k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  5.92k|{
 5796|  5.92k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 5797|      0|        return unexpected(e);
 5798|      0|    }
 5799|       |
 5800|  5.92k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 658, False: 5.26k]
  ------------------
 5801|    658|        return range.begin();
 5802|    658|    }
 5803|       |
 5804|  5.26k|    return skip_classic_whitespace(range);
 5805|  5.92k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    658|    {
 3529|    658|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    658|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    658|        return read_default_with_base(range, value, 10);
 3531|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    658|    {
 3529|    658|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    658|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    658|        return read_default_with_base(range, value, 10);
 3531|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5748|  1.23k|    {
 5749|  1.23k|        return true;
 5750|  1.23k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5765|    882|    {
 5766|    882|        detail::format_specs specs{};
 5767|    882|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|    882|        std::uintptr_t intvalue{};
 5770|    882|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 882, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    882|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    882|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    882|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    882|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    882|    }                                                  \
  |  |  |  | 3642|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|    882|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.48k|    {
 3035|  1.48k|        return true;
 3036|  1.48k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5504|    658|    {
 5505|    658|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    658|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5506|       |
 5507|    658|        return bool_reader<CharT>{}.read_classic(range, value);
 5508|    658|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5349|  9.63k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5355|  1.02k|    {
 5356|  1.02k|        scan_error err{scan_error::invalid_scanned_value,
 5357|  1.02k|                       "Failed to read boolean"};
 5358|       |
 5359|  1.02k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 898, False: 130]
  ------------------
 5360|    898|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 898]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|    898|            else {
 5364|    898|                err = r.error();
 5365|    898|            }
 5366|    898|        }
 5367|       |
 5368|  1.02k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 1.00k, False: 20]
  ------------------
 5369|  1.00k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 1.00k]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|  1.00k|            else {
 5373|  1.00k|                err = r.error();
 5374|  1.00k|            }
 5375|  1.00k|        }
 5376|       |
 5377|  1.02k|        return unexpected(err);
 5378|  1.02k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5384|    912|    {
 5385|    912|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 912]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|    912|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 912]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|    912|        return unexpected_scan_error(
 5395|    912|            scan_error::invalid_scanned_value,
 5396|    912|            "Failed to read numeric boolean value: No match");
 5397|    912|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5402|  1.00k|    {
 5403|  1.00k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 1.00k]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|  1.00k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 1.00k]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|  1.00k|        return unexpected_scan_error(
 5413|  1.00k|            scan_error::invalid_scanned_value,
 5414|  1.00k|            "Failed to read textual boolean value: No match");
 5415|  1.00k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.01k|{
 2194|  2.01k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  2.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 102, False: 1.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    102|    }                                                  \
  |  |  |  | 3642|  2.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.91k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.91k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.91k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.91k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.91k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.91k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.91k|            return unexpected(parse_error::error);
 2202|  1.91k|        }
 2203|      0|        return it;
 2204|  1.91k|    }
 2205|  1.91k|    else {
 2206|  1.91k|        auto range_it = range.begin();
 2207|  1.91k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.91k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.91k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.91k|                return unexpected(parse_error::error);
 2211|  1.91k|            }
 2212|  1.91k|        }
 2213|  1.91k|        return it;
 2214|  1.91k|    }
 2215|  1.91k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|    658|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  9.63k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|    658|    {
 4153|    658|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    658|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|    658|        float_reader<CharT> rd{};
 4156|    658|        return read_impl<Range>(
 4157|    658|            range, rd,
 4158|    658|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    658|                return r.read_source(SCN_FWD(args)...);
 4160|    658|            },
 4161|    658|            value);
 4162|    658|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    658|    {
  754|    658|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    658|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    658|              cvref<T> obj = *get<T>(fn);
  745|    658|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    658|                  obj(static_cast<decltype(args)>(args)...);
  747|    658|              }
  748|    658|              else {
  749|    658|                  return obj(static_cast<decltype(args)>(args)...);
  750|    658|              }
  751|    658|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    658|    {
  684|    658|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    658|            return static_cast<T*>(s.m_cp);
  686|    658|        }
  687|    658|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    658|            return static_cast<T*>(s.m_p);
  689|    658|        }
  690|    658|        else {
  691|    658|            return reinterpret_cast<T*>(s.m_fp);
  692|    658|        }
  693|    658|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|    658|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    658|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|    658|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    658|        {
  662|    658|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|    658|    {
 5267|    658|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    658|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    658|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    658|    {
 5267|    658|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    658|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    658|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|    658|    {
 5872|    658|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    658|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    658|                          basic_contiguous_scan_context<char_type>>) {
 5876|    658|            auto rd = make_reader<T, char_type>();
 5877|    658|            return impl(rd, range, value);
 5878|    658|        }
 5879|    658|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    658|            auto rd = make_reader<T, char_type>();
 5881|    658|            if (!is_segment_contiguous(range)) {
 5882|    658|                return impl(rd, range, value);
 5883|    658|            }
 5884|    658|            auto crange = get_as_contiguous(range);
 5885|    658|            SCN_TRY(it, impl(rd, crange, value));
 5886|    658|            return ranges::next(range.begin(),
 5887|    658|                                ranges::distance(crange.begin(), it));
 5888|    658|        }
 5889|    658|        else {
 5890|    658|            SCN_EXPECT(false);
 5891|    658|            SCN_UNREACHABLE;
 5892|    658|        }
 5893|    658|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    658|    {
 5864|    658|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    658|                        .transform_error(make_eof_scan_error));
 5866|    658|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    658|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    658|    {
 5267|    658|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    658|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    658|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    658|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  75.3k|    {
 2879|  75.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   357k|    {
 2883|   357k|        return m_current;
 2884|   357k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   420k|    {
 2888|   420k|        return m_range.end();
 2889|   420k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   137k|{
 1221|       |    // TODO: optimize
 1222|   137k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   137k|    auto res = get_next_code_point(str);
 1224|   137k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   137k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   140k|    {
 2903|   140k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   140k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   140k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 140k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   140k|        }
 2909|   140k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   140k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   141k|    {
 2893|   141k|        return ranges::subrange{begin(), end()};
 2894|   141k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  21.1k|    {
 6038|  21.1k|        const bool need_skipped_width =
 6039|  21.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 1.78k, False: 19.3k]
  |  Branch (6039:33): [True: 4.77k, False: 14.5k]
  ------------------
 6040|  21.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  21.1k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 732, False: 20.3k]
  ------------------
 6044|  21.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 1.87k, False: 18.5k]
  ------------------
 6045|  2.60k|            return skip_fill(rng, specs.precision, specs.fill,
 6046|  2.60k|                             need_skipped_width);
 6047|  2.60k|        }
 6048|  18.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 17.9k, False: 516]
  |  Branch (6048:56): [True: 4.45k, False: 13.5k]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  4.45k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 2.76k, False: 1.69k]
  ------------------
 6052|  2.76k|                auto max_width_view = take_width(rng, specs.precision);
 6053|  2.76k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|  2.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 2.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     90|    }                                                  \
  |  |  |  | 3642|  2.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|  2.67k|                                  .transform_error(make_eof_scan_error));
 6055|  2.67k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|  2.76k|            }
 6057|  3.38k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.69k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.69k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.69k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.69k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.38k|                            make_eof_scan_error));
 6059|       |
 6060|  3.38k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 1.10k, False: 586]
  ------------------
 6061|  1.10k|                return result_type{
 6062|  1.10k|                    it,
 6063|  1.10k|                    calculate_text_width(make_contiguous_buffer(
 6064|  1.10k|                                             ranges::subrange{rng.begin(), it})
 6065|  1.10k|                                             .view())};
 6066|  1.10k|            }
 6067|    586|            return result_type{it, 0};
 6068|  3.38k|        }
 6069|       |
 6070|  14.0k|        return result_type{rng.begin(), 0};
 6071|  18.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  5.17k|    {
 6080|  5.17k|        const bool need_skipped_width =
 6081|  5.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 402, False: 4.76k]
  |  Branch (6081:33): [True: 1.44k, False: 3.32k]
  ------------------
 6082|  5.17k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  5.17k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 206, False: 4.96k]
  ------------------
 6085|  5.17k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 328, False: 4.63k]
  ------------------
 6086|    534|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|    534|                             specs.fill, need_skipped_width);
 6088|    534|        }
 6089|  4.63k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 4.21k, False: 418]
  ------------------
 6090|  4.63k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 3.81k, False: 408]
  ------------------
 6091|  4.63k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 216, False: 3.59k]
  |  Branch (6091:35): [True: 200, False: 16]
  ------------------
 6092|  3.81k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 528, False: 3.08k]
  ------------------
 6093|  3.61k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 448, False: 80]
  ------------------
 6094|    648|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 448, False: 200]
  ------------------
 6095|    448|                const auto initial_width =
 6096|    448|                    specs.precision - prefix_width - value_width;
 6097|    448|                auto max_width_view = take_width(rng, initial_width);
 6098|    448|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|    448|                                  .transform_error(make_eof_scan_error));
 6100|    448|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|    448|            }
 6102|    400|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|    200|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    200|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    200|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    200|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    200|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|    400|                            make_eof_scan_error));
 6104|       |
 6105|    400|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 200, False: 0]
  ------------------
 6106|    200|                return result_type{
 6107|    200|                    it,
 6108|    200|                    calculate_text_width(make_contiguous_buffer(
 6109|    200|                                             ranges::subrange{rng.begin(), it})
 6110|    200|                                             .view())};
 6111|    200|            }
 6112|      0|            return result_type{it, 0};
 6113|    400|        }
 6114|  3.98k|        return result_type{rng.begin(), 0};
 6115|  4.63k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6178|  5.87k|    {
 6179|  5.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.87k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.87k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.87k|            auto rd = make_reader<T, char_type>();
 6184|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.22k, False: 648]
  |  |  ------------------
  ------------------
 6185|  5.22k|                return unexpected(e);
 6186|  5.22k|            }
 6187|       |
 6188|    648|            return impl(rd, range, value);
 6189|  5.87k|        }
 6190|  5.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.87k|            auto rd = make_reader<T, char_type>();
 6192|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.87k|                return unexpected(e);
 6194|  5.87k|            }
 6195|       |
 6196|  5.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.87k|                specs.width != 0) {
 6198|  5.87k|                return impl(rd, range, value);
 6199|  5.87k|            }
 6200|       |
 6201|  5.87k|            auto crange = get_as_contiguous(range);
 6202|  5.87k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.87k|            return ranges::next(range.begin(),
 6204|  5.87k|                                ranges::distance(crange.begin(), it));
 6205|  5.87k|        }
 6206|  5.87k|        else {
 6207|  5.87k|            SCN_EXPECT(false);
 6208|  5.87k|            SCN_UNREACHABLE;
 6209|  5.87k|        }
 6210|  5.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    648|    {
 6121|    648|        const bool need_skipped_width =
 6122|    648|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 176, False: 472]
  |  Branch (6122:33): [True: 396, False: 76]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    648|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     16|    }                                                  \
  |  |  |  | 3642|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    632|        auto [it, prefix_width] = prefix_result;
 6127|    632|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    632|        std::ptrdiff_t value_width = 0;
 6131|    632|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 380, False: 252]
  ------------------
 6132|    380|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 380]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    380|            const auto initial_width = specs.precision - prefix_width;
 6140|    380|            auto max_width_view =
 6141|    380|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    380|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 380, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    380|    }                                                  \
  |  |  |  | 3642|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    252|        else {
 6147|    252|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    252|    }                                                  \
  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6178|  5.87k|    {
 6179|  5.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.87k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.87k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.87k|            auto rd = make_reader<T, char_type>();
 6184|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.22k, False: 648]
  |  |  ------------------
  ------------------
 6185|  5.22k|                return unexpected(e);
 6186|  5.22k|            }
 6187|       |
 6188|    648|            return impl(rd, range, value);
 6189|  5.87k|        }
 6190|  5.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.87k|            auto rd = make_reader<T, char_type>();
 6192|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.87k|                return unexpected(e);
 6194|  5.87k|            }
 6195|       |
 6196|  5.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.87k|                specs.width != 0) {
 6198|  5.87k|                return impl(rd, range, value);
 6199|  5.87k|            }
 6200|       |
 6201|  5.87k|            auto crange = get_as_contiguous(range);
 6202|  5.87k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.87k|            return ranges::next(range.begin(),
 6204|  5.87k|                                ranges::distance(crange.begin(), it));
 6205|  5.87k|        }
 6206|  5.87k|        else {
 6207|  5.87k|            SCN_EXPECT(false);
 6208|  5.87k|            SCN_UNREACHABLE;
 6209|  5.87k|        }
 6210|  5.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    648|    {
 6121|    648|        const bool need_skipped_width =
 6122|    648|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 176, False: 472]
  |  Branch (6122:33): [True: 396, False: 76]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    648|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     16|    }                                                  \
  |  |  |  | 3642|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    632|        auto [it, prefix_width] = prefix_result;
 6127|    632|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    632|        std::ptrdiff_t value_width = 0;
 6131|    632|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 380, False: 252]
  ------------------
 6132|    380|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 380]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    380|            const auto initial_width = specs.precision - prefix_width;
 6140|    380|            auto max_width_view =
 6141|    380|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    380|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 380, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    380|    }                                                  \
  |  |  |  | 3642|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    252|        else {
 6147|    252|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    252|    }                                                  \
  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6178|  5.84k|    {
 6179|  5.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.84k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.84k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.84k|            auto rd = make_reader<T, char_type>();
 6184|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.26k, False: 576]
  |  |  ------------------
  ------------------
 6185|  5.26k|                return unexpected(e);
 6186|  5.26k|            }
 6187|       |
 6188|    576|            return impl(rd, range, value);
 6189|  5.84k|        }
 6190|  5.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.84k|            auto rd = make_reader<T, char_type>();
 6192|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.84k|                return unexpected(e);
 6194|  5.84k|            }
 6195|       |
 6196|  5.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.84k|                specs.width != 0) {
 6198|  5.84k|                return impl(rd, range, value);
 6199|  5.84k|            }
 6200|       |
 6201|  5.84k|            auto crange = get_as_contiguous(range);
 6202|  5.84k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.84k|            return ranges::next(range.begin(),
 6204|  5.84k|                                ranges::distance(crange.begin(), it));
 6205|  5.84k|        }
 6206|  5.84k|        else {
 6207|  5.84k|            SCN_EXPECT(false);
 6208|  5.84k|            SCN_UNREACHABLE;
 6209|  5.84k|        }
 6210|  5.84k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5753|  5.84k|    {
 5754|  5.84k|        reader_error_handler eh{};
 5755|  5.84k|        detail::check_pointer_type_specs(specs, eh);
 5756|  5.84k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.26k, False: 576]
  |  |  ------------------
  ------------------
 5757|  5.26k|            return {scan_error::invalid_format_string, eh.m_msg};
 5758|  5.26k|        }
 5759|    576|        return {};
 5760|  5.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6120|    576|    {
 6121|    576|        const bool need_skipped_width =
 6122|    576|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 170, False: 406]
  |  Branch (6122:33): [True: 352, False: 54]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    576|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    576|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    576|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    576|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      4|    }                                                  \
  |  |  |  | 3642|    576|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    572|        auto [it, prefix_width] = prefix_result;
 6127|    572|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    572|        std::ptrdiff_t value_width = 0;
 6131|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 348, False: 224]
  ------------------
 6132|    348|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 348]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    348|            const auto initial_width = specs.precision - prefix_width;
 6140|    348|            auto max_width_view =
 6141|    348|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    348|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 348, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    348|    }                                                  \
  |  |  |  | 3642|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    224|        else {
 6147|    224|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    224|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    224|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 224, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    224|    }                                                  \
  |  | 3642|    224|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5782|    348|    {
 5783|    348|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    348|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    348|        return read_default(range, value, loc);
 5785|    348|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5765|    348|    {
 5766|    348|        detail::format_specs specs{};
 5767|    348|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|    348|        std::uintptr_t intvalue{};
 5770|    348|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 348, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    348|    }                                                  \
  |  |  |  | 3642|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|    348|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5782|    224|    {
 5783|    224|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    224|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    224|        return read_default(range, value, loc);
 5785|    224|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6178|  5.87k|    {
 6179|  5.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.87k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.87k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.87k|            auto rd = make_reader<T, char_type>();
 6184|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.05k, False: 822]
  |  |  ------------------
  ------------------
 6185|  5.05k|                return unexpected(e);
 6186|  5.05k|            }
 6187|       |
 6188|    822|            return impl(rd, range, value);
 6189|  5.87k|        }
 6190|  5.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.87k|            auto rd = make_reader<T, char_type>();
 6192|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.87k|                return unexpected(e);
 6194|  5.87k|            }
 6195|       |
 6196|  5.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.87k|                specs.width != 0) {
 6198|  5.87k|                return impl(rd, range, value);
 6199|  5.87k|            }
 6200|       |
 6201|  5.87k|            auto crange = get_as_contiguous(range);
 6202|  5.87k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.87k|            return ranges::next(range.begin(),
 6204|  5.87k|                                ranges::distance(crange.begin(), it));
 6205|  5.87k|        }
 6206|  5.87k|        else {
 6207|  5.87k|            SCN_EXPECT(false);
 6208|  5.87k|            SCN_UNREACHABLE;
 6209|  5.87k|        }
 6210|  5.87k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.87k|    {
 3040|  5.87k|        reader_error_handler eh{};
 3041|  5.87k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.87k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.05k, False: 822]
  |  |  ------------------
  ------------------
 3043|  5.05k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.05k|        }
 3045|    822|        return {};
 3046|  5.87k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  5.87k|    {
 3051|  5.87k|        return static_cast<Derived&>(*this);
 3052|  5.87k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5497|  5.87k|    {
 5498|  5.87k|        detail::check_bool_type_specs(specs, eh);
 5499|  5.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    822|    {
 6121|    822|        const bool need_skipped_width =
 6122|    822|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 186, False: 636]
  |  Branch (6122:33): [True: 436, False: 200]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    822|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    822|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    822|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    822|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    822|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 802]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     20|    }                                                  \
  |  |  |  | 3642|    822|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    802|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    802|        auto [it, prefix_width] = prefix_result;
 6127|    802|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    802|        std::ptrdiff_t value_width = 0;
 6131|    802|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 416, False: 386]
  ------------------
 6132|    416|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 416]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    416|            const auto initial_width = specs.precision - prefix_width;
 6140|    416|            auto max_width_view =
 6141|    416|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    416|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 416, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    416|    }                                                  \
  |  |  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    386|        else {
 6147|    386|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 386, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    386|    }                                                  \
  |  | 3642|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5516|    416|    {
 5517|    416|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    416|#if !SCN_DISABLE_LOCALE
 5520|    416|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 12, False: 404]
  ------------------
 5521|     12|            return rd.read_localized(range, loc, value);
 5522|     12|        }
 5523|    404|#endif
 5524|       |
 5525|    404|        return rd.read_classic(range, value);
 5526|    416|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5529|    802|    {
 5530|    802|        SCN_GCC_COMPAT_PUSH
 5531|    802|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5532|       |
 5533|    802|        switch (specs.type) {
 5534|    166|            case detail::presentation_type::string:
  ------------------
  |  Branch (5534:13): [True: 166, False: 636]
  ------------------
 5535|    166|                return bool_reader_base::allow_text;
 5536|       |
 5537|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5537:13): [True: 12, False: 790]
  ------------------
 5538|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5538:13): [True: 10, False: 792]
  ------------------
 5539|     40|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5539:13): [True: 18, False: 784]
  ------------------
 5540|     44|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5540:13): [True: 4, False: 798]
  ------------------
 5541|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5541:13): [True: 10, False: 792]
  ------------------
 5542|     58|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5542:13): [True: 4, False: 798]
  ------------------
 5543|     58|                return bool_reader_base::allow_numeric;
 5544|       |
 5545|    578|            default:
  ------------------
  |  Branch (5545:13): [True: 578, False: 224]
  ------------------
 5546|    578|                return bool_reader_base::allow_text |
 5547|    578|                       bool_reader_base::allow_numeric;
 5548|    802|        }
 5549|       |
 5550|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5551|    802|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5428|     12|    {
 5429|     12|        scan_error err{scan_error::invalid_scanned_value,
 5430|     12|                       "Failed to read boolean"};
 5431|       |
 5432|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 10, False: 2]
  ------------------
 5433|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 10]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|     10|            else {
 5437|     10|                err = r.error();
 5438|     10|            }
 5439|     10|        }
 5440|       |
 5441|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 10, False: 2]
  ------------------
 5442|     10|            auto stdloc = loc.get<std::locale>();
 5443|     10|            const auto& numpunct =
 5444|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|     10|            const auto truename = numpunct.truename();
 5446|     10|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|     10|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 10]
  ------------------
 5449|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|     10|            else {
 5453|     10|                err = r.error();
 5454|     10|            }
 5455|     10|        }
 5456|       |
 5457|     12|        return unexpected(err);
 5458|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5384|    382|    {
 5385|    382|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 382]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|    382|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 382]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|    382|        return unexpected_scan_error(
 5395|    382|            scan_error::invalid_scanned_value,
 5396|    382|            "Failed to read numeric boolean value: No match");
 5397|    382|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    764|{
 2146|    764|    auto it = read_code_unit(range);
 2147|    764|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 764]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    764|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 764, False: 0]
  |  |  ------------------
  ------------------
 2152|    764|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    764|        return unexpected(parse_error::error);
 2154|    764|    }
 2155|       |
 2156|      0|    return *it;
 2157|    764|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5468|     10|    {
 5469|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|     10|        const auto shorter = std::pair{
 5471|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 10, False: 0]
  ------------------
 5472|     10|        const auto longer = std::pair{
 5473|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 10]
  ------------------
 5474|       |
 5475|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 10]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 10]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|     10|                                     "read_textual: No match");
 5486|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     12|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    772|{
 1857|    772|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    772|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    772|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    772|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    772|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    772|        if (sz < count) {
 1862|    772|            return unexpected(eof_error::eof);
 1863|    772|        }
 1864|       |
 1865|    772|        return ranges::next(range.begin(), count);
 1866|    772|    }
 1867|    772|    else {
 1868|    772|        auto it = range.begin();
 1869|    772|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 772]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  4.01k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.33k, False: 678]
  ------------------
 1874|  3.33k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 94, False: 3.24k]
  ------------------
 1875|     94|                return unexpected(eof_error::eof);
 1876|     94|            }
 1877|  3.33k|        }
 1878|       |
 1879|    678|        return it;
 1880|    772|    }
 1881|    772|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    772|{
 1095|    772|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    772|        return r.size();
 1097|    772|    }
 1098|    772|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    772|                           ranges::const_iterator_t<Range>,
 1100|    772|                           typename detail::basic_scan_buffer<
 1101|    772|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    772|        if constexpr (ranges::common_range<Range>) {
 1103|    772|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    772|        }
 1105|    772|        else {
 1106|    772|            if (r.begin().stores_parent()) {
 1107|    772|                return static_cast<size_t>(
 1108|    772|                    r.begin().parent()->chars_available() -
 1109|    772|                    r.begin().position());
 1110|    772|            }
 1111|    772|            return r.begin().contiguous_segment().size();
 1112|    772|        }
 1113|    772|    }
 1114|    772|    else {
 1115|    772|        return 0;
 1116|    772|    }
 1117|    772|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5355|    404|    {
 5356|    404|        scan_error err{scan_error::invalid_scanned_value,
 5357|    404|                       "Failed to read boolean"};
 5358|       |
 5359|    404|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 372, False: 32]
  ------------------
 5360|    372|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 372]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|    372|            else {
 5364|    372|                err = r.error();
 5365|    372|            }
 5366|    372|        }
 5367|       |
 5368|    404|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 376, False: 28]
  ------------------
 5369|    376|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 376]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|    376|            else {
 5373|    376|                err = r.error();
 5374|    376|            }
 5375|    376|        }
 5376|       |
 5377|    404|        return unexpected(err);
 5378|    404|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5402|    376|    {
 5403|    376|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 376]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|    376|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 376]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|    376|        return unexpected_scan_error(
 5413|    376|            scan_error::invalid_scanned_value,
 5414|    376|            "Failed to read textual boolean value: No match");
 5415|    376|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    752|{
 2194|    752|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|    752|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    752|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    752|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    752|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     82|    }                                                  \
  |  |  |  | 3642|    752|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    670|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    670|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    670|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    670|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    670|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 670, False: 0]
  |  |  ------------------
  ------------------
 2201|    670|            return unexpected(parse_error::error);
 2202|    670|        }
 2203|      0|        return it;
 2204|    670|    }
 2205|    670|    else {
 2206|    670|        auto range_it = range.begin();
 2207|    670|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    670|            if (SCN_UNLIKELY(*range_it !=
 2209|    670|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    670|                return unexpected(parse_error::error);
 2211|    670|            }
 2212|    670|        }
 2213|    670|        return it;
 2214|    670|    }
 2215|    670|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5516|    386|    {
 5517|    386|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    386|#if !SCN_DISABLE_LOCALE
 5520|    386|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 16, False: 370]
  ------------------
 5521|     16|            return rd.read_localized(range, loc, value);
 5522|     16|        }
 5523|    370|#endif
 5524|       |
 5525|    370|        return rd.read_classic(range, value);
 5526|    386|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5428|     16|    {
 5429|     16|        scan_error err{scan_error::invalid_scanned_value,
 5430|     16|                       "Failed to read boolean"};
 5431|       |
 5432|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 14, False: 2]
  ------------------
 5433|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 14]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|     14|            else {
 5437|     14|                err = r.error();
 5438|     14|            }
 5439|     14|        }
 5440|       |
 5441|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 8, False: 8]
  ------------------
 5442|      8|            auto stdloc = loc.get<std::locale>();
 5443|      8|            const auto& numpunct =
 5444|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|      8|            const auto truename = numpunct.truename();
 5446|      8|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|      8|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 8]
  ------------------
 5449|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|      8|            else {
 5453|      8|                err = r.error();
 5454|      8|            }
 5455|      8|        }
 5456|       |
 5457|     16|        return unexpected(err);
 5458|     16|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5468|      8|    {
 5469|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|      8|        const auto shorter = std::pair{
 5471|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 8, False: 0]
  ------------------
 5472|      8|        const auto longer = std::pair{
 5473|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 8]
  ------------------
 5474|       |
 5475|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 8]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 8]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|      8|                                     "read_textual: No match");
 5486|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6178|  5.84k|    {
 6179|  5.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.84k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.84k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.84k|            auto rd = make_reader<T, char_type>();
 6184|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.21k, False: 628]
  |  |  ------------------
  ------------------
 6185|  5.21k|                return unexpected(e);
 6186|  5.21k|            }
 6187|       |
 6188|    628|            return impl(rd, range, value);
 6189|  5.84k|        }
 6190|  5.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.84k|            auto rd = make_reader<T, char_type>();
 6192|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.84k|                return unexpected(e);
 6194|  5.84k|            }
 6195|       |
 6196|  5.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.84k|                specs.width != 0) {
 6198|  5.84k|                return impl(rd, range, value);
 6199|  5.84k|            }
 6200|       |
 6201|  5.84k|            auto crange = get_as_contiguous(range);
 6202|  5.84k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.84k|            return ranges::next(range.begin(),
 6204|  5.84k|                                ranges::distance(crange.begin(), it));
 6205|  5.84k|        }
 6206|  5.84k|        else {
 6207|  5.84k|            SCN_EXPECT(false);
 6208|  5.84k|            SCN_UNREACHABLE;
 6209|  5.84k|        }
 6210|  5.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    628|    {
 6121|    628|        const bool need_skipped_width =
 6122|    628|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 172, False: 456]
  |  Branch (6122:33): [True: 388, False: 68]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    628|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    628|        auto [it, prefix_width] = prefix_result;
 6127|    628|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    628|        std::ptrdiff_t value_width = 0;
 6131|    628|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 388, False: 240]
  ------------------
 6132|    388|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 388]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    388|            const auto initial_width = specs.precision - prefix_width;
 6140|    388|            auto max_width_view =
 6141|    388|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    388|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     40|    }                                                  \
  |  |  |  | 3642|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    348|            it = w_it.base();
 6144|    348|            value_width = initial_width - w_it.count();
 6145|    348|        }
 6146|    240|        else {
 6147|    240|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 220]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     20|    }                                                  \
  |  | 3642|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    220|                                             specs, value, loc));
 6149|       |
 6150|    220|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 168, False: 52]
  ------------------
 6151|    168|                value_width = calculate_text_width(
 6152|    168|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    168|                        .view());
 6154|    168|            }
 6155|    220|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    568|        std::ptrdiff_t postfix_width = 0;
 6159|    568|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 568, False: 0]
  ------------------
 6160|    568|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 568]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    568|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|    568|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|    568|                                 rd.skip_ws_before_read(), prefix_width,
 6163|    568|                                 value_width));
 6164|    568|            std::tie(it, postfix_width) = postfix_result;
 6165|    568|        }
 6166|       |
 6167|    568|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    568|                                                 value_width, postfix_width);
 6169|    568|            !e) {
  ------------------
  |  Branch (6169:13): [True: 156, False: 412]
  ------------------
 6170|    156|            return unexpected(e);
 6171|    156|        }
 6172|       |
 6173|    412|        return it;
 6174|    568|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6178|  5.87k|    {
 6179|  5.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.87k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.87k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.87k|            auto rd = make_reader<T, char_type>();
 6184|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.23k, False: 644]
  |  |  ------------------
  ------------------
 6185|  5.23k|                return unexpected(e);
 6186|  5.23k|            }
 6187|       |
 6188|    644|            return impl(rd, range, value);
 6189|  5.87k|        }
 6190|  5.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.87k|            auto rd = make_reader<T, char_type>();
 6192|  5.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.87k|                return unexpected(e);
 6194|  5.87k|            }
 6195|       |
 6196|  5.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.87k|                specs.width != 0) {
 6198|  5.87k|                return impl(rd, range, value);
 6199|  5.87k|            }
 6200|       |
 6201|  5.87k|            auto crange = get_as_contiguous(range);
 6202|  5.87k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.87k|            return ranges::next(range.begin(),
 6204|  5.87k|                                ranges::distance(crange.begin(), it));
 6205|  5.87k|        }
 6206|  5.87k|        else {
 6207|  5.87k|            SCN_EXPECT(false);
 6208|  5.87k|            SCN_UNREACHABLE;
 6209|  5.87k|        }
 6210|  5.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    644|    {
 6121|    644|        const bool need_skipped_width =
 6122|    644|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 182, False: 462]
  |  Branch (6122:33): [True: 374, False: 88]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    644|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    644|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    644|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    644|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    644|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|    644|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    634|        auto [it, prefix_width] = prefix_result;
 6127|    634|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    634|        std::ptrdiff_t value_width = 0;
 6131|    634|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 364, False: 270]
  ------------------
 6132|    364|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 364]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    364|            const auto initial_width = specs.precision - prefix_width;
 6140|    364|            auto max_width_view =
 6141|    364|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    364|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 364, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    364|    }                                                  \
  |  |  |  | 3642|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    270|        else {
 6147|    270|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    270|    }                                                  \
  |  | 3642|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  5.84k|    {
 6179|  5.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.84k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.84k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.84k|            auto rd = make_reader<T, char_type>();
 6184|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.71k]
  |  |  ------------------
  ------------------
 6185|    128|                return unexpected(e);
 6186|    128|            }
 6187|       |
 6188|  5.71k|            return impl(rd, range, value);
 6189|  5.84k|        }
 6190|  5.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.84k|            auto rd = make_reader<T, char_type>();
 6192|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.84k|                return unexpected(e);
 6194|  5.84k|            }
 6195|       |
 6196|  5.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.84k|                specs.width != 0) {
 6198|  5.84k|                return impl(rd, range, value);
 6199|  5.84k|            }
 6200|       |
 6201|  5.84k|            auto crange = get_as_contiguous(range);
 6202|  5.84k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.84k|            return ranges::next(range.begin(),
 6204|  5.84k|                                ranges::distance(crange.begin(), it));
 6205|  5.84k|        }
 6206|  5.84k|        else {
 6207|  5.84k|            SCN_EXPECT(false);
 6208|  5.84k|            SCN_UNREACHABLE;
 6209|  5.84k|        }
 6210|  5.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|  5.71k|    {
 6121|  5.71k|        const bool need_skipped_width =
 6122|  5.71k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 240, False: 5.47k]
  |  Branch (6122:33): [True: 812, False: 4.66k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  5.71k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  5.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 5.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  5.70k|        auto [it, prefix_width] = prefix_result;
 6127|  5.70k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  5.70k|        std::ptrdiff_t value_width = 0;
 6131|  5.70k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 804, False: 4.90k]
  ------------------
 6132|    804|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 804]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    804|            const auto initial_width = specs.precision - prefix_width;
 6140|    804|            auto max_width_view =
 6141|    804|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    804|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 414]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    390|    }                                                  \
  |  |  |  | 3642|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    414|            it = w_it.base();
 6144|    414|            value_width = initial_width - w_it.count();
 6145|    414|        }
 6146|  4.90k|        else {
 6147|  4.90k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  4.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  4.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.42k, False: 1.47k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.42k|    }                                                  \
  |  | 3642|  4.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  1.47k|                                             specs, value, loc));
 6149|       |
 6150|  1.47k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 208, False: 1.26k]
  ------------------
 6151|    208|                value_width = calculate_text_width(
 6152|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    208|                        .view());
 6154|    208|            }
 6155|  1.47k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6159|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 1.53k, False: 356]
  ------------------
 6160|  1.53k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  1.53k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  1.53k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  1.53k|                                 value_width));
 6164|  1.53k|            std::tie(it, postfix_width) = postfix_result;
 6165|  1.53k|        }
 6166|       |
 6167|  1.89k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  1.89k|                                                 value_width, postfix_width);
 6169|  1.89k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 108, False: 1.78k]
  ------------------
 6170|    108|            return unexpected(e);
 6171|    108|        }
 6172|       |
 6173|  1.78k|        return it;
 6174|  1.89k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  5.84k|    {
 6179|  5.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.84k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.84k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.84k|            auto rd = make_reader<T, char_type>();
 6184|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.71k]
  |  |  ------------------
  ------------------
 6185|    128|                return unexpected(e);
 6186|    128|            }
 6187|       |
 6188|  5.71k|            return impl(rd, range, value);
 6189|  5.84k|        }
 6190|  5.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.84k|            auto rd = make_reader<T, char_type>();
 6192|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.84k|                return unexpected(e);
 6194|  5.84k|            }
 6195|       |
 6196|  5.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.84k|                specs.width != 0) {
 6198|  5.84k|                return impl(rd, range, value);
 6199|  5.84k|            }
 6200|       |
 6201|  5.84k|            auto crange = get_as_contiguous(range);
 6202|  5.84k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.84k|            return ranges::next(range.begin(),
 6204|  5.84k|                                ranges::distance(crange.begin(), it));
 6205|  5.84k|        }
 6206|  5.84k|        else {
 6207|  5.84k|            SCN_EXPECT(false);
 6208|  5.84k|            SCN_UNREACHABLE;
 6209|  5.84k|        }
 6210|  5.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  5.71k|    {
 6121|  5.71k|        const bool need_skipped_width =
 6122|  5.71k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 240, False: 5.47k]
  |  Branch (6122:33): [True: 812, False: 4.66k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  5.71k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  5.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 5.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  5.70k|        auto [it, prefix_width] = prefix_result;
 6127|  5.70k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  5.70k|        std::ptrdiff_t value_width = 0;
 6131|  5.70k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 804, False: 4.90k]
  ------------------
 6132|    804|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 804]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    804|            const auto initial_width = specs.precision - prefix_width;
 6140|    804|            auto max_width_view =
 6141|    804|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    804|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 414]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    390|    }                                                  \
  |  |  |  | 3642|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    414|            it = w_it.base();
 6144|    414|            value_width = initial_width - w_it.count();
 6145|    414|        }
 6146|  4.90k|        else {
 6147|  4.90k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  4.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  4.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.42k, False: 1.47k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.42k|    }                                                  \
  |  | 3642|  4.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  1.47k|                                             specs, value, loc));
 6149|       |
 6150|  1.47k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 208, False: 1.26k]
  ------------------
 6151|    208|                value_width = calculate_text_width(
 6152|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    208|                        .view());
 6154|    208|            }
 6155|  1.47k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6159|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 1.53k, False: 356]
  ------------------
 6160|  1.53k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  1.53k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  1.53k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  1.53k|                                 value_width));
 6164|  1.53k|            std::tie(it, postfix_width) = postfix_result;
 6165|  1.53k|        }
 6166|       |
 6167|  1.89k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  1.89k|                                                 value_width, postfix_width);
 6169|  1.89k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 108, False: 1.78k]
  ------------------
 6170|    108|            return unexpected(e);
 6171|    108|        }
 6172|       |
 6173|  1.78k|        return it;
 6174|  1.89k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  5.84k|    {
 6179|  5.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.84k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.84k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.84k|            auto rd = make_reader<T, char_type>();
 6184|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 5.71k]
  |  |  ------------------
  ------------------
 6185|    128|                return unexpected(e);
 6186|    128|            }
 6187|       |
 6188|  5.71k|            return impl(rd, range, value);
 6189|  5.84k|        }
 6190|  5.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.84k|            auto rd = make_reader<T, char_type>();
 6192|  5.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.84k|                return unexpected(e);
 6194|  5.84k|            }
 6195|       |
 6196|  5.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.84k|                specs.width != 0) {
 6198|  5.84k|                return impl(rd, range, value);
 6199|  5.84k|            }
 6200|       |
 6201|  5.84k|            auto crange = get_as_contiguous(range);
 6202|  5.84k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.84k|            return ranges::next(range.begin(),
 6204|  5.84k|                                ranges::distance(crange.begin(), it));
 6205|  5.84k|        }
 6206|  5.84k|        else {
 6207|  5.84k|            SCN_EXPECT(false);
 6208|  5.84k|            SCN_UNREACHABLE;
 6209|  5.84k|        }
 6210|  5.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  5.71k|    {
 6121|  5.71k|        const bool need_skipped_width =
 6122|  5.71k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 240, False: 5.47k]
  |  Branch (6122:33): [True: 812, False: 4.66k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  5.71k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  5.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 5.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|  5.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  5.70k|        auto [it, prefix_width] = prefix_result;
 6127|  5.70k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  5.70k|        std::ptrdiff_t value_width = 0;
 6131|  5.70k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 804, False: 4.90k]
  ------------------
 6132|    804|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 804]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    804|            const auto initial_width = specs.precision - prefix_width;
 6140|    804|            auto max_width_view =
 6141|    804|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    804|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    804|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    804|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    804|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 414]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    390|    }                                                  \
  |  |  |  | 3642|    804|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    414|            it = w_it.base();
 6144|    414|            value_width = initial_width - w_it.count();
 6145|    414|        }
 6146|  4.90k|        else {
 6147|  4.90k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  4.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  4.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.42k, False: 1.47k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.42k|    }                                                  \
  |  | 3642|  4.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  1.47k|                                             specs, value, loc));
 6149|       |
 6150|  1.47k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 208, False: 1.26k]
  ------------------
 6151|    208|                value_width = calculate_text_width(
 6152|    208|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    208|                        .view());
 6154|    208|            }
 6155|  1.47k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6159|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 1.53k, False: 356]
  ------------------
 6160|  1.53k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  1.53k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  1.53k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  1.53k|                                 value_width));
 6164|  1.53k|            std::tie(it, postfix_width) = postfix_result;
 6165|  1.53k|        }
 6166|       |
 6167|  1.89k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  1.89k|                                                 value_width, postfix_width);
 6169|  1.89k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 108, False: 1.78k]
  ------------------
 6170|    108|            return unexpected(e);
 6171|    108|        }
 6172|       |
 6173|  1.78k|        return it;
 6174|  1.89k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  80.7k|{
 5796|  80.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.7k]
  |  |  ------------------
  ------------------
 5797|      0|        return unexpected(e);
 5798|      0|    }
 5799|       |
 5800|  80.7k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 8.97k, False: 71.7k]
  ------------------
 5801|  8.97k|        return range.begin();
 5802|  8.97k|    }
 5803|       |
 5804|  71.7k|    return skip_classic_whitespace(range);
 5805|  80.7k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|  8.97k|    {
 3529|  8.97k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|  8.97k|        return read_default_with_base(range, value, 10);
 3531|  8.97k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|  8.97k|    {
 3493|  8.97k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|  8.97k|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|  8.97k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|  8.97k|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|  8.97k|                return unexpected_scan_error(
 3499|  8.97k|                    scan_error::invalid_scanned_value,
 3500|  8.97k|                    "Unexpected '-' sign when parsing an "
 3501|  8.97k|                    "unsigned value");
 3502|  8.97k|            }
 3503|  8.97k|        }
 3504|       |
 3505|  8.97k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 8.97k]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  17.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  17.9k|                parse_integer_digits_without_thsep(
 3512|  17.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  17.9k|                    prefix_result.parsed_base));
 3514|       |
 3515|  17.9k|        auto buf = make_contiguous_buffer(
 3516|  17.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  17.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.97k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  8.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  8.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  8.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  8.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  8.97k|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  17.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|  8.97k|    {
 3529|  8.97k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|  8.97k|        return read_default_with_base(range, value, 10);
 3531|  8.97k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|  8.97k|    {
 3493|  8.97k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|  8.97k|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|  8.97k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|  8.97k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 8.97k]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|  8.97k|        }
 3504|       |
 3505|  8.97k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 8.97k]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  17.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  17.9k|                parse_integer_digits_without_thsep(
 3512|  17.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  17.9k|                    prefix_result.parsed_base));
 3514|       |
 3515|  17.9k|        auto buf = make_contiguous_buffer(
 3516|  17.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  17.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.97k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  8.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  8.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  8.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  8.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  8.97k|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  17.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5748|  9.36k|    {
 5749|  9.36k|        return true;
 5750|  9.36k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5765|  9.36k|    {
 5766|  9.36k|        detail::format_specs specs{};
 5767|  9.36k|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|  9.36k|        std::uintptr_t intvalue{};
 5770|  9.36k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|  9.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.36k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  9.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  9.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  9.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  9.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  9.36k|    }                                                  \
  |  |  |  | 3642|  9.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|  9.36k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  9.40k|    {
 3035|  9.40k|        return true;
 3036|  9.40k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5504|  8.97k|    {
 5505|  8.97k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5506|       |
 5507|  8.97k|        return bool_reader<CharT>{}.read_classic(range, value);
 5508|  8.97k|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5355|  9.39k|    {
 5356|  9.39k|        scan_error err{scan_error::invalid_scanned_value,
 5357|  9.39k|                       "Failed to read boolean"};
 5358|       |
 5359|  9.39k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 9.38k, False: 14]
  ------------------
 5360|  9.38k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 9.38k]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|  9.38k|            else {
 5364|  9.38k|                err = r.error();
 5365|  9.38k|            }
 5366|  9.38k|        }
 5367|       |
 5368|  9.39k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 9.37k, False: 20]
  ------------------
 5369|  9.37k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 9.37k]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|  9.37k|            else {
 5373|  9.37k|                err = r.error();
 5374|  9.37k|            }
 5375|  9.37k|        }
 5376|       |
 5377|  9.39k|        return unexpected(err);
 5378|  9.39k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5384|  9.38k|    {
 5385|  9.38k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 9.38k]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|  9.38k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 9.38k]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|  9.38k|        return unexpected_scan_error(
 5395|  9.38k|            scan_error::invalid_scanned_value,
 5396|  9.38k|            "Failed to read numeric boolean value: No match");
 5397|  9.38k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5402|  9.37k|    {
 5403|  9.37k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 9.37k]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|  9.37k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 9.37k]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|  9.37k|        return unexpected_scan_error(
 5413|  9.37k|            scan_error::invalid_scanned_value,
 5414|  9.37k|            "Failed to read textual boolean value: No match");
 5415|  9.37k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  18.7k|{
 2194|  18.7k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  18.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  18.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  18.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 146, False: 18.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    146|    }                                                  \
  |  |  |  | 3642|  18.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  18.6k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  18.6k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  18.6k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  18.6k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  18.6k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  18.6k|            return unexpected(parse_error::error);
 2202|  18.6k|        }
 2203|  18.6k|        return it;
 2204|  18.6k|    }
 2205|  18.6k|    else {
 2206|  18.6k|        auto range_it = range.begin();
 2207|  18.6k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 18.6k, False: 0]
  ------------------
 2208|  18.6k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.6k, False: 0]
  |  |  ------------------
  ------------------
 2209|  18.6k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  18.6k|                return unexpected(parse_error::error);
 2211|  18.6k|            }
 2212|  18.6k|        }
 2213|      0|        return it;
 2214|  18.6k|    }
 2215|  18.6k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|  8.97k|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  8.97k|    {
 4153|  8.97k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  8.97k|        float_reader<CharT> rd{};
 4156|  8.97k|        return read_impl<Range>(
 4157|  8.97k|            range, rd,
 4158|  8.97k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  8.97k|                return r.read_source(SCN_FWD(args)...);
 4160|  8.97k|            },
 4161|  8.97k|            value);
 4162|  8.97k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  8.97k|    {
  754|  8.97k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  8.97k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.97k|              cvref<T> obj = *get<T>(fn);
  745|  8.97k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.97k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.97k|              }
  748|  8.97k|              else {
  749|  8.97k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.97k|              }
  751|  8.97k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  8.97k|    {
  684|  8.97k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.97k|            return static_cast<T*>(s.m_cp);
  686|  8.97k|        }
  687|  8.97k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.97k|            return static_cast<T*>(s.m_p);
  689|  8.97k|        }
  690|  8.97k|        else {
  691|  8.97k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.97k|        }
  693|  8.97k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  8.97k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  8.97k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  8.97k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  8.97k|        {
  662|  8.97k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|  8.97k|    {
 5267|  8.97k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  8.97k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|  8.97k|    {
 5267|  8.97k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  8.97k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|  8.97k|    {
 5872|  8.97k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  8.97k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  8.97k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  8.97k|            auto rd = make_reader<T, char_type>();
 5877|  8.97k|            return impl(rd, range, value);
 5878|  8.97k|        }
 5879|  8.97k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  8.97k|            auto rd = make_reader<T, char_type>();
 5881|  8.97k|            if (!is_segment_contiguous(range)) {
 5882|  8.97k|                return impl(rd, range, value);
 5883|  8.97k|            }
 5884|  8.97k|            auto crange = get_as_contiguous(range);
 5885|  8.97k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  8.97k|            return ranges::next(range.begin(),
 5887|  8.97k|                                ranges::distance(crange.begin(), it));
 5888|  8.97k|        }
 5889|  8.97k|        else {
 5890|  8.97k|            SCN_EXPECT(false);
 5891|  8.97k|            SCN_UNREACHABLE;
 5892|  8.97k|        }
 5893|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|  8.97k|    {
 5864|  8.97k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  8.97k|                        .transform_error(make_eof_scan_error));
 5866|  8.97k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  8.97k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|  8.97k|    {
 5267|  8.97k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  8.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  8.97k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  8.97k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   150k|    {
 2879|   150k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   309M|    {
 2883|   309M|        return m_current;
 2884|   309M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   617M|    {
 2888|   617M|        return m_range.end();
 2889|   617M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   308M|{
 1221|       |    // TODO: optimize
 1222|   308M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   308M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   308M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   308M|    auto res = get_next_code_point(str);
 1224|   308M|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   308M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   308M|    {
 2903|   308M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   308M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   308M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   308M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   308M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 308M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   308M|        }
 2909|   308M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   308M|    static_cast<    \
  |  |  929|   308M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   308M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  86.7k|    {
 2893|  86.7k|        return ranges::subrange{begin(), end()};
 2894|  86.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  3.68k|    {
 6038|  3.68k|        const bool need_skipped_width =
 6039|  3.68k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 2.60k, False: 1.07k]
  |  Branch (6039:33): [True: 0, False: 1.07k]
  ------------------
 6040|  3.68k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  3.68k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 72, False: 3.61k]
  ------------------
 6044|  3.68k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 242, False: 3.37k]
  ------------------
 6045|    314|            return skip_fill(rng, specs.precision, specs.fill,
 6046|    314|                             need_skipped_width);
 6047|    314|        }
 6048|  3.37k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 3.14k, False: 226]
  |  Branch (6048:56): [True: 2.79k, False: 348]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  2.79k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 2.79k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  5.59k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  2.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  5.59k|                            make_eof_scan_error));
 6059|       |
 6060|  5.59k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 2.31k, False: 480]
  ------------------
 6061|  2.31k|                return result_type{
 6062|  2.31k|                    it,
 6063|  2.31k|                    calculate_text_width(make_contiguous_buffer(
 6064|  2.31k|                                             ranges::subrange{rng.begin(), it})
 6065|  2.31k|                                             .view())};
 6066|  2.31k|            }
 6067|    480|            return result_type{it, 0};
 6068|  5.59k|        }
 6069|       |
 6070|    574|        return result_type{rng.begin(), 0};
 6071|  3.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|    606|    {
 6080|    606|        const bool need_skipped_width =
 6081|    606|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 452, False: 154]
  |  Branch (6081:33): [True: 0, False: 154]
  ------------------
 6082|    606|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|    606|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 36, False: 570]
  ------------------
 6085|    606|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 38, False: 532]
  ------------------
 6086|     74|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|     74|                             specs.fill, need_skipped_width);
 6088|     74|        }
 6089|    532|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 518, False: 14]
  ------------------
 6090|    532|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 332, False: 186]
  ------------------
 6091|    532|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 284, False: 48]
  |  Branch (6091:35): [True: 282, False: 2]
  ------------------
 6092|    332|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 50]
  ------------------
 6093|    282|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|    282|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 282]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|    564|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|    564|                            make_eof_scan_error));
 6104|       |
 6105|    564|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 282, False: 0]
  ------------------
 6106|    282|                return result_type{
 6107|    282|                    it,
 6108|    282|                    calculate_text_width(make_contiguous_buffer(
 6109|    282|                                             ranges::subrange{rng.begin(), it})
 6110|    282|                                             .view())};
 6111|    282|            }
 6112|      0|            return result_type{it, 0};
 6113|    564|        }
 6114|    250|        return result_type{rng.begin(), 0};
 6115|    532|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6178|    450|    {
 6179|    450|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    450|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    450|                          basic_contiguous_scan_context<char_type>>) {
 6183|    450|            auto rd = make_reader<T, char_type>();
 6184|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 416]
  |  |  ------------------
  ------------------
 6185|     34|                return unexpected(e);
 6186|     34|            }
 6187|       |
 6188|    416|            return impl(rd, range, value);
 6189|    450|        }
 6190|    450|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    450|            auto rd = make_reader<T, char_type>();
 6192|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    450|                return unexpected(e);
 6194|    450|            }
 6195|       |
 6196|    450|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    450|                specs.width != 0) {
 6198|    450|                return impl(rd, range, value);
 6199|    450|            }
 6200|       |
 6201|    450|            auto crange = get_as_contiguous(range);
 6202|    450|            SCN_TRY(it, impl(rd, crange, value));
 6203|    450|            return ranges::next(range.begin(),
 6204|    450|                                ranges::distance(crange.begin(), it));
 6205|    450|        }
 6206|    450|        else {
 6207|    450|            SCN_EXPECT(false);
 6208|    450|            SCN_UNREACHABLE;
 6209|    450|        }
 6210|    450|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    416|    {
 6121|    416|        const bool need_skipped_width =
 6122|    416|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 290, False: 126]
  |  Branch (6122:33): [True: 0, False: 126]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    416|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 416]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    416|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    416|        auto [it, prefix_width] = prefix_result;
 6127|    416|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    416|        std::ptrdiff_t value_width = 0;
 6131|    416|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 416]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    416|        else {
 6147|    416|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 416, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    416|    }                                                  \
  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    416|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6178|    450|    {
 6179|    450|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    450|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    450|                          basic_contiguous_scan_context<char_type>>) {
 6183|    450|            auto rd = make_reader<T, char_type>();
 6184|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 416]
  |  |  ------------------
  ------------------
 6185|     34|                return unexpected(e);
 6186|     34|            }
 6187|       |
 6188|    416|            return impl(rd, range, value);
 6189|    450|        }
 6190|    450|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    450|            auto rd = make_reader<T, char_type>();
 6192|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    450|                return unexpected(e);
 6194|    450|            }
 6195|       |
 6196|    450|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    450|                specs.width != 0) {
 6198|    450|                return impl(rd, range, value);
 6199|    450|            }
 6200|       |
 6201|    450|            auto crange = get_as_contiguous(range);
 6202|    450|            SCN_TRY(it, impl(rd, crange, value));
 6203|    450|            return ranges::next(range.begin(),
 6204|    450|                                ranges::distance(crange.begin(), it));
 6205|    450|        }
 6206|    450|        else {
 6207|    450|            SCN_EXPECT(false);
 6208|    450|            SCN_UNREACHABLE;
 6209|    450|        }
 6210|    450|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    416|    {
 6121|    416|        const bool need_skipped_width =
 6122|    416|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 290, False: 126]
  |  Branch (6122:33): [True: 0, False: 126]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    416|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 416]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    416|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    416|        auto [it, prefix_width] = prefix_result;
 6127|    416|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    416|        std::ptrdiff_t value_width = 0;
 6131|    416|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 416]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    416|        else {
 6147|    416|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 416, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    416|    }                                                  \
  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    416|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6178|    444|    {
 6179|    444|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    444|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    444|                          basic_contiguous_scan_context<char_type>>) {
 6183|    444|            auto rd = make_reader<T, char_type>();
 6184|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 394]
  |  |  ------------------
  ------------------
 6185|     50|                return unexpected(e);
 6186|     50|            }
 6187|       |
 6188|    394|            return impl(rd, range, value);
 6189|    444|        }
 6190|    444|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    444|            auto rd = make_reader<T, char_type>();
 6192|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    444|                return unexpected(e);
 6194|    444|            }
 6195|       |
 6196|    444|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    444|                specs.width != 0) {
 6198|    444|                return impl(rd, range, value);
 6199|    444|            }
 6200|       |
 6201|    444|            auto crange = get_as_contiguous(range);
 6202|    444|            SCN_TRY(it, impl(rd, crange, value));
 6203|    444|            return ranges::next(range.begin(),
 6204|    444|                                ranges::distance(crange.begin(), it));
 6205|    444|        }
 6206|    444|        else {
 6207|    444|            SCN_EXPECT(false);
 6208|    444|            SCN_UNREACHABLE;
 6209|    444|        }
 6210|    444|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5753|    444|    {
 5754|    444|        reader_error_handler eh{};
 5755|    444|        detail::check_pointer_type_specs(specs, eh);
 5756|    444|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 394]
  |  |  ------------------
  ------------------
 5757|     50|            return {scan_error::invalid_format_string, eh.m_msg};
 5758|     50|        }
 5759|    394|        return {};
 5760|    444|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6120|    394|    {
 6121|    394|        const bool need_skipped_width =
 6122|    394|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 284, False: 110]
  |  Branch (6122:33): [True: 0, False: 110]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    394|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    394|        auto [it, prefix_width] = prefix_result;
 6127|    394|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    394|        std::ptrdiff_t value_width = 0;
 6131|    394|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 394]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    394|        else {
 6147|    394|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 394, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    394|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    394|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    394|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    394|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    394|    }                                                  \
  |  | 3642|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5782|    394|    {
 5783|    394|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    394|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    394|        return read_default(range, value, loc);
 5785|    394|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6178|    450|    {
 6179|    450|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    450|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    450|                          basic_contiguous_scan_context<char_type>>) {
 6183|    450|            auto rd = make_reader<T, char_type>();
 6184|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 430]
  |  |  ------------------
  ------------------
 6185|     20|                return unexpected(e);
 6186|     20|            }
 6187|       |
 6188|    430|            return impl(rd, range, value);
 6189|    450|        }
 6190|    450|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    450|            auto rd = make_reader<T, char_type>();
 6192|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    450|                return unexpected(e);
 6194|    450|            }
 6195|       |
 6196|    450|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    450|                specs.width != 0) {
 6198|    450|                return impl(rd, range, value);
 6199|    450|            }
 6200|       |
 6201|    450|            auto crange = get_as_contiguous(range);
 6202|    450|            SCN_TRY(it, impl(rd, crange, value));
 6203|    450|            return ranges::next(range.begin(),
 6204|    450|                                ranges::distance(crange.begin(), it));
 6205|    450|        }
 6206|    450|        else {
 6207|    450|            SCN_EXPECT(false);
 6208|    450|            SCN_UNREACHABLE;
 6209|    450|        }
 6210|    450|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    450|    {
 3040|    450|        reader_error_handler eh{};
 3041|    450|        get_derived().check_specs_impl(specs, eh);
 3042|    450|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 430]
  |  |  ------------------
  ------------------
 3043|     20|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     20|        }
 3045|    430|        return {};
 3046|    450|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|    450|    {
 3051|    450|        return static_cast<Derived&>(*this);
 3052|    450|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5497|    450|    {
 5498|    450|        detail::check_bool_type_specs(specs, eh);
 5499|    450|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    430|    {
 6121|    430|        const bool need_skipped_width =
 6122|    430|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 296, False: 134]
  |  Branch (6122:33): [True: 0, False: 134]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    430|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    430|        auto [it, prefix_width] = prefix_result;
 6127|    430|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    430|        std::ptrdiff_t value_width = 0;
 6131|    430|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 430]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    430|        else {
 6147|    430|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 430, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    430|    }                                                  \
  |  | 3642|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5529|    430|    {
 5530|    430|        SCN_GCC_COMPAT_PUSH
 5531|    430|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5532|       |
 5533|    430|        switch (specs.type) {
 5534|     14|            case detail::presentation_type::string:
  ------------------
  |  Branch (5534:13): [True: 14, False: 416]
  ------------------
 5535|     14|                return bool_reader_base::allow_text;
 5536|       |
 5537|      2|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5537:13): [True: 2, False: 428]
  ------------------
 5538|      4|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5538:13): [True: 2, False: 428]
  ------------------
 5539|      6|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5539:13): [True: 2, False: 428]
  ------------------
 5540|      8|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5540:13): [True: 2, False: 428]
  ------------------
 5541|     14|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5541:13): [True: 6, False: 424]
  ------------------
 5542|     20|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5542:13): [True: 6, False: 424]
  ------------------
 5543|     20|                return bool_reader_base::allow_numeric;
 5544|       |
 5545|    396|            default:
  ------------------
  |  Branch (5545:13): [True: 396, False: 34]
  ------------------
 5546|    396|                return bool_reader_base::allow_text |
 5547|    396|                       bool_reader_base::allow_numeric;
 5548|    430|        }
 5549|       |
 5550|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5551|    430|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5516|    430|    {
 5517|    430|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    430|#if !SCN_DISABLE_LOCALE
 5520|    430|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 6, False: 424]
  ------------------
 5521|      6|            return rd.read_localized(range, loc, value);
 5522|      6|        }
 5523|    424|#endif
 5524|       |
 5525|    424|        return rd.read_classic(range, value);
 5526|    430|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5428|      6|    {
 5429|      6|        scan_error err{scan_error::invalid_scanned_value,
 5430|      6|                       "Failed to read boolean"};
 5431|       |
 5432|      6|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 6, False: 0]
  ------------------
 5433|      6|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 6]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|      6|            else {
 5437|      6|                err = r.error();
 5438|      6|            }
 5439|      6|        }
 5440|       |
 5441|      6|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 6, False: 0]
  ------------------
 5442|      6|            auto stdloc = loc.get<std::locale>();
 5443|      6|            const auto& numpunct =
 5444|      6|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|      6|            const auto truename = numpunct.truename();
 5446|      6|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|      6|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 6]
  ------------------
 5449|      6|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|      6|            else {
 5453|      6|                err = r.error();
 5454|      6|            }
 5455|      6|        }
 5456|       |
 5457|      6|        return unexpected(err);
 5458|      6|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5468|      6|    {
 5469|      6|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|      6|        const auto shorter = std::pair{
 5471|      6|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 6, False: 0]
  ------------------
 5472|      6|        const auto longer = std::pair{
 5473|      6|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 6]
  ------------------
 5474|       |
 5475|      6|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 6]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|      6|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 6]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|      6|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|      6|                                     "read_textual: No match");
 5486|      6|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     12|{
 2179|     12|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     10|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2185|     10|        return unexpected(parse_error::error);
 2186|     10|    }
 2187|      0|    return it;
 2188|     10|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6178|    444|    {
 6179|    444|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    444|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    444|                          basic_contiguous_scan_context<char_type>>) {
 6183|    444|            auto rd = make_reader<T, char_type>();
 6184|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 410]
  |  |  ------------------
  ------------------
 6185|     34|                return unexpected(e);
 6186|     34|            }
 6187|       |
 6188|    410|            return impl(rd, range, value);
 6189|    444|        }
 6190|    444|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    444|            auto rd = make_reader<T, char_type>();
 6192|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    444|                return unexpected(e);
 6194|    444|            }
 6195|       |
 6196|    444|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    444|                specs.width != 0) {
 6198|    444|                return impl(rd, range, value);
 6199|    444|            }
 6200|       |
 6201|    444|            auto crange = get_as_contiguous(range);
 6202|    444|            SCN_TRY(it, impl(rd, crange, value));
 6203|    444|            return ranges::next(range.begin(),
 6204|    444|                                ranges::distance(crange.begin(), it));
 6205|    444|        }
 6206|    444|        else {
 6207|    444|            SCN_EXPECT(false);
 6208|    444|            SCN_UNREACHABLE;
 6209|    444|        }
 6210|    444|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    410|    {
 6121|    410|        const bool need_skipped_width =
 6122|    410|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 290, False: 120]
  |  Branch (6122:33): [True: 0, False: 120]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    410|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    410|        auto [it, prefix_width] = prefix_result;
 6127|    410|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    410|        std::ptrdiff_t value_width = 0;
 6131|    410|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 410]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    410|        else {
 6147|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 390]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     20|    }                                                  \
  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    390|                                             specs, value, loc));
 6149|       |
 6150|    390|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 284, False: 106]
  ------------------
 6151|    284|                value_width = calculate_text_width(
 6152|    284|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    284|                        .view());
 6154|    284|            }
 6155|    390|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    390|        std::ptrdiff_t postfix_width = 0;
 6159|    390|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 390, False: 0]
  ------------------
 6160|    390|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|    390|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|    390|                                 rd.skip_ws_before_read(), prefix_width,
 6163|    390|                                 value_width));
 6164|    390|            std::tie(it, postfix_width) = postfix_result;
 6165|    390|        }
 6166|       |
 6167|    390|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    390|                                                 value_width, postfix_width);
 6169|    390|            !e) {
  ------------------
  |  Branch (6169:13): [True: 282, False: 108]
  ------------------
 6170|    282|            return unexpected(e);
 6171|    282|        }
 6172|       |
 6173|    108|        return it;
 6174|    390|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6178|    450|    {
 6179|    450|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    450|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    450|                          basic_contiguous_scan_context<char_type>>) {
 6183|    450|            auto rd = make_reader<T, char_type>();
 6184|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 406]
  |  |  ------------------
  ------------------
 6185|     44|                return unexpected(e);
 6186|     44|            }
 6187|       |
 6188|    406|            return impl(rd, range, value);
 6189|    450|        }
 6190|    450|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    450|            auto rd = make_reader<T, char_type>();
 6192|    450|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    450|                return unexpected(e);
 6194|    450|            }
 6195|       |
 6196|    450|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    450|                specs.width != 0) {
 6198|    450|                return impl(rd, range, value);
 6199|    450|            }
 6200|       |
 6201|    450|            auto crange = get_as_contiguous(range);
 6202|    450|            SCN_TRY(it, impl(rd, crange, value));
 6203|    450|            return ranges::next(range.begin(),
 6204|    450|                                ranges::distance(crange.begin(), it));
 6205|    450|        }
 6206|    450|        else {
 6207|    450|            SCN_EXPECT(false);
 6208|    450|            SCN_UNREACHABLE;
 6209|    450|        }
 6210|    450|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    406|    {
 6121|    406|        const bool need_skipped_width =
 6122|    406|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 286, False: 120]
  |  Branch (6122:33): [True: 0, False: 120]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    406|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    406|        auto [it, prefix_width] = prefix_result;
 6127|    406|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    406|        std::ptrdiff_t value_width = 0;
 6131|    406|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 406]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    406|        else {
 6147|    406|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 406, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    406|    }                                                  \
  |  | 3642|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    444|    {
 6179|    444|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    444|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    444|                          basic_contiguous_scan_context<char_type>>) {
 6183|    444|            auto rd = make_reader<T, char_type>();
 6184|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 404]
  |  |  ------------------
  ------------------
 6185|     40|                return unexpected(e);
 6186|     40|            }
 6187|       |
 6188|    404|            return impl(rd, range, value);
 6189|    444|        }
 6190|    444|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    444|            auto rd = make_reader<T, char_type>();
 6192|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    444|                return unexpected(e);
 6194|    444|            }
 6195|       |
 6196|    444|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    444|                specs.width != 0) {
 6198|    444|                return impl(rd, range, value);
 6199|    444|            }
 6200|       |
 6201|    444|            auto crange = get_as_contiguous(range);
 6202|    444|            SCN_TRY(it, impl(rd, crange, value));
 6203|    444|            return ranges::next(range.begin(),
 6204|    444|                                ranges::distance(crange.begin(), it));
 6205|    444|        }
 6206|    444|        else {
 6207|    444|            SCN_EXPECT(false);
 6208|    444|            SCN_UNREACHABLE;
 6209|    444|        }
 6210|    444|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|    404|    {
 6121|    404|        const bool need_skipped_width =
 6122|    404|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 290, False: 114]
  |  Branch (6122:33): [True: 0, False: 114]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    404|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    404|        auto [it, prefix_width] = prefix_result;
 6127|    404|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    404|        std::ptrdiff_t value_width = 0;
 6131|    404|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 404]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    404|        else {
 6147|    404|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 82, False: 322]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     82|    }                                                  \
  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    322|                                             specs, value, loc));
 6149|       |
 6150|    322|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 266, False: 56]
  ------------------
 6151|    266|                value_width = calculate_text_width(
 6152|    266|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    266|                        .view());
 6154|    266|            }
 6155|    322|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    322|        std::ptrdiff_t postfix_width = 0;
 6159|    322|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 72, False: 250]
  ------------------
 6160|     72|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     72|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     72|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     72|                                 value_width));
 6164|     72|            std::tie(it, postfix_width) = postfix_result;
 6165|     72|        }
 6166|       |
 6167|    322|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    322|                                                 value_width, postfix_width);
 6169|    322|            !e) {
  ------------------
  |  Branch (6169:13): [True: 20, False: 302]
  ------------------
 6170|     20|            return unexpected(e);
 6171|     20|        }
 6172|       |
 6173|    302|        return it;
 6174|    322|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    444|    {
 6179|    444|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    444|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    444|                          basic_contiguous_scan_context<char_type>>) {
 6183|    444|            auto rd = make_reader<T, char_type>();
 6184|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 404]
  |  |  ------------------
  ------------------
 6185|     40|                return unexpected(e);
 6186|     40|            }
 6187|       |
 6188|    404|            return impl(rd, range, value);
 6189|    444|        }
 6190|    444|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    444|            auto rd = make_reader<T, char_type>();
 6192|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    444|                return unexpected(e);
 6194|    444|            }
 6195|       |
 6196|    444|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    444|                specs.width != 0) {
 6198|    444|                return impl(rd, range, value);
 6199|    444|            }
 6200|       |
 6201|    444|            auto crange = get_as_contiguous(range);
 6202|    444|            SCN_TRY(it, impl(rd, crange, value));
 6203|    444|            return ranges::next(range.begin(),
 6204|    444|                                ranges::distance(crange.begin(), it));
 6205|    444|        }
 6206|    444|        else {
 6207|    444|            SCN_EXPECT(false);
 6208|    444|            SCN_UNREACHABLE;
 6209|    444|        }
 6210|    444|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|    404|    {
 6121|    404|        const bool need_skipped_width =
 6122|    404|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 290, False: 114]
  |  Branch (6122:33): [True: 0, False: 114]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    404|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    404|        auto [it, prefix_width] = prefix_result;
 6127|    404|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    404|        std::ptrdiff_t value_width = 0;
 6131|    404|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 404]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    404|        else {
 6147|    404|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 82, False: 322]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     82|    }                                                  \
  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    322|                                             specs, value, loc));
 6149|       |
 6150|    322|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 266, False: 56]
  ------------------
 6151|    266|                value_width = calculate_text_width(
 6152|    266|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    266|                        .view());
 6154|    266|            }
 6155|    322|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    322|        std::ptrdiff_t postfix_width = 0;
 6159|    322|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 72, False: 250]
  ------------------
 6160|     72|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     72|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     72|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     72|                                 value_width));
 6164|     72|            std::tie(it, postfix_width) = postfix_result;
 6165|     72|        }
 6166|       |
 6167|    322|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    322|                                                 value_width, postfix_width);
 6169|    322|            !e) {
  ------------------
  |  Branch (6169:13): [True: 20, False: 302]
  ------------------
 6170|     20|            return unexpected(e);
 6171|     20|        }
 6172|       |
 6173|    302|        return it;
 6174|    322|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    444|    {
 6179|    444|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    444|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    444|                          basic_contiguous_scan_context<char_type>>) {
 6183|    444|            auto rd = make_reader<T, char_type>();
 6184|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 404]
  |  |  ------------------
  ------------------
 6185|     40|                return unexpected(e);
 6186|     40|            }
 6187|       |
 6188|    404|            return impl(rd, range, value);
 6189|    444|        }
 6190|    444|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    444|            auto rd = make_reader<T, char_type>();
 6192|    444|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    444|                return unexpected(e);
 6194|    444|            }
 6195|       |
 6196|    444|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    444|                specs.width != 0) {
 6198|    444|                return impl(rd, range, value);
 6199|    444|            }
 6200|       |
 6201|    444|            auto crange = get_as_contiguous(range);
 6202|    444|            SCN_TRY(it, impl(rd, crange, value));
 6203|    444|            return ranges::next(range.begin(),
 6204|    444|                                ranges::distance(crange.begin(), it));
 6205|    444|        }
 6206|    444|        else {
 6207|    444|            SCN_EXPECT(false);
 6208|    444|            SCN_UNREACHABLE;
 6209|    444|        }
 6210|    444|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|    404|    {
 6121|    404|        const bool need_skipped_width =
 6122|    404|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 290, False: 114]
  |  Branch (6122:33): [True: 0, False: 114]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    404|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    404|        auto [it, prefix_width] = prefix_result;
 6127|    404|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    404|        std::ptrdiff_t value_width = 0;
 6131|    404|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 404]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    404|        else {
 6147|    404|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 82, False: 322]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     82|    }                                                  \
  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    322|                                             specs, value, loc));
 6149|       |
 6150|    322|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 266, False: 56]
  ------------------
 6151|    266|                value_width = calculate_text_width(
 6152|    266|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    266|                        .view());
 6154|    266|            }
 6155|    322|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    322|        std::ptrdiff_t postfix_width = 0;
 6159|    322|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 72, False: 250]
  ------------------
 6160|     72|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 72]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     72|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     72|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     72|                                 value_width));
 6164|     72|            std::tie(it, postfix_width) = postfix_result;
 6165|     72|        }
 6166|       |
 6167|    322|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    322|                                                 value_width, postfix_width);
 6169|    322|            !e) {
  ------------------
  |  Branch (6169:13): [True: 20, False: 302]
  ------------------
 6170|     20|            return unexpected(e);
 6171|     20|        }
 6172|       |
 6173|    302|        return it;
 6174|    322|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    658|    {
 3493|    658|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    658|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    658|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    658|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|    658|                return unexpected_scan_error(
 3499|    658|                    scan_error::invalid_scanned_value,
 3500|    658|                    "Unexpected '-' sign when parsing an "
 3501|    658|                    "unsigned value");
 3502|    658|            }
 3503|    658|        }
 3504|       |
 3505|    658|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 658]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.31k|                parse_integer_digits_without_thsep(
 3512|  1.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.31k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.31k|        auto buf = make_contiguous_buffer(
 3516|  1.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 658, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    658|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.31k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    658|    {
 3493|    658|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    658|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    658|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    658|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 658]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|    658|        }
 3504|       |
 3505|    658|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 658]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 658]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    658|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.31k|                parse_integer_digits_without_thsep(
 3512|  1.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.31k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.31k|        auto buf = make_contiguous_buffer(
 3516|  1.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    658|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    658|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    658|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    658|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 658, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    658|    }                                                  \
  |  |  |  | 3642|    658|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.31k|    }

LLVMFuzzerTestOneInput:
   68|  4.18k|{
   69|  4.18k|    scn::fuzz::run(data, size);
   70|  4.18k|    return 0;
   71|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.18k|{
   52|  4.18k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.18k]
  |  Branch (52:35): [True: 0, False: 4.18k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.18k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.18k|    run_for_source(sv);
   59|  4.18k|    run_for_source(wsv_reinterpret);
   60|  4.18k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.18k, False: 0]
  ------------------
   61|  4.18k|        run_for_source(wsv_transcode);
   62|  4.18k|    }
   63|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.18k|{
   37|  4.18k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.18k|    run_for_type<char_type>(source);
   40|  4.18k|    run_for_type<int>(source);
   41|  4.18k|    run_for_type<unsigned>(source);
   42|  4.18k|    run_for_type<double>(source);
   43|  4.18k|    run_for_type<bool>(source);
   44|  4.18k|    run_for_type<void*>(source);
   45|  4.18k|    run_for_type<std::string>(source);
   46|  4.18k|    run_for_type<std::wstring>(source);
   47|  4.18k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.18k|{
   25|  4.18k|    {
   26|  4.18k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.18k|    }
   28|  4.18k|    {
   29|  4.18k|        auto _ =
   30|  4.18k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.18k|    }
   32|  4.18k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.37k|{
   37|  8.37k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.37k|    run_for_type<char_type>(source);
   40|  8.37k|    run_for_type<int>(source);
   41|  8.37k|    run_for_type<unsigned>(source);
   42|  8.37k|    run_for_type<double>(source);
   43|  8.37k|    run_for_type<bool>(source);
   44|  8.37k|    run_for_type<void*>(source);
   45|  8.37k|    run_for_type<std::string>(source);
   46|  8.37k|    run_for_type<std::wstring>(source);
   47|  8.37k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.37k|{
   25|  8.37k|    {
   26|  8.37k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.37k|    }
   28|  8.37k|    {
   29|  8.37k|        auto _ =
   30|  8.37k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.37k|    }
   32|  8.37k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.18k|{
   52|  4.18k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.18k|    string_buffer.resize(size);
   56|  4.18k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.18k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.18k|    const auto wsv_reinterpret_size =
   61|  4.18k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 86, False: 4.10k]
  ------------------
   62|  4.18k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.18k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.18k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.18k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.18k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.18k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.18k|}

