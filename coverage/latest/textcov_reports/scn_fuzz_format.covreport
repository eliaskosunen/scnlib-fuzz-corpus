_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
 1014|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
 1014|    722|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1014|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|  2.56M|{
 4124|  2.56M|    if constexpr (sizeof(U) == 1) {
 4125|  2.56M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|  2.56M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|  2.56M|{
 4088|  2.56M|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|  2.56M|    SCN_GCC_COMPAT_PUSH
 4091|  2.56M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|  2.56M|    constexpr char lengths[] =
 4093|  2.56M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|  2.56M|        "\1\1\1\1\1\1\1\1"
 4095|  2.56M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|  2.56M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|  2.56M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|  2.56M|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|  2.56M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|  2.56M|    SCN_GCC_COMPAT_POP
 4102|  2.56M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  2.33M|{
 4330|  2.33M|    if constexpr (sizeof(CharT) == 1) {
 4331|  2.33M|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|  2.33M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|  2.33M|{
 4143|  2.33M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|  2.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|  2.33M|    const auto is_trailing_code_unit = [](char ch) {
 4146|  2.33M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  2.33M|    };
 4148|       |
 4149|  2.33M|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 1.93M, False: 399k]
  ------------------
 4150|  1.93M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 120, False: 1.93M]
  ------------------
 4151|    120|            SCN_UNLIKELY_ATTR
 4152|    120|            return invalid_code_point;
 4153|    120|        }
 4154|  1.93M|        return static_cast<char32_t>(input[0]);
 4155|  1.93M|    }
 4156|       |
 4157|   399k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 352k, False: 46.7k]
  ------------------
 4158|   352k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 18, False: 352k]
  ------------------
 4159|     18|            SCN_UNLIKELY_ATTR
 4160|     18|            return invalid_code_point;
 4161|     18|        }
 4162|   352k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 4.56k, False: 347k]
  ------------------
 4163|  4.56k|            SCN_UNLIKELY_ATTR
 4164|  4.56k|            return invalid_code_point;
 4165|  4.56k|        }
 4166|       |
 4167|   347k|        char32_t cp{};
 4168|   347k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|   347k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|   347k|        return cp;
 4171|   352k|    }
 4172|       |
 4173|  46.7k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 41.3k, False: 5.44k]
  ------------------
 4174|  41.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 18, False: 41.3k]
  ------------------
 4175|     18|            SCN_UNLIKELY_ATTR
 4176|     18|            return invalid_code_point;
 4177|     18|        }
 4178|  41.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 1.20k, False: 40.1k]
  ------------------
 4179|  41.3k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 433, False: 39.6k]
  ------------------
 4180|  1.63k|            SCN_UNLIKELY_ATTR
 4181|  1.63k|            return invalid_code_point;
 4182|  1.63k|        }
 4183|       |
 4184|  39.6k|        char32_t cp{};
 4185|  39.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|  39.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|  39.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|  39.6k|        return cp;
 4189|  41.3k|    }
 4190|       |
 4191|  5.44k|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 5.44k, False: 0]
  ------------------
 4192|  5.44k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 5.44k]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|  5.44k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 298, False: 5.14k]
  ------------------
 4197|    298|            SCN_UNLIKELY_ATTR
 4198|    298|            return invalid_code_point;
 4199|    298|        }
 4200|  5.14k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 837, False: 4.30k]
  ------------------
 4201|  5.14k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 399, False: 3.90k]
  ------------------
 4202|  5.14k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 552, False: 3.35k]
  ------------------
 4203|  1.78k|            SCN_UNLIKELY_ATTR
 4204|  1.78k|            return invalid_code_point;
 4205|  1.78k|        }
 4206|       |
 4207|  3.35k|        char32_t cp{};
 4208|  3.35k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|  3.35k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|  3.35k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|  3.35k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|  3.35k|        return cp;
 4213|  5.14k|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|   447k|    const auto is_trailing_code_unit = [](char ch) {
 4146|   447k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|   447k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|   747k|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|   747k|    else {
 4022|   747k|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|   747k|                                       to_address(first), to_address(last)))};
 4024|   747k|    }
 4025|   747k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  2.29M|{
  341|  2.29M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  2.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  2.29M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  2.43M|{
  319|  2.43M|    return p;
  320|  2.43M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|   343k|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|   343k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|   343k|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|   343k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|   343k|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|   343k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  459|  5.62k|        : m_value(T{}), m_has_value(true)
  460|  5.62k|    {
  461|  5.62k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6618|  50.5k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3491|  50.5k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6549|  5.62k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.34k, False: 272]
  |  |  ------------------
  ------------------
 9947|  5.34k|        out = unexpected(in.error());
 9948|  5.34k|    }
 9949|    272|    else {
 9950|    272|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    272|    static_cast<    \
  |  | 1084|    272|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    272|    }
 9952|  5.62k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1771|  50.5k|    {
 1772|  50.5k|        return has_value();
 1773|  50.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   101k|    {
  523|   101k|        return m_has_value;
  524|   101k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1777|  48.3k|    {
 1778|  48.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  48.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  48.3k|        return this->get_unexpected().error();
 1780|  48.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  48.3k|    {
  506|  48.3k|        return m_unexpected;
  507|  48.3k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  397|  1.39M|    {
  398|  1.39M|        return m_unexpected;
  399|  1.39M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  380|   670k|        : m_unexpected(std::forward<Err>(e))
  381|   670k|    {
  382|   670k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   670k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   670k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  5.34k|        : base(unexpect, std::move(e.error())),
 1648|  5.34k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.34k|    {
 1650|  5.34k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  5.34k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.34k|          m_has_value(false)
  484|  5.34k|    {
  485|  5.34k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  391|   870k|        : m_unexpected(std::forward<Args>(args)...)
  392|   870k|    {
  393|   870k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   870k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|   870k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.34k|    {
 1348|  5.34k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1588|  5.34k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  934|  5.34k|    {
  935|  5.34k|        assign_common(std::move(other));
  936|  5.34k|        return *this;
  937|  5.34k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  5.34k|    {
  982|  5.34k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 5.34k, False: 0]
  ------------------
  983|  5.34k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 5.34k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  5.34k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  5.34k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  16.5k|    {
  523|  16.5k|        return m_has_value;
  524|  16.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  5.89k|    {
  489|  5.89k|        return m_value;
  490|  5.89k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  5.34k|    {
 1078|  5.34k|        this->destroy_value();
 1079|  5.34k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  5.34k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  5.34k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  5.34k|    {
  537|  5.34k|        scn::detail::construct_at(&get_unexpected(),
  538|  5.34k|                                  std::forward<Args>(args)...);
  539|  5.34k|        m_has_value = false;
  540|  5.34k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  428|   147k|{
  429|   147k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   147k|        T(std::forward<Args>(args)...);
  431|   147k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.34k|    {
  506|  5.34k|        return m_unexpected;
  507|  5.34k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  5.34k|    {
  514|  5.34k|        return std::move(m_unexpected);
  515|  5.34k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6649|  2.19k|    {
 6650|  2.19k|        m_range = std::forward<Other>(r);
 6651|  2.19k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|  2.19k|    {
 1827|  2.19k|        return value();
 1828|  2.19k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|  2.19k|    {
 1801|  2.19k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.19k|        return this->get_value();
 1803|  2.19k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.19k|    {
  489|  2.19k|        return m_value;
  490|  2.19k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9766|  25.2k|{
 9767|  25.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|  25.2k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9703|  25.2k|{
 9704|  25.2k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  25.2k|    auto result = vscan_impl(buffer, format, args);
 9707|  25.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.1k, False: 1.09k]
  |  |  ------------------
  ------------------
 9708|  24.1k|        return unexpected(result.error());
 9709|  24.1k|    }
 9710|  1.09k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  25.2k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5465|  50.5k|{
 5466|  50.5k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|  50.5k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|  50.5k|                  "\n"
 5470|  50.5k|                  "Unsupported range type given as input to a scanning "
 5471|  50.5k|                  "function.\n"
 5472|  50.5k|                  "A range needs to have a character type (value type) "
 5473|  50.5k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|  50.5k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|  50.5k|                  "to be included.\n"
 5476|  50.5k|                  "See the scnlib documentation for more details.");
 5477|  50.5k|    static_assert(
 5478|  50.5k|        !std::is_same_v<T, custom_char_traits>,
 5479|  50.5k|        "\n"
 5480|  50.5k|        "Unsupported range type given as input to a scanning "
 5481|  50.5k|        "function.\n"
 5482|  50.5k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|  50.5k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|  50.5k|        "not supported.");
 5485|  50.5k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|  50.5k|                  "\n"
 5487|  50.5k|                  "Unsupported range type given as input to a scanning "
 5488|  50.5k|                  "function.\n"
 5489|  50.5k|                  "file_marker_found cannot be used as an "
 5490|  50.5k|                  "source range type to scn::scan.\n"
 5491|  50.5k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|  50.5k|                  "and do not provide an explicit source range, "
 5493|  50.5k|                  "or use scn::scan with a FILE* directly.");
 5494|  50.5k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|  50.5k|                  "\n"
 5496|  50.5k|                  "Unsupported range type given as input to a scanning "
 5497|  50.5k|                  "function.\n"
 5498|  50.5k|                  "In order to be scannable, a range needs to satisfy "
 5499|  50.5k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|  50.5k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|  50.5k|                  "\n"
 5502|  50.5k|                  "Unsupported range type given as input to a scanning "
 5503|  50.5k|                  "function.\n"
 5504|  50.5k|                  "A range needs to model forward_range and have a valid "
 5505|  50.5k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|  50.5k|                  "Examples of scannable ranges are std::string, "
 5507|  50.5k|                  "std::string_view, "
 5508|  50.5k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|  50.5k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|  50.5k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|  50.5k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5356|  50.5k|{
 5357|  50.5k|    if constexpr (is_valid_char_type<CharT>) {
 5358|  50.5k|        return r;
 5359|       |        // return make_string_scan_buffer(r);
 5360|       |    }
 5361|       |    else {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|  50.5k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1771|   157k|    {
 1772|   157k|        return has_value();
 1773|   157k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  522|   316k|    {
  523|   316k|        return m_has_value;
  524|   316k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1777|   154k|    {
 1778|   154k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   154k|        return this->get_unexpected().error();
 1780|   154k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   154k|    {
  506|   154k|        return m_unexpected;
  507|   154k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  48.3k|        : base(unexpect, std::move(e.error())),
 1648|  48.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  48.3k|    {
 1650|  48.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  48.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  48.3k|          m_has_value(false)
  484|  48.3k|    {
  485|  48.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  50.5k|    {
 1348|  50.5k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6879|  2.19k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  2.19k|                      ranges::iterator_t<SourceRange>>) {
 6882|  2.19k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  2.19k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  2.19k|    {
 2901|  2.19k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  2.19k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  2.19k|    {
 2882|  2.19k|        return decay_copy(t.begin());
 2883|  2.19k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2125|   140k|{
 2126|   140k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   140k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6866|  2.19k|{
 6867|  2.19k|    return ranges::end(source);
 6868|  2.19k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  2.19k|    {
 2958|  2.19k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  2.19k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  2.19k|    {
 2940|  2.19k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.19k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|   475k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   475k|    static_cast<    \
  |  | 1084|   475k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   475k|    static_cast<    \
  |  | 1084|   475k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   475k|    {
 3498|   475k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1826|  4.33k|    {
 1827|  4.33k|        return value();
 1828|  4.33k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1800|  4.53k|    {
 1801|  4.53k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  4.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  4.53k|        return this->get_value();
 1803|  4.53k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  488|  4.53k|    {
  489|  4.53k|        return m_value;
  490|  4.53k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  2.19k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.19k|    {
 1604|  2.19k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|  2.19k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.19k|    {
  475|  2.19k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5985|  5.62k|{
 5986|  5.62k|    constexpr bool default_constructible_constraint =
 5987|  5.62k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  5.62k|    static_assert(default_constructible_constraint,
 5989|  5.62k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  5.62k|    constexpr bool destructible_constraint =
 5992|  5.62k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  5.62k|    static_assert(destructible_constraint,
 5994|  5.62k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  5.62k|    constexpr bool non_reference_constraint =
 5997|  5.62k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  5.62k|    static_assert(non_reference_constraint,
 5999|  5.62k|                  "Scan argument types must not be references");
 6000|       |
 6001|  5.62k|    constexpr bool movable_constraint =
 6002|  5.62k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  5.62k|    static_assert(movable_constraint,
 6004|  5.62k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  5.62k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  5.62k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  5.62k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE14EcvEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5823|  5.62k|    {
 5824|       |        if constexpr (std::is_same_v<char_type, char> &&
 5825|  5.62k|                      !is_type_disabled<char_type>) {
 5826|  5.62k|            return val;
 5827|       |        }
 5828|       |        else if constexpr (is_type_disabled<char_type>) {
 5829|       |            return unscannable_disabled{val};
 5830|       |        }
 5831|       |        else {
 5832|       |            SCN_UNUSED(val);
 5833|       |            return unscannable_char{};
 5834|       |        }
 5835|  5.62k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5939|  5.62k|{
 5940|  5.62k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  5.62k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  5.62k|    constexpr bool scannable_char =
 5944|  5.62k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  5.62k|    static_assert(scannable_char,
 5946|  5.62k|                  "Cannot scan an argument of an unsupported character "
 5947|  5.62k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  5.62k|    constexpr bool scannable_const =
 5950|  5.62k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  5.62k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  5.62k|    constexpr bool scannable_disabled =
 5954|  5.62k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  5.62k|    static_assert(scannable_disabled,
 5956|  5.62k|                  "Cannot scan an argument that has been disabled by "
 5957|  5.62k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  5.62k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  5.62k|    static_assert(
 5961|  5.62k|        scannable,
 5962|  5.62k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  5.62k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  5.62k|    return arg_value{arg};
 5966|  5.62k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5715|  5.62k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  5.62k|    {
 5717|  5.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1846|  5.89k|    {
 1847|  5.89k|        return &value();
 1848|  5.89k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  5.89k|    {
 1801|  5.89k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.89k|        return this->get_value();
 1803|  5.89k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6558|  5.62k|    {
 6559|  5.62k|        return m_values;
 6560|  5.62k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6352|  50.5k|        : m_desc(desc), m_builtin_values(data)
 6353|  50.5k|    {
 6354|  50.5k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8639|  50.5k|{
 8640|  50.5k|    return s;
 8641|  50.5k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8616|  50.5k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9784|  25.2k|{
 9785|  25.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|  25.2k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9719|  25.2k|{
 9720|  25.2k|#if !SCN_DISABLE_LOCALE
 9721|  25.2k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  25.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  25.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  25.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  25.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.1k, False: 1.09k]
  |  |  ------------------
  ------------------
 9728|  24.1k|        return unexpected(result.error());
 9729|  24.1k|    }
 9730|  1.09k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  25.2k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  459|  5.62k|        : m_value(T{}), m_has_value(true)
  460|  5.62k|    {
  461|  5.62k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6549|  16.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.62k, False: 0]
  |  |  ------------------
  ------------------
 9947|  5.62k|        out = unexpected(in.error());
 9948|  5.62k|    }
 9949|      0|    else {
 9950|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|      0|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  5.62k|        : base(unexpect, std::move(e.error())),
 1648|  5.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.62k|    {
 1650|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  5.62k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.62k|          m_has_value(false)
  484|  5.62k|    {
  485|  5.62k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.62k|    {
 1348|  5.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1588|  5.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  934|  5.62k|    {
  935|  5.62k|        assign_common(std::move(other));
  936|  5.62k|        return *this;
  937|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  5.62k|    {
  982|  5.62k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 5.62k, False: 0]
  ------------------
  983|  5.62k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 5.62k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  5.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  5.62k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  16.8k|    {
  523|  16.8k|        return m_has_value;
  524|  16.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  5.62k|    {
  489|  5.62k|        return m_value;
  490|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  5.62k|    {
 1078|  5.62k|        this->destroy_value();
 1079|  5.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  5.62k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  5.62k|    {
  537|  5.62k|        scn::detail::construct_at(&get_unexpected(),
  538|  5.62k|                                  std::forward<Args>(args)...);
  539|  5.62k|        m_has_value = false;
  540|  5.62k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.62k|    {
  506|  5.62k|        return m_unexpected;
  507|  5.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  5.62k|    {
  514|  5.62k|        return std::move(m_unexpected);
  515|  5.62k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5985|  16.8k|{
 5986|  16.8k|    constexpr bool default_constructible_constraint =
 5987|  16.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  16.8k|    static_assert(default_constructible_constraint,
 5989|  16.8k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  16.8k|    constexpr bool destructible_constraint =
 5992|  16.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  16.8k|    static_assert(destructible_constraint,
 5994|  16.8k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  16.8k|    constexpr bool non_reference_constraint =
 5997|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  16.8k|    static_assert(non_reference_constraint,
 5999|  16.8k|                  "Scan argument types must not be references");
 6000|       |
 6001|  16.8k|    constexpr bool movable_constraint =
 6002|  16.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  16.8k|    static_assert(movable_constraint,
 6004|  16.8k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  16.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  16.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  16.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5939|  16.8k|{
 5940|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  16.8k|    constexpr bool scannable_char =
 5944|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  16.8k|    static_assert(scannable_char,
 5946|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5947|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  16.8k|    constexpr bool scannable_const =
 5950|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  16.8k|    constexpr bool scannable_disabled =
 5954|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  16.8k|    static_assert(scannable_disabled,
 5956|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5957|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  16.8k|    static_assert(
 5961|  16.8k|        scannable,
 5962|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  16.8k|    return arg_value{arg};
 5966|  16.8k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5715|  16.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  16.8k|    {
 5717|  16.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1846|  5.62k|    {
 1847|  5.62k|        return &value();
 1848|  5.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  5.62k|    {
 1801|  5.62k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.62k|        return this->get_value();
 1803|  5.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6558|  16.8k|    {
 6559|  16.8k|        return m_values;
 6560|  16.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  459|  5.62k|        : m_value(T{}), m_has_value(true)
  460|  5.62k|    {
  461|  5.62k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6549|  16.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.62k, False: 0]
  |  |  ------------------
  ------------------
 9947|  5.62k|        out = unexpected(in.error());
 9948|  5.62k|    }
 9949|      0|    else {
 9950|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|      0|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  5.62k|        : base(unexpect, std::move(e.error())),
 1648|  5.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.62k|    {
 1650|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  5.62k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.62k|          m_has_value(false)
  484|  5.62k|    {
  485|  5.62k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.62k|    {
 1348|  5.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1588|  5.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  934|  5.62k|    {
  935|  5.62k|        assign_common(std::move(other));
  936|  5.62k|        return *this;
  937|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  5.62k|    {
  982|  5.62k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 5.62k, False: 0]
  ------------------
  983|  5.62k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 5.62k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  5.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  5.62k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  16.8k|    {
  523|  16.8k|        return m_has_value;
  524|  16.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  5.62k|    {
  489|  5.62k|        return m_value;
  490|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  5.62k|    {
 1078|  5.62k|        this->destroy_value();
 1079|  5.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  5.62k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  5.62k|    {
  537|  5.62k|        scn::detail::construct_at(&get_unexpected(),
  538|  5.62k|                                  std::forward<Args>(args)...);
  539|  5.62k|        m_has_value = false;
  540|  5.62k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.62k|    {
  506|  5.62k|        return m_unexpected;
  507|  5.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  5.62k|    {
  514|  5.62k|        return std::move(m_unexpected);
  515|  5.62k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5985|  16.8k|{
 5986|  16.8k|    constexpr bool default_constructible_constraint =
 5987|  16.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  16.8k|    static_assert(default_constructible_constraint,
 5989|  16.8k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  16.8k|    constexpr bool destructible_constraint =
 5992|  16.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  16.8k|    static_assert(destructible_constraint,
 5994|  16.8k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  16.8k|    constexpr bool non_reference_constraint =
 5997|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  16.8k|    static_assert(non_reference_constraint,
 5999|  16.8k|                  "Scan argument types must not be references");
 6000|       |
 6001|  16.8k|    constexpr bool movable_constraint =
 6002|  16.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  16.8k|    static_assert(movable_constraint,
 6004|  16.8k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  16.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  16.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  16.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE9EjvEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5939|  16.8k|{
 5940|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  16.8k|    constexpr bool scannable_char =
 5944|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  16.8k|    static_assert(scannable_char,
 5946|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5947|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  16.8k|    constexpr bool scannable_const =
 5950|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  16.8k|    constexpr bool scannable_disabled =
 5954|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  16.8k|    static_assert(scannable_disabled,
 5956|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5957|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  16.8k|    static_assert(
 5961|  16.8k|        scannable,
 5962|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  16.8k|    return arg_value{arg};
 5966|  16.8k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5715|  16.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  16.8k|    {
 5717|  16.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1846|  5.62k|    {
 1847|  5.62k|        return &value();
 1848|  5.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  5.62k|    {
 1801|  5.62k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.62k|        return this->get_value();
 1803|  5.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6558|  16.8k|    {
 6559|  16.8k|        return m_values;
 6560|  16.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|  5.62k|        : m_value(T{}), m_has_value(true)
  460|  5.62k|    {
  461|  5.62k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6549|  16.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.62k, False: 0]
  |  |  ------------------
  ------------------
 9947|  5.62k|        out = unexpected(in.error());
 9948|  5.62k|    }
 9949|      0|    else {
 9950|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|      0|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  5.62k|        : base(unexpect, std::move(e.error())),
 1648|  5.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.62k|    {
 1650|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  5.62k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.62k|          m_has_value(false)
  484|  5.62k|    {
  485|  5.62k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.62k|    {
 1348|  5.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1588|  5.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  934|  5.62k|    {
  935|  5.62k|        assign_common(std::move(other));
  936|  5.62k|        return *this;
  937|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  5.62k|    {
  982|  5.62k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 5.62k, False: 0]
  ------------------
  983|  5.62k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 5.62k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  5.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  5.62k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  16.8k|    {
  523|  16.8k|        return m_has_value;
  524|  16.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  5.62k|    {
  489|  5.62k|        return m_value;
  490|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  5.62k|    {
 1078|  5.62k|        this->destroy_value();
 1079|  5.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  5.62k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  5.62k|    {
  537|  5.62k|        scn::detail::construct_at(&get_unexpected(),
  538|  5.62k|                                  std::forward<Args>(args)...);
  539|  5.62k|        m_has_value = false;
  540|  5.62k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.62k|    {
  506|  5.62k|        return m_unexpected;
  507|  5.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  5.62k|    {
  514|  5.62k|        return std::move(m_unexpected);
  515|  5.62k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5985|  16.8k|{
 5986|  16.8k|    constexpr bool default_constructible_constraint =
 5987|  16.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  16.8k|    static_assert(default_constructible_constraint,
 5989|  16.8k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  16.8k|    constexpr bool destructible_constraint =
 5992|  16.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  16.8k|    static_assert(destructible_constraint,
 5994|  16.8k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  16.8k|    constexpr bool non_reference_constraint =
 5997|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  16.8k|    static_assert(non_reference_constraint,
 5999|  16.8k|                  "Scan argument types must not be references");
 6000|       |
 6001|  16.8k|    constexpr bool movable_constraint =
 6002|  16.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  16.8k|    static_assert(movable_constraint,
 6004|  16.8k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  16.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  16.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  16.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5939|  16.8k|{
 5940|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  16.8k|    constexpr bool scannable_char =
 5944|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  16.8k|    static_assert(scannable_char,
 5946|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5947|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  16.8k|    constexpr bool scannable_const =
 5950|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  16.8k|    constexpr bool scannable_disabled =
 5954|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  16.8k|    static_assert(scannable_disabled,
 5956|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5957|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  16.8k|    static_assert(
 5961|  16.8k|        scannable,
 5962|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  16.8k|    return arg_value{arg};
 5966|  16.8k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5715|  16.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  16.8k|    {
 5717|  16.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1846|  5.62k|    {
 1847|  5.62k|        return &value();
 1848|  5.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  5.62k|    {
 1801|  5.62k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.62k|        return this->get_value();
 1803|  5.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6558|  16.8k|    {
 6559|  16.8k|        return m_values;
 6560|  16.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  459|  5.62k|        : m_value(T{}), m_has_value(true)
  460|  5.62k|    {
  461|  5.62k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6549|  16.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.62k, False: 0]
  |  |  ------------------
  ------------------
 9947|  5.62k|        out = unexpected(in.error());
 9948|  5.62k|    }
 9949|      0|    else {
 9950|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|      0|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  5.62k|        : base(unexpect, std::move(e.error())),
 1648|  5.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.62k|    {
 1650|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  5.62k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.62k|          m_has_value(false)
  484|  5.62k|    {
  485|  5.62k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.62k|    {
 1348|  5.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1588|  5.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  934|  5.62k|    {
  935|  5.62k|        assign_common(std::move(other));
  936|  5.62k|        return *this;
  937|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  5.62k|    {
  982|  5.62k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 5.62k, False: 0]
  ------------------
  983|  5.62k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 5.62k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  5.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  5.62k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  16.8k|    {
  523|  16.8k|        return m_has_value;
  524|  16.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  5.62k|    {
  489|  5.62k|        return m_value;
  490|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  5.62k|    {
 1078|  5.62k|        this->destroy_value();
 1079|  5.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  5.62k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  5.62k|    {
  537|  5.62k|        scn::detail::construct_at(&get_unexpected(),
  538|  5.62k|                                  std::forward<Args>(args)...);
  539|  5.62k|        m_has_value = false;
  540|  5.62k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.62k|    {
  506|  5.62k|        return m_unexpected;
  507|  5.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  5.62k|    {
  514|  5.62k|        return std::move(m_unexpected);
  515|  5.62k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5985|  16.8k|{
 5986|  16.8k|    constexpr bool default_constructible_constraint =
 5987|  16.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  16.8k|    static_assert(default_constructible_constraint,
 5989|  16.8k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  16.8k|    constexpr bool destructible_constraint =
 5992|  16.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  16.8k|    static_assert(destructible_constraint,
 5994|  16.8k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  16.8k|    constexpr bool non_reference_constraint =
 5997|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  16.8k|    static_assert(non_reference_constraint,
 5999|  16.8k|                  "Scan argument types must not be references");
 6000|       |
 6001|  16.8k|    constexpr bool movable_constraint =
 6002|  16.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  16.8k|    static_assert(movable_constraint,
 6004|  16.8k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  16.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  16.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  16.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE13EbvEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5939|  16.8k|{
 5940|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  16.8k|    constexpr bool scannable_char =
 5944|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  16.8k|    static_assert(scannable_char,
 5946|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5947|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  16.8k|    constexpr bool scannable_const =
 5950|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  16.8k|    constexpr bool scannable_disabled =
 5954|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  16.8k|    static_assert(scannable_disabled,
 5956|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5957|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  16.8k|    static_assert(
 5961|  16.8k|        scannable,
 5962|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  16.8k|    return arg_value{arg};
 5966|  16.8k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5715|  16.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  16.8k|    {
 5717|  16.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1846|  5.62k|    {
 1847|  5.62k|        return &value();
 1848|  5.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  5.62k|    {
 1801|  5.62k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.62k|        return this->get_value();
 1803|  5.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6558|  16.8k|    {
 6559|  16.8k|        return m_values;
 6560|  16.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  459|  5.62k|        : m_value(T{}), m_has_value(true)
  460|  5.62k|    {
  461|  5.62k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6549|  16.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.62k, False: 0]
  |  |  ------------------
  ------------------
 9947|  5.62k|        out = unexpected(in.error());
 9948|  5.62k|    }
 9949|      0|    else {
 9950|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|      0|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1647|  5.62k|        : base(unexpect, std::move(e.error())),
 1648|  5.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.62k|    {
 1650|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  482|  5.62k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.62k|          m_has_value(false)
  484|  5.62k|    {
  485|  5.62k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.62k|    {
 1348|  5.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1588|  5.62k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  934|  5.62k|    {
  935|  5.62k|        assign_common(std::move(other));
  936|  5.62k|        return *this;
  937|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  5.62k|    {
  982|  5.62k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 5.62k, False: 0]
  ------------------
  983|  5.62k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 5.62k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  5.62k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  5.62k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  16.8k|    {
  523|  16.8k|        return m_has_value;
  524|  16.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  5.62k|    {
  489|  5.62k|        return m_value;
  490|  5.62k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  5.62k|    {
 1078|  5.62k|        this->destroy_value();
 1079|  5.62k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  5.62k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  536|  5.62k|    {
  537|  5.62k|        scn::detail::construct_at(&get_unexpected(),
  538|  5.62k|                                  std::forward<Args>(args)...);
  539|  5.62k|        m_has_value = false;
  540|  5.62k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.62k|    {
  506|  5.62k|        return m_unexpected;
  507|  5.62k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  5.62k|    {
  514|  5.62k|        return std::move(m_unexpected);
  515|  5.62k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5985|  16.8k|{
 5986|  16.8k|    constexpr bool default_constructible_constraint =
 5987|  16.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  16.8k|    static_assert(default_constructible_constraint,
 5989|  16.8k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  16.8k|    constexpr bool destructible_constraint =
 5992|  16.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  16.8k|    static_assert(destructible_constraint,
 5994|  16.8k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  16.8k|    constexpr bool non_reference_constraint =
 5997|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  16.8k|    static_assert(non_reference_constraint,
 5999|  16.8k|                  "Scan argument types must not be references");
 6000|       |
 6001|  16.8k|    constexpr bool movable_constraint =
 6002|  16.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  16.8k|    static_assert(movable_constraint,
 6004|  16.8k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  16.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  16.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  16.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EPvvEES8_RT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5939|  16.8k|{
 5940|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  16.8k|    constexpr bool scannable_char =
 5944|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  16.8k|    static_assert(scannable_char,
 5946|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5947|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  16.8k|    constexpr bool scannable_const =
 5950|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  16.8k|    constexpr bool scannable_disabled =
 5954|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  16.8k|    static_assert(scannable_disabled,
 5956|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5957|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  16.8k|    static_assert(
 5961|  16.8k|        scannable,
 5962|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  16.8k|    return arg_value{arg};
 5966|  16.8k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5715|  16.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  16.8k|    {
 5717|  16.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1846|  5.62k|    {
 1847|  5.62k|        return &value();
 1848|  5.62k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1800|  5.62k|    {
 1801|  5.62k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.62k|        return this->get_value();
 1803|  5.62k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6558|  16.8k|    {
 6559|  16.8k|        return m_values;
 6560|  16.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|  5.62k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  5.62k|    {
  646|  5.62k|        construct();
  647|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  5.62k|    {
  727|  5.62k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  5.62k|        m_has_value = true;
  729|  5.62k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  428|  5.62k|{
  429|  5.62k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  5.62k|        T(std::forward<Args>(args)...);
  431|  5.62k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6549|  16.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  17.5k|    {
  751|  17.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  17.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  17.5k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.98k, False: 640]
  |  |  ------------------
  ------------------
 9947|  4.98k|        out = unexpected(in.error());
 9948|  4.98k|    }
 9949|    640|    else {
 9950|    640|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    640|    static_cast<    \
  |  | 1084|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    640|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  4.98k|        : base(unexpect, std::move(e.error())),
 1648|  4.98k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  4.98k|    {
 1650|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  4.98k|        : m_has_value(false)
  670|  4.98k|    {
  671|  4.98k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  4.98k|    {
  734|  4.98k|        scn::detail::construct_at(unexpected_ptr(),
  735|  4.98k|                                  std::forward<Args>(args)...);
  736|  4.98k|        m_has_value = false;
  737|  4.98k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  428|  31.4k|{
  429|  31.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  31.4k|        T(std::forward<Args>(args)...);
  431|  31.4k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  24.9k|    {
  763|  24.9k|        return reinterpret_cast<unexpected<E>*>(
  764|  24.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  24.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  24.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  4.98k|    {
 1348|  4.98k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  4.98k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  4.98k|    {
  935|  4.98k|        assign_common(std::move(other));
  936|  4.98k|        return *this;
  937|  4.98k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  4.98k|    {
  982|  4.98k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 4.98k, False: 0]
  ------------------
  983|  4.98k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 4.98k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  4.98k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  4.98k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  26.8k|    {
  720|  26.8k|        return m_has_value;
  721|  26.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  6.26k|    {
  686|  6.26k|        return *value_ptr();
  687|  6.26k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  4.98k|    {
 1078|  4.98k|        this->destroy_value();
 1079|  4.98k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  5.62k|    {
  741|  5.62k|        scn::detail::destroy_at(value_ptr());
  742|  5.62k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  434|  5.62k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  5.62k|    else {
  441|  5.62k|        p->~T();
  442|  5.62k|    }
  443|  5.62k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6782|  5.62k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  4.98k|    {
  734|  4.98k|        scn::detail::construct_at(unexpected_ptr(),
  735|  4.98k|                                  std::forward<Args>(args)...);
  736|  4.98k|        m_has_value = false;
  737|  4.98k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  4.98k|    {
  711|  4.98k|        return std::move(*unexpected_ptr());
  712|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  9.96k|    {
  745|  9.96k|        scn::detail::destroy_at(unexpected_ptr());
  746|  9.96k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  434|  62.7k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  62.7k|    else {
  441|  62.7k|        p->~T();
  442|  62.7k|    }
  443|  62.7k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5985|  16.8k|{
 5986|  16.8k|    constexpr bool default_constructible_constraint =
 5987|  16.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  16.8k|    static_assert(default_constructible_constraint,
 5989|  16.8k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  16.8k|    constexpr bool destructible_constraint =
 5992|  16.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  16.8k|    static_assert(destructible_constraint,
 5994|  16.8k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  16.8k|    constexpr bool non_reference_constraint =
 5997|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  16.8k|    static_assert(non_reference_constraint,
 5999|  16.8k|                  "Scan argument types must not be references");
 6000|       |
 6001|  16.8k|    constexpr bool movable_constraint =
 6002|  16.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  16.8k|    static_assert(movable_constraint,
 6004|  16.8k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  16.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  16.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  16.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5939|  16.8k|{
 5940|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  16.8k|    constexpr bool scannable_char =
 5944|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  16.8k|    static_assert(scannable_char,
 5946|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5947|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  16.8k|    constexpr bool scannable_const =
 5950|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  16.8k|    constexpr bool scannable_disabled =
 5954|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  16.8k|    static_assert(scannable_disabled,
 5956|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5957|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  16.8k|    static_assert(
 5961|  16.8k|        scannable,
 5962|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  16.8k|    return arg_value{arg};
 5966|  16.8k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5715|  16.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  16.8k|    {
 5717|  16.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1846|  6.26k|    {
 1847|  6.26k|        return &value();
 1848|  6.26k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  6.26k|    {
 1801|  6.26k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  6.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  6.26k|        return this->get_value();
 1803|  6.26k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6558|  16.8k|    {
 6559|  16.8k|        return m_values;
 6560|  16.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|  10.6k|    {
  676|  10.6k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 640, False: 9.96k]
  ------------------
  677|    640|            destroy_value();
  678|    640|        }
  679|  9.96k|        else {
  680|  9.96k|            destroy_unexpected();
  681|  9.96k|        }
  682|  10.6k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|  5.62k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  5.62k|    {
  646|  5.62k|        construct();
  647|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  5.62k|    {
  727|  5.62k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  5.62k|        m_has_value = true;
  729|  5.62k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  428|  5.62k|{
  429|  5.62k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  5.62k|        T(std::forward<Args>(args)...);
  431|  5.62k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6549|  16.8k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  17.5k|    {
  751|  17.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  17.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  17.5k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.98k, False: 640]
  |  |  ------------------
  ------------------
 9947|  4.98k|        out = unexpected(in.error());
 9948|  4.98k|    }
 9949|    640|    else {
 9950|    640|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    640|    static_cast<    \
  |  | 1084|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    640|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  4.98k|        : base(unexpect, std::move(e.error())),
 1648|  4.98k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  4.98k|    {
 1650|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  4.98k|        : m_has_value(false)
  670|  4.98k|    {
  671|  4.98k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  4.98k|    {
  734|  4.98k|        scn::detail::construct_at(unexpected_ptr(),
  735|  4.98k|                                  std::forward<Args>(args)...);
  736|  4.98k|        m_has_value = false;
  737|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  24.9k|    {
  763|  24.9k|        return reinterpret_cast<unexpected<E>*>(
  764|  24.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  24.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  24.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  4.98k|    {
 1348|  4.98k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  4.98k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  4.98k|    {
  935|  4.98k|        assign_common(std::move(other));
  936|  4.98k|        return *this;
  937|  4.98k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  4.98k|    {
  982|  4.98k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 4.98k, False: 0]
  ------------------
  983|  4.98k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 4.98k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  4.98k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  4.98k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  26.8k|    {
  720|  26.8k|        return m_has_value;
  721|  26.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  6.26k|    {
  686|  6.26k|        return *value_ptr();
  687|  6.26k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  4.98k|    {
 1078|  4.98k|        this->destroy_value();
 1079|  4.98k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  5.62k|    {
  741|  5.62k|        scn::detail::destroy_at(value_ptr());
  742|  5.62k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  434|  5.62k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  5.62k|    else {
  441|  5.62k|        p->~T();
  442|  5.62k|    }
  443|  5.62k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6782|  5.62k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  4.98k|    {
  734|  4.98k|        scn::detail::construct_at(unexpected_ptr(),
  735|  4.98k|                                  std::forward<Args>(args)...);
  736|  4.98k|        m_has_value = false;
  737|  4.98k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  4.98k|    {
  711|  4.98k|        return std::move(*unexpected_ptr());
  712|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  9.96k|    {
  745|  9.96k|        scn::detail::destroy_at(unexpected_ptr());
  746|  9.96k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5985|  16.8k|{
 5986|  16.8k|    constexpr bool default_constructible_constraint =
 5987|  16.8k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  16.8k|    static_assert(default_constructible_constraint,
 5989|  16.8k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  16.8k|    constexpr bool destructible_constraint =
 5992|  16.8k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  16.8k|    static_assert(destructible_constraint,
 5994|  16.8k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  16.8k|    constexpr bool non_reference_constraint =
 5997|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  16.8k|    static_assert(non_reference_constraint,
 5999|  16.8k|                  "Scan argument types must not be references");
 6000|       |
 6001|  16.8k|    constexpr bool movable_constraint =
 6002|  16.8k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  16.8k|    static_assert(movable_constraint,
 6004|  16.8k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  16.8k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  16.8k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  16.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5939|  16.8k|{
 5940|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  16.8k|    constexpr bool scannable_char =
 5944|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  16.8k|    static_assert(scannable_char,
 5946|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5947|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  16.8k|    constexpr bool scannable_const =
 5950|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  16.8k|    constexpr bool scannable_disabled =
 5954|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  16.8k|    static_assert(scannable_disabled,
 5956|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5957|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  16.8k|    static_assert(
 5961|  16.8k|        scannable,
 5962|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  16.8k|    return arg_value{arg};
 5966|  16.8k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5715|  16.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  16.8k|    {
 5717|  16.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  6.26k|    {
 1847|  6.26k|        return &value();
 1848|  6.26k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  6.26k|    {
 1801|  6.26k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  6.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  6.26k|        return this->get_value();
 1803|  6.26k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6558|  16.8k|    {
 6559|  16.8k|        return m_values;
 6560|  16.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|  10.6k|    {
  676|  10.6k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 640, False: 9.96k]
  ------------------
  677|    640|            destroy_value();
  678|    640|        }
  679|  9.96k|        else {
  680|  9.96k|            destroy_unexpected();
  681|  9.96k|        }
  682|  10.6k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
10004|  2.81k|{
10005|  2.81k|    auto result = make_scan_result<Source, Args...>();
10006|  2.81k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  2.81k|                                   make_scan_args(result->values())));
10008|  2.81k|    return result;
10009|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9960|  5.62k|{
 9961|  5.62k|    return scan_result_type<Source, Args...>();
 9962|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|  5.62k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  459|  5.62k|        : m_value(T{}), m_has_value(true)
  460|  5.62k|    {
  461|  5.62k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6775|  5.62k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6549|  5.62k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9945|  5.62k|{
 9946|  5.62k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  5.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.98k, False: 640]
  |  |  ------------------
  ------------------
 9947|  4.98k|        out = unexpected(in.error());
 9948|  4.98k|    }
 9949|    640|    else {
 9950|    640|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    640|    static_cast<    \
  |  | 1084|    640|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    640|    }
 9952|  5.62k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|  4.98k|        : base(unexpect, std::move(e.error())),
 1648|  4.98k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  4.98k|    {
 1650|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  482|  4.98k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  4.98k|          m_has_value(false)
  484|  4.98k|    {
  485|  4.98k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  4.98k|    {
 1348|  4.98k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1588|  4.98k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  934|  4.98k|    {
  935|  4.98k|        assign_common(std::move(other));
  936|  4.98k|        return *this;
  937|  4.98k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  981|  4.98k|    {
  982|  4.98k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 4.98k, False: 0]
  ------------------
  983|  4.98k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 4.98k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  4.98k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  4.98k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  16.2k|    {
  523|  16.2k|        return m_has_value;
  524|  16.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  6.26k|    {
  489|  6.26k|        return m_value;
  490|  6.26k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1077|  4.98k|    {
 1078|  4.98k|        this->destroy_value();
 1079|  4.98k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  4.98k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  4.98k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  536|  4.98k|    {
  537|  4.98k|        scn::detail::construct_at(&get_unexpected(),
  538|  4.98k|                                  std::forward<Args>(args)...);
  539|  4.98k|        m_has_value = false;
  540|  4.98k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  4.98k|    {
  506|  4.98k|        return m_unexpected;
  507|  4.98k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  4.98k|    {
  514|  4.98k|        return std::move(m_unexpected);
  515|  4.98k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8962|  5.62k|    {
 8963|  5.62k|        return m_str;
 8964|  5.62k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  5.62k|{
 6275|  5.62k|    detail::check_scan_arg_types<Args...>();
 6276|  5.62k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  5.62k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5985|  5.62k|{
 5986|  5.62k|    constexpr bool default_constructible_constraint =
 5987|  5.62k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  5.62k|    static_assert(default_constructible_constraint,
 5989|  5.62k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  5.62k|    constexpr bool destructible_constraint =
 5992|  5.62k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  5.62k|    static_assert(destructible_constraint,
 5994|  5.62k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  5.62k|    constexpr bool non_reference_constraint =
 5997|  5.62k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  5.62k|    static_assert(non_reference_constraint,
 5999|  5.62k|                  "Scan argument types must not be references");
 6000|       |
 6001|  5.62k|    constexpr bool movable_constraint =
 6002|  5.62k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  5.62k|    static_assert(movable_constraint,
 6004|  5.62k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  5.62k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  5.62k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  5.62k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6250|  5.62k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  5.62k|    {
 6252|  5.62k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  5.62k|    {
 6260|  5.62k|        return {detail::make_arg<
 6261|  5.62k|            kind, Context,
 6262|  5.62k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  5.62k|                                 typename Context::char_type>::value>(args)...};
 6264|  5.62k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE26ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 6035|  5.62k|{
 6036|  5.62k|    return make_value<Context>(value).ref_value;
 6037|  5.62k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5970|  5.62k|{
 5971|  5.62k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  5.62k|                                  needs_context_tag>) {
 5975|  5.62k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  5.62k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5772|  5.62k|    {                                                                        \
 5773|  5.62k|        return val;                                                          \
 5774|  5.62k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5939|  5.62k|{
 5940|  5.62k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  5.62k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  5.62k|    constexpr bool scannable_char =
 5944|  5.62k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  5.62k|    static_assert(scannable_char,
 5946|  5.62k|                  "Cannot scan an argument of an unsupported character "
 5947|  5.62k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  5.62k|    constexpr bool scannable_const =
 5950|  5.62k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  5.62k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  5.62k|    constexpr bool scannable_disabled =
 5954|  5.62k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  5.62k|    static_assert(scannable_disabled,
 5956|  5.62k|                  "Cannot scan an argument that has been disabled by "
 5957|  5.62k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  5.62k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  5.62k|    static_assert(
 5961|  5.62k|        scannable,
 5962|  5.62k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  5.62k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  5.62k|    return arg_value{arg};
 5966|  5.62k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5715|  5.62k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  5.62k|    {
 5717|  5.62k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1846|  6.26k|    {
 1847|  6.26k|        return &value();
 1848|  6.26k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|  6.26k|    {
 1801|  6.26k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  6.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  6.26k|        return this->get_value();
 1803|  6.26k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6558|  5.62k|    {
 6559|  5.62k|        return m_values;
 6560|  5.62k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  5.62k|        : basic_scan_args(store.desc, store.args.data())
 6301|  5.62k|    {
 6302|  5.62k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  5.62k|        : m_str(r.str)
 8958|  5.62k|    {
 8959|  5.62k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
10073|  2.81k|{
10074|  2.81k|    auto result = make_scan_result<Source, Args...>();
10075|  2.81k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  2.81k|                                   make_scan_args(result->values())));
10077|  2.81k|    return result;
10078|  2.81k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  459|  11.2k|        : m_value(T{}), m_has_value(true)
  460|  11.2k|    {
  461|  11.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6618|   101k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3491|   101k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6549|  11.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.9k, False: 266]
  |  |  ------------------
  ------------------
 9947|  10.9k|        out = unexpected(in.error());
 9948|  10.9k|    }
 9949|    266|    else {
 9950|    266|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    266|    static_cast<    \
  |  | 1084|    266|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    266|    }
 9952|  11.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1771|   101k|    {
 1772|   101k|        return has_value();
 1773|   101k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   202k|    {
  523|   202k|        return m_has_value;
  524|   202k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1777|  99.0k|    {
 1778|  99.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  99.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  99.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  99.0k|        return this->get_unexpected().error();
 1780|  99.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  99.0k|    {
  506|  99.0k|        return m_unexpected;
  507|  99.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  10.9k|        : base(unexpect, std::move(e.error())),
 1648|  10.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  10.9k|    {
 1650|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  10.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  10.9k|          m_has_value(false)
  484|  10.9k|    {
  485|  10.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  10.9k|    {
 1348|  10.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1588|  10.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  934|  10.9k|    {
  935|  10.9k|        assign_common(std::move(other));
  936|  10.9k|        return *this;
  937|  10.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  10.9k|    {
  982|  10.9k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 10.9k, False: 0]
  ------------------
  983|  10.9k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 10.9k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  10.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  10.9k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  33.4k|    {
  523|  33.4k|        return m_has_value;
  524|  33.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.5k|    {
  489|  11.5k|        return m_value;
  490|  11.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  10.9k|    {
 1078|  10.9k|        this->destroy_value();
 1079|  10.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  10.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  10.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  10.9k|    {
  537|  10.9k|        scn::detail::construct_at(&get_unexpected(),
  538|  10.9k|                                  std::forward<Args>(args)...);
  539|  10.9k|        m_has_value = false;
  540|  10.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  10.9k|    {
  506|  10.9k|        return m_unexpected;
  507|  10.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  10.9k|    {
  514|  10.9k|        return std::move(m_unexpected);
  515|  10.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6649|  2.14k|    {
 6650|  2.14k|        m_range = std::forward<Other>(r);
 6651|  2.14k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|  2.14k|    {
 1827|  2.14k|        return value();
 1828|  2.14k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|  2.14k|    {
 1801|  2.14k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.14k|        return this->get_value();
 1803|  2.14k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.14k|    {
  489|  2.14k|        return m_value;
  490|  2.14k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9703|  50.5k|{
 9704|  50.5k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  50.5k|    auto result = vscan_impl(buffer, format, args);
 9707|  50.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 49.5k, False: 1.07k]
  |  |  ------------------
  ------------------
 9708|  49.5k|        return unexpected(result.error());
 9709|  49.5k|    }
 9710|  1.07k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  50.5k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5465|   101k|{
 5466|   101k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   101k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   101k|                  "\n"
 5470|   101k|                  "Unsupported range type given as input to a scanning "
 5471|   101k|                  "function.\n"
 5472|   101k|                  "A range needs to have a character type (value type) "
 5473|   101k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   101k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   101k|                  "to be included.\n"
 5476|   101k|                  "See the scnlib documentation for more details.");
 5477|   101k|    static_assert(
 5478|   101k|        !std::is_same_v<T, custom_char_traits>,
 5479|   101k|        "\n"
 5480|   101k|        "Unsupported range type given as input to a scanning "
 5481|   101k|        "function.\n"
 5482|   101k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   101k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   101k|        "not supported.");
 5485|   101k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   101k|                  "\n"
 5487|   101k|                  "Unsupported range type given as input to a scanning "
 5488|   101k|                  "function.\n"
 5489|   101k|                  "file_marker_found cannot be used as an "
 5490|   101k|                  "source range type to scn::scan.\n"
 5491|   101k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   101k|                  "and do not provide an explicit source range, "
 5493|   101k|                  "or use scn::scan with a FILE* directly.");
 5494|   101k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   101k|                  "\n"
 5496|   101k|                  "Unsupported range type given as input to a scanning "
 5497|   101k|                  "function.\n"
 5498|   101k|                  "In order to be scannable, a range needs to satisfy "
 5499|   101k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   101k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   101k|                  "\n"
 5502|   101k|                  "Unsupported range type given as input to a scanning "
 5503|   101k|                  "function.\n"
 5504|   101k|                  "A range needs to model forward_range and have a valid "
 5505|   101k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   101k|                  "Examples of scannable ranges are std::string, "
 5507|   101k|                  "std::string_view, "
 5508|   101k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   101k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   101k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   101k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5356|   101k|{
 5357|   101k|    if constexpr (is_valid_char_type<CharT>) {
 5358|   101k|        return r;
 5359|       |        // return make_string_scan_buffer(r);
 5360|       |    }
 5361|       |    else {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   101k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  99.0k|        : base(unexpect, std::move(e.error())),
 1648|  99.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  99.0k|    {
 1650|  99.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  99.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  99.0k|          m_has_value(false)
  484|  99.0k|    {
  485|  99.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   101k|    {
 1348|   101k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6879|  2.14k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  2.14k|                      ranges::iterator_t<SourceRange>>) {
 6882|  2.14k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  2.14k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  2.14k|    {
 2901|  2.14k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  2.14k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  2.14k|    {
 2882|  2.14k|        return decay_copy(t.begin());
 2883|  2.14k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2125|   217k|{
 2126|   217k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   217k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6866|  2.14k|{
 6867|  2.14k|    return ranges::end(source);
 6868|  2.14k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  2.14k|    {
 2958|  2.14k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  2.14k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  2.14k|    {
 2940|  2.14k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  2.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.14k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|   318k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   318k|    static_cast<    \
  |  | 1084|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   318k|    static_cast<    \
  |  | 1084|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   318k|    {
 3498|   318k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  2.14k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.14k|    {
 1604|  2.14k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|  2.14k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.14k|    {
  475|  2.14k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5985|  11.2k|{
 5986|  11.2k|    constexpr bool default_constructible_constraint =
 5987|  11.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  11.2k|    static_assert(default_constructible_constraint,
 5989|  11.2k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  11.2k|    constexpr bool destructible_constraint =
 5992|  11.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  11.2k|    static_assert(destructible_constraint,
 5994|  11.2k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  11.2k|    constexpr bool non_reference_constraint =
 5997|  11.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  11.2k|    static_assert(non_reference_constraint,
 5999|  11.2k|                  "Scan argument types must not be references");
 6000|       |
 6001|  11.2k|    constexpr bool movable_constraint =
 6002|  11.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  11.2k|    static_assert(movable_constraint,
 6004|  11.2k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  11.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  11.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EwvEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5939|  11.2k|{
 5940|  11.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  11.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  11.2k|    constexpr bool scannable_char =
 5944|  11.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  11.2k|    static_assert(scannable_char,
 5946|  11.2k|                  "Cannot scan an argument of an unsupported character "
 5947|  11.2k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  11.2k|    constexpr bool scannable_const =
 5950|  11.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  11.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  11.2k|    constexpr bool scannable_disabled =
 5954|  11.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  11.2k|    static_assert(scannable_disabled,
 5956|  11.2k|                  "Cannot scan an argument that has been disabled by "
 5957|  11.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  11.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  11.2k|    static_assert(
 5961|  11.2k|        scannable,
 5962|  11.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  11.2k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  11.2k|    return arg_value{arg};
 5966|  11.2k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5715|  11.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  11.2k|    {
 5717|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1846|  11.5k|    {
 1847|  11.5k|        return &value();
 1848|  11.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  11.5k|    {
 1801|  11.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.5k|        return this->get_value();
 1803|  11.5k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6558|  11.2k|    {
 6559|  11.2k|        return m_values;
 6560|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6352|   101k|        : m_desc(desc), m_builtin_values(data)
 6353|   101k|    {
 6354|   101k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8644|   101k|{
 8645|   101k|    return s;
 8646|   101k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8616|   101k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9719|  50.5k|{
 9720|  50.5k|#if !SCN_DISABLE_LOCALE
 9721|  50.5k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  50.5k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  50.5k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  50.5k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  50.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 49.5k, False: 1.07k]
  |  |  ------------------
  ------------------
 9728|  49.5k|        return unexpected(result.error());
 9729|  49.5k|    }
 9730|  1.07k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  50.5k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  459|  11.2k|        : m_value(T{}), m_has_value(true)
  460|  11.2k|    {
  461|  11.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.1k, False: 48]
  |  |  ------------------
  ------------------
 9947|  11.1k|        out = unexpected(in.error());
 9948|  11.1k|    }
 9949|     48|    else {
 9950|     48|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|     48|    static_cast<    \
  |  | 1084|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|     48|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  11.1k|        : base(unexpect, std::move(e.error())),
 1648|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.1k|    {
 1650|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.1k|          m_has_value(false)
  484|  11.1k|    {
  485|  11.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.1k|    {
 1348|  11.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1588|  11.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  934|  11.1k|    {
  935|  11.1k|        assign_common(std::move(other));
  936|  11.1k|        return *this;
  937|  11.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  11.1k|    {
  982|  11.1k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.1k, False: 0]
  ------------------
  983|  11.1k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.1k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.1k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  33.6k|    {
  523|  33.6k|        return m_has_value;
  524|  33.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.2k|    {
  489|  11.2k|        return m_value;
  490|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  11.1k|    {
 1078|  11.1k|        this->destroy_value();
 1079|  11.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  11.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  11.1k|    {
  537|  11.1k|        scn::detail::construct_at(&get_unexpected(),
  538|  11.1k|                                  std::forward<Args>(args)...);
  539|  11.1k|        m_has_value = false;
  540|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.1k|    {
  506|  11.1k|        return m_unexpected;
  507|  11.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  11.1k|    {
  514|  11.1k|        return std::move(m_unexpected);
  515|  11.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1846|  11.2k|    {
 1847|  11.2k|        return &value();
 1848|  11.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  11.2k|    {
 1801|  11.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.2k|        return this->get_value();
 1803|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  459|  11.2k|        : m_value(T{}), m_has_value(true)
  460|  11.2k|    {
  461|  11.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.1k, False: 48]
  |  |  ------------------
  ------------------
 9947|  11.1k|        out = unexpected(in.error());
 9948|  11.1k|    }
 9949|     48|    else {
 9950|     48|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|     48|    static_cast<    \
  |  | 1084|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|     48|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  11.1k|        : base(unexpect, std::move(e.error())),
 1648|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.1k|    {
 1650|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.1k|          m_has_value(false)
  484|  11.1k|    {
  485|  11.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.1k|    {
 1348|  11.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1588|  11.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  934|  11.1k|    {
  935|  11.1k|        assign_common(std::move(other));
  936|  11.1k|        return *this;
  937|  11.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  11.1k|    {
  982|  11.1k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.1k, False: 0]
  ------------------
  983|  11.1k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.1k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.1k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  33.6k|    {
  523|  33.6k|        return m_has_value;
  524|  33.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.2k|    {
  489|  11.2k|        return m_value;
  490|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  11.1k|    {
 1078|  11.1k|        this->destroy_value();
 1079|  11.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  11.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  11.1k|    {
  537|  11.1k|        scn::detail::construct_at(&get_unexpected(),
  538|  11.1k|                                  std::forward<Args>(args)...);
  539|  11.1k|        m_has_value = false;
  540|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.1k|    {
  506|  11.1k|        return m_unexpected;
  507|  11.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  11.1k|    {
  514|  11.1k|        return std::move(m_unexpected);
  515|  11.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE9EjvEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1846|  11.2k|    {
 1847|  11.2k|        return &value();
 1848|  11.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  11.2k|    {
 1801|  11.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.2k|        return this->get_value();
 1803|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|  11.2k|        : m_value(T{}), m_has_value(true)
  460|  11.2k|    {
  461|  11.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.2k, False: 38]
  |  |  ------------------
  ------------------
 9947|  11.2k|        out = unexpected(in.error());
 9948|  11.2k|    }
 9949|     38|    else {
 9950|     38|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|     38|    static_cast<    \
  |  | 1084|     38|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|     38|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  11.2k|        : base(unexpect, std::move(e.error())),
 1648|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.2k|    {
 1650|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  11.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.2k|          m_has_value(false)
  484|  11.2k|    {
  485|  11.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.2k|    {
 1348|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1588|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  934|  11.2k|    {
  935|  11.2k|        assign_common(std::move(other));
  936|  11.2k|        return *this;
  937|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  11.2k|    {
  982|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.2k, False: 0]
  ------------------
  983|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.2k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.2k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  33.6k|    {
  523|  33.6k|        return m_has_value;
  524|  33.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.2k|    {
  489|  11.2k|        return m_value;
  490|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  11.2k|    {
 1078|  11.2k|        this->destroy_value();
 1079|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  11.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  11.2k|    {
  537|  11.2k|        scn::detail::construct_at(&get_unexpected(),
  538|  11.2k|                                  std::forward<Args>(args)...);
  539|  11.2k|        m_has_value = false;
  540|  11.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.2k|    {
  506|  11.2k|        return m_unexpected;
  507|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  11.2k|    {
  514|  11.2k|        return std::move(m_unexpected);
  515|  11.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1846|  11.2k|    {
 1847|  11.2k|        return &value();
 1848|  11.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  11.2k|    {
 1801|  11.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.2k|        return this->get_value();
 1803|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  459|  11.2k|        : m_value(T{}), m_has_value(true)
  460|  11.2k|    {
  461|  11.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.1k, False: 48]
  |  |  ------------------
  ------------------
 9947|  11.1k|        out = unexpected(in.error());
 9948|  11.1k|    }
 9949|     48|    else {
 9950|     48|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|     48|    static_cast<    \
  |  | 1084|     48|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|     48|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  11.1k|        : base(unexpect, std::move(e.error())),
 1648|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.1k|    {
 1650|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  11.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.1k|          m_has_value(false)
  484|  11.1k|    {
  485|  11.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.1k|    {
 1348|  11.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1588|  11.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  934|  11.1k|    {
  935|  11.1k|        assign_common(std::move(other));
  936|  11.1k|        return *this;
  937|  11.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  11.1k|    {
  982|  11.1k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.1k, False: 0]
  ------------------
  983|  11.1k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.1k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.1k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  33.6k|    {
  523|  33.6k|        return m_has_value;
  524|  33.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.2k|    {
  489|  11.2k|        return m_value;
  490|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  11.1k|    {
 1078|  11.1k|        this->destroy_value();
 1079|  11.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  11.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  11.1k|    {
  537|  11.1k|        scn::detail::construct_at(&get_unexpected(),
  538|  11.1k|                                  std::forward<Args>(args)...);
  539|  11.1k|        m_has_value = false;
  540|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.1k|    {
  506|  11.1k|        return m_unexpected;
  507|  11.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  11.1k|    {
  514|  11.1k|        return std::move(m_unexpected);
  515|  11.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EbvEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1846|  11.2k|    {
 1847|  11.2k|        return &value();
 1848|  11.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  11.2k|    {
 1801|  11.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.2k|        return this->get_value();
 1803|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  459|  11.2k|        : m_value(T{}), m_has_value(true)
  460|  11.2k|    {
  461|  11.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.2k, False: 24]
  |  |  ------------------
  ------------------
 9947|  11.2k|        out = unexpected(in.error());
 9948|  11.2k|    }
 9949|     24|    else {
 9950|     24|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|     24|    static_cast<    \
  |  | 1084|     24|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|     24|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1647|  11.2k|        : base(unexpect, std::move(e.error())),
 1648|  11.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.2k|    {
 1650|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  482|  11.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.2k|          m_has_value(false)
  484|  11.2k|    {
  485|  11.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.2k|    {
 1348|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1588|  11.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  934|  11.2k|    {
  935|  11.2k|        assign_common(std::move(other));
  936|  11.2k|        return *this;
  937|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  981|  11.2k|    {
  982|  11.2k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.2k, False: 0]
  ------------------
  983|  11.2k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.2k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.2k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  33.6k|    {
  523|  33.6k|        return m_has_value;
  524|  33.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.2k|    {
  489|  11.2k|        return m_value;
  490|  11.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1077|  11.2k|    {
 1078|  11.2k|        this->destroy_value();
 1079|  11.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  11.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  536|  11.2k|    {
  537|  11.2k|        scn::detail::construct_at(&get_unexpected(),
  538|  11.2k|                                  std::forward<Args>(args)...);
  539|  11.2k|        m_has_value = false;
  540|  11.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.2k|    {
  506|  11.2k|        return m_unexpected;
  507|  11.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  11.2k|    {
  514|  11.2k|        return std::move(m_unexpected);
  515|  11.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EPvvEES8_RT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1846|  11.2k|    {
 1847|  11.2k|        return &value();
 1848|  11.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1800|  11.2k|    {
 1801|  11.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.2k|        return this->get_value();
 1803|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|  11.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  11.2k|    {
  646|  11.2k|        construct();
  647|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  11.2k|    {
  727|  11.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  11.2k|        m_has_value = true;
  729|  11.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  428|  11.2k|{
  429|  11.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  11.2k|        T(std::forward<Args>(args)...);
  431|  11.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  34.2k|    {
  751|  34.2k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  34.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  34.2k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.6k, False: 558]
  |  |  ------------------
  ------------------
 9947|  10.6k|        out = unexpected(in.error());
 9948|  10.6k|    }
 9949|    558|    else {
 9950|    558|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    558|    static_cast<    \
  |  | 1084|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    558|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  10.6k|        : base(unexpect, std::move(e.error())),
 1648|  10.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  10.6k|    {
 1650|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  10.6k|        : m_has_value(false)
  670|  10.6k|    {
  671|  10.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  10.6k|    {
  734|  10.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  10.6k|                                  std::forward<Args>(args)...);
  736|  10.6k|        m_has_value = false;
  737|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  53.4k|    {
  763|  53.4k|        return reinterpret_cast<unexpected<E>*>(
  764|  53.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  53.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  53.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  10.6k|    {
 1348|  10.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  10.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  10.6k|    {
  935|  10.6k|        assign_common(std::move(other));
  936|  10.6k|        return *this;
  937|  10.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  10.6k|    {
  982|  10.6k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 10.6k, False: 0]
  ------------------
  983|  10.6k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 10.6k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  10.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  10.6k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  55.0k|    {
  720|  55.0k|        return m_has_value;
  721|  55.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  11.7k|    {
  686|  11.7k|        return *value_ptr();
  687|  11.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  10.6k|    {
 1078|  10.6k|        this->destroy_value();
 1079|  10.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  11.2k|    {
  741|  11.2k|        scn::detail::destroy_at(value_ptr());
  742|  11.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  434|  11.2k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  11.2k|    else {
  441|  11.2k|        p->~T();
  442|  11.2k|    }
  443|  11.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6782|  11.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  10.6k|    {
  734|  10.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  10.6k|                                  std::forward<Args>(args)...);
  736|  10.6k|        m_has_value = false;
  737|  10.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  10.6k|    {
  711|  10.6k|        return std::move(*unexpected_ptr());
  712|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  21.3k|    {
  745|  21.3k|        scn::detail::destroy_at(unexpected_ptr());
  746|  21.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1846|  11.7k|    {
 1847|  11.7k|        return &value();
 1848|  11.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  11.7k|    {
 1801|  11.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.7k|        return this->get_value();
 1803|  11.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|  21.9k|    {
  676|  21.9k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 558, False: 21.3k]
  ------------------
  677|    558|            destroy_value();
  678|    558|        }
  679|  21.3k|        else {
  680|  21.3k|            destroy_unexpected();
  681|  21.3k|        }
  682|  21.9k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|  11.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|  11.2k|    {
  646|  11.2k|        construct();
  647|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|  11.2k|    {
  727|  11.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|  11.2k|        m_has_value = true;
  729|  11.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  428|  11.2k|{
  429|  11.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  11.2k|        T(std::forward<Args>(args)...);
  431|  11.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  34.2k|    {
  751|  34.2k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  34.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  34.2k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.6k, False: 558]
  |  |  ------------------
  ------------------
 9947|  10.6k|        out = unexpected(in.error());
 9948|  10.6k|    }
 9949|    558|    else {
 9950|    558|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    558|    static_cast<    \
  |  | 1084|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    558|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  10.6k|        : base(unexpect, std::move(e.error())),
 1648|  10.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  10.6k|    {
 1650|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  10.6k|        : m_has_value(false)
  670|  10.6k|    {
  671|  10.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  10.6k|    {
  734|  10.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  10.6k|                                  std::forward<Args>(args)...);
  736|  10.6k|        m_has_value = false;
  737|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  53.4k|    {
  763|  53.4k|        return reinterpret_cast<unexpected<E>*>(
  764|  53.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  53.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  53.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  10.6k|    {
 1348|  10.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  10.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  10.6k|    {
  935|  10.6k|        assign_common(std::move(other));
  936|  10.6k|        return *this;
  937|  10.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  10.6k|    {
  982|  10.6k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 10.6k, False: 0]
  ------------------
  983|  10.6k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 10.6k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  10.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  10.6k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  55.0k|    {
  720|  55.0k|        return m_has_value;
  721|  55.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  11.7k|    {
  686|  11.7k|        return *value_ptr();
  687|  11.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  10.6k|    {
 1078|  10.6k|        this->destroy_value();
 1079|  10.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|  11.2k|    {
  741|  11.2k|        scn::detail::destroy_at(value_ptr());
  742|  11.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  434|  11.2k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|  11.2k|    else {
  441|  11.2k|        p->~T();
  442|  11.2k|    }
  443|  11.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6782|  11.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  10.6k|    {
  734|  10.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  10.6k|                                  std::forward<Args>(args)...);
  736|  10.6k|        m_has_value = false;
  737|  10.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  10.6k|    {
  711|  10.6k|        return std::move(*unexpected_ptr());
  712|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  21.3k|    {
  745|  21.3k|        scn::detail::destroy_at(unexpected_ptr());
  746|  21.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  11.7k|    {
 1847|  11.7k|        return &value();
 1848|  11.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  11.7k|    {
 1801|  11.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.7k|        return this->get_value();
 1803|  11.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|  21.9k|    {
  676|  21.9k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 558, False: 21.3k]
  ------------------
  677|    558|            destroy_value();
  678|    558|        }
  679|  21.3k|        else {
  680|  21.3k|            destroy_unexpected();
  681|  21.3k|        }
  682|  21.9k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9960|  11.2k|{
 9961|  11.2k|    return scan_result_type<Source, Args...>();
 9962|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|  11.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  459|  11.2k|        : m_value(T{}), m_has_value(true)
  460|  11.2k|    {
  461|  11.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6775|  11.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6549|  11.2k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9945|  11.2k|{
 9946|  11.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.6k, False: 558]
  |  |  ------------------
  ------------------
 9947|  10.6k|        out = unexpected(in.error());
 9948|  10.6k|    }
 9949|    558|    else {
 9950|    558|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|    558|    static_cast<    \
  |  | 1084|    558|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|    558|    }
 9952|  11.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|  10.6k|        : base(unexpect, std::move(e.error())),
 1648|  10.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  10.6k|    {
 1650|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  482|  10.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  10.6k|          m_has_value(false)
  484|  10.6k|    {
  485|  10.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  10.6k|    {
 1348|  10.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1588|  10.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  934|  10.6k|    {
  935|  10.6k|        assign_common(std::move(other));
  936|  10.6k|        return *this;
  937|  10.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  981|  10.6k|    {
  982|  10.6k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 10.6k, False: 0]
  ------------------
  983|  10.6k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 10.6k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  10.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  10.6k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  33.1k|    {
  523|  33.1k|        return m_has_value;
  524|  33.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.7k|    {
  489|  11.7k|        return m_value;
  490|  11.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1077|  10.6k|    {
 1078|  10.6k|        this->destroy_value();
 1079|  10.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  10.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  536|  10.6k|    {
  537|  10.6k|        scn::detail::construct_at(&get_unexpected(),
  538|  10.6k|                                  std::forward<Args>(args)...);
  539|  10.6k|        m_has_value = false;
  540|  10.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  10.6k|    {
  506|  10.6k|        return m_unexpected;
  507|  10.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  10.6k|    {
  514|  10.6k|        return std::move(m_unexpected);
  515|  10.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8962|  11.2k|    {
 8963|  11.2k|        return m_str;
 8964|  11.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  11.2k|{
 6275|  11.2k|    detail::check_scan_arg_types<Args...>();
 6276|  11.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  11.2k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5985|  11.2k|{
 5986|  11.2k|    constexpr bool default_constructible_constraint =
 5987|  11.2k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  11.2k|    static_assert(default_constructible_constraint,
 5989|  11.2k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  11.2k|    constexpr bool destructible_constraint =
 5992|  11.2k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  11.2k|    static_assert(destructible_constraint,
 5994|  11.2k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  11.2k|    constexpr bool non_reference_constraint =
 5997|  11.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  11.2k|    static_assert(non_reference_constraint,
 5999|  11.2k|                  "Scan argument types must not be references");
 6000|       |
 6001|  11.2k|    constexpr bool movable_constraint =
 6002|  11.2k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  11.2k|    static_assert(movable_constraint,
 6004|  11.2k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  11.2k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  11.2k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  11.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6250|  11.2k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  11.2k|    {
 6252|  11.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  11.2k|    {
 6260|  11.2k|        return {detail::make_arg<
 6261|  11.2k|            kind, Context,
 6262|  11.2k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  11.2k|                                 typename Context::char_type>::value>(args)...};
 6264|  11.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE26ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 6035|  11.2k|{
 6036|  11.2k|    return make_value<Context>(value).ref_value;
 6037|  11.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5970|  11.2k|{
 5971|  11.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  11.2k|                                  needs_context_tag>) {
 5975|  11.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  11.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5772|  11.2k|    {                                                                        \
 5773|  11.2k|        return val;                                                          \
 5774|  11.2k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5939|  11.2k|{
 5940|  11.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  11.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  11.2k|    constexpr bool scannable_char =
 5944|  11.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  11.2k|    static_assert(scannable_char,
 5946|  11.2k|                  "Cannot scan an argument of an unsupported character "
 5947|  11.2k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  11.2k|    constexpr bool scannable_const =
 5950|  11.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  11.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  11.2k|    constexpr bool scannable_disabled =
 5954|  11.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  11.2k|    static_assert(scannable_disabled,
 5956|  11.2k|                  "Cannot scan an argument that has been disabled by "
 5957|  11.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  11.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  11.2k|    static_assert(
 5961|  11.2k|        scannable,
 5962|  11.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  11.2k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  11.2k|    return arg_value{arg};
 5966|  11.2k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5715|  11.2k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  11.2k|    {
 5717|  11.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  11.7k|    {
 1847|  11.7k|        return &value();
 1848|  11.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|  11.7k|    {
 1801|  11.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.7k|        return this->get_value();
 1803|  11.7k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6558|  11.2k|    {
 6559|  11.2k|        return m_values;
 6560|  11.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  11.2k|        : basic_scan_args(store.desc, store.args.data())
 6301|  11.2k|    {
 6302|  11.2k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|  11.2k|        : m_str(r.str)
 8958|  11.2k|    {
 8959|  11.2k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3785|   349k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3786|   349k|    {
 3787|   349k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|   349k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   349k|    }
_ZNK3scn2v410scan_error4codeEv:
 3797|  3.52k|    {
 3798|  3.52k|        return m_code;
 3799|  3.52k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|  44.3k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|  44.3k|    else {
 4037|  44.3k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|  44.3k|    }
 4039|  44.3k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  604|  2.03M|    {
  605|  2.03M|        return m_has_value;
  606|  2.03M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  587|   167k|    {
  588|   167k|        return m_unexpected;
  589|   167k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1777|   163k|    {
 1778|   163k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   163k|        return this->get_unexpected().error();
 1780|   163k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 7104|  4.92k|    {
 7105|  4.92k|        return m_size;
 7106|  4.92k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 7147|  4.95k|    {
 7148|  4.95k|        SCN_GCC_COMPAT_PUSH
 7149|  4.95k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 7150|  4.95k|        switch (type) {
 7151|  2.25k|            case presentation_type::none:
  ------------------
  |  Branch (7151:13): [True: 2.25k, False: 2.70k]
  ------------------
 7152|  2.25k|                return 10;
 7153|    112|            case presentation_type::int_generic:
  ------------------
  |  Branch (7153:13): [True: 112, False: 4.84k]
  ------------------
 7154|    112|                return 0;
 7155|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (7155:13): [True: 0, False: 4.95k]
  ------------------
 7156|      0|                return arbitrary_base;
 7157|       |
 7158|    106|            case presentation_type::int_binary:
  ------------------
  |  Branch (7158:13): [True: 106, False: 4.85k]
  ------------------
 7159|    106|                return 2;
 7160|     86|            case presentation_type::int_octal:
  ------------------
  |  Branch (7160:13): [True: 86, False: 4.87k]
  ------------------
 7161|     86|                return 8;
 7162|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (7162:13): [True: 40, False: 4.91k]
  ------------------
 7163|     98|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (7163:13): [True: 58, False: 4.89k]
  ------------------
 7164|     98|                return 10;
 7165|  2.30k|            case presentation_type::int_hex:
  ------------------
  |  Branch (7165:13): [True: 2.30k, False: 2.65k]
  ------------------
 7166|  2.30k|                return 16;
 7167|       |
 7168|      0|            default:
  ------------------
  |  Branch (7168:13): [True: 0, False: 4.95k]
  ------------------
 7169|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7170|      0|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7171|  4.95k|        }
 7172|  4.95k|        SCN_GCC_COMPAT_POP
 7173|  4.95k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7185|  38.6k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7188|  7.73k|    {
 7189|  7.73k|        m_specs.align = align;
 7190|  7.73k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7208|  6.82k|    {
 7209|  6.82k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7209:13): [True: 0, False: 6.82k]
  |  Branch (7209:39): [True: 0, False: 0]
  ------------------
 7210|       |            // clang-format off
 7211|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7212|       |            // clang-format on
 7213|      0|        }
 7214|       |
 7215|  6.82k|        m_specs.width = width;
 7216|  6.82k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7218|  14.0k|    {
 7219|  14.0k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7219:13): [True: 68, False: 13.9k]
  ------------------
 7220|       |            // clang-format off
 7221|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7222|       |            // clang-format on
 7223|     68|        }
 7224|       |
 7225|  13.9k|        m_specs.precision = prec;
 7226|  13.9k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7229|  35.8k|    {
 7230|  35.8k|        m_specs.type = type;
 7231|  35.8k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7234|  1.06M|    {
 7235|  1.06M|        const auto cp_value = static_cast<unsigned>(cp);
 7236|  1.06M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  | 1013|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 883k, False: 183k]
  |  |  ------------------
  ------------------
 7237|   883k|            m_specs.charset_literals[cp_value / 8] |=
 7238|   883k|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7239|   883k|        }
 7240|   183k|        else {
 7241|   183k|            m_specs.charset_has_nonascii = true;
 7242|   183k|        }
 7243|  1.06M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7246|  11.7k|    {
 7247|  11.7k|        const auto begin_value = static_cast<unsigned>(begin);
 7248|  11.7k|        const auto end_value = static_cast<unsigned>(end);
 7249|  11.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1079|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7250|       |
 7251|  11.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  | 1013|  11.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 5.87k, False: 5.88k]
  |  |  ------------------
  ------------------
 7252|       |            // No need to bit-twiddle with a mask, because with the
 7253|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7254|  5.87k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1033|  5.87k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7255|   424k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7255:40): [True: 418k, False: 5.87k]
  ------------------
 7256|   418k|                m_specs.charset_literals[v / 8] |=
 7257|   418k|                    static_cast<unsigned char>(1ul << (v % 8));
 7258|   418k|            }
 7259|  5.87k|        }
 7260|  5.88k|        else {
 7261|  5.88k|            m_specs.charset_has_nonascii = true;
 7262|  5.88k|        }
 7263|  11.7k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7266|  4.12k|    {
 7267|  4.12k|        m_specs.charset_is_inverted = true;
 7268|  4.12k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7286|  1.69k|    {
 7287|  1.69k|        m_specs.regexp_flags = flags;
 7288|  1.69k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7293|  9.97k|    {
 7294|  9.97k|        SCN_UNLIKELY_ATTR
 7295|  9.97k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7296|  9.97k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7304|  1.12M|    {
 7305|  1.12M|        return m_error;
 7306|  1.12M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3971|   194k|{
 3972|   194k|    return unexpected(scan_error{c, m});
 3973|   194k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4224|  96.3k|{
 4225|  96.3k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4226|       |
 4227|  96.3k|    const auto is_trailing_code_unit = [](char ch) {
 4228|  96.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4229|  96.3k|    };
 4230|       |
 4231|  96.3k|    if (input.size() == 1) {
  ------------------
  |  Branch (4231:9): [True: 81.8k, False: 14.5k]
  ------------------
 4232|  81.8k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  | 1079|  81.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4233|  81.8k|        return static_cast<char32_t>(input[0]);
 4234|  81.8k|    }
 4235|       |
 4236|  14.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (4236:9): [True: 13.6k, False: 904]
  ------------------
 4237|  13.6k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  | 1079|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4238|  13.6k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1079|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4239|       |
 4240|  13.6k|        char32_t cp{};
 4241|  13.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4242|  13.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4243|  13.6k|        return cp;
 4244|  13.6k|    }
 4245|       |
 4246|    904|    if (input.size() == 3) {
  ------------------
  |  Branch (4246:9): [True: 782, False: 122]
  ------------------
 4247|    782|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  | 1079|    782|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    782|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4248|    782|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1079|    782|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    782|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|    782|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1079|    782|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    782|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4250|       |
 4251|    782|        char32_t cp{};
 4252|    782|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4253|    782|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4254|    782|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4255|    782|        return cp;
 4256|    782|    }
 4257|       |
 4258|    122|    if (input.size() == 4) {
  ------------------
  |  Branch (4258:9): [True: 122, False: 0]
  ------------------
 4259|    122|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  | 1079|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4260|    122|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  | 1079|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4261|    122|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1079|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4262|    122|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1079|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4263|    122|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  | 1079|    122|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    122|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4264|       |
 4265|    122|        char32_t cp{};
 4266|    122|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4267|    122|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4268|    122|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4269|    122|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4270|    122|        return cp;
 4271|    122|    }
 4272|       |
 4273|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4274|       |    // gcc 7 thinks we'll get here, even when we won't
 4275|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|      0|#endif
 4277|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4278|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|   207M|{
 4364|       |    // Pattern_White_Space property
 4365|   207M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 162k, False: 207M]
  |  Branch (4365:27): [True: 11.6k, False: 150k]
  ------------------
 4366|   207M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 8.28k, False: 207M]
  ------------------
 4367|   207M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 8.70k, False: 207M]
  ------------------
 4368|   207M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 4.62k, False: 207M]
  ------------------
 4369|   207M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 4.32k, False: 207M]
  ------------------
 4370|   207M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 4.25k, False: 207M]
  ------------------
 4371|   207M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 438, False: 207M]
  ------------------
 4372|   207M|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 7033|  1.60k|{
 7034|  1.60k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 7035|  1.60k|                                    static_cast<unsigned>(b));
 7036|  1.60k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 7038|    222|{
 7039|    222|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 7040|    222|                                    static_cast<unsigned>(b));
 7041|    222|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 7053|    222|{
 7054|    222|    return a = a | b;
 7055|    222|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7989|  1.14k|{
 7990|  1.14k|    switch (type) {
 7991|    106|        case arg_type::none_type:
  ------------------
  |  Branch (7991:9): [True: 106, False: 1.03k]
  ------------------
 7992|    106|            return arg_type_category::none;
 7993|       |
 7994|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7994:9): [True: 0, False: 1.14k]
  ------------------
 7995|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7995:9): [True: 0, False: 1.14k]
  ------------------
 7996|    116|        case arg_type::int_type:
  ------------------
  |  Branch (7996:9): [True: 116, False: 1.02k]
  ------------------
 7997|    116|        case arg_type::long_type:
  ------------------
  |  Branch (7997:9): [True: 0, False: 1.14k]
  ------------------
 7998|    116|        case arg_type::llong_type:
  ------------------
  |  Branch (7998:9): [True: 0, False: 1.14k]
  ------------------
 7999|    116|        case arg_type::int128_type:
  ------------------
  |  Branch (7999:9): [True: 0, False: 1.14k]
  ------------------
 8000|    116|            return arg_type_category::integer;
 8001|       |
 8002|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (8002:9): [True: 0, False: 1.14k]
  ------------------
 8003|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (8003:9): [True: 0, False: 1.14k]
  ------------------
 8004|    116|        case arg_type::uint_type:
  ------------------
  |  Branch (8004:9): [True: 116, False: 1.02k]
  ------------------
 8005|    116|        case arg_type::ulong_type:
  ------------------
  |  Branch (8005:9): [True: 0, False: 1.14k]
  ------------------
 8006|    116|        case arg_type::ullong_type:
  ------------------
  |  Branch (8006:9): [True: 0, False: 1.14k]
  ------------------
 8007|    116|        case arg_type::uint128_type:
  ------------------
  |  Branch (8007:9): [True: 0, False: 1.14k]
  ------------------
 8008|    116|            return arg_type_category::unsigned_integer;
 8009|       |
 8010|    114|        case arg_type::pointer_type:
  ------------------
  |  Branch (8010:9): [True: 114, False: 1.02k]
  ------------------
 8011|    114|            return arg_type_category::pointer;
 8012|    116|        case arg_type::bool_type:
  ------------------
  |  Branch (8012:9): [True: 116, False: 1.02k]
  ------------------
 8013|    116|            return arg_type_category::boolean;
 8014|     50|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (8014:9): [True: 50, False: 1.09k]
  ------------------
 8015|    114|        case arg_type::wide_character_type:
  ------------------
  |  Branch (8015:9): [True: 64, False: 1.07k]
  ------------------
 8016|    114|        case arg_type::code_point_type:
  ------------------
  |  Branch (8016:9): [True: 0, False: 1.14k]
  ------------------
 8017|    114|            return arg_type_category::character;
 8018|       |
 8019|      0|        case arg_type::float_type:
  ------------------
  |  Branch (8019:9): [True: 0, False: 1.14k]
  ------------------
 8020|    116|        case arg_type::double_type:
  ------------------
  |  Branch (8020:9): [True: 116, False: 1.02k]
  ------------------
 8021|    116|        case arg_type::ldouble_type:
  ------------------
  |  Branch (8021:9): [True: 0, False: 1.14k]
  ------------------
 8022|    116|        case arg_type::float16_type:
  ------------------
  |  Branch (8022:9): [True: 0, False: 1.14k]
  ------------------
 8023|    116|        case arg_type::float32_type:
  ------------------
  |  Branch (8023:9): [True: 0, False: 1.14k]
  ------------------
 8024|    116|        case arg_type::float64_type:
  ------------------
  |  Branch (8024:9): [True: 0, False: 1.14k]
  ------------------
 8025|    116|        case arg_type::float128_type:
  ------------------
  |  Branch (8025:9): [True: 0, False: 1.14k]
  ------------------
 8026|    116|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (8026:9): [True: 0, False: 1.14k]
  ------------------
 8027|    116|            return arg_type_category::floating;
 8028|       |
 8029|    114|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (8029:9): [True: 114, False: 1.02k]
  ------------------
 8030|    228|        case arg_type::wide_string_type:
  ------------------
  |  Branch (8030:9): [True: 114, False: 1.02k]
  ------------------
 8031|    342|        case arg_type::string_view_type:
  ------------------
  |  Branch (8031:9): [True: 114, False: 1.02k]
  ------------------
 8032|    342|            return arg_type_category::string;
 8033|       |
 8034|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (8034:9): [True: 0, False: 1.14k]
  ------------------
 8035|      0|            return arg_type_category::custom;
 8036|       |
 8037|      0|            SCN_CLANG_PUSH
 8038|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8039|      0|        default:
  ------------------
  |  Branch (8039:9): [True: 0, False: 1.14k]
  ------------------
 8040|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8041|  1.14k|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8042|  1.14k|            SCN_CLANG_POP
 8043|  1.14k|    }
 8044|       |
 8045|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8046|  1.14k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1787|  4.53k|    {
 1788|  4.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  4.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  4.53k|        return std::move(this->get_unexpected().error());
 1790|  4.53k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8081|  7.36k|{
 8082|  7.36k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  | 1014|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.65k, False: 2.71k]
  |  |  ------------------
  ------------------
 8083|  4.65k|        return handler.on_error("Invalid type specifier for integer type");
 8084|  4.65k|    }
 8085|  2.71k|    if (specs.localized) {
  ------------------
  |  Branch (8085:9): [True: 168, False: 2.54k]
  ------------------
 8086|    168|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  | 1014|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16, False: 152]
  |  |  ------------------
  ------------------
 8087|       |            // clang-format off
 8088|     16|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 8089|       |            // clang-format on
 8090|     16|            return;
 8091|     16|        }
 8092|    152|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  | 1014|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 152]
  |  |  ------------------
  ------------------
 8093|       |            // clang-format off
 8094|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 8095|       |            // clang-format on
 8096|      0|        }
 8097|    152|    }
 8098|  2.71k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2125|   151k|{
 2126|   151k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   151k|}
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|     98|    {
 3073|     98|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|     98|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3106|     98|    {
 3107|     98|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|     98|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3129|     98|    {
 3130|     98|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3131|     98|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3138|     98|    {
 3139|     98|        return fn::impl(std::forward<T>(t));
 3140|     98|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8125|  3.68k|{
 8126|  3.68k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8126:9): [True: 2.51k, False: 1.16k]
  ------------------
 8127|  3.68k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8127:10): [True: 190, False: 2.32k]
  ------------------
 8128|  2.51k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8128:10): [True: 2.13k, False: 194]
  ------------------
 8129|  2.32k|        SCN_UNLIKELY_ATTR
 8130|  2.32k|        return handler.on_error("Invalid type specifier for float type");
 8131|  2.32k|    }
 8132|  3.68k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1771|  1.86M|    {
 1772|  1.86M|        return has_value();
 1773|  1.86M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8137|  10.7k|{
 8138|  10.7k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (8138:9): [True: 3.35k, False: 7.39k]
  ------------------
 8139|  10.7k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (8139:9): [True: 1.01k, False: 6.38k]
  ------------------
 8140|  10.7k|        specs.type == presentation_type::string_set
  ------------------
  |  Branch (8140:9): [True: 4.48k, False: 1.89k]
  ------------------
 8141|  10.7k|#if !SCN_DISABLE_REGEX
 8142|  10.7k|        || specs.type == presentation_type::regex ||
  ------------------
  |  Branch (8142:12): [True: 102, False: 1.79k]
  ------------------
 8143|  10.7k|        specs.type == presentation_type::regex_escaped
  ------------------
  |  Branch (8143:9): [True: 438, False: 1.35k]
  ------------------
 8144|  10.7k|#endif
 8145|  10.7k|    ) {
 8146|  9.39k|        return;
 8147|  9.39k|    }
 8148|  1.35k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (8148:9): [True: 276, False: 1.08k]
  ------------------
 8149|    276|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  | 1014|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 12, False: 264]
  |  |  ------------------
  ------------------
 8150|       |            // clang-format off
 8151|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 8152|       |            // clang-format on
 8153|     12|        }
 8154|    264|        return;
 8155|    276|    }
 8156|  1.08k|    SCN_UNLIKELY_ATTR
 8157|  1.08k|    handler.on_error("Invalid type specifier for string");
 8158|  1.08k|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8174|  3.68k|{
 8175|  3.68k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8175:9): [True: 2.51k, False: 1.16k]
  ------------------
 8176|  3.68k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (8176:9): [True: 2.16k, False: 350]
  ------------------
 8177|  3.68k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (8177:9): [True: 2.12k, False: 46]
  ------------------
 8178|  3.68k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (8178:9): [True: 2.09k, False: 26]
  ------------------
 8179|  3.68k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (8179:9): [True: 2.05k, False: 46]
  ------------------
 8180|  3.68k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (8180:9): [True: 2.02k, False: 22]
  ------------------
 8181|  3.68k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (8181:9): [True: 1.99k, False: 34]
  ------------------
 8182|  3.68k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (8182:9): [True: 1.97k, False: 16]
  ------------------
 8183|  1.97k|        SCN_UNLIKELY_ATTR
 8184|  1.97k|        return handler.on_error("Invalid type specifier for boolean");
 8185|  1.97k|    }
 8186|  3.68k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8103|  3.58k|{
 8104|  3.58k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (8104:9): [True: 2.31k, False: 1.27k]
  ------------------
 8105|  3.58k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (8105:9): [True: 0, False: 1.27k]
  ------------------
 8106|  2.31k|        SCN_UNLIKELY_ATTR
 8107|  2.31k|        return handler.on_error("Invalid type specifier for character type");
 8108|  2.31k|    }
 8109|  3.58k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8163|  3.58k|{
 8164|  3.58k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8164:9): [True: 2.46k, False: 1.11k]
  ------------------
 8165|  3.58k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (8165:9): [True: 2.45k, False: 16]
  ------------------
 8166|  2.45k|        SCN_UNLIKELY_ATTR
 8167|  2.45k|        return handler.on_error("Invalid type specifier for pointer");
 8168|  2.45k|    }
 8169|  3.58k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   207M|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   207M|    else {
 4037|   207M|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   207M|    }
 4039|   207M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3512|  1.11M|    {
 3513|  1.11M|        return m_iterator;
 3514|  1.11M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3517|  1.07M|    {
 3518|  1.07M|        return m_sentinel;
 3519|  1.07M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3512|   591k|    {
 3513|   591k|        return m_iterator;
 3514|   591k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3517|   414M|    {
 3518|   414M|        return m_sentinel;
 3519|   414M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8978|  82.7k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|    354|{
 1382|    354|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|    354|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  397|  3.55k|    {
  398|  3.55k|        return m_unexpected;
  399|  3.55k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  380|   194k|        : m_unexpected(std::forward<Err>(e))
  381|   194k|    {
  382|   194k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   194k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   194k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   150k|        : base(unexpect, std::move(e.error())),
 1648|   150k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   150k|    {
 1650|   150k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  482|   150k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   150k|          m_has_value(false)
  484|   150k|    {
  485|   150k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   155k|    {
 1348|   155k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  32.0k|        : base(unexpect, std::move(e.error())),
 1648|  32.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  32.0k|    {
 1650|  32.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  32.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  32.9k|          m_has_value(false)
  484|  32.9k|    {
  485|  32.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  55.7k|    {
 1348|  55.7k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  21.4k|        : base(std::in_place, std::forward<U>(val)),
 1602|  21.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  21.4k|    {
 1604|  21.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  21.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  21.4k|    {
  475|  21.4k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1771|  56.6k|    {
 1772|  56.6k|        return has_value();
 1773|  56.6k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  522|   110k|    {
  523|   110k|        return m_has_value;
  524|   110k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1777|  32.0k|    {
 1778|  32.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  32.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  32.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  32.0k|        return this->get_unexpected().error();
 1780|  32.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  32.0k|    {
  506|  32.0k|        return m_unexpected;
  507|  32.0k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  14.8k|    {
 1837|  14.8k|        return std::move(value());
 1838|  14.8k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  21.8k|    {
 1801|  21.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  21.8k|        return this->get_value();
 1803|  21.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  488|  21.8k|    {
  489|  21.8k|        return m_value;
  490|  21.8k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  18.8k|        : base(unexpect, std::move(e.error())),
 1648|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  18.8k|    {
 1650|  18.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  19.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  19.7k|          m_has_value(false)
  484|  19.7k|    {
  485|  19.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  40.1k|    {
 1348|  40.1k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  19.7k|        : base(std::in_place, std::forward<U>(val)),
 1602|  19.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  19.7k|    {
 1604|  19.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  19.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  19.7k|    {
  475|  19.7k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1771|  41.0k|    {
 1772|  41.0k|        return has_value();
 1773|  41.0k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  522|  79.3k|    {
  523|  79.3k|        return m_has_value;
  524|  79.3k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1777|  18.8k|    {
 1778|  18.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  18.8k|        return this->get_unexpected().error();
 1780|  18.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  18.8k|    {
  506|  18.8k|        return m_unexpected;
  507|  18.8k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  14.4k|    {
 1837|  14.4k|        return std::move(value());
 1838|  14.4k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  19.4k|    {
 1801|  19.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  19.4k|        return this->get_value();
 1803|  19.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  488|  19.4k|    {
  489|  19.4k|        return m_value;
  490|  19.4k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  8.45k|    {
 2011|  8.45k|        return detail::transform_error_impl(std::move(*this),
 2012|  8.45k|                                            std::forward<F>(f));
 2013|  8.45k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  8.45k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  8.45k|    else {
 1504|  8.45k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  8.45k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  8.45k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 8.45k, False: 0]
  |  |  ------------------
  ------------------
 1506|  8.45k|                   ? result(*std::forward<Exp>(exp))
 1507|  8.45k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|  8.45k|    }
 1511|  8.45k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  95.9k|    {
  523|  95.9k|        return m_has_value;
  524|  95.9k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  10.4k|    {
 1837|  10.4k|        return std::move(value());
 1838|  10.4k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  45.0k|    {
 1801|  45.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  45.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  45.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  45.0k|        return this->get_value();
 1803|  45.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  45.0k|    {
  489|  45.0k|        return m_value;
  490|  45.0k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1787|    102|    {
 1788|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    102|        return std::move(this->get_unexpected().error());
 1790|    102|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|    102|    {
  506|    102|        return m_unexpected;
  507|    102|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|    952|        : base(unexpect, std::forward<Args>(args)...),
 1658|    952|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    952|    {
 1660|    952|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 9031|  5.79k|    {
 9032|  5.79k|        return m_args;
 9033|  5.79k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 9036|  27.2k|    {
 9037|  27.2k|        return m_locale;
 9038|  27.2k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 9042|  50.5k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|  50.5k|    static_cast<    \
  |  | 1084|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|  50.5k|    static_cast<    \
  |  | 1084|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|  50.5k|    {
 9044|  50.5k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  8.53k|    {
 3032|  8.53k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  8.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  8.53k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  8.53k|    {
 3013|  8.53k|        return t.data();
 3014|  8.53k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 9031|  4.64k|    {
 9032|  4.64k|        return m_args;
 9033|  4.64k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 9036|  16.0k|    {
 9037|  16.0k|        return m_locale;
 9038|  16.0k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 9042|   101k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   101k|    static_cast<    \
  |  | 1084|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   101k|    static_cast<    \
  |  | 1084|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   101k|    {
 9044|   101k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   361k|        : base(unexpect, std::move(e.error())),
 1648|   361k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   361k|    {
 1650|   361k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  581|   361k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  582|   361k|          m_has_value(false)
  583|   361k|    {
  584|   361k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   361k|    {
 1348|   361k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1583|   381k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  561|   381k|        : m_deferred_init(), m_has_value(true)
  562|   381k|    {
  563|   381k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 7110|  1.17k|    {
 7111|  1.17k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1079|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7112|  1.17k|        CharT r{};
 7113|  1.17k|        std::memcpy(&r, m_data, m_size);
 7114|  1.17k|        return r;
 7115|  1.17k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  380|  1.73k|        : m_unexpected(std::forward<Err>(e))
  381|  1.73k|    {
  382|  1.73k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  1.73k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  1.73k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  2.09k|        : m_unexpected(std::forward<Args>(args)...)
  392|  2.09k|    {
  393|  2.09k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  2.09k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7119|  1.65k|    {
 7120|  1.65k|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 7121|  1.65k|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3138|    118|    {
 3139|    118|        return fn::impl(std::forward<T>(t));
 3140|    118|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3129|    118|    {
 3130|    118|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3131|    118|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|    118|    {
 3107|    118|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|    118|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|    118|    {
 3073|    118|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|    118|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|    118|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  380|    368|        : m_unexpected(std::forward<Err>(e))
  381|    368|    {
  382|    368|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|    368|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|    368|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  380|     22|        : m_unexpected(std::forward<Err>(e))
  381|     22|    {
  382|     22|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|     22|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  397|  21.2k|    {
  398|  21.2k|        return m_unexpected;
  399|  21.2k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  4.63k|        : m_unexpected(std::forward<Args>(args)...)
  392|  4.63k|    {
  393|  4.63k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  4.63k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  4.63k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  380|  30.8k|        : m_unexpected(std::forward<Err>(e))
  381|  30.8k|    {
  382|  30.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  30.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  30.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  397|  30.8k|    {
  398|  30.8k|        return m_unexpected;
  399|  30.8k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  391|  30.8k|        : m_unexpected(std::forward<Args>(args)...)
  392|  30.8k|    {
  393|  30.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  30.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  30.8k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  1.08k|{
 1382|  1.08k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  1.08k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  380|  3.52k|        : m_unexpected(std::forward<Err>(e))
  381|  3.52k|    {
  382|  3.52k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  3.52k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  3.52k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1381|  1.52k|{
 1382|  1.52k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  1.52k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3138|     16|    {
 3139|     16|        return fn::impl(std::forward<T>(t));
 3140|     16|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3129|     16|    {
 3130|     16|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3131|     16|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3106|     16|    {
 3107|     16|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|     16|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3072|     16|    {
 3073|     16|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|     16|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   145k|{
  341|   145k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   145k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|   122k|    {
 3530|   122k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|   122k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|    530|        : base(unexpect, std::move(e.error())),
 1648|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    530|    {
 1650|    530|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    530|          m_has_value(false)
  484|    530|    {
  485|    530|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  50.8k|    {
 1348|  50.8k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  50.3k|        : base(std::in_place, std::forward<U>(val)),
 1602|  50.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  50.3k|    {
 1604|  50.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  50.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  50.3k|    {
  475|  50.3k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1771|  40.3k|    {
 1772|  40.3k|        return has_value();
 1773|  40.3k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|  34.5k|    {
 1827|  34.5k|        return value();
 1828|  34.5k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1601|  10.5k|        : base(std::in_place, std::forward<U>(val)),
 1602|  10.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  10.5k|    {
 1604|  10.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|  10.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  10.5k|    {
  475|  10.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.0k|    {
 1348|  11.0k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    514|        : base(unexpect, std::move(e.error())),
 1648|    514|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    514|    {
 1650|    514|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|    514|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    514|          m_has_value(false)
  484|    514|    {
  485|    514|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1771|  7.74k|    {
 1772|  7.74k|        return has_value();
 1773|  7.74k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  522|  20.1k|    {
  523|  20.1k|        return m_has_value;
  524|  20.1k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1826|  5.84k|    {
 1827|  5.84k|        return value();
 1828|  5.84k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  8.68k|    {
 1801|  8.68k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  8.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  8.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  8.68k|        return this->get_value();
 1803|  8.68k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  488|  8.68k|    {
  489|  8.68k|        return m_value;
  490|  8.68k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1647|    238|        : base(unexpect, std::move(e.error())),
 1648|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    238|    {
 1650|    238|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    238|          m_has_value(false)
  484|    238|    {
  485|    238|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.01k|    {
 1348|  5.01k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1601|  4.77k|        : base(std::in_place, std::forward<U>(val)),
 1602|  4.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  4.77k|    {
 1604|  4.77k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  473|  4.77k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  4.77k|    {
  475|  4.77k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 2010|    906|    {
 2011|    906|        return detail::transform_error_impl(std::move(*this),
 2012|    906|                                            std::forward<F>(f));
 2013|    906|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1493|    906|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    906|    else {
 1504|    906|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    906|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    906|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 906, False: 0]
  |  |  ------------------
  ------------------
 1506|    906|                   ? result(*std::forward<Exp>(exp))
 1507|    906|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|    906|    }
 1511|    906|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  2.84k|    {
 1837|  2.84k|        return std::move(value());
 1838|  2.84k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1601|  2.66k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.66k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.66k|    {
 1604|  2.66k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|  2.66k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.66k|    {
  475|  2.66k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  9.88k|    {
 1348|  9.88k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1787|    444|    {
 1788|    444|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    444|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    444|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    444|        return std::move(this->get_unexpected().error());
 1790|    444|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  505|    444|    {
  506|    444|        return m_unexpected;
  507|    444|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1657|  1.76k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  1.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  1.76k|    {
 1660|  1.76k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  6.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  6.41k|          m_has_value(false)
  484|  6.41k|    {
  485|  6.41k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  2.18k|    {
 2901|  2.18k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  2.18k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  2.18k|    {
 2882|  2.18k|        return decay_copy(t.begin());
 2883|  2.18k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2125|  4.73k|{
 2126|  4.73k|    return SCN_FWD(t);
  ------------------
  |  | 1085|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  4.73k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3512|  2.18k|    {
 3513|  2.18k|        return m_iterator;
 3514|  2.18k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  2.18k|    {
 2958|  2.18k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  2.18k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  2.18k|    {
 2940|  2.18k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.18k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3517|  2.18k|    {
 3518|  2.18k|        return m_sentinel;
 3519|  2.18k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3496|  2.18k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  2.18k|    static_cast<    \
  |  | 1084|  2.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  2.18k|    static_cast<    \
  |  | 1084|  2.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  2.18k|    {
 3498|  2.18k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1771|  5.01k|    {
 1772|  5.01k|        return has_value();
 1773|  5.01k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  10.0k|    {
  523|  10.0k|        return m_has_value;
  524|  10.0k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1777|    238|    {
 1778|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    238|        return this->get_unexpected().error();
 1780|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    238|    {
  506|    238|        return m_unexpected;
  507|    238|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|  4.77k|    {
 1837|  4.77k|        return std::move(value());
 1838|  4.77k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|  4.77k|    {
 1801|  4.77k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  4.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  4.77k|        return this->get_value();
 1803|  4.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  488|  4.77k|    {
  489|  4.77k|        return m_value;
  490|  4.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  9.17k|    {
 1348|  9.17k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  9.17k|        : base(std::in_place, std::forward<U>(val)),
 1602|  9.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  9.17k|    {
 1604|  9.17k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|  9.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  9.17k|    {
  475|  9.17k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1771|  9.17k|    {
 1772|  9.17k|        return has_value();
 1773|  9.17k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  522|  18.3k|    {
  523|  18.3k|        return m_has_value;
  524|  18.3k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  9.17k|    {
 1837|  9.17k|        return std::move(value());
 1838|  9.17k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  9.17k|    {
 1801|  9.17k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  9.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  9.17k|        return this->get_value();
 1803|  9.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  488|  9.17k|    {
  489|  9.17k|        return m_value;
  490|  9.17k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  4.64k|        : base(unexpect, std::move(e.error())),
 1648|  4.64k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  4.64k|    {
 1650|  4.64k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    810|        : base(unexpect, std::move(e.error())),
 1648|    810|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    810|    {
 1650|    810|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  1.25k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.25k|          m_has_value(false)
  484|  1.25k|    {
  485|  1.25k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  8.74k|    {
 1348|  8.74k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  5.55k|        : base(unexpect, std::move(e.error())),
 1648|  5.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.55k|    {
 1650|  5.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  5.55k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.55k|          m_has_value(false)
  484|  5.55k|    {
  485|  5.55k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1771|  8.07k|    {
 1772|  8.07k|        return has_value();
 1773|  8.07k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  522|  15.7k|    {
  523|  15.7k|        return m_has_value;
  524|  15.7k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1777|  2.96k|    {
 1778|  2.96k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.96k|        return this->get_unexpected().error();
 1780|  2.96k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  505|  4.00k|    {
  506|  4.00k|        return m_unexpected;
  507|  4.00k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1601|  1.42k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.42k|    {
 1604|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  473|  1.42k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.42k|    {
  475|  1.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.42k|    {
 1348|  1.42k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  1.93k|    {
 1801|  1.93k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.93k|        return this->get_value();
 1803|  1.93k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  488|  1.93k|    {
  489|  1.93k|        return m_value;
  490|  1.93k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1771|  1.06k|    {
 1772|  1.06k|        return has_value();
 1773|  1.06k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  522|  2.85k|    {
  523|  2.85k|        return m_has_value;
  524|  2.85k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.06k|    {
 1348|  1.06k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1836|  1.42k|    {
 1837|  1.42k|        return std::move(value());
 1838|  1.42k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|  1.42k|    {
 1801|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.42k|        return this->get_value();
 1803|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  488|  1.42k|    {
  489|  1.42k|        return m_value;
  490|  1.42k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3517|  86.1k|    {
 3518|  86.1k|        return m_sentinel;
 3519|  86.1k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 2010|  2.37k|    {
 2011|  2.37k|        return detail::transform_error_impl(std::move(*this),
 2012|  2.37k|                                            std::forward<F>(f));
 2013|  2.37k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1493|  2.37k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  2.37k|    else {
 1504|  2.37k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  2.37k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  2.37k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.93k, False: 444]
  |  |  ------------------
  ------------------
 1506|  2.37k|                   ? result(*std::forward<Exp>(exp))
 1507|  2.37k|                   : result(unexpect,
 1508|    444|                            trivial_invoke(std::forward<F>(f),
 1509|    444|                                           std::forward<Exp>(exp).error()));
 1510|  2.37k|    }
 1511|  2.37k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1601|  1.93k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.93k|    {
 1604|  1.93k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|  1.93k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.93k|    {
  475|  1.93k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1657|    444|        : base(unexpect, std::forward<Args>(args)...),
 1658|    444|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    444|    {
 1660|    444|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  1.93k|    {
 1837|  1.93k|        return std::move(value());
 1838|  1.93k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3512|  95.4k|    {
 3513|  95.4k|        return m_iterator;
 3514|  95.4k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1601|  1.06k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.06k|    {
 1604|  1.06k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  473|  1.06k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.06k|    {
  475|  1.06k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 2010|  1.06k|    {
 2011|  1.06k|        return detail::transform_error_impl(std::move(*this),
 2012|  1.06k|                                            std::forward<F>(f));
 2013|  1.06k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1493|  1.06k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.06k|    else {
 1504|  1.06k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.06k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.06k, False: 0]
  |  |  ------------------
  ------------------
 1506|  1.06k|                   ? result(*std::forward<Exp>(exp))
 1507|  1.06k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|  1.06k|    }
 1511|  1.06k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  522|  2.12k|    {
  523|  2.12k|        return m_has_value;
  524|  2.12k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|  1.06k|    {
 1837|  1.06k|        return std::move(value());
 1838|  1.06k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|  1.06k|    {
 1801|  1.06k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.06k|        return this->get_value();
 1803|  1.06k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  488|  1.06k|    {
  489|  1.06k|        return m_value;
  490|  1.06k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1601|  1.06k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.06k|    {
 1604|  1.06k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  473|  1.06k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.06k|    {
  475|  1.06k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.06k|    {
 1348|  1.06k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1771|  1.06k|    {
 1772|  1.06k|        return has_value();
 1773|  1.06k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.12k|    {
  523|  2.12k|        return m_has_value;
  524|  2.12k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|  1.06k|    {
 1837|  1.06k|        return std::move(value());
 1838|  1.06k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|  1.06k|    {
 1801|  1.06k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.06k|        return this->get_value();
 1803|  1.06k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.06k|    {
  489|  1.06k|        return m_value;
  490|  1.06k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 2010|  1.03k|    {
 2011|  1.03k|        return detail::transform_error_impl(std::move(*this),
 2012|  1.03k|                                            std::forward<F>(f));
 2013|  1.03k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1493|  1.03k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.03k|    else {
 1504|  1.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 1.03k]
  |  |  ------------------
  ------------------
 1506|  1.03k|                   ? result(*std::forward<Exp>(exp))
 1507|  1.03k|                   : result(unexpect,
 1508|  1.03k|                            trivial_invoke(std::forward<F>(f),
 1509|  1.03k|                                           std::forward<Exp>(exp).error()));
 1510|  1.03k|    }
 1511|  1.03k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1787|  1.03k|    {
 1788|  1.03k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  1.03k|        return std::move(this->get_unexpected().error());
 1790|  1.03k|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3964|  1.76k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|  1.76k|    static_cast<    \
  |  | 1084|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|  1.76k|    {
 3966|  1.76k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3496|  39.3k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  39.3k|    static_cast<    \
  |  | 1084|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  39.3k|    static_cast<    \
  |  | 1084|  39.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  39.3k|    {
 3498|  39.3k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|     24|        : base(unexpect, std::move(e.error())),
 1648|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     24|    {
 1650|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  669|     24|        : m_has_value(false)
  670|     24|    {
  671|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  733|     24|    {
  734|     24|        scn::detail::construct_at(unexpected_ptr(),
  735|     24|                                  std::forward<Args>(args)...);
  736|     24|        m_has_value = false;
  737|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|     72|    {
  763|     72|        return reinterpret_cast<unexpected<E>*>(
  764|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|     24|    {
 1348|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1771|     24|    {
 1772|     24|        return has_value();
 1773|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  719|     72|    {
  720|     72|        return m_has_value;
  721|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1777|     24|    {
 1778|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|     24|        return this->get_unexpected().error();
 1780|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|     24|    {
  703|     24|        return *unexpected_ptr();
  704|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  675|     24|    {
  676|     24|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 0, False: 24]
  ------------------
  677|      0|            destroy_value();
  678|      0|        }
  679|     24|        else {
  680|     24|            destroy_unexpected();
  681|     24|        }
  682|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|     24|    {
  745|     24|        scn::detail::destroy_at(unexpected_ptr());
  746|     24|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1771|  10.2k|    {
 1772|  10.2k|        return has_value();
 1773|  10.2k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  19.7k|    {
  523|  19.7k|        return m_has_value;
  524|  19.7k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1777|  6.05k|    {
 1778|  6.05k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  6.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  6.05k|        return this->get_unexpected().error();
 1780|  6.05k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  6.05k|    {
  506|  6.05k|        return m_unexpected;
  507|  6.05k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  2.66k|    {
 1837|  2.66k|        return std::move(value());
 1838|  2.66k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  3.47k|    {
 1801|  3.47k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.47k|        return this->get_value();
 1803|  3.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  3.47k|    {
  489|  3.47k|        return m_value;
  490|  3.47k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  1.04k|        : base(unexpect, std::move(e.error())),
 1648|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.04k|    {
 1650|  1.04k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  1.14k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.14k|          m_has_value(false)
  484|  1.14k|    {
  485|  1.14k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  14.4k|    {
 1348|  14.4k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  11.3k|        : base(unexpect, std::move(e.error())),
 1648|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.3k|    {
 1650|  11.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  11.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.3k|          m_has_value(false)
  484|  11.3k|    {
  485|  11.3k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1771|  15.4k|    {
 1772|  15.4k|        return has_value();
 1773|  15.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  24.0k|    {
  523|  24.0k|        return m_has_value;
  524|  24.0k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1777|  5.69k|    {
 1778|  5.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  5.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  5.69k|        return this->get_unexpected().error();
 1780|  5.69k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  5.69k|    {
  506|  5.69k|        return m_unexpected;
  507|  5.69k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|  3.70k|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.70k|    {
 1604|  3.70k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|  3.70k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.70k|    {
  475|  3.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.70k|    {
 1348|  3.70k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  1.96k|    {
 1801|  1.96k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.96k|        return this->get_value();
 1803|  1.96k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  1.96k|    {
  489|  1.96k|        return m_value;
  490|  1.96k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|  2.77k|    {
 1772|  2.77k|        return has_value();
 1773|  2.77k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|  7.41k|    {
  523|  7.41k|        return m_has_value;
  524|  7.41k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.77k|    {
 1348|  2.77k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  3.70k|    {
 1837|  3.70k|        return std::move(value());
 1838|  3.70k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  3.70k|    {
 1801|  3.70k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.70k|        return this->get_value();
 1803|  3.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|  3.70k|    {
  489|  3.70k|        return m_value;
  490|  3.70k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3406|   136k|    {
 3407|   136k|        return detail::to_address(ranges::begin(derived()));
 3408|   136k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   136k|    {
 2901|   136k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   136k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   136k|    {
 2882|   136k|        return decay_copy(t.begin());
 2883|   136k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3365|   136k|    {
 3366|   136k|        return static_cast<D&>(*this);
 3367|   136k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|  1.96k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.96k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.96k|    {
 1604|  1.96k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.96k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.96k|    {
  475|  1.96k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1601|  2.77k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.77k|    {
 1604|  2.77k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  2.77k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.77k|    {
  475|  2.77k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  2.77k|    {
 2011|  2.77k|        return detail::transform_error_impl(std::move(*this),
 2012|  2.77k|                                            std::forward<F>(f));
 2013|  2.77k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1493|  2.77k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  2.77k|    else {
 1504|  2.77k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  2.77k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  2.77k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 2.77k, False: 0]
  |  |  ------------------
  ------------------
 1506|  2.77k|                   ? result(*std::forward<Exp>(exp))
 1507|  2.77k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|  2.77k|    }
 1511|  2.77k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  522|  5.55k|    {
  523|  5.55k|        return m_has_value;
  524|  5.55k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  2.77k|    {
 1837|  2.77k|        return std::move(value());
 1838|  2.77k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.77k|    {
 1801|  2.77k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.77k|        return this->get_value();
 1803|  2.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  488|  2.77k|    {
  489|  2.77k|        return m_value;
  490|  2.77k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  2.77k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.77k|    {
 1604|  2.77k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  2.77k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.77k|    {
  475|  2.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.77k|    {
 1348|  2.77k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1771|  2.77k|    {
 1772|  2.77k|        return has_value();
 1773|  2.77k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  522|  5.55k|    {
  523|  5.55k|        return m_has_value;
  524|  5.55k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  2.77k|    {
 1837|  2.77k|        return std::move(value());
 1838|  2.77k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.77k|    {
 1801|  2.77k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.77k|        return this->get_value();
 1803|  2.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.77k|    {
  489|  2.77k|        return m_value;
  490|  2.77k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1647|     20|        : base(unexpect, std::move(e.error())),
 1648|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     20|    {
 1650|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  669|     20|        : m_has_value(false)
  670|     20|    {
  671|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  733|     20|    {
  734|     20|        scn::detail::construct_at(unexpected_ptr(),
  735|     20|                                  std::forward<Args>(args)...);
  736|     20|        m_has_value = false;
  737|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|     60|    {
  763|     60|        return reinterpret_cast<unexpected<E>*>(
  764|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|     60|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|     20|    {
 1348|     20|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1771|     20|    {
 1772|     20|        return has_value();
 1773|     20|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  719|     60|    {
  720|     60|        return m_has_value;
  721|     60|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1777|     20|    {
 1778|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|     20|        return this->get_unexpected().error();
 1780|     20|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|     20|    {
  703|     20|        return *unexpected_ptr();
  704|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  675|     20|    {
  676|     20|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 0, False: 20]
  ------------------
  677|      0|            destroy_value();
  678|      0|        }
  679|     20|        else {
  680|     20|            destroy_unexpected();
  681|     20|        }
  682|     20|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|     20|    {
  745|     20|        scn::detail::destroy_at(unexpected_ptr());
  746|     20|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   132k|    {
 3032|   132k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   132k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   132k|    {
 3013|   132k|        return t.data();
 3014|   132k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1601|  4.53k|        : base(std::in_place, std::forward<U>(val)),
 1602|  4.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  4.53k|    {
 1604|  4.53k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  473|  4.53k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  4.53k|    {
  475|  4.53k|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1836|    196|    {
 1837|    196|        return std::move(value());
 1838|    196|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1381|  3.00k|{
 1382|  3.00k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  3.00k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 2010|    366|    {
 2011|    366|        return detail::transform_error_impl(std::move(*this),
 2012|    366|                                            std::forward<F>(f));
 2013|    366|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1493|    366|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    366|    else {
 1504|    366|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    366|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    366|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 366, False: 0]
  |  |  ------------------
  ------------------
 1506|    366|                   ? result(*std::forward<Exp>(exp))
 1507|    366|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|    366|    }
 1511|    366|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1601|    366|        : base(std::in_place, std::forward<U>(val)),
 1602|    366|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    366|    {
 1604|    366|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  473|    366|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    366|    {
  475|    366|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|    366|    {
 1348|    366|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|    366|    {
 1772|    366|        return has_value();
 1773|    366|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|    732|    {
  523|    732|        return m_has_value;
  524|    732|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1836|    366|    {
 1837|    366|        return std::move(value());
 1838|    366|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|    366|    {
 1801|    366|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    366|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    366|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    366|        return this->get_value();
 1803|    366|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|    366|    {
  489|    366|        return m_value;
  490|    366|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1996|    732|    {
 1997|    732|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|    732|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1493|    732|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    732|    else {
 1504|    732|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    732|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    732|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 732]
  |  |  ------------------
  ------------------
 1506|    732|                   ? result(*std::forward<Exp>(exp))
 1507|    732|                   : result(unexpect,
 1508|    732|                            trivial_invoke(std::forward<F>(f),
 1509|    732|                                           std::forward<Exp>(exp).error()));
 1510|    732|    }
 1511|    732|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1826|    804|    {
 1827|    804|        return value();
 1828|    804|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3991|      8|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|    358|    {
 2901|    358|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|    358|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|    358|    {
 2882|    358|        return decay_copy(t.begin());
 2883|    358|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3991|    326|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|    930|    {
 2011|    930|        return detail::transform_error_impl(std::move(*this),
 2012|    930|                                            std::forward<F>(f));
 2013|    930|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1493|    930|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    930|    else {
 1504|    930|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    930|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    930|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 930, False: 0]
  |  |  ------------------
  ------------------
 1506|    930|                   ? result(*std::forward<Exp>(exp))
 1507|    930|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|    930|    }
 1511|    930|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|    930|        : base(std::in_place, std::forward<U>(val)),
 1602|    930|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    930|    {
 1604|    930|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|    930|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    930|    {
  475|    930|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|    930|    {
 1348|    930|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|    930|    {
 1772|    930|        return has_value();
 1773|    930|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.86k|    {
  523|  1.86k|        return m_has_value;
  524|  1.86k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|    930|    {
 1837|    930|        return std::move(value());
 1838|    930|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|    930|    {
 1801|    930|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    930|        return this->get_value();
 1803|    930|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|    930|    {
  489|    930|        return m_value;
  490|    930|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1996|    952|    {
 1997|    952|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|    952|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|    952|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    952|    else {
 1504|    952|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    952|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    952|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 952]
  |  |  ------------------
  ------------------
 1506|    952|                   ? result(*std::forward<Exp>(exp))
 1507|    952|                   : result(unexpect,
 1508|    952|                            trivial_invoke(std::forward<F>(f),
 1509|    952|                                           std::forward<Exp>(exp).error()));
 1510|    952|    }
 1511|    952|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|    952|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|    952|    static_cast<    \
  |  | 1084|    952|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|    952|    {
 3966|    952|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|  7.00k|    {
 1827|  7.00k|        return value();
 1828|  7.00k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7620|  2.76k|{
 7621|  2.76k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  2.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  2.76k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  2.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  2.76k|    auto start = begin;
 7625|  2.76k|    ++begin;
 7626|       |
 7627|  2.76k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.76k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  2.76k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 444, False: 2.32k]
  ------------------
 7634|    444|        handler.on_charset_inverted();
 7635|    444|        ++begin;
 7636|    444|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|    444|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 444]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|    444|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 6, False: 438]
  ------------------
 7643|      6|            handler.on_charset_single(char32_t{']'});
 7644|      6|            ++begin;
 7645|      6|        }
 7646|    444|    }
 7647|  2.32k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 2.32k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|   349k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 349k, False: 0]
  ------------------
 7652|   349k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|   349k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 2.76k, False: 347k]
  ------------------
 7657|  2.76k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  2.76k|        }
 7659|       |
 7660|   347k|        parse_presentation_set_literal(begin, end, handler);
 7661|   347k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  2.76k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7584|   347k|{
 7585|   347k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|   347k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|   347k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|   347k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 347k, False: 0]
  |  Branch (7592:25): [True: 2.77k, False: 344k]
  |  Branch (7592:49): [True: 2.77k, False: 0]
  ------------------
 7593|   347k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 2.73k, False: 48]
  ------------------
 7594|  2.73k|        ++begin;
 7595|       |
 7596|  2.73k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  2.73k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  2.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.73k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  2.73k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  2.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.73k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  2.73k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  2.73k|        return;
 7610|  2.73k|    }
 7611|       |
 7612|   344k|    handler.on_charset_single(cp_first);
 7613|   344k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7560|   349k|{
 7561|   349k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   349k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   349k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|   349k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|   349k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 349k]
  |  |  |  Branch (1014:45): [True: 0, False: 349k]
  |  |  |  Branch (1014:45): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|   349k|    const auto cp =
 7570|   349k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|   349k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|   349k|    begin += len;
 7577|   349k|    return cp;
 7578|   349k|}
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7177|  3.30k|    {
 7178|  3.30k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7179|  3.30k|                charset_string_size};
 7180|  3.30k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1601|    804|        : base(std::in_place, std::forward<U>(val)),
 1602|    804|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    804|    {
 1604|    804|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  473|    804|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    804|    {
  475|    804|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1601|  1.38k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.38k|    {
 1604|  1.38k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.38k|    {
  475|  1.38k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4349|  96.3k|{
 4350|  96.3k|    if constexpr (sizeof(CharT) == 1) {
 4351|  96.3k|        return decode_utf8_code_point_exhaustive_valid(input);
 4352|       |    }
 4353|       |    else if constexpr (sizeof(CharT) == 2) {
 4354|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4355|       |    }
 4356|       |    else {
 4357|       |        SCN_EXPECT(input.size() == 1);
 4358|       |        return static_cast<char32_t>(input.front());
 4359|       |    }
 4360|  96.3k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4227|  15.5k|    const auto is_trailing_code_unit = [](char ch) {
 4228|  15.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4229|  15.5k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 7110|  2.09k|    {
 7111|  2.09k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1079|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7112|  2.09k|        CharT r{};
 7113|  2.09k|        std::memcpy(&r, m_data, m_size);
 7114|  2.09k|        return r;
 7115|  2.09k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4123|   207M|{
 4124|       |    if constexpr (sizeof(U) == 1) {
 4125|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|   207M|    else {
 4131|       |        // utf-32
 4132|   207M|        static_assert(sizeof(U) == 4);
 4133|   207M|        SCN_UNUSED(ch);
  ------------------
  |  | 1064|   207M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4134|   207M|        return 1;
 4135|   207M|    }
 4136|   207M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|   207M|{
 4330|       |    if constexpr (sizeof(CharT) == 1) {
 4331|       |        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|   207M|    else {
 4337|   207M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1079|   207M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   207M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4338|   207M|        auto cp = static_cast<char32_t>(input.front());
 4339|   207M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|   207M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 38.8k, False: 207M]
  |  |  ------------------
  ------------------
 4340|  38.8k|            return invalid_code_point;
 4341|  38.8k|        }
 4342|   207M|        return cp;
 4343|   207M|    }
 4344|   207M|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  57.6k|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  57.6k|    else {
 4022|  57.6k|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  57.6k|                                       to_address(first), to_address(last)))};
 4024|  57.6k|    }
 4025|  57.6k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   186k|{
  341|   186k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   186k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  318|   401k|{
  319|   401k|    return p;
  320|   401k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|  8.69k|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|  8.69k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|  8.69k|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|  8.69k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|  8.69k|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|  8.69k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   215k|{
  341|   215k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   215k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|   117k|    {
 3530|   117k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|   117k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|    184|        : base(unexpect, std::move(e.error())),
 1648|    184|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    184|    {
 1650|    184|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|    184|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    184|          m_has_value(false)
  484|    184|    {
  485|    184|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  19.5k|    {
 1348|  19.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  19.3k|        : base(std::in_place, std::forward<U>(val)),
 1602|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  19.3k|    {
 1604|  19.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  19.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  19.3k|    {
  475|  19.3k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1771|  5.60k|    {
 1772|  5.60k|        return has_value();
 1773|  5.60k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  33.5k|    {
  523|  33.5k|        return m_has_value;
  524|  33.5k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|     70|    {
 1827|     70|        return value();
 1828|     70|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  13.8k|    {
 1801|  13.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  13.8k|        return this->get_value();
 1803|  13.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  13.8k|    {
  489|  13.8k|        return m_value;
  490|  13.8k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1601|  2.77k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.77k|    {
 1604|  2.77k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|  2.77k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.77k|    {
  475|  2.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.15k|    {
 1348|  3.15k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    372|        : base(unexpect, std::move(e.error())),
 1648|    372|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    372|    {
 1650|    372|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|    372|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    372|          m_has_value(false)
  484|    372|    {
  485|    372|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1771|  1.28k|    {
 1772|  1.28k|        return has_value();
 1773|  1.28k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  522|  5.07k|    {
  523|  5.07k|        return m_has_value;
  524|  5.07k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1826|     42|    {
 1827|     42|        return value();
 1828|     42|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  1.54k|    {
 1801|  1.54k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.54k|        return this->get_value();
 1803|  1.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  488|  1.54k|    {
  489|  1.54k|        return m_value;
  490|  1.54k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1647|    116|        : base(unexpect, std::move(e.error())),
 1648|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    116|    {
 1650|    116|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    116|          m_has_value(false)
  484|    116|    {
  485|    116|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.50k|    {
 1348|  2.50k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1601|  2.38k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.38k|    {
 1604|  2.38k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  473|  2.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.38k|    {
  475|  2.38k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 2010|    590|    {
 2011|    590|        return detail::transform_error_impl(std::move(*this),
 2012|    590|                                            std::forward<F>(f));
 2013|    590|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1493|    590|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    590|    else {
 1504|    590|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    590|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    590|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 590, False: 0]
  |  |  ------------------
  ------------------
 1506|    590|                   ? result(*std::forward<Exp>(exp))
 1507|    590|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|    590|    }
 1511|    590|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  1.50k|    {
 1837|  1.50k|        return std::move(value());
 1838|  1.50k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1601|  1.84k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.84k|    {
 1604|  1.84k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|  1.84k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.84k|    {
  475|  1.84k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.12k|    {
 1348|  5.12k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1787|    358|    {
 1788|    358|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    358|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    358|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    358|        return std::move(this->get_unexpected().error());
 1790|    358|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  505|    372|    {
  506|    372|        return m_unexpected;
  507|    372|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1657|    846|        : base(unexpect, std::forward<Args>(args)...),
 1658|    846|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    846|    {
 1660|    846|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  2.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.71k|          m_has_value(false)
  484|  2.71k|    {
  485|  2.71k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|    830|    {
 2901|    830|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|    830|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|    830|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|    830|    {
 2882|    830|        return decay_copy(t.begin());
 2883|    830|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2125|  1.83k|{
 2126|  1.83k|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.83k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3512|    830|    {
 3513|    830|        return m_iterator;
 3514|    830|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|    830|    {
 2958|    830|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|    830|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|    830|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|    830|    {
 2940|    830|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|    830|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|    830|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3517|    830|    {
 3518|    830|        return m_sentinel;
 3519|    830|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3496|    830|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|    830|    static_cast<    \
  |  | 1084|    830|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|    830|    static_cast<    \
  |  | 1084|    830|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|    830|    {
 3498|    830|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1771|  2.50k|    {
 1772|  2.50k|        return has_value();
 1773|  2.50k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  5.00k|    {
  523|  5.00k|        return m_has_value;
  524|  5.00k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5errorEv:
 1777|    116|    {
 1778|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    116|        return this->get_unexpected().error();
 1780|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    116|    {
  506|    116|        return m_unexpected;
  507|    116|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|  2.38k|    {
 1837|  2.38k|        return std::move(value());
 1838|  2.38k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|  2.38k|    {
 1801|  2.38k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.38k|        return this->get_value();
 1803|  2.38k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.38k|    {
  489|  2.38k|        return m_value;
  490|  2.38k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  6.84k|    {
 1348|  6.84k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  6.84k|        : base(std::in_place, std::forward<U>(val)),
 1602|  6.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  6.84k|    {
 1604|  6.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|  6.84k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  6.84k|    {
  475|  6.84k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  8.30k|    {
 2011|  8.30k|        return detail::transform_error_impl(std::move(*this),
 2012|  8.30k|                                            std::forward<F>(f));
 2013|  8.30k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  8.30k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  8.30k|    else {
 1504|  8.30k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  8.30k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  8.30k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 8.30k, False: 0]
  |  |  ------------------
  ------------------
 1506|  8.30k|                   ? result(*std::forward<Exp>(exp))
 1507|  8.30k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|  8.30k|    }
 1511|  8.30k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  13.7k|    {
 1837|  13.7k|        return std::move(value());
 1838|  13.7k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1787|    184|    {
 1788|    184|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    184|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    184|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    184|        return std::move(this->get_unexpected().error());
 1790|    184|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|    184|    {
  506|    184|        return m_unexpected;
  507|    184|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|    964|        : base(unexpect, std::forward<Args>(args)...),
 1658|    964|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    964|    {
 1660|    964|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1771|  6.84k|    {
 1772|  6.84k|        return has_value();
 1773|  6.84k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  522|  13.6k|    {
  523|  13.6k|        return m_has_value;
  524|  13.6k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  6.84k|    {
 1837|  6.84k|        return std::move(value());
 1838|  6.84k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  6.84k|    {
 1801|  6.84k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  6.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  6.84k|        return this->get_value();
 1803|  6.84k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  488|  6.84k|    {
  489|  6.84k|        return m_value;
  490|  6.84k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  1.87k|        : base(unexpect, std::move(e.error())),
 1648|  1.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.87k|    {
 1650|  1.87k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1777|     14|    {
 1778|     14|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|     14|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     14|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|     14|        return this->get_unexpected().error();
 1780|     14|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    562|        : base(unexpect, std::move(e.error())),
 1648|    562|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    562|    {
 1650|    562|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|    920|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    920|          m_has_value(false)
  484|    920|    {
  485|    920|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  4.83k|    {
 1348|  4.83k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IRS7_vEEOT_:
 1601|     60|        : base(std::in_place, std::forward<U>(val)),
 1602|     60|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|     60|    {
 1604|     60|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  473|     60|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|     60|    {
  475|     60|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  2.87k|        : base(unexpect, std::move(e.error())),
 1648|  2.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.87k|    {
 1650|  2.87k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  2.87k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.87k|          m_has_value(false)
  484|  2.87k|    {
  485|  2.87k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1771|  4.49k|    {
 1772|  4.49k|        return has_value();
 1773|  4.49k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  522|  8.63k|    {
  523|  8.63k|        return m_has_value;
  524|  8.63k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1777|  1.69k|    {
 1778|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.69k|        return this->get_unexpected().error();
 1780|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  505|  2.18k|    {
  506|  2.18k|        return m_unexpected;
  507|  2.18k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1601|    792|        : base(std::in_place, std::forward<U>(val)),
 1602|    792|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    792|    {
 1604|    792|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  473|    792|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    792|    {
  475|    792|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|    792|    {
 1348|    792|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1826|    104|    {
 1827|    104|        return value();
 1828|    104|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  1.06k|    {
 1801|  1.06k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.06k|        return this->get_value();
 1803|  1.06k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  488|  1.06k|    {
  489|  1.06k|        return m_value;
  490|  1.06k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1771|    602|    {
 1772|    602|        return has_value();
 1773|    602|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  522|  1.58k|    {
  523|  1.58k|        return m_has_value;
  524|  1.58k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|    602|    {
 1348|    602|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1836|    792|    {
 1837|    792|        return std::move(value());
 1838|    792|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|    792|    {
 1801|    792|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    792|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    792|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    792|        return this->get_value();
 1803|    792|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  488|    792|    {
  489|    792|        return m_value;
  490|    792|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3517|  28.1k|    {
 3518|  28.1k|        return m_sentinel;
 3519|  28.1k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 2010|  1.27k|    {
 2011|  1.27k|        return detail::transform_error_impl(std::move(*this),
 2012|  1.27k|                                            std::forward<F>(f));
 2013|  1.27k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1493|  1.27k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.27k|    else {
 1504|  1.27k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.27k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.27k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 916, False: 358]
  |  |  ------------------
  ------------------
 1506|  1.27k|                   ? result(*std::forward<Exp>(exp))
 1507|  1.27k|                   : result(unexpect,
 1508|    358|                            trivial_invoke(std::forward<F>(f),
 1509|    358|                                           std::forward<Exp>(exp).error()));
 1510|  1.27k|    }
 1511|  1.27k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1601|    982|        : base(std::in_place, std::forward<U>(val)),
 1602|    982|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    982|    {
 1604|    982|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  473|    982|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    982|    {
  475|    982|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1657|    358|        : base(unexpect, std::forward<Args>(args)...),
 1658|    358|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    358|    {
 1660|    358|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|    960|    {
 1837|    960|        return std::move(value());
 1838|    960|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3512|  40.6k|    {
 3513|  40.6k|        return m_iterator;
 3514|  40.6k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1601|    602|        : base(std::in_place, std::forward<U>(val)),
 1602|    602|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    602|    {
 1604|    602|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  473|    602|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    602|    {
  475|    602|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 2010|    602|    {
 2011|    602|        return detail::transform_error_impl(std::move(*this),
 2012|    602|                                            std::forward<F>(f));
 2013|    602|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1493|    602|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    602|    else {
 1504|    602|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    602|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    602|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 602, False: 0]
  |  |  ------------------
  ------------------
 1506|    602|                   ? result(*std::forward<Exp>(exp))
 1507|    602|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|    602|    }
 1511|    602|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  522|  1.20k|    {
  523|  1.20k|        return m_has_value;
  524|  1.20k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|    602|    {
 1837|    602|        return std::move(value());
 1838|    602|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|    602|    {
 1801|    602|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    602|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    602|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    602|        return this->get_value();
 1803|    602|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  488|    602|    {
  489|    602|        return m_value;
  490|    602|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1601|    602|        : base(std::in_place, std::forward<U>(val)),
 1602|    602|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    602|    {
 1604|    602|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  473|    602|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    602|    {
  475|    602|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|    602|    {
 1348|    602|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1771|    602|    {
 1772|    602|        return has_value();
 1773|    602|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.20k|    {
  523|  1.20k|        return m_has_value;
  524|  1.20k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|    602|    {
 1837|    602|        return std::move(value());
 1838|    602|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|    602|    {
 1801|    602|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    602|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    602|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    602|        return this->get_value();
 1803|    602|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  488|    602|    {
  489|    602|        return m_value;
  490|    602|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 2010|    532|    {
 2011|    532|        return detail::transform_error_impl(std::move(*this),
 2012|    532|                                            std::forward<F>(f));
 2013|    532|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1493|    532|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    532|    else {
 1504|    532|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    532|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    532|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 44, False: 488]
  |  |  ------------------
  ------------------
 1506|    532|                   ? result(*std::forward<Exp>(exp))
 1507|    532|                   : result(unexpect,
 1508|    488|                            trivial_invoke(std::forward<F>(f),
 1509|    488|                                           std::forward<Exp>(exp).error()));
 1510|    532|    }
 1511|    532|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1787|    488|    {
 1788|    488|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    488|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    488|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    488|        return std::move(this->get_unexpected().error());
 1790|    488|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3964|    890|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|    890|    static_cast<    \
  |  | 1084|    890|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|    890|    {
 3966|    890|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3496|  13.9k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  13.9k|    static_cast<    \
  |  | 1084|  13.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  13.9k|    static_cast<    \
  |  | 1084|  13.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  13.9k|    {
 3498|  13.9k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1647|     44|        : base(unexpect, std::move(e.error())),
 1648|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     44|    {
 1650|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  669|     44|        : m_has_value(false)
  670|     44|    {
  671|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  733|     44|    {
  734|     44|        scn::detail::construct_at(unexpected_ptr(),
  735|     44|                                  std::forward<Args>(args)...);
  736|     44|        m_has_value = false;
  737|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|    132|    {
  763|    132|        return reinterpret_cast<unexpected<E>*>(
  764|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|     52|    {
 1348|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISJ_vEEOT_:
 1601|      8|        : base(std::in_place, std::forward<U>(val)),
 1602|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|      8|    {
 1604|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS3_10in_place_tEDpOT_:
  659|      8|        : m_has_value(true)
  660|      8|    {
  661|      8|        construct(std::forward<Args>(args)...);
  662|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSK_EEEvDpOT_:
  726|      8|    {
  727|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|      8|        m_has_value = true;
  729|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEJSK_EEEPT_SM_DpOT0_:
  428|      8|{
  429|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|      8|        T(std::forward<Args>(args)...);
  431|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|     24|    {
  751|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|     52|    {
 1772|     52|        return has_value();
 1773|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|    156|    {
  720|    156|        return m_has_value;
  721|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1777|     44|    {
 1778|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|     44|        return this->get_unexpected().error();
 1780|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|     44|    {
  703|     44|        return *unexpected_ptr();
  704|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEdeISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSO_v:
 1836|      8|    {
 1837|      8|        return std::move(value());
 1838|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5valueISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSO_v:
 1800|      8|    {
 1801|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|      8|        return this->get_value();
 1803|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|      8|    {
  686|      8|        return *value_ptr();
  687|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|     52|    {
  676|     52|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 8, False: 44]
  ------------------
  677|      8|            destroy_value();
  678|      8|        }
  679|     44|        else {
  680|     44|            destroy_unexpected();
  681|     44|        }
  682|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|      8|    {
  741|      8|        scn::detail::destroy_at(value_ptr());
  742|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEEEvPT_:
  434|      8|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|      8|    else {
  441|      8|        p->~T();
  442|      8|    }
  443|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|     44|    {
  745|     44|        scn::detail::destroy_at(unexpected_ptr());
  746|     44|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1771|  5.31k|    {
 1772|  5.31k|        return has_value();
 1773|  5.31k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  10.2k|    {
  523|  10.2k|        return m_has_value;
  524|  10.2k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1777|  2.52k|    {
 1778|  2.52k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.52k|        return this->get_unexpected().error();
 1780|  2.52k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  2.52k|    {
  506|  2.52k|        return m_unexpected;
  507|  2.52k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  1.85k|    {
 1837|  1.85k|        return std::move(value());
 1838|  1.85k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  2.38k|    {
 1801|  2.38k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.38k|        return this->get_value();
 1803|  2.38k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.38k|    {
  489|  2.38k|        return m_value;
  490|  2.38k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  1.13k|        : base(unexpect, std::move(e.error())),
 1648|  1.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.13k|    {
 1650|  1.13k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  1.31k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.31k|          m_has_value(false)
  484|  1.31k|    {
  485|  1.31k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  17.9k|    {
 1348|  17.9k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1601|     86|        : base(std::in_place, std::forward<U>(val)),
 1602|     86|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|     86|    {
 1604|     86|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|     86|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|     86|    {
  475|     86|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  11.0k|        : base(unexpect, std::move(e.error())),
 1648|  11.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.0k|    {
 1650|  11.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  11.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.0k|          m_has_value(false)
  484|  11.0k|    {
  485|  11.0k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1771|  18.8k|    {
 1772|  18.8k|        return has_value();
 1773|  18.8k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  31.2k|    {
  523|  31.2k|        return m_has_value;
  524|  31.2k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1777|  5.82k|    {
 1778|  5.82k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  5.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  5.82k|        return this->get_unexpected().error();
 1780|  5.82k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  5.82k|    {
  506|  5.82k|        return m_unexpected;
  507|  5.82k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|  3.72k|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.72k|    {
 1604|  3.72k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|  3.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.72k|    {
  475|  3.72k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.72k|    {
 1348|  3.72k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|     94|    {
 1827|     94|        return value();
 1828|     94|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  5.56k|    {
 1801|  5.56k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.56k|        return this->get_value();
 1803|  5.56k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  5.56k|    {
  489|  5.56k|        return m_value;
  490|  5.56k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|  2.78k|    {
 1772|  2.78k|        return has_value();
 1773|  2.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|  7.45k|    {
  523|  7.45k|        return m_has_value;
  524|  7.45k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.78k|    {
 1348|  2.78k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  3.72k|    {
 1837|  3.72k|        return std::move(value());
 1838|  3.72k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  3.72k|    {
 1801|  3.72k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.72k|        return this->get_value();
 1803|  3.72k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|  3.72k|    {
  489|  3.72k|        return m_value;
  490|  3.72k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  5.65k|    {
 2011|  5.65k|        return detail::transform_error_impl(std::move(*this),
 2012|  5.65k|                                            std::forward<F>(f));
 2013|  5.65k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  5.65k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  5.65k|    else {
 1504|  5.65k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  5.65k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  5.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 5.46k, False: 184]
  |  |  ------------------
  ------------------
 1506|  5.65k|                   ? result(*std::forward<Exp>(exp))
 1507|  5.65k|                   : result(unexpect,
 1508|    184|                            trivial_invoke(std::forward<F>(f),
 1509|    184|                                           std::forward<Exp>(exp).error()));
 1510|  5.65k|    }
 1511|  5.65k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|  5.47k|        : base(std::in_place, std::forward<U>(val)),
 1602|  5.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  5.47k|    {
 1604|  5.47k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  5.47k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  5.47k|    {
  475|  5.47k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1657|    184|        : base(unexpect, std::forward<Args>(args)...),
 1658|    184|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    184|    {
 1660|    184|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  5.46k|    {
 1837|  5.46k|        return std::move(value());
 1838|  5.46k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1601|  2.78k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.78k|    {
 1604|  2.78k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  2.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.78k|    {
  475|  2.78k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  2.78k|    {
 2011|  2.78k|        return detail::transform_error_impl(std::move(*this),
 2012|  2.78k|                                            std::forward<F>(f));
 2013|  2.78k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1493|  2.78k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  2.78k|    else {
 1504|  2.78k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  2.78k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  2.78k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 2.78k, False: 0]
  |  |  ------------------
  ------------------
 1506|  2.78k|                   ? result(*std::forward<Exp>(exp))
 1507|  2.78k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|  2.78k|    }
 1511|  2.78k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  522|  5.56k|    {
  523|  5.56k|        return m_has_value;
  524|  5.56k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  2.78k|    {
 1837|  2.78k|        return std::move(value());
 1838|  2.78k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.78k|    {
 1801|  2.78k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.78k|        return this->get_value();
 1803|  2.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  488|  2.78k|    {
  489|  2.78k|        return m_value;
  490|  2.78k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  2.78k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.78k|    {
 1604|  2.78k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  2.78k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.78k|    {
  475|  2.78k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.78k|    {
 1348|  2.78k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1771|  2.78k|    {
 1772|  2.78k|        return has_value();
 1773|  2.78k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  522|  5.56k|    {
  523|  5.56k|        return m_has_value;
  524|  5.56k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  2.78k|    {
 1837|  2.78k|        return std::move(value());
 1838|  2.78k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.78k|    {
 1801|  2.78k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.78k|        return this->get_value();
 1803|  2.78k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.78k|    {
  489|  2.78k|        return m_value;
  490|  2.78k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|     40|        : base(unexpect, std::move(e.error())),
 1648|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     40|    {
 1650|     40|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  669|     40|        : m_has_value(false)
  670|     40|    {
  671|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|     40|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  733|     40|    {
  734|     40|        scn::detail::construct_at(unexpected_ptr(),
  735|     40|                                  std::forward<Args>(args)...);
  736|     40|        m_has_value = false;
  737|     40|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|    120|    {
  763|    120|        return reinterpret_cast<unexpected<E>*>(
  764|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|    120|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|     48|    {
 1348|     48|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1601|      8|        : base(std::in_place, std::forward<U>(val)),
 1602|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|      8|    {
 1604|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  659|      8|        : m_has_value(true)
  660|      8|    {
  661|      8|        construct(std::forward<Args>(args)...);
  662|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  726|      8|    {
  727|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|      8|        m_has_value = true;
  729|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  428|      8|{
  429|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|      8|        T(std::forward<Args>(args)...);
  431|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|     24|    {
  751|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|     48|    {
 1772|     48|        return has_value();
 1773|     48|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|    144|    {
  720|    144|        return m_has_value;
  721|    144|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1777|     40|    {
 1778|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|     40|        return this->get_unexpected().error();
 1780|     40|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  702|     40|    {
  703|     40|        return *unexpected_ptr();
  704|     40|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1836|      8|    {
 1837|      8|        return std::move(value());
 1838|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|      8|    {
 1801|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|      8|        return this->get_value();
 1803|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|      8|    {
  686|      8|        return *value_ptr();
  687|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|     48|    {
  676|     48|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 8, False: 40]
  ------------------
  677|      8|            destroy_value();
  678|      8|        }
  679|     40|        else {
  680|     40|            destroy_unexpected();
  681|     40|        }
  682|     48|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|      8|    {
  741|      8|        scn::detail::destroy_at(value_ptr());
  742|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  434|      8|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|      8|    else {
  441|      8|        p->~T();
  442|      8|    }
  443|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|     40|    {
  745|     40|        scn::detail::destroy_at(unexpected_ptr());
  746|     40|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   213k|    {
 3032|   213k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   213k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   213k|    {
 3013|   213k|        return t.data();
 3014|   213k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3406|   213k|    {
 3407|   213k|        return detail::to_address(ranges::begin(derived()));
 3408|   213k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   213k|    {
 2901|   213k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   213k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   213k|    {
 2882|   213k|        return decay_copy(t.begin());
 2883|   213k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3365|   213k|    {
 3366|   213k|        return static_cast<D&>(*this);
 3367|   213k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 2010|    190|    {
 2011|    190|        return detail::transform_error_impl(std::move(*this),
 2012|    190|                                            std::forward<F>(f));
 2013|    190|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1493|    190|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    190|    else {
 1504|    190|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    190|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    190|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 1506|    190|                   ? result(*std::forward<Exp>(exp))
 1507|    190|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|    190|    }
 1511|    190|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1601|    190|        : base(std::in_place, std::forward<U>(val)),
 1602|    190|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    190|    {
 1604|    190|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  473|    190|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    190|    {
  475|    190|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|    190|    {
 1348|    190|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|    190|    {
 1772|    190|        return has_value();
 1773|    190|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|    380|    {
  523|    380|        return m_has_value;
  524|    380|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1836|    190|    {
 1837|    190|        return std::move(value());
 1838|    190|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|    190|    {
 1801|    190|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    190|        return this->get_value();
 1803|    190|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|    190|    {
  489|    190|        return m_value;
  490|    190|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1996|    358|    {
 1997|    358|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|    358|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1493|    358|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    358|    else {
 1504|    358|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    358|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    358|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 358]
  |  |  ------------------
  ------------------
 1506|    358|                   ? result(*std::forward<Exp>(exp))
 1507|    358|                   : result(unexpect,
 1508|    358|                            trivial_invoke(std::forward<F>(f),
 1509|    358|                                           std::forward<Exp>(exp).error()));
 1510|    358|    }
 1511|    358|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRS7_vEEOT_:
 1601|     48|        : base(std::in_place, std::forward<U>(val)),
 1602|     48|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|     48|    {
 1604|     48|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  473|     48|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|     48|    {
  475|     48|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1826|    534|    {
 1827|    534|        return value();
 1828|    534|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3991|     20|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|    170|    {
 2901|    170|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|    170|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|    170|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|    170|    {
 2882|    170|        return decay_copy(t.begin());
 2883|    170|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3991|    158|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|    948|    {
 2011|    948|        return detail::transform_error_impl(std::move(*this),
 2012|    948|                                            std::forward<F>(f));
 2013|    948|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1493|    948|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    948|    else {
 1504|    948|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    948|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    948|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 948, False: 0]
  |  |  ------------------
  ------------------
 1506|    948|                   ? result(*std::forward<Exp>(exp))
 1507|    948|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|    948|    }
 1511|    948|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|    948|        : base(std::in_place, std::forward<U>(val)),
 1602|    948|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    948|    {
 1604|    948|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|    948|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    948|    {
  475|    948|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|    948|    {
 1348|    948|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|    948|    {
 1772|    948|        return has_value();
 1773|    948|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.89k|    {
  523|  1.89k|        return m_has_value;
  524|  1.89k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|    948|    {
 1837|    948|        return std::move(value());
 1838|    948|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|    948|    {
 1801|    948|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|    948|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    948|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|    948|        return this->get_value();
 1803|    948|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|    948|    {
  489|    948|        return m_value;
  490|    948|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1996|    964|    {
 1997|    964|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|    964|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1493|    964|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|    964|    else {
 1504|    964|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|    964|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|    964|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 964]
  |  |  ------------------
  ------------------
 1506|    964|                   ? result(*std::forward<Exp>(exp))
 1507|    964|                   : result(unexpect,
 1508|    964|                            trivial_invoke(std::forward<F>(f),
 1509|    964|                                           std::forward<Exp>(exp).error()));
 1510|    964|    }
 1511|    964|}
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1601|    108|        : base(std::in_place, std::forward<U>(val)),
 1602|    108|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    108|    {
 1604|    108|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|    108|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    108|    {
  475|    108|    }
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|    964|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|    964|    static_cast<    \
  |  | 1084|    964|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|    964|    {
 3966|    964|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|  4.95k|    {
 1827|  4.95k|        return value();
 1828|  4.95k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7620|    750|{
 7621|    750|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|    750|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|    750|    auto start = begin;
 7625|    750|    ++begin;
 7626|       |
 7627|    750|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 750]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|    750|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 408, False: 342]
  ------------------
 7634|    408|        handler.on_charset_inverted();
 7635|    408|        ++begin;
 7636|    408|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 408]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|    408|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 6, False: 402]
  ------------------
 7643|      6|            handler.on_charset_single(char32_t{']'});
 7644|      6|            ++begin;
 7645|      6|        }
 7646|    408|    }
 7647|    342|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 342]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  7.99k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 7.99k, False: 0]
  ------------------
 7652|  7.99k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  7.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.99k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  7.99k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 750, False: 7.24k]
  ------------------
 7657|    750|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|    750|        }
 7659|       |
 7660|  7.24k|        parse_presentation_set_literal(begin, end, handler);
 7661|  7.24k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|    750|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7584|  7.24k|{
 7585|  7.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  7.24k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  7.24k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  7.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.24k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  7.24k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 7.24k, False: 0]
  |  Branch (7592:25): [True: 576, False: 6.67k]
  |  Branch (7592:49): [True: 576, False: 0]
  ------------------
 7593|  7.24k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 570, False: 6]
  ------------------
 7594|    570|        ++begin;
 7595|       |
 7596|    570|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|    570|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|    570|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|    570|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|    570|        return;
 7610|    570|    }
 7611|       |
 7612|  6.67k|    handler.on_charset_single(cp_first);
 7613|  6.67k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7560|  7.81k|{
 7561|  7.81k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  7.81k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  7.81k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.81k]
  |  |  |  Branch (1014:45): [True: 0, False: 7.81k]
  |  |  |  Branch (1014:45): [True: 0, False: 7.81k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  7.81k|    const auto cp =
 7570|  7.81k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  7.81k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  7.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.81k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  7.81k|    begin += len;
 7577|  7.81k|    return cp;
 7578|  7.81k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7177|    750|    {
 7178|    750|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7179|    750|                charset_string_size};
 7180|    750|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1601|    510|        : base(std::in_place, std::forward<U>(val)),
 1602|    510|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    510|    {
 1604|    510|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  473|    510|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    510|    {
  475|    510|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1601|    534|        : base(std::in_place, std::forward<U>(val)),
 1602|    534|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    534|    {
 1604|    534|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  473|    534|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    534|    {
  475|    534|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6341|  50.5k|    {
 6342|  50.5k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|  50.5k|        return static_cast<std::size_t>(m_desc &
 6347|  50.5k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|  50.5k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6367|  81.0k|    {
 6368|  81.0k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  81.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6309|  30.4k|    {
 6310|  30.4k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 30.4k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|  30.4k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 68, False: 30.4k]
  |  |  ------------------
  ------------------
 6318|     68|            return {};
 6319|     68|        }
 6320|       |
 6321|  30.4k|        const auto t = type(id);
 6322|  30.4k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.29k, False: 29.1k]
  |  |  ------------------
  ------------------
 6323|  1.29k|            return {};
 6324|  1.29k|        }
 6325|       |
 6326|  29.1k|        basic_scan_arg<Context> arg;
 6327|  29.1k|        arg.m_type = t;
 6328|  29.1k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 29.1k, False: 0]
  ------------------
 6329|  29.1k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|  29.1k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|  29.1k|        return arg;
 6335|  30.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6118|  30.4k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5711|  49.1k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6376|  30.4k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|  30.4k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|  30.4k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|  30.4k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|  30.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6371|  29.1k|    {
 6372|  29.1k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|  29.1k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6124|  57.5k|    {
 6125|  57.5k|        return m_type != detail::arg_type::none_type;
 6126|  57.5k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|  5.68k|{
 9606|  5.68k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  5.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  5.68k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  5.68k|{
 9463|  5.68k|#define SCN_VISIT(Type)                                                    \
 9464|  5.68k|    do {                                                                   \
 9465|  5.68k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  5.68k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  5.68k|        }                                                                  \
 9468|  5.68k|        else {                                                             \
 9469|  5.68k|            return vis(monostate_val);                                     \
 9470|  5.68k|        }                                                                  \
 9471|  5.68k|    } while (false)
 9472|       |
 9473|  5.68k|    monostate monostate_val{};
 9474|       |
 9475|  5.68k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 5.68k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 5.68k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|    632|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 632, False: 5.05k]
  ------------------
 9481|    632|            SCN_VISIT(int);
  ------------------
  |  | 9464|    632|    do {                                                                   \
  |  | 9465|    632|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    632|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    632|        }                                                                  \
  |  | 9468|    632|        else {                                                             \
  |  | 9469|    632|            return vis(monostate_val);                                     \
  |  | 9470|    632|        }                                                                  \
  |  | 9471|    632|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|    632|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 5.68k]
  ------------------
 9483|    632|            SCN_VISIT(long);
  ------------------
  |  | 9464|    632|    do {                                                                   \
  |  | 9465|    632|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    632|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    632|        }                                                                  \
  |  | 9468|    632|        else {                                                             \
  |  | 9469|    632|            return vis(monostate_val);                                     \
  |  | 9470|    632|        }                                                                  \
  |  | 9471|    632|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|    632|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 5.68k]
  ------------------
 9485|    632|            SCN_VISIT(long long);
  ------------------
  |  | 9464|    632|    do {                                                                   \
  |  | 9465|    632|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    632|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    632|        }                                                                  \
  |  | 9468|    632|        else {                                                             \
  |  | 9469|    632|            return vis(monostate_val);                                     \
  |  | 9470|    632|        }                                                                  \
  |  | 9471|    632|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|    632|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 5.68k]
  ------------------
 9487|    632|#if SCN_HAS_INT128
 9488|    632|            SCN_VISIT(int128);
  ------------------
  |  | 9464|    632|    do {                                                                   \
  |  | 9465|    632|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    632|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    632|        }                                                                  \
  |  | 9468|    632|        else {                                                             \
  |  | 9469|    632|            return vis(monostate_val);                                     \
  |  | 9470|    632|        }                                                                  \
  |  | 9471|    632|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|    632|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 5.68k]
  ------------------
 9493|    632|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|    632|    do {                                                                   \
  |  | 9465|    632|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    632|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    632|        }                                                                  \
  |  | 9468|    632|        else {                                                             \
  |  | 9469|    632|            return vis(monostate_val);                                     \
  |  | 9470|    632|        }                                                                  \
  |  | 9471|    632|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|    632|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 5.68k]
  ------------------
 9495|    632|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|    632|    do {                                                                   \
  |  | 9465|    632|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    632|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    632|        }                                                                  \
  |  | 9468|    632|        else {                                                             \
  |  | 9469|    632|            return vis(monostate_val);                                     \
  |  | 9470|    632|        }                                                                  \
  |  | 9471|    632|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 632, False: 5.05k]
  ------------------
 9497|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  1.26k|    do {                                                                   \
  |  | 9465|  1.26k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.26k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.26k|        }                                                                  \
  |  | 9468|  1.26k|        else {                                                             \
  |  | 9469|  1.26k|            return vis(monostate_val);                                     \
  |  | 9470|  1.26k|        }                                                                  \
  |  | 9471|  1.26k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 5.68k]
  ------------------
 9499|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  1.26k|    do {                                                                   \
  |  | 9465|  1.26k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.26k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.26k|        }                                                                  \
  |  | 9468|  1.26k|        else {                                                             \
  |  | 9469|  1.26k|            return vis(monostate_val);                                     \
  |  | 9470|  1.26k|        }                                                                  \
  |  | 9471|  1.26k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 5.68k]
  ------------------
 9501|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  1.26k|    do {                                                                   \
  |  | 9465|  1.26k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.26k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.26k|        }                                                                  \
  |  | 9468|  1.26k|        else {                                                             \
  |  | 9469|  1.26k|            return vis(monostate_val);                                     \
  |  | 9470|  1.26k|        }                                                                  \
  |  | 9471|  1.26k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  1.26k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 5.68k]
  ------------------
 9503|  1.26k|#if SCN_HAS_INT128
 9504|  1.26k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  1.26k|    do {                                                                   \
  |  | 9465|  1.26k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.26k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.26k|        }                                                                  \
  |  | 9468|  1.26k|        else {                                                             \
  |  | 9469|  1.26k|            return vis(monostate_val);                                     \
  |  | 9470|  1.26k|        }                                                                  \
  |  | 9471|  1.26k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  1.89k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 632, False: 5.05k]
  ------------------
 9509|  1.89k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  1.89k|    do {                                                                   \
  |  | 9465|  1.89k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.89k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.89k|        }                                                                  \
  |  | 9468|  1.89k|        else {                                                             \
  |  | 9469|  1.89k|            return vis(monostate_val);                                     \
  |  | 9470|  1.89k|        }                                                                  \
  |  | 9471|  1.89k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  2.52k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 632, False: 5.05k]
  ------------------
 9511|  2.52k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  2.52k|    do {                                                                   \
  |  | 9465|  2.52k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.52k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.52k|        }                                                                  \
  |  | 9468|  2.52k|        else {                                                             \
  |  | 9469|  2.52k|            return vis(monostate_val);                                     \
  |  | 9470|  2.52k|        }                                                                  \
  |  | 9471|  2.52k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  3.16k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 632, False: 5.05k]
  ------------------
 9513|  3.16k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  3.16k|    do {                                                                   \
  |  | 9465|  3.16k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.16k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.16k|        }                                                                  \
  |  | 9468|  3.16k|        else {                                                             \
  |  | 9469|  3.16k|            return vis(monostate_val);                                     \
  |  | 9470|  3.16k|        }                                                                  \
  |  | 9471|  3.16k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  3.16k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 5.68k]
  ------------------
 9515|  3.16k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  3.16k|    do {                                                                   \
  |  | 9465|  3.16k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.16k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.16k|        }                                                                  \
  |  | 9468|  3.16k|        else {                                                             \
  |  | 9469|  3.16k|            return vis(monostate_val);                                     \
  |  | 9470|  3.16k|        }                                                                  \
  |  | 9471|  3.16k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  3.16k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 5.68k]
  ------------------
 9517|  3.16k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  3.16k|    do {                                                                   \
  |  | 9465|  3.16k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.16k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.16k|        }                                                                  \
  |  | 9468|  3.16k|        else {                                                             \
  |  | 9469|  3.16k|            return vis(monostate_val);                                     \
  |  | 9470|  3.16k|        }                                                                  \
  |  | 9471|  3.16k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  3.16k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 5.68k]
  ------------------
 9519|  3.16k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  3.16k|    do {                                                                   \
  |  | 9465|  3.16k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.16k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.16k|        }                                                                  \
  |  | 9468|  3.16k|        else {                                                             \
  |  | 9469|  3.16k|            return vis(monostate_val);                                     \
  |  | 9470|  3.16k|        }                                                                  \
  |  | 9471|  3.16k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  3.79k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 632, False: 5.05k]
  ------------------
 9521|  3.79k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  3.79k|    do {                                                                   \
  |  | 9465|  3.79k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.79k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.79k|        }                                                                  \
  |  | 9468|  3.79k|        else {                                                             \
  |  | 9469|  3.79k|            return vis(monostate_val);                                     \
  |  | 9470|  3.79k|        }                                                                  \
  |  | 9471|  3.79k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  3.79k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 5.68k]
  ------------------
 9523|  3.79k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  3.79k|    do {                                                                   \
  |  | 9465|  3.79k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.79k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.79k|        }                                                                  \
  |  | 9468|  3.79k|        else {                                                             \
  |  | 9469|  3.79k|            return vis(monostate_val);                                     \
  |  | 9470|  3.79k|        }                                                                  \
  |  | 9471|  3.79k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  3.79k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 5.68k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  3.79k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 5.68k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 5.68k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 5.68k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 5.68k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|    632|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 632, False: 5.05k]
  ------------------
 9555|    632|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|    632|    do {                                                                   \
  |  | 9465|    632|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    632|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    632|        }                                                                  \
  |  | 9468|    632|        else {                                                             \
  |  | 9469|    632|            return vis(monostate_val);                                     \
  |  | 9470|    632|        }                                                                  \
  |  | 9471|    632|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  1.26k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 632, False: 5.05k]
  ------------------
 9557|  1.26k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  1.26k|    do {                                                                   \
  |  | 9465|  1.26k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.26k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.26k|        }                                                                  \
  |  | 9468|  1.26k|        else {                                                             \
  |  | 9469|  1.26k|            return vis(monostate_val);                                     \
  |  | 9470|  1.26k|        }                                                                  \
  |  | 9471|  1.26k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  1.89k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 632, False: 5.05k]
  ------------------
 9559|  1.89k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  1.89k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  1.89k|    do {                                                                   \
  |  | 9465|  1.89k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.89k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.89k|        }                                                                  \
  |  | 9468|  1.89k|        else {                                                             \
  |  | 9469|  1.89k|            return vis(monostate_val);                                     \
  |  | 9470|  1.89k|        }                                                                  \
  |  | 9471|  1.89k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  1.89k|        }
 9566|       |
 9567|  1.89k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 5.68k]
  ------------------
 9568|  1.89k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  1.89k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  1.89k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 5.68k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 5.68k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  5.68k|            SCN_CLANG_POP
 9585|  5.68k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  76.3k|{
 6171|  76.3k|    return arg.m_type;
 6172|  76.3k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  27.0k|{
 6183|  27.0k|    return arg.m_value;
 6184|  27.0k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  2.06k|    {
 2011|  2.06k|        return detail::transform_error_impl(std::move(*this),
 2012|  2.06k|                                            std::forward<F>(f));
 2013|  2.06k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  2.06k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  2.06k|    else {
 1504|  2.06k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  2.06k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  2.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.96k, False: 102]
  |  |  ------------------
  ------------------
 1506|  2.06k|                   ? result(*std::forward<Exp>(exp))
 1507|  2.06k|                   : result(unexpect,
 1508|    102|                            trivial_invoke(std::forward<F>(f),
 1509|    102|                                           std::forward<Exp>(exp).error()));
 1510|  2.06k|    }
 1511|  2.06k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1657|    102|        : base(unexpect, std::forward<Args>(args)...),
 1658|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    102|    {
 1660|    102|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  1.96k|    {
 1837|  1.96k|        return std::move(value());
 1838|  1.96k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6444|  50.5k|        : m_format{format},
 6445|  50.5k|          m_next_arg_id{next_arg_id},
 6446|  50.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  50.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  50.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  50.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  50.5k|    {
 6452|  50.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|  50.5k|    {
 3107|  50.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  50.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|  50.5k|    {
 3073|  50.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  50.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  50.5k|{
 7971|  50.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  50.5k|    handler.check_args_exhausted();
 7973|  50.5k|    return handler.get_error();
 7974|  50.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  50.5k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  50.5k|    auto begin = format.data();
 7939|  50.5k|    auto it = begin;
 7940|  50.5k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   171k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 165k, False: 6.08k]
  ------------------
 7943|   165k|        const auto ch = *it++;
 7944|   165k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 55.6k, False: 109k]
  ------------------
 7945|  55.6k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  55.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  55.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 43.5k, False: 12.1k]
  ------------------
 7949|  43.5k|                return;
 7950|  43.5k|            }
 7951|  55.6k|        }
 7952|   109k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 2.12k, False: 107k]
  ------------------
 7953|  2.12k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 952, False: 1.17k]
  |  |  |  Branch (1014:45): [True: 276, False: 1.84k]
  |  |  |  Branch (1014:45): [True: 676, False: 1.17k]
  |  |  ------------------
  ------------------
 7954|    952|                handler.on_error("Unmatched '}' in format string");
 7955|    952|                return;
 7956|    952|            }
 7957|       |
 7958|  1.17k|            handler.on_literal_text(begin, it);
 7959|  1.17k|            begin = ++it;
 7960|  1.17k|        }
 7961|   165k|    }
 7962|       |
 7963|  6.08k|    handler.on_literal_text(begin, end);
 7964|  6.08k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7867|  55.6k|{
 7868|  55.6k|    struct id_adapter {
 7869|  55.6k|        constexpr void operator()()
 7870|  55.6k|        {
 7871|  55.6k|            arg_id = handler.on_arg_id();
 7872|  55.6k|        }
 7873|  55.6k|        constexpr void operator()(std::size_t id)
 7874|  55.6k|        {
 7875|  55.6k|            arg_id = handler.on_arg_id(id);
 7876|  55.6k|        }
 7877|       |
 7878|  55.6k|        constexpr void on_error(const char* msg)
 7879|  55.6k|        {
 7880|  55.6k|            SCN_UNLIKELY_ATTR
 7881|  55.6k|            handler.on_error(msg);
 7882|  55.6k|        }
 7883|       |
 7884|  55.6k|        Handler& handler;
 7885|  55.6k|        std::size_t arg_id;
 7886|  55.6k|    };
 7887|       |
 7888|  55.6k|    ++begin;
 7889|  55.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 98, False: 55.5k]
  |  |  ------------------
  ------------------
 7890|     98|        handler.on_error("Unexpected end of replacement field");
 7891|     98|        return begin;
 7892|     98|    }
 7893|       |
 7894|  55.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 5.65k, False: 49.8k]
  ------------------
 7895|  5.65k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|  5.65k|    }
 7897|  49.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 6.64k, False: 43.2k]
  ------------------
 7898|  6.64k|        handler.on_literal_text(begin, begin + 1);
 7899|  6.64k|    }
 7900|  43.2k|    else {
 7901|  43.2k|        auto adapter = id_adapter{handler, 0};
 7902|  43.2k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  43.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 110, False: 43.1k]
  |  |  ------------------
  ------------------
 7905|    110|            handler.on_error("Missing '}' in format string");
 7906|    110|            return begin;
 7907|    110|        }
 7908|       |
 7909|  43.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 140, False: 42.9k]
  ------------------
 7910|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|    140|        }
 7912|  42.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 24.7k, False: 18.2k]
  ------------------
 7913|  24.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 74, False: 24.6k]
  |  |  ------------------
  ------------------
 7914|     74|                handler.on_error("Unexpected end of replacement field");
 7915|     74|                return begin;
 7916|     74|            }
 7917|  24.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  24.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.96k, False: 21.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 24.6k]
  |  |  |  Branch (1014:45): [True: 2.96k, False: 21.7k]
  |  |  ------------------
  ------------------
 7919|  2.96k|                handler.on_error("Unknown format specifier");
 7920|  2.96k|                return begin;
 7921|  2.96k|            }
 7922|  24.6k|        }
 7923|  18.2k|        else {
 7924|  18.2k|            SCN_UNLIKELY_ATTR
 7925|  18.2k|            handler.on_error("Missing '}' in format string");
 7926|  18.2k|            return begin;
 7927|  18.2k|        }
 7928|  43.1k|    }
 7929|  34.1k|    return begin + 1;
 7930|  55.5k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 9026|  30.4k|    {
 9027|  30.4k|        return m_args.get(id);
 9028|  30.4k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6479|  30.0k|    {
 6480|  30.0k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 42, False: 29.9k]
  |  |  ------------------
  ------------------
 6481|     42|            on_error(
 6482|     42|                "Cannot switch from manual to automatic argument indexing");
 6483|     42|            return 0;
 6484|     42|        }
 6485|       |
 6486|  29.9k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|  29.9k|        do_check_arg_id(id);
 6488|  29.9k|        return id;
 6489|  30.0k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6509|    112|    {
 6510|    112|        m_error = unexpected(detail::handle_error(
 6511|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6512|    112|        return m_error.error();
 6513|    112|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6973|  30.4k|{
 6974|  30.4k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|  30.4k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|  30.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  43.2k|{
 7367|  43.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  43.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  43.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  43.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 43.2k, False: 0]
  |  Branch (7368:26): [True: 18.8k, False: 24.3k]
  ------------------
 7369|  18.8k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|  18.8k|    }
 7371|       |
 7372|  24.3k|    handler();
 7373|  24.3k|    return begin;
 7374|  43.2k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7336|  18.8k|{
 7337|  18.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7338|       |
 7339|  18.8k|    CharT c = *begin;
 7340|  18.8k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7340:9): [True: 18.1k, False: 736]
  |  Branch (7340:27): [True: 34, False: 702]
  ------------------
 7341|  18.1k|        handler.on_error("Invalid argument ID");
 7342|  18.1k|        return begin;
 7343|  18.1k|    }
 7344|       |
 7345|    702|    int idx = 0;
 7346|    702|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7346:9): [True: 306, False: 396]
  ------------------
 7347|    306|        idx = parse_simple_int(begin, end);
 7348|    306|    }
 7349|    396|    else {
 7350|    396|        ++begin;
 7351|    396|    }
 7352|       |
 7353|    702|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7353:9): [True: 110, False: 592]
  |  Branch (7353:26): [True: 452, False: 140]
  |  Branch (7353:50): [True: 72, False: 380]
  ------------------
 7354|    182|        handler.on_error("Invalid argument ID");
 7355|    182|        return begin;
 7356|    182|    }
 7357|    520|    handler(static_cast<std::size_t>(idx));
 7358|       |
 7359|    520|    return begin;
 7360|    702|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7879|  18.3k|        {
 7880|  18.3k|            SCN_UNLIKELY_ATTR
 7881|  18.3k|            handler.on_error(msg);
 7882|  18.3k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7315|  12.8k|{
 7316|  12.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7317|  12.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1079|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7318|       |
 7319|  12.8k|    unsigned long long value = 0;
 7320|  25.8k|    do {
 7321|  25.8k|        value *= 10;
 7322|  25.8k|        value += static_cast<unsigned long long>(*begin - '0');
 7323|  25.8k|        if (value >
  ------------------
  |  Branch (7323:13): [True: 118, False: 25.7k]
  ------------------
 7324|  25.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7325|    118|            return -1;
 7326|    118|        }
 7327|  25.7k|        ++begin;
 7328|  25.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7328:14): [True: 25.4k, False: 294]
  |  Branch (7328:30): [True: 23.6k, False: 1.77k]
  |  Branch (7328:47): [True: 12.9k, False: 10.7k]
  ------------------
 7329|  12.7k|    return static_cast<int>(value);
 7330|  12.8k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7874|    520|        {
 7875|    520|            arg_id = handler.on_arg_id(id);
 7876|    520|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6492|    520|    {
 6493|    520|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  | 1014|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 70, False: 450]
  |  |  ------------------
  ------------------
 6494|     70|            on_error(
 6495|     70|                "Cannot switch from manual to automatic argument indexing");
 6496|     70|            return;
 6497|     70|        }
 6498|    450|        m_next_arg_id = -1;
 6499|    450|        do_check_arg_id(id);
 6500|    450|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  24.3k|        {
 7871|  24.3k|            arg_id = handler.on_arg_id();
 7872|  24.3k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6474|  21.4k|    {
 6475|  21.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|  21.4k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6463|  46.1k|    {
 6464|  46.1k|        return m_format.data();
 6465|  46.1k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|  24.6k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|  24.6k|    {
 8055|  24.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|  24.6k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7783|  24.6k|{
 7784|  24.6k|    auto do_presentation = [&]() -> const CharT* {
 7785|  24.6k|        if (*begin == CharT{'['}) {
 7786|  24.6k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  24.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|  24.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|  24.6k|                return begin;
 7792|  24.6k|            }
 7793|  24.6k|            handler.on_character_set_string(set);
 7794|  24.6k|            return begin;
 7795|  24.6k|        }
 7796|  24.6k|        if (*begin == CharT{'/'}) {
 7797|  24.6k|            return parse_presentation_regex(begin, end, handler);
 7798|  24.6k|        }
 7799|  24.6k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  24.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|  24.6k|            handler.on_error("Invalid type specifier in format string");
 7802|  24.6k|            return begin;
 7803|  24.6k|        }
 7804|  24.6k|        handler.on_type(type);
 7805|  24.6k|        return begin;
 7806|  24.6k|    };
 7807|       |
 7808|  24.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 23.5k, False: 1.08k]
  |  Branch (7808:28): [True: 2.39k, False: 21.2k]
  ------------------
 7809|  24.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 968, False: 1.43k]
  |  Branch (7809:36): [True: 934, False: 34]
  ------------------
 7810|    934|        return do_presentation();
 7811|    934|    }
 7812|       |
 7813|  23.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  23.7k|    begin = parse_align(begin, end, handler);
 7819|  23.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 126, False: 23.6k]
  |  |  ------------------
  ------------------
 7820|    126|        handler.on_error("Unexpected end of format string");
 7821|    126|        return begin;
 7822|    126|    }
 7823|       |
 7824|  23.6k|    begin = parse_width(begin, end, handler);
 7825|  23.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 102, False: 23.5k]
  |  |  ------------------
  ------------------
 7826|    102|        handler.on_error("Unexpected end of format string");
 7827|    102|        return begin;
 7828|    102|    }
 7829|       |
 7830|  23.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 9.16k, False: 14.3k]
  ------------------
 7831|  9.16k|        ++begin;
 7832|  9.16k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  9.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 9.13k]
  |  |  ------------------
  ------------------
 7833|     34|            handler.on_error("Unexpected end of format string");
 7834|     34|            return begin;
 7835|     34|        }
 7836|  9.13k|        begin = parse_precision(begin, end, handler);
 7837|  9.13k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  9.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 114, False: 9.01k]
  |  |  ------------------
  ------------------
 7838|    114|            handler.on_error("Unexpected end of format string");
 7839|    114|            return begin;
 7840|    114|        }
 7841|  9.13k|    }
 7842|       |
 7843|  23.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 506, False: 22.8k]
  ------------------
 7844|    506|        handler.on_localized();
 7845|    506|        ++begin;
 7846|    506|    }
 7847|  23.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52, False: 23.3k]
  |  |  ------------------
  ------------------
 7848|     52|        handler.on_error("Unexpected end of format string");
 7849|     52|        return begin;
 7850|     52|    }
 7851|       |
 7852|  23.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 23.3k, False: 0]
  |  Branch (7852:25): [True: 17.6k, False: 5.66k]
  ------------------
 7853|  17.6k|        do_presentation();
 7854|  17.6k|    }
 7855|  23.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.92k, False: 21.3k]
  |  |  ------------------
  ------------------
 7856|  1.92k|        handler.on_error("Unexpected end of format string");
 7857|  1.92k|        return begin;
 7858|  1.92k|    }
 7859|       |
 7860|  21.3k|    return begin;
 7861|  23.3k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7430|  2.39k|{
 7431|  2.39k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 932, False: 1.46k]
  |  Branch (7431:33): [True: 880, False: 52]
  ------------------
 7432|  2.39k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 232, False: 1.28k]
  |  Branch (7432:33): [True: 88, False: 144]
  ------------------
 7433|  2.39k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|  18.5k|    auto do_presentation = [&]() -> const CharT* {
 7785|  18.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 10.9k, False: 7.60k]
  ------------------
 7786|  10.9k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  10.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 864, False: 10.1k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|    864|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|    864|                return begin;
 7792|    864|            }
 7793|  10.1k|            handler.on_character_set_string(set);
 7794|  10.1k|            return begin;
 7795|  10.9k|        }
 7796|  7.60k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 2.04k, False: 5.56k]
  ------------------
 7797|  2.04k|            return parse_presentation_regex(begin, end, handler);
 7798|  2.04k|        }
 7799|  5.56k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  5.56k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 568, False: 4.99k]
  |  |  ------------------
  ------------------
 7801|    568|            handler.on_error("Invalid type specifier in format string");
 7802|    568|            return begin;
 7803|    568|        }
 7804|  4.99k|        handler.on_type(type);
 7805|  4.99k|        return begin;
 7806|  5.56k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7620|  10.9k|{
 7621|  10.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  10.9k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  10.9k|    auto start = begin;
 7625|  10.9k|    ++begin;
 7626|       |
 7627|  10.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 42, False: 10.9k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|     42|        return {};
 7632|     42|    }
 7633|  10.9k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 2.22k, False: 8.71k]
  ------------------
 7634|  2.22k|        handler.on_charset_inverted();
 7635|  2.22k|        ++begin;
 7636|  2.22k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 2.19k]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|     34|            return {};
 7641|     34|        }
 7642|  2.19k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 52, False: 2.14k]
  ------------------
 7643|     52|            handler.on_charset_single(char32_t{']'});
 7644|     52|            ++begin;
 7645|     52|        }
 7646|  2.19k|    }
 7647|  8.71k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 34, False: 8.68k]
  ------------------
 7648|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|     34|    }
 7650|       |
 7651|  1.06M|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 1.06M, False: 484]
  ------------------
 7652|  1.06M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 270, False: 1.06M]
  |  |  ------------------
  ------------------
 7653|    270|            break;
 7654|    270|        }
 7655|       |
 7656|  1.06M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 10.1k, False: 1.05M]
  ------------------
 7657|  10.1k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  10.1k|        }
 7659|       |
 7660|  1.05M|        parse_presentation_set_literal(begin, end, handler);
 7661|  1.05M|    }
 7662|       |
 7663|    754|    SCN_UNLIKELY_ATTR
 7664|    754|    handler.on_error("Invalid [character set] specifier in format string");
 7665|    754|    return {};
 7666|  10.8k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7584|  1.05M|{
 7585|  1.05M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  1.05M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  1.05M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 148, False: 1.05M]
  |  |  ------------------
  ------------------
 7589|    148|        return;
 7590|    148|    }
 7591|       |
 7592|  1.05M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 1.05M, False: 188]
  |  Branch (7592:25): [True: 9.69k, False: 1.04M]
  |  Branch (7592:49): [True: 9.66k, False: 34]
  ------------------
 7593|  1.05M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 9.48k, False: 178]
  ------------------
 7594|  9.48k|        ++begin;
 7595|       |
 7596|  9.48k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  9.48k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  9.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 70, False: 9.41k]
  |  |  ------------------
  ------------------
 7598|     70|            return;
 7599|     70|        }
 7600|       |
 7601|  9.41k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  9.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 9.38k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|     34|            return;
 7606|     34|        }
 7607|       |
 7608|  9.38k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  9.38k|        return;
 7610|  9.41k|    }
 7611|       |
 7612|  1.04M|    handler.on_charset_single(cp_first);
 7613|  1.04M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7560|  1.06M|{
 7561|  1.06M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  1.06M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  1.06M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  2.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 96, False: 1.06M]
  |  |  |  Branch (1014:45): [True: 70, False: 1.06M]
  |  |  |  Branch (1014:45): [True: 26, False: 1.06M]
  |  |  ------------------
  ------------------
 7565|     96|        handler.on_error("Invalid encoding in format string");
 7566|     96|        return invalid_code_point;
 7567|     96|    }
 7568|       |
 7569|  1.06M|    const auto cp =
 7570|  1.06M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  1.06M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 122, False: 1.06M]
  |  |  ------------------
  ------------------
 7572|    122|        handler.on_error("Invalid encoding in format string");
 7573|    122|        return invalid_code_point;
 7574|    122|    }
 7575|       |
 7576|  1.06M|    begin += len;
 7577|  1.06M|    return cp;
 7578|  1.06M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7272|  10.1k|    {
 7273|  10.1k|        m_specs.charset_string_data = fmt.data();
 7274|  10.1k|        m_specs.charset_string_size = fmt.size();
 7275|  10.1k|        on_type(presentation_type::string_set);
 7276|  10.1k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7672|  2.04k|{
 7673|  2.04k|#if !SCN_DISABLE_REGEX
 7674|  2.04k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  2.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7675|  2.04k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1079|  2.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7676|       |
 7677|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7678|       |                  std::is_same_v<CharT, wchar_t>) {
 7679|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7680|       |        return begin;
 7681|       |    }
 7682|       |
 7683|  2.04k|    auto start = begin;
 7684|  2.04k|    ++begin;
 7685|       |
 7686|  2.04k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 2.00k]
  |  |  ------------------
  ------------------
 7687|     34|        handler.on_error("Unexpected end of regex in format string");
 7688|     34|        return begin;
 7689|     34|    }
 7690|       |
 7691|  2.00k|    handler.on_type(presentation_type::regex);
 7692|  86.4k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7692:12): [True: 86.2k, False: 158]
  ------------------
 7693|  86.2k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7693:13): [True: 13.1k, False: 73.1k]
  ------------------
 7694|  13.1k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7694:17): [True: 1.85k, False: 11.3k]
  ------------------
 7695|  1.85k|                break;
 7696|  1.85k|            }
 7697|  11.3k|            else {
 7698|  11.3k|                handler.on_type(presentation_type::regex_escaped);
 7699|  11.3k|            }
 7700|  13.1k|        }
 7701|  86.2k|    }
 7702|  2.00k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 158, False: 1.85k]
  |  |  ------------------
  ------------------
 7703|    158|        handler.on_error("Unexpected end of regex in format string");
 7704|    158|        return begin;
 7705|    158|    }
 7706|       |
 7707|  1.85k|    auto regex_end = begin;
 7708|  1.85k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7709|  1.85k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  | 1014|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 1.81k]
  |  |  ------------------
  ------------------
 7710|     34|        handler.on_error("Invalid (empty) regex in format string");
 7711|     34|        return begin;
 7712|     34|    }
 7713|  1.81k|    handler.on_regex_pattern(regex_pattern);
 7714|  1.81k|    ++begin;
 7715|       |
 7716|  1.81k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 1.78k]
  |  |  ------------------
  ------------------
 7717|     34|        handler.on_error("Unexpected end of regex in format string");
 7718|     34|        return begin;
 7719|     34|    }
 7720|       |
 7721|  1.78k|    regex_flags flags{regex_flags::none};
 7722|  1.78k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7723|  1.78k|        {{'m', regex_flags::multiline},
 7724|  1.78k|         {'s', regex_flags::singleline},
 7725|  1.78k|         {'i', regex_flags::nocase},
 7726|  1.78k|         {'n', regex_flags::nocapture}}};
 7727|  2.00k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7727:12): [True: 1.96k, False: 42]
  ------------------
 7728|  1.96k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7728:13): [True: 1.65k, False: 310]
  ------------------
 7729|  1.65k|            break;
 7730|  1.65k|        }
 7731|    310|        bool found_flag = false;
 7732|    874|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7732:24): [True: 874, False: 54]
  ------------------
 7733|    874|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7733:17): [True: 618, False: 256]
  ------------------
 7734|    618|                continue;
 7735|    618|            }
 7736|    256|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7736:17): [True: 34, False: 222]
  ------------------
 7737|     34|                handler.on_error("Flag set multiple times in regex");
 7738|     34|                return begin;
 7739|     34|            }
 7740|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7741|       |            if (*begin == CharT{'s'}) {
 7742|       |                // clang-format off
 7743|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7744|       |                // clang-format on
 7745|       |            }
 7746|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7747|       |            if (*begin == CharT{'m'}) {
 7748|       |                // clang-format off
 7749|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7750|       |                // clang-format on
 7751|       |            }
 7752|       |#endif
 7753|       |#endif
 7754|    222|            flags |= flag.second;
 7755|    222|            found_flag = true;
 7756|    222|            break;
 7757|    256|        }
 7758|    276|        if (!found_flag) {
  ------------------
  |  Branch (7758:13): [True: 54, False: 222]
  ------------------
 7759|     54|            handler.on_error("Invalid flag in regex");
 7760|     54|            return begin;
 7761|     54|        }
 7762|    276|    }
 7763|  1.69k|    handler.on_regex_flags(flags);
 7764|       |
 7765|  1.69k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 42, False: 1.65k]
  |  |  ------------------
  ------------------
 7766|     42|        handler.on_error("Unexpected end of regex in format string");
 7767|     42|        return begin;
 7768|     42|    }
 7769|       |
 7770|  1.65k|    return begin;
 7771|       |#else
 7772|       |    SCN_UNUSED(begin);
 7773|       |    SCN_UNUSED(end);
 7774|       |    handler.on_error("Regular expression support is disabled");
 7775|       |    return {};
 7776|       |#endif
 7777|  1.69k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7281|  1.81k|    {
 7282|  1.81k|        m_specs.charset_string_data = pattern.data();
 7283|  1.81k|        m_specs.charset_string_size = pattern.size();
 7284|  1.81k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7378|  5.56k|{
 7379|  5.56k|    switch (type) {
 7380|    142|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 142, False: 5.42k]
  ------------------
 7381|    194|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 52, False: 5.51k]
  ------------------
 7382|    194|            return presentation_type::int_binary;
 7383|    108|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 108, False: 5.45k]
  ------------------
 7384|    108|            return presentation_type::int_decimal;
 7385|    196|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 196, False: 5.36k]
  ------------------
 7386|    196|            return presentation_type::int_generic;
 7387|     88|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 88, False: 5.47k]
  ------------------
 7388|     88|            return presentation_type::int_unsigned_decimal;
 7389|    178|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 178, False: 5.38k]
  ------------------
 7390|    178|            return presentation_type::int_octal;
 7391|     98|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 98, False: 5.46k]
  ------------------
 7392|    158|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 60, False: 5.50k]
  ------------------
 7393|    158|            return presentation_type::int_hex;
 7394|     34|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 34, False: 5.52k]
  ------------------
 7395|     68|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 34, False: 5.52k]
  ------------------
 7396|     68|            return presentation_type::int_arbitrary_base;
 7397|    128|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 128, False: 5.43k]
  ------------------
 7398|    234|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 106, False: 5.45k]
  ------------------
 7399|    234|            return presentation_type::float_hex;
 7400|     88|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 88, False: 5.47k]
  ------------------
 7401|    230|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 142, False: 5.42k]
  ------------------
 7402|    230|            return presentation_type::float_scientific;
 7403|    214|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 214, False: 5.34k]
  ------------------
 7404|    320|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 106, False: 5.45k]
  ------------------
 7405|    320|            return presentation_type::float_fixed;
 7406|    150|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 150, False: 5.41k]
  ------------------
 7407|    232|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 82, False: 5.48k]
  ------------------
 7408|    232|            return presentation_type::float_general;
 7409|  2.28k|        case 's':
  ------------------
  |  Branch (7409:9): [True: 2.28k, False: 3.27k]
  ------------------
 7410|  2.28k|            return presentation_type::string;
 7411|    592|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 592, False: 4.97k]
  ------------------
 7412|    592|            return presentation_type::character;
 7413|     34|        case '?':
  ------------------
  |  Branch (7413:9): [True: 34, False: 5.52k]
  ------------------
 7414|     34|            return presentation_type::escaped_character;
 7415|     78|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 78, False: 5.48k]
  ------------------
 7416|     78|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 5.56k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 5.56k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|    568|        default:
  ------------------
  |  Branch (7423:9): [True: 568, False: 4.99k]
  ------------------
 7424|    568|            return presentation_type::none;
 7425|  5.56k|    }
 7426|  5.56k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7455|  23.7k|{
 7456|  23.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  23.7k|    auto check_align = [](wchar_t ch) {
 7459|  23.7k|        switch (ch) {
 7460|  23.7k|            case L'<':
 7461|  23.7k|                return align_type::left;
 7462|  23.7k|            case L'>':
 7463|  23.7k|                return align_type::right;
 7464|  23.7k|            case L'^':
 7465|  23.7k|                return align_type::center;
 7466|  23.7k|            default:
 7467|  23.7k|                return align_type::none;
 7468|  23.7k|        }
 7469|  23.7k|    };
 7470|       |
 7471|  23.7k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  23.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 42, False: 23.7k]
  |  |  |  Branch (1014:45): [True: 38, False: 23.7k]
  |  |  |  Branch (1014:45): [True: 4, False: 23.7k]
  |  |  ------------------
  ------------------
 7473|  23.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|     42|        handler.on_error("Invalid encoding in fill character");
 7475|     42|        return begin;
 7476|     42|    }
 7477|       |
 7478|  23.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  23.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  23.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  23.7k|    const auto begin_before_fill = begin;
 7483|  23.7k|    begin += potential_fill_len;
 7484|       |
 7485|  23.7k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 1.04k, False: 22.6k]
  ------------------
 7486|  1.04k|        return begin_before_fill;
 7487|  1.04k|    }
 7488|       |
 7489|  22.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  22.6k|    const auto begin_after_fill = begin;
 7491|  22.6k|    ++begin;
 7492|       |
 7493|  22.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 20.3k, False: 2.33k]
  ------------------
 7494|  20.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 60, False: 20.2k]
  |  |  ------------------
  ------------------
 7495|     60|            handler.on_error("Invalid fill character '{' in format string");
 7496|     60|            return begin;
 7497|     60|        }
 7498|  20.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 7.88k, False: 12.3k]
  ------------------
 7499|  7.88k|            return begin_before_fill;
 7500|  7.88k|        }
 7501|  20.2k|    }
 7502|       |
 7503|  14.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 12.1k, False: 2.58k]
  ------------------
 7504|  12.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 2.00k, False: 10.1k]
  ------------------
 7505|  2.00k|            handler.on_align(potential_align_on_fill);
 7506|  2.00k|            return begin_after_fill;
 7507|  2.00k|        }
 7508|  10.1k|        return begin_before_fill;
 7509|  12.1k|    }
 7510|       |
 7511|  2.58k|    handler.on_fill(potential_fill);
 7512|  2.58k|    handler.on_align(potential_align_after_fill);
 7513|  2.58k|    return begin;
 7514|  14.7k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7437|  23.7k|{
 7438|  23.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|       |    if constexpr (sizeof(CharT) != 1) {
 7440|       |        return 1;
 7441|       |    }
 7442|  23.7k|    else {
 7443|  23.7k|        const auto lengths =
 7444|  23.7k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|  23.7k|            "\3\4";
 7446|  23.7k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|  23.7k|        return len;
 7448|  23.7k|    }
 7449|  23.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|  46.3k|    auto check_align = [](wchar_t ch) {
 7459|  46.3k|        switch (ch) {
 7460|  1.48k|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 1.48k, False: 44.8k]
  ------------------
 7461|  1.48k|                return align_type::left;
 7462|    868|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 868, False: 45.5k]
  ------------------
 7463|    868|                return align_type::right;
 7464|  3.23k|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 3.23k, False: 43.1k]
  ------------------
 7465|  3.23k|                return align_type::center;
 7466|  40.7k|            default:
  ------------------
  |  Branch (7466:13): [True: 40.7k, False: 5.59k]
  ------------------
 7467|  40.7k|                return align_type::none;
 7468|  46.3k|        }
 7469|  46.3k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7193|  2.58k|    {
 7194|  2.58k|        m_specs.fill = fill;
 7195|  2.58k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7072|  2.58k|    {
 7073|  2.58k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1079|  2.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7074|  2.58k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1079|  2.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7075|  2.58k|        if constexpr (sizeof(CharT) == 1) {
 7076|  9.25k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (7076:32): [True: 6.66k, False: 2.58k]
  ------------------
 7077|  6.66k|                SCN_GCC_PUSH
 7078|  6.66k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 7079|  6.66k|                m_data[i] = s[i];
 7080|  6.66k|                SCN_GCC_POP
 7081|  6.66k|            }
 7082|  2.58k|            m_size = static_cast<unsigned char>(s.size());
 7083|       |        }
 7084|       |        else if constexpr (sizeof(CharT) == 2) {
 7085|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 7086|       |            m_data[1] =
 7087|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 7088|       |            if (s.size() == 1) {
 7089|       |                return;
 7090|       |            }
 7091|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 7092|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 7093|       |        }
 7094|       |        else {
 7095|       |            const auto front = static_cast<unsigned>(s.front());
 7096|       |            m_data[0] = static_cast<char>(front);
 7097|       |            m_data[1] = static_cast<char>(front >> 8);
 7098|       |            m_data[2] = static_cast<char>(front >> 16);
 7099|       |            m_data[3] = static_cast<char>(front >> 24);
 7100|       |        }
 7101|  2.58k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7520|  23.6k|{
 7521|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  23.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 13.8k, False: 9.78k]
  |  Branch (7523:33): [True: 3.55k, False: 10.2k]
  ------------------
 7524|  3.55k|        int width = parse_simple_int(begin, end);
 7525|  3.55k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  3.55k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 3.51k, False: 34]
  |  |  ------------------
  ------------------
 7526|  3.51k|            handler.on_width(width);
 7527|  3.51k|        }
 7528|     34|        else {
 7529|     34|            handler.on_error("Invalid field width");
 7530|     34|            return begin;
 7531|     34|        }
 7532|  3.55k|    }
 7533|  23.5k|    return begin;
 7534|  23.6k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7540|  9.13k|{
 7541|  9.13k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  9.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7542|       |
 7543|  9.13k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7543:9): [True: 9.09k, False: 40]
  |  Branch (7543:33): [True: 9.03k, False: 58]
  ------------------
 7544|  9.03k|        int prec = parse_simple_int(begin, end);
 7545|  9.03k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  | 1013|  9.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 8.98k, False: 50]
  |  |  ------------------
  ------------------
 7546|  8.98k|            handler.on_precision(prec);
 7547|  8.98k|        }
 7548|     50|        else {
 7549|     50|            handler.on_error("Invalid field precision");
 7550|     50|            return begin;
 7551|     50|        }
 7552|  9.03k|    }
 7553|  9.08k|    return begin;
 7554|  9.13k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 8059|    506|    {
 8060|    506|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|    506|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 456, False: 50]
  ------------------
 8062|    506|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 406, False: 50]
  ------------------
 8063|    506|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 356, False: 50]
  ------------------
 8064|    506|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 306, False: 50]
  ------------------
 8065|    306|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|    306|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|    306|        }
 8070|       |
 8071|    200|        Handler::on_localized();
 8072|    200|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7198|    464|    {
 7199|    464|        if constexpr (!SCN_DISABLE_LOCALE) {
 7200|    464|            m_specs.localized = true;
 7201|       |        }
 7202|       |        else {
 7203|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7204|       |        }
 7205|    464|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|  21.3k|{
 9606|  21.3k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  21.3k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  21.3k|{
 9463|  21.3k|#define SCN_VISIT(Type)                                                    \
 9464|  21.3k|    do {                                                                   \
 9465|  21.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  21.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  21.3k|        }                                                                  \
 9468|  21.3k|        else {                                                             \
 9469|  21.3k|            return vis(monostate_val);                                     \
 9470|  21.3k|        }                                                                  \
 9471|  21.3k|    } while (false)
 9472|       |
 9473|  21.3k|    monostate monostate_val{};
 9474|       |
 9475|  21.3k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 21.3k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 21.3k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  2.39k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 2.39k, False: 18.9k]
  ------------------
 9481|  2.39k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  2.39k|    do {                                                                   \
  |  | 9465|  2.39k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.39k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.39k|        }                                                                  \
  |  | 9468|  2.39k|        else {                                                             \
  |  | 9469|  2.39k|            return vis(monostate_val);                                     \
  |  | 9470|  2.39k|        }                                                                  \
  |  | 9471|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  2.39k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 21.3k]
  ------------------
 9483|  2.39k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  2.39k|    do {                                                                   \
  |  | 9465|  2.39k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.39k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.39k|        }                                                                  \
  |  | 9468|  2.39k|        else {                                                             \
  |  | 9469|  2.39k|            return vis(monostate_val);                                     \
  |  | 9470|  2.39k|        }                                                                  \
  |  | 9471|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  2.39k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 21.3k]
  ------------------
 9485|  2.39k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  2.39k|    do {                                                                   \
  |  | 9465|  2.39k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.39k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.39k|        }                                                                  \
  |  | 9468|  2.39k|        else {                                                             \
  |  | 9469|  2.39k|            return vis(monostate_val);                                     \
  |  | 9470|  2.39k|        }                                                                  \
  |  | 9471|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  2.39k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 21.3k]
  ------------------
 9487|  2.39k|#if SCN_HAS_INT128
 9488|  2.39k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  2.39k|    do {                                                                   \
  |  | 9465|  2.39k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.39k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.39k|        }                                                                  \
  |  | 9468|  2.39k|        else {                                                             \
  |  | 9469|  2.39k|            return vis(monostate_val);                                     \
  |  | 9470|  2.39k|        }                                                                  \
  |  | 9471|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  2.39k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 21.3k]
  ------------------
 9493|  2.39k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  2.39k|    do {                                                                   \
  |  | 9465|  2.39k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.39k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.39k|        }                                                                  \
  |  | 9468|  2.39k|        else {                                                             \
  |  | 9469|  2.39k|            return vis(monostate_val);                                     \
  |  | 9470|  2.39k|        }                                                                  \
  |  | 9471|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  2.39k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 21.3k]
  ------------------
 9495|  2.39k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  2.39k|    do {                                                                   \
  |  | 9465|  2.39k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.39k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.39k|        }                                                                  \
  |  | 9468|  2.39k|        else {                                                             \
  |  | 9469|  2.39k|            return vis(monostate_val);                                     \
  |  | 9470|  2.39k|        }                                                                  \
  |  | 9471|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  4.78k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 2.39k, False: 18.9k]
  ------------------
 9497|  4.78k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  4.78k|    do {                                                                   \
  |  | 9465|  4.78k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.78k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.78k|        }                                                                  \
  |  | 9468|  4.78k|        else {                                                             \
  |  | 9469|  4.78k|            return vis(monostate_val);                                     \
  |  | 9470|  4.78k|        }                                                                  \
  |  | 9471|  4.78k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  4.78k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 21.3k]
  ------------------
 9499|  4.78k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  4.78k|    do {                                                                   \
  |  | 9465|  4.78k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.78k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.78k|        }                                                                  \
  |  | 9468|  4.78k|        else {                                                             \
  |  | 9469|  4.78k|            return vis(monostate_val);                                     \
  |  | 9470|  4.78k|        }                                                                  \
  |  | 9471|  4.78k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  4.78k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 21.3k]
  ------------------
 9501|  4.78k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  4.78k|    do {                                                                   \
  |  | 9465|  4.78k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.78k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.78k|        }                                                                  \
  |  | 9468|  4.78k|        else {                                                             \
  |  | 9469|  4.78k|            return vis(monostate_val);                                     \
  |  | 9470|  4.78k|        }                                                                  \
  |  | 9471|  4.78k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  4.78k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 21.3k]
  ------------------
 9503|  4.78k|#if SCN_HAS_INT128
 9504|  4.78k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  4.78k|    do {                                                                   \
  |  | 9465|  4.78k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.78k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.78k|        }                                                                  \
  |  | 9468|  4.78k|        else {                                                             \
  |  | 9469|  4.78k|            return vis(monostate_val);                                     \
  |  | 9470|  4.78k|        }                                                                  \
  |  | 9471|  4.78k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  7.13k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 2.35k, False: 18.9k]
  ------------------
 9509|  7.13k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  7.13k|    do {                                                                   \
  |  | 9465|  7.13k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  7.13k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  7.13k|        }                                                                  \
  |  | 9468|  7.13k|        else {                                                             \
  |  | 9469|  7.13k|            return vis(monostate_val);                                     \
  |  | 9470|  7.13k|        }                                                                  \
  |  | 9471|  7.13k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  9.53k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 2.39k, False: 18.9k]
  ------------------
 9511|  9.53k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  9.53k|    do {                                                                   \
  |  | 9465|  9.53k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  9.53k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  9.53k|        }                                                                  \
  |  | 9468|  9.53k|        else {                                                             \
  |  | 9469|  9.53k|            return vis(monostate_val);                                     \
  |  | 9470|  9.53k|        }                                                                  \
  |  | 9471|  9.53k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  11.8k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 2.35k, False: 18.9k]
  ------------------
 9513|  11.8k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  11.8k|    do {                                                                   \
  |  | 9465|  11.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  11.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  11.8k|        }                                                                  \
  |  | 9468|  11.8k|        else {                                                             \
  |  | 9469|  11.8k|            return vis(monostate_val);                                     \
  |  | 9470|  11.8k|        }                                                                  \
  |  | 9471|  11.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  11.8k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 21.3k]
  ------------------
 9515|  11.8k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  11.8k|    do {                                                                   \
  |  | 9465|  11.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  11.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  11.8k|        }                                                                  \
  |  | 9468|  11.8k|        else {                                                             \
  |  | 9469|  11.8k|            return vis(monostate_val);                                     \
  |  | 9470|  11.8k|        }                                                                  \
  |  | 9471|  11.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  11.8k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 21.3k]
  ------------------
 9517|  11.8k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  11.8k|    do {                                                                   \
  |  | 9465|  11.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  11.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  11.8k|        }                                                                  \
  |  | 9468|  11.8k|        else {                                                             \
  |  | 9469|  11.8k|            return vis(monostate_val);                                     \
  |  | 9470|  11.8k|        }                                                                  \
  |  | 9471|  11.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  11.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 21.3k]
  ------------------
 9519|  11.8k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  11.8k|    do {                                                                   \
  |  | 9465|  11.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  11.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  11.8k|        }                                                                  \
  |  | 9468|  11.8k|        else {                                                             \
  |  | 9469|  11.8k|            return vis(monostate_val);                                     \
  |  | 9470|  11.8k|        }                                                                  \
  |  | 9471|  11.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  14.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 2.39k, False: 18.9k]
  ------------------
 9521|  14.2k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  14.2k|    do {                                                                   \
  |  | 9465|  14.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  14.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  14.2k|        }                                                                  \
  |  | 9468|  14.2k|        else {                                                             \
  |  | 9469|  14.2k|            return vis(monostate_val);                                     \
  |  | 9470|  14.2k|        }                                                                  \
  |  | 9471|  14.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  14.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 21.3k]
  ------------------
 9523|  14.2k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  14.2k|    do {                                                                   \
  |  | 9465|  14.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  14.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  14.2k|        }                                                                  \
  |  | 9468|  14.2k|        else {                                                             \
  |  | 9469|  14.2k|            return vis(monostate_val);                                     \
  |  | 9470|  14.2k|        }                                                                  \
  |  | 9471|  14.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  14.2k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 21.3k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  14.2k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 21.3k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 21.3k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 21.3k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 21.3k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  2.35k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 2.35k, False: 18.9k]
  ------------------
 9555|  2.35k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  2.35k|    do {                                                                   \
  |  | 9465|  2.35k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.35k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.35k|        }                                                                  \
  |  | 9468|  2.35k|        else {                                                             \
  |  | 9469|  2.35k|            return vis(monostate_val);                                     \
  |  | 9470|  2.35k|        }                                                                  \
  |  | 9471|  2.35k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  4.70k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 2.35k, False: 18.9k]
  ------------------
 9557|  4.70k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  4.70k|    do {                                                                   \
  |  | 9465|  4.70k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  4.70k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  4.70k|        }                                                                  \
  |  | 9468|  4.70k|        else {                                                             \
  |  | 9469|  4.70k|            return vis(monostate_val);                                     \
  |  | 9470|  4.70k|        }                                                                  \
  |  | 9471|  4.70k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  7.06k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 2.35k, False: 18.9k]
  ------------------
 9559|  7.06k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  7.06k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  7.06k|    do {                                                                   \
  |  | 9465|  7.06k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  7.06k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  7.06k|        }                                                                  \
  |  | 9468|  7.06k|        else {                                                             \
  |  | 9469|  7.06k|            return vis(monostate_val);                                     \
  |  | 9470|  7.06k|        }                                                                  \
  |  | 9471|  7.06k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  7.06k|        }
 9566|       |
 9567|  7.06k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 21.3k]
  ------------------
 9568|  7.06k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  7.06k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  7.06k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 21.3k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 21.3k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  21.3k|            SCN_CLANG_POP
 9585|  21.3k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3512|  13.9k|    {
 3513|  13.9k|        return m_iterator;
 3514|  13.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1601|  3.17k|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.17k|    {
 1604|  3.17k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  473|  3.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.17k|    {
  475|  3.17k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.55k|    {
 1348|  3.55k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3517|  10.5k|    {
 3518|  10.5k|        return m_sentinel;
 3519|  10.5k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1647|    382|        : base(unexpect, std::move(e.error())),
 1648|    382|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    382|    {
 1650|    382|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  482|    382|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    382|          m_has_value(false)
  484|    382|    {
  485|    382|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3496|  7.02k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  7.02k|    static_cast<    \
  |  | 1084|  7.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  7.02k|    static_cast<    \
  |  | 1084|  7.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  7.02k|    {
 3498|  7.02k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1771|  1.28k|    {
 1772|  1.28k|        return has_value();
 1773|  1.28k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  522|  7.54k|    {
  523|  7.54k|        return m_has_value;
  524|  7.54k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1826|  1.72k|    {
 1827|  1.72k|        return value();
 1828|  1.72k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1800|  3.75k|    {
 1801|  3.75k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.75k|        return this->get_value();
 1803|  3.75k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  488|  3.75k|    {
  489|  3.75k|        return m_value;
  490|  3.75k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 2010|  2.26k|    {
 2011|  2.26k|        return detail::transform_error_impl(std::move(*this),
 2012|  2.26k|                                            std::forward<F>(f));
 2013|  2.26k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1493|  2.26k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  2.26k|    else {
 1504|  2.26k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  2.26k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  2.26k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 2.03k, False: 238]
  |  |  ------------------
  ------------------
 1506|  2.26k|                   ? result(*std::forward<Exp>(exp))
 1507|  2.26k|                   : result(unexpect,
 1508|    238|                            trivial_invoke(std::forward<F>(f),
 1509|    238|                                           std::forward<Exp>(exp).error()));
 1510|  2.26k|    }
 1511|  2.26k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1836|  2.03k|    {
 1837|  2.03k|        return std::move(value());
 1838|  2.03k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1601|  2.03k|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.03k|    {
 1604|  2.03k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  473|  2.03k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.03k|    {
  475|  2.03k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.26k|    {
 1348|  2.26k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1787|    238|    {
 1788|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    238|        return std::move(this->get_unexpected().error());
 1790|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  505|    238|    {
  506|    238|        return m_unexpected;
  507|    238|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1657|    238|        : base(unexpect, std::forward<Args>(args)...),
 1658|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    238|    {
 1660|    238|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  482|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    238|          m_has_value(false)
  484|    238|    {
  485|    238|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1771|  2.26k|    {
 1772|  2.26k|        return has_value();
 1773|  2.26k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  4.53k|    {
  523|  4.53k|        return m_has_value;
  524|  4.53k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1777|    238|    {
 1778|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    238|        return this->get_unexpected().error();
 1780|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    238|    {
  506|    238|        return m_unexpected;
  507|    238|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1836|  2.03k|    {
 1837|  2.03k|        return std::move(value());
 1838|  2.03k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1800|  2.03k|    {
 1801|  2.03k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.03k|        return this->get_value();
 1803|  2.03k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.03k|    {
  489|  2.03k|        return m_value;
  490|  2.03k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6341|   101k|    {
 6342|   101k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   101k|        return static_cast<std::size_t>(m_desc &
 6347|   101k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   101k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6367|   119k|    {
 6368|   119k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|   119k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6309|  18.6k|    {
 6310|  18.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 18.6k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|  18.6k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 68, False: 18.6k]
  |  |  ------------------
  ------------------
 6318|     68|            return {};
 6319|     68|        }
 6320|       |
 6321|  18.6k|        const auto t = type(id);
 6322|  18.6k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.01k, False: 17.5k]
  |  |  ------------------
  ------------------
 6323|  1.01k|            return {};
 6324|  1.01k|        }
 6325|       |
 6326|  17.5k|        basic_scan_arg<Context> arg;
 6327|  17.5k|        arg.m_type = t;
 6328|  17.5k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 17.5k, False: 0]
  ------------------
 6329|  17.5k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|  17.5k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|  17.5k|        return arg;
 6335|  18.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6118|  18.6k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6376|  18.6k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|  18.6k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|  18.6k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|  18.6k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|  18.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6371|  17.5k|    {
 6372|  17.5k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|  17.5k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6124|  34.4k|    {
 6125|  34.4k|        return m_type != detail::arg_type::none_type;
 6126|  34.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|  4.50k|{
 9606|  4.50k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  4.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  4.50k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  4.50k|{
 9463|  4.50k|#define SCN_VISIT(Type)                                                    \
 9464|  4.50k|    do {                                                                   \
 9465|  4.50k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  4.50k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  4.50k|        }                                                                  \
 9468|  4.50k|        else {                                                             \
 9469|  4.50k|            return vis(monostate_val);                                     \
 9470|  4.50k|        }                                                                  \
 9471|  4.50k|    } while (false)
 9472|       |
 9473|  4.50k|    monostate monostate_val{};
 9474|       |
 9475|  4.50k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 4.50k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 4.50k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|    500|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 500, False: 4.00k]
  ------------------
 9481|    500|            SCN_VISIT(int);
  ------------------
  |  | 9464|    500|    do {                                                                   \
  |  | 9465|    500|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    500|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    500|        }                                                                  \
  |  | 9468|    500|        else {                                                             \
  |  | 9469|    500|            return vis(monostate_val);                                     \
  |  | 9470|    500|        }                                                                  \
  |  | 9471|    500|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|    500|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 4.50k]
  ------------------
 9483|    500|            SCN_VISIT(long);
  ------------------
  |  | 9464|    500|    do {                                                                   \
  |  | 9465|    500|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    500|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    500|        }                                                                  \
  |  | 9468|    500|        else {                                                             \
  |  | 9469|    500|            return vis(monostate_val);                                     \
  |  | 9470|    500|        }                                                                  \
  |  | 9471|    500|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|    500|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 4.50k]
  ------------------
 9485|    500|            SCN_VISIT(long long);
  ------------------
  |  | 9464|    500|    do {                                                                   \
  |  | 9465|    500|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    500|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    500|        }                                                                  \
  |  | 9468|    500|        else {                                                             \
  |  | 9469|    500|            return vis(monostate_val);                                     \
  |  | 9470|    500|        }                                                                  \
  |  | 9471|    500|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|    500|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 4.50k]
  ------------------
 9487|    500|#if SCN_HAS_INT128
 9488|    500|            SCN_VISIT(int128);
  ------------------
  |  | 9464|    500|    do {                                                                   \
  |  | 9465|    500|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    500|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    500|        }                                                                  \
  |  | 9468|    500|        else {                                                             \
  |  | 9469|    500|            return vis(monostate_val);                                     \
  |  | 9470|    500|        }                                                                  \
  |  | 9471|    500|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|    500|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 4.50k]
  ------------------
 9493|    500|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|    500|    do {                                                                   \
  |  | 9465|    500|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    500|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    500|        }                                                                  \
  |  | 9468|    500|        else {                                                             \
  |  | 9469|    500|            return vis(monostate_val);                                     \
  |  | 9470|    500|        }                                                                  \
  |  | 9471|    500|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|    500|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 4.50k]
  ------------------
 9495|    500|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|    500|    do {                                                                   \
  |  | 9465|    500|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    500|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    500|        }                                                                  \
  |  | 9468|    500|        else {                                                             \
  |  | 9469|    500|            return vis(monostate_val);                                     \
  |  | 9470|    500|        }                                                                  \
  |  | 9471|    500|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  1.00k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 500, False: 4.00k]
  ------------------
 9497|  1.00k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  1.00k|    do {                                                                   \
  |  | 9465|  1.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.00k|        }                                                                  \
  |  | 9468|  1.00k|        else {                                                             \
  |  | 9469|  1.00k|            return vis(monostate_val);                                     \
  |  | 9470|  1.00k|        }                                                                  \
  |  | 9471|  1.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  1.00k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 4.50k]
  ------------------
 9499|  1.00k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  1.00k|    do {                                                                   \
  |  | 9465|  1.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.00k|        }                                                                  \
  |  | 9468|  1.00k|        else {                                                             \
  |  | 9469|  1.00k|            return vis(monostate_val);                                     \
  |  | 9470|  1.00k|        }                                                                  \
  |  | 9471|  1.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  1.00k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 4.50k]
  ------------------
 9501|  1.00k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  1.00k|    do {                                                                   \
  |  | 9465|  1.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.00k|        }                                                                  \
  |  | 9468|  1.00k|        else {                                                             \
  |  | 9469|  1.00k|            return vis(monostate_val);                                     \
  |  | 9470|  1.00k|        }                                                                  \
  |  | 9471|  1.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  1.00k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 4.50k]
  ------------------
 9503|  1.00k|#if SCN_HAS_INT128
 9504|  1.00k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  1.00k|    do {                                                                   \
  |  | 9465|  1.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.00k|        }                                                                  \
  |  | 9468|  1.00k|        else {                                                             \
  |  | 9469|  1.00k|            return vis(monostate_val);                                     \
  |  | 9470|  1.00k|        }                                                                  \
  |  | 9471|  1.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  1.50k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 500, False: 4.00k]
  ------------------
 9509|  1.50k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  1.50k|    do {                                                                   \
  |  | 9465|  1.50k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.50k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.50k|        }                                                                  \
  |  | 9468|  1.50k|        else {                                                             \
  |  | 9469|  1.50k|            return vis(monostate_val);                                     \
  |  | 9470|  1.50k|        }                                                                  \
  |  | 9471|  1.50k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  2.00k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 500, False: 4.00k]
  ------------------
 9511|  2.00k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  2.00k|    do {                                                                   \
  |  | 9465|  2.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.00k|        }                                                                  \
  |  | 9468|  2.00k|        else {                                                             \
  |  | 9469|  2.00k|            return vis(monostate_val);                                     \
  |  | 9470|  2.00k|        }                                                                  \
  |  | 9471|  2.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  2.00k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 4.50k]
  ------------------
 9513|  2.00k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  2.00k|    do {                                                                   \
  |  | 9465|  2.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.00k|        }                                                                  \
  |  | 9468|  2.00k|        else {                                                             \
  |  | 9469|  2.00k|            return vis(monostate_val);                                     \
  |  | 9470|  2.00k|        }                                                                  \
  |  | 9471|  2.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  2.50k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 500, False: 4.00k]
  ------------------
 9515|  2.50k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  2.50k|    do {                                                                   \
  |  | 9465|  2.50k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.50k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.50k|        }                                                                  \
  |  | 9468|  2.50k|        else {                                                             \
  |  | 9469|  2.50k|            return vis(monostate_val);                                     \
  |  | 9470|  2.50k|        }                                                                  \
  |  | 9471|  2.50k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  2.50k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 4.50k]
  ------------------
 9517|  2.50k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  2.50k|    do {                                                                   \
  |  | 9465|  2.50k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.50k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.50k|        }                                                                  \
  |  | 9468|  2.50k|        else {                                                             \
  |  | 9469|  2.50k|            return vis(monostate_val);                                     \
  |  | 9470|  2.50k|        }                                                                  \
  |  | 9471|  2.50k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  2.50k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 4.50k]
  ------------------
 9519|  2.50k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  2.50k|    do {                                                                   \
  |  | 9465|  2.50k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.50k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.50k|        }                                                                  \
  |  | 9468|  2.50k|        else {                                                             \
  |  | 9469|  2.50k|            return vis(monostate_val);                                     \
  |  | 9470|  2.50k|        }                                                                  \
  |  | 9471|  2.50k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  3.00k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 500, False: 4.00k]
  ------------------
 9521|  3.00k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  3.00k|    do {                                                                   \
  |  | 9465|  3.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.00k|        }                                                                  \
  |  | 9468|  3.00k|        else {                                                             \
  |  | 9469|  3.00k|            return vis(monostate_val);                                     \
  |  | 9470|  3.00k|        }                                                                  \
  |  | 9471|  3.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  3.00k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 4.50k]
  ------------------
 9523|  3.00k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  3.00k|    do {                                                                   \
  |  | 9465|  3.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.00k|        }                                                                  \
  |  | 9468|  3.00k|        else {                                                             \
  |  | 9469|  3.00k|            return vis(monostate_val);                                     \
  |  | 9470|  3.00k|        }                                                                  \
  |  | 9471|  3.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  3.00k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 4.50k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  3.00k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 4.50k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 4.50k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 4.50k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 4.50k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|    500|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 500, False: 4.00k]
  ------------------
 9555|    500|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|    500|    do {                                                                   \
  |  | 9465|    500|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|    500|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|    500|        }                                                                  \
  |  | 9468|    500|        else {                                                             \
  |  | 9469|    500|            return vis(monostate_val);                                     \
  |  | 9470|    500|        }                                                                  \
  |  | 9471|    500|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  1.00k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 500, False: 4.00k]
  ------------------
 9557|  1.00k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  1.00k|    do {                                                                   \
  |  | 9465|  1.00k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.00k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.00k|        }                                                                  \
  |  | 9468|  1.00k|        else {                                                             \
  |  | 9469|  1.00k|            return vis(monostate_val);                                     \
  |  | 9470|  1.00k|        }                                                                  \
  |  | 9471|  1.00k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  1.50k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 500, False: 4.00k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|  1.50k|            else {
 9563|  1.50k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|  1.50k|    do {                                                                   \
  |  | 9465|  1.50k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.50k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.50k|        }                                                                  \
  |  | 9468|  1.50k|        else {                                                             \
  |  | 9469|  1.50k|            return vis(monostate_val);                                     \
  |  | 9470|  1.50k|        }                                                                  \
  |  | 9471|  1.50k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|  1.50k|            }
 9565|  1.50k|        }
 9566|       |
 9567|  1.50k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 4.50k]
  ------------------
 9568|  1.50k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  1.50k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  1.50k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 4.50k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 4.50k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  4.50k|            SCN_CLANG_POP
 9585|  4.50k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  43.8k|{
 6171|  43.8k|    return arg.m_type;
 6172|  43.8k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  15.8k|{
 6183|  15.8k|    return arg.m_value;
 6184|  15.8k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6444|   101k|        : m_format{format},
 6445|   101k|          m_next_arg_id{next_arg_id},
 6446|   101k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   101k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   101k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   101k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   101k|    {
 6452|   101k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   101k|    {
 3107|   101k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   101k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   101k|    {
 3073|   101k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   101k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   101k|{
 7971|   101k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   101k|    handler.check_args_exhausted();
 7973|   101k|    return handler.get_error();
 7974|   101k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   101k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   101k|    auto begin = format.data();
 7939|   101k|    auto it = begin;
 7940|   101k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   207M|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 207M, False: 35.5k]
  ------------------
 7943|   207M|        const auto ch = *it++;
 7944|   207M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 75.0k, False: 207M]
  ------------------
 7945|  75.0k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  75.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  75.0k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 65.4k, False: 9.59k]
  ------------------
 7949|  65.4k|                return;
 7950|  65.4k|            }
 7951|  75.0k|        }
 7952|   207M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 1.68k, False: 207M]
  ------------------
 7953|  1.68k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|  3.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 142, False: 1.54k]
  |  |  |  Branch (1014:45): [True: 52, False: 1.63k]
  |  |  |  Branch (1014:45): [True: 90, False: 1.54k]
  |  |  ------------------
  ------------------
 7954|    142|                handler.on_error("Unmatched '}' in format string");
 7955|    142|                return;
 7956|    142|            }
 7957|       |
 7958|  1.54k|            handler.on_literal_text(begin, it);
 7959|  1.54k|            begin = ++it;
 7960|  1.54k|        }
 7961|   207M|    }
 7962|       |
 7963|  35.5k|    handler.on_literal_text(begin, end);
 7964|  35.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7867|  75.0k|{
 7868|  75.0k|    struct id_adapter {
 7869|  75.0k|        constexpr void operator()()
 7870|  75.0k|        {
 7871|  75.0k|            arg_id = handler.on_arg_id();
 7872|  75.0k|        }
 7873|  75.0k|        constexpr void operator()(std::size_t id)
 7874|  75.0k|        {
 7875|  75.0k|            arg_id = handler.on_arg_id(id);
 7876|  75.0k|        }
 7877|       |
 7878|  75.0k|        constexpr void on_error(const char* msg)
 7879|  75.0k|        {
 7880|  75.0k|            SCN_UNLIKELY_ATTR
 7881|  75.0k|            handler.on_error(msg);
 7882|  75.0k|        }
 7883|       |
 7884|  75.0k|        Handler& handler;
 7885|  75.0k|        std::size_t arg_id;
 7886|  75.0k|    };
 7887|       |
 7888|  75.0k|    ++begin;
 7889|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 88, False: 74.9k]
  |  |  ------------------
  ------------------
 7890|     88|        handler.on_error("Unexpected end of replacement field");
 7891|     88|        return begin;
 7892|     88|    }
 7893|       |
 7894|  74.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 4.49k, False: 70.4k]
  ------------------
 7895|  4.49k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|  4.49k|    }
 7897|  70.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 5.31k, False: 65.1k]
  ------------------
 7898|  5.31k|        handler.on_literal_text(begin, begin + 1);
 7899|  5.31k|    }
 7900|  65.1k|    else {
 7901|  65.1k|        auto adapter = id_adapter{handler, 0};
 7902|  65.1k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  65.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 112, False: 65.0k]
  |  |  ------------------
  ------------------
 7905|    112|            handler.on_error("Missing '}' in format string");
 7906|    112|            return begin;
 7907|    112|        }
 7908|       |
 7909|  65.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 158, False: 64.8k]
  ------------------
 7910|    158|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|    158|        }
 7912|  64.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 14.0k, False: 50.8k]
  ------------------
 7913|  14.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 50, False: 14.0k]
  |  |  ------------------
  ------------------
 7914|     50|                handler.on_error("Unexpected end of replacement field");
 7915|     50|                return begin;
 7916|     50|            }
 7917|  14.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  14.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.16k, False: 11.8k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.0k]
  |  |  |  Branch (1014:45): [True: 2.16k, False: 11.8k]
  |  |  ------------------
  ------------------
 7919|  2.16k|                handler.on_error("Unknown format specifier");
 7920|  2.16k|                return begin;
 7921|  2.16k|            }
 7922|  14.0k|        }
 7923|  50.8k|        else {
 7924|  50.8k|            SCN_UNLIKELY_ATTR
 7925|  50.8k|            handler.on_error("Missing '}' in format string");
 7926|  50.8k|            return begin;
 7927|  50.8k|        }
 7928|  65.0k|    }
 7929|  21.8k|    return begin + 1;
 7930|  74.9k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 9026|  18.6k|    {
 9027|  18.6k|        return m_args.get(id);
 9028|  18.6k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6479|  17.2k|    {
 6480|  17.2k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 152, False: 17.0k]
  |  |  ------------------
  ------------------
 6481|    152|            on_error(
 6482|    152|                "Cannot switch from manual to automatic argument indexing");
 6483|    152|            return 0;
 6484|    152|        }
 6485|       |
 6486|  17.0k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|  17.0k|        do_check_arg_id(id);
 6488|  17.0k|        return id;
 6489|  17.2k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6509|    230|    {
 6510|    230|        m_error = unexpected(detail::handle_error(
 6511|    230|            scan_error{scan_error::invalid_format_string, msg}));
 6512|    230|        return m_error.error();
 6513|    230|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6973|  18.4k|{
 6974|  18.4k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|  18.4k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|  18.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  65.1k|{
 7367|  65.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  65.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  65.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  65.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 65.1k, False: 0]
  |  Branch (7368:26): [True: 52.4k, False: 12.7k]
  ------------------
 7369|  52.4k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|  52.4k|    }
 7371|       |
 7372|  12.7k|    handler();
 7373|  12.7k|    return begin;
 7374|  65.1k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7336|  52.4k|{
 7337|  52.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  52.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  52.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7338|       |
 7339|  52.4k|    CharT c = *begin;
 7340|  52.4k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7340:9): [True: 90, False: 52.3k]
  |  Branch (7340:27): [True: 50.6k, False: 1.66k]
  ------------------
 7341|  50.7k|        handler.on_error("Invalid argument ID");
 7342|  50.7k|        return begin;
 7343|  50.7k|    }
 7344|       |
 7345|  1.66k|    int idx = 0;
 7346|  1.66k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7346:9): [True: 284, False: 1.38k]
  ------------------
 7347|    284|        idx = parse_simple_int(begin, end);
 7348|    284|    }
 7349|  1.38k|    else {
 7350|  1.38k|        ++begin;
 7351|  1.38k|    }
 7352|       |
 7353|  1.66k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7353:9): [True: 112, False: 1.55k]
  |  Branch (7353:26): [True: 1.39k, False: 158]
  |  Branch (7353:50): [True: 72, False: 1.32k]
  ------------------
 7354|    184|        handler.on_error("Invalid argument ID");
 7355|    184|        return begin;
 7356|    184|    }
 7357|  1.48k|    handler(static_cast<std::size_t>(idx));
 7358|       |
 7359|  1.48k|    return begin;
 7360|  1.66k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7879|  50.9k|        {
 7880|  50.9k|            SCN_UNLIKELY_ATTR
 7881|  50.9k|            handler.on_error(msg);
 7882|  50.9k|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7315|  8.72k|{
 7316|  8.72k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  8.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  8.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7317|  8.72k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1079|  8.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  8.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7318|       |
 7319|  8.72k|    unsigned long long value = 0;
 7320|  12.8k|    do {
 7321|  12.8k|        value *= 10;
 7322|  12.8k|        value += static_cast<unsigned long long>(*begin - '0');
 7323|  12.8k|        if (value >
  ------------------
  |  Branch (7323:13): [True: 102, False: 12.7k]
  ------------------
 7324|  12.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7325|    102|            return -1;
 7326|    102|        }
 7327|  12.7k|        ++begin;
 7328|  12.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7328:14): [True: 12.4k, False: 344]
  |  Branch (7328:30): [True: 12.0k, False: 326]
  |  Branch (7328:47): [True: 4.12k, False: 7.95k]
  ------------------
 7329|  8.62k|    return static_cast<int>(value);
 7330|  8.72k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7874|  1.48k|        {
 7875|  1.48k|            arg_id = handler.on_arg_id(id);
 7876|  1.48k|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6492|  1.48k|    {
 6493|  1.48k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  | 1014|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 78, False: 1.40k]
  |  |  ------------------
  ------------------
 6494|     78|            on_error(
 6495|     78|                "Cannot switch from manual to automatic argument indexing");
 6496|     78|            return;
 6497|     78|        }
 6498|  1.40k|        m_next_arg_id = -1;
 6499|  1.40k|        do_check_arg_id(id);
 6500|  1.40k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  12.7k|        {
 7871|  12.7k|            arg_id = handler.on_arg_id();
 7872|  12.7k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6474|  11.4k|    {
 6475|  11.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|  11.4k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6463|  25.4k|    {
 6464|  25.4k|        return m_format.data();
 6465|  25.4k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|  14.0k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|  14.0k|    {
 8055|  14.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|  14.0k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7783|  14.0k|{
 7784|  14.0k|    auto do_presentation = [&]() -> const CharT* {
 7785|  14.0k|        if (*begin == CharT{'['}) {
 7786|  14.0k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  14.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|  14.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|  14.0k|                return begin;
 7792|  14.0k|            }
 7793|  14.0k|            handler.on_character_set_string(set);
 7794|  14.0k|            return begin;
 7795|  14.0k|        }
 7796|  14.0k|        if (*begin == CharT{'/'}) {
 7797|  14.0k|            return parse_presentation_regex(begin, end, handler);
 7798|  14.0k|        }
 7799|  14.0k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  14.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|  14.0k|            handler.on_error("Invalid type specifier in format string");
 7802|  14.0k|            return begin;
 7803|  14.0k|        }
 7804|  14.0k|        handler.on_type(type);
 7805|  14.0k|        return begin;
 7806|  14.0k|    };
 7807|       |
 7808|  14.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 12.8k, False: 1.19k]
  |  Branch (7808:28): [True: 2.75k, False: 10.0k]
  ------------------
 7809|  14.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 572, False: 2.18k]
  |  Branch (7809:36): [True: 520, False: 52]
  ------------------
 7810|    520|        return do_presentation();
 7811|    520|    }
 7812|       |
 7813|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  13.4k|    begin = parse_align(begin, end, handler);
 7819|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 120, False: 13.3k]
  |  |  ------------------
  ------------------
 7820|    120|        handler.on_error("Unexpected end of format string");
 7821|    120|        return begin;
 7822|    120|    }
 7823|       |
 7824|  13.3k|    begin = parse_width(begin, end, handler);
 7825|  13.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 116, False: 13.2k]
  |  |  ------------------
  ------------------
 7826|    116|        handler.on_error("Unexpected end of format string");
 7827|    116|        return begin;
 7828|    116|    }
 7829|       |
 7830|  13.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 5.23k, False: 8.01k]
  ------------------
 7831|  5.23k|        ++begin;
 7832|  5.23k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 5.20k]
  |  |  ------------------
  ------------------
 7833|     34|            handler.on_error("Unexpected end of format string");
 7834|     34|            return begin;
 7835|     34|        }
 7836|  5.20k|        begin = parse_precision(begin, end, handler);
 7837|  5.20k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  5.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 134, False: 5.07k]
  |  |  ------------------
  ------------------
 7838|    134|            handler.on_error("Unexpected end of format string");
 7839|    134|            return begin;
 7840|    134|        }
 7841|  5.20k|    }
 7842|       |
 7843|  13.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 634, False: 12.4k]
  ------------------
 7844|    634|        handler.on_localized();
 7845|    634|        ++begin;
 7846|    634|    }
 7847|  13.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 60, False: 13.0k]
  |  |  ------------------
  ------------------
 7848|     60|        handler.on_error("Unexpected end of format string");
 7849|     60|        return begin;
 7850|     60|    }
 7851|       |
 7852|  13.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 13.0k, False: 0]
  |  Branch (7852:25): [True: 8.00k, False: 5.01k]
  ------------------
 7853|  8.00k|        do_presentation();
 7854|  8.00k|    }
 7855|  13.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.41k, False: 11.6k]
  |  |  ------------------
  ------------------
 7856|  1.41k|        handler.on_error("Unexpected end of format string");
 7857|  1.41k|        return begin;
 7858|  1.41k|    }
 7859|       |
 7860|  11.6k|    return begin;
 7861|  13.0k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7430|  2.75k|{
 7431|  2.75k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 464, False: 2.28k]
  |  Branch (7431:33): [True: 430, False: 34]
  ------------------
 7432|  2.75k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 212, False: 2.11k]
  |  Branch (7432:33): [True: 142, False: 70]
  ------------------
 7433|  2.75k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|  8.52k|    auto do_presentation = [&]() -> const CharT* {
 7785|  8.52k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 4.02k, False: 4.49k]
  ------------------
 7786|  4.02k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  4.02k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  4.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 584, False: 3.44k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|    584|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|    584|                return begin;
 7792|    584|            }
 7793|  3.44k|            handler.on_character_set_string(set);
 7794|  3.44k|            return begin;
 7795|  4.02k|        }
 7796|  4.49k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 42, False: 4.45k]
  ------------------
 7797|     42|            return parse_presentation_regex(begin, end, handler);
 7798|     42|        }
 7799|  4.45k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  4.45k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 438, False: 4.01k]
  |  |  ------------------
  ------------------
 7801|    438|            handler.on_error("Invalid type specifier in format string");
 7802|    438|            return begin;
 7803|    438|        }
 7804|  4.01k|        handler.on_type(type);
 7805|  4.01k|        return begin;
 7806|  4.45k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7620|  4.02k|{
 7621|  4.02k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  4.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  4.02k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  4.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  4.02k|    auto start = begin;
 7625|  4.02k|    ++begin;
 7626|       |
 7627|  4.02k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  4.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 3.99k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|     34|        return {};
 7632|     34|    }
 7633|  3.99k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 1.90k, False: 2.09k]
  ------------------
 7634|  1.90k|        handler.on_charset_inverted();
 7635|  1.90k|        ++begin;
 7636|  1.90k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 1.86k]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|     34|            return {};
 7641|     34|        }
 7642|  1.86k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 52, False: 1.81k]
  ------------------
 7643|     52|            handler.on_charset_single(char32_t{']'});
 7644|     52|            ++begin;
 7645|     52|        }
 7646|  1.86k|    }
 7647|  2.09k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 34, False: 2.05k]
  ------------------
 7648|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|     34|    }
 7650|       |
 7651|  31.0k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 30.7k, False: 326]
  ------------------
 7652|  30.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 156, False: 30.5k]
  |  |  ------------------
  ------------------
 7653|    156|            break;
 7654|    156|        }
 7655|       |
 7656|  30.5k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 3.44k, False: 27.1k]
  ------------------
 7657|  3.44k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  3.44k|        }
 7659|       |
 7660|  27.1k|        parse_presentation_set_literal(begin, end, handler);
 7661|  27.1k|    }
 7662|       |
 7663|    482|    SCN_UNLIKELY_ATTR
 7664|    482|    handler.on_error("Invalid [character set] specifier in format string");
 7665|    482|    return {};
 7666|  3.92k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7584|  27.1k|{
 7585|  27.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  27.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  27.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 120, False: 27.0k]
  |  |  ------------------
  ------------------
 7589|    120|        return;
 7590|    120|    }
 7591|       |
 7592|  27.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 26.9k, False: 94]
  |  Branch (7592:25): [True: 2.52k, False: 24.3k]
  |  Branch (7592:49): [True: 2.49k, False: 34]
  ------------------
 7593|  27.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 2.44k, False: 52]
  ------------------
 7594|  2.44k|        ++begin;
 7595|       |
 7596|  2.44k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  2.44k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 2.40k]
  |  |  ------------------
  ------------------
 7598|     34|            return;
 7599|     34|        }
 7600|       |
 7601|  2.40k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 34, False: 2.37k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|     34|            return;
 7606|     34|        }
 7607|       |
 7608|  2.37k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  2.37k|        return;
 7610|  2.40k|    }
 7611|       |
 7612|  24.5k|    handler.on_charset_single(cp_first);
 7613|  24.5k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7560|  29.5k|{
 7561|  29.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  29.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  29.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.5k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  29.5k|    const auto cp =
 7570|  29.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  29.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 154, False: 29.4k]
  |  |  ------------------
  ------------------
 7572|    154|        handler.on_error("Invalid encoding in format string");
 7573|    154|        return invalid_code_point;
 7574|    154|    }
 7575|       |
 7576|  29.4k|    begin += len;
 7577|  29.4k|    return cp;
 7578|  29.5k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7272|  3.44k|    {
 7273|  3.44k|        m_specs.charset_string_data = fmt.data();
 7274|  3.44k|        m_specs.charset_string_size = fmt.size();
 7275|  3.44k|        on_type(presentation_type::string_set);
 7276|  3.44k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7672|     42|{
 7673|     42|#if !SCN_DISABLE_REGEX
 7674|     42|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7675|     42|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1079|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7676|       |
 7677|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7678|     42|                  std::is_same_v<CharT, wchar_t>) {
 7679|     42|        handler.on_error("Regex backend doesn't support wide strings as input");
 7680|     42|        return begin;
 7681|     42|    }
 7682|       |
 7683|      0|    auto start = begin;
 7684|     42|    ++begin;
 7685|       |
 7686|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7687|      0|        handler.on_error("Unexpected end of regex in format string");
 7688|      0|        return begin;
 7689|      0|    }
 7690|       |
 7691|     42|    handler.on_type(presentation_type::regex);
 7692|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7692:12): [True: 0, False: 42]
  ------------------
 7693|      0|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7693:13): [True: 0, False: 0]
  ------------------
 7694|      0|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7694:17): [True: 0, False: 0]
  ------------------
 7695|      0|                break;
 7696|      0|            }
 7697|      0|            else {
 7698|      0|                handler.on_type(presentation_type::regex_escaped);
 7699|      0|            }
 7700|      0|        }
 7701|      0|    }
 7702|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7703|      0|        handler.on_error("Unexpected end of regex in format string");
 7704|      0|        return begin;
 7705|      0|    }
 7706|       |
 7707|     42|    auto regex_end = begin;
 7708|     42|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7709|     42|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  | 1014|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7710|      0|        handler.on_error("Invalid (empty) regex in format string");
 7711|      0|        return begin;
 7712|      0|    }
 7713|     42|    handler.on_regex_pattern(regex_pattern);
 7714|     42|    ++begin;
 7715|       |
 7716|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7717|      0|        handler.on_error("Unexpected end of regex in format string");
 7718|      0|        return begin;
 7719|      0|    }
 7720|       |
 7721|     42|    regex_flags flags{regex_flags::none};
 7722|     42|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7723|     42|        {{'m', regex_flags::multiline},
 7724|     42|         {'s', regex_flags::singleline},
 7725|     42|         {'i', regex_flags::nocase},
 7726|     42|         {'n', regex_flags::nocapture}}};
 7727|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7727:12): [True: 0, False: 42]
  ------------------
 7728|      0|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7728:13): [True: 0, False: 0]
  ------------------
 7729|      0|            break;
 7730|      0|        }
 7731|      0|        bool found_flag = false;
 7732|      0|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7732:24): [True: 0, False: 0]
  ------------------
 7733|      0|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7733:17): [True: 0, False: 0]
  ------------------
 7734|      0|                continue;
 7735|      0|            }
 7736|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7736:17): [True: 0, False: 0]
  ------------------
 7737|      0|                handler.on_error("Flag set multiple times in regex");
 7738|      0|                return begin;
 7739|      0|            }
 7740|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7741|       |            if (*begin == CharT{'s'}) {
 7742|       |                // clang-format off
 7743|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7744|       |                // clang-format on
 7745|       |            }
 7746|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7747|       |            if (*begin == CharT{'m'}) {
 7748|       |                // clang-format off
 7749|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7750|       |                // clang-format on
 7751|       |            }
 7752|       |#endif
 7753|       |#endif
 7754|      0|            flags |= flag.second;
 7755|      0|            found_flag = true;
 7756|      0|            break;
 7757|      0|        }
 7758|      0|        if (!found_flag) {
  ------------------
  |  Branch (7758:13): [True: 0, False: 0]
  ------------------
 7759|      0|            handler.on_error("Invalid flag in regex");
 7760|      0|            return begin;
 7761|      0|        }
 7762|      0|    }
 7763|     42|    handler.on_regex_flags(flags);
 7764|       |
 7765|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7766|      0|        handler.on_error("Unexpected end of regex in format string");
 7767|      0|        return begin;
 7768|      0|    }
 7769|       |
 7770|     42|    return begin;
 7771|       |#else
 7772|       |    SCN_UNUSED(begin);
 7773|       |    SCN_UNUSED(end);
 7774|       |    handler.on_error("Regular expression support is disabled");
 7775|       |    return {};
 7776|       |#endif
 7777|     42|}
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7378|  4.45k|{
 7379|  4.45k|    switch (type) {
 7380|    232|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 232, False: 4.22k]
  ------------------
 7381|    338|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 106, False: 4.34k]
  ------------------
 7382|    338|            return presentation_type::int_binary;
 7383|    106|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 106, False: 4.34k]
  ------------------
 7384|    106|            return presentation_type::int_decimal;
 7385|    286|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 286, False: 4.16k]
  ------------------
 7386|    286|            return presentation_type::int_generic;
 7387|    160|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 160, False: 4.29k]
  ------------------
 7388|    160|            return presentation_type::int_unsigned_decimal;
 7389|    196|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 196, False: 4.25k]
  ------------------
 7390|    196|            return presentation_type::int_octal;
 7391|    142|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 142, False: 4.31k]
  ------------------
 7392|    194|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 52, False: 4.40k]
  ------------------
 7393|    194|            return presentation_type::int_hex;
 7394|     34|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 34, False: 4.41k]
  ------------------
 7395|     68|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 34, False: 4.41k]
  ------------------
 7396|     68|            return presentation_type::int_arbitrary_base;
 7397|    222|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 222, False: 4.23k]
  ------------------
 7398|    742|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 520, False: 3.93k]
  ------------------
 7399|    742|            return presentation_type::float_hex;
 7400|     70|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 70, False: 4.38k]
  ------------------
 7401|    194|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 124, False: 4.32k]
  ------------------
 7402|    194|            return presentation_type::float_scientific;
 7403|    142|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 142, False: 4.31k]
  ------------------
 7404|    266|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 124, False: 4.32k]
  ------------------
 7405|    266|            return presentation_type::float_fixed;
 7406|     34|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 34, False: 4.41k]
  ------------------
 7407|     86|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 52, False: 4.40k]
  ------------------
 7408|     86|            return presentation_type::float_general;
 7409|    916|        case 's':
  ------------------
  |  Branch (7409:9): [True: 916, False: 3.53k]
  ------------------
 7410|    916|            return presentation_type::string;
 7411|    304|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 304, False: 4.14k]
  ------------------
 7412|    304|            return presentation_type::character;
 7413|     34|        case '?':
  ------------------
  |  Branch (7413:9): [True: 34, False: 4.41k]
  ------------------
 7414|     34|            return presentation_type::escaped_character;
 7415|    124|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 124, False: 4.32k]
  ------------------
 7416|    124|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 4.45k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 4.45k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|    438|        default:
  ------------------
  |  Branch (7423:9): [True: 438, False: 4.01k]
  ------------------
 7424|    438|            return presentation_type::none;
 7425|  4.45k|    }
 7426|  4.45k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7455|  13.4k|{
 7456|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  13.4k|    auto check_align = [](wchar_t ch) {
 7459|  13.4k|        switch (ch) {
 7460|  13.4k|            case L'<':
 7461|  13.4k|                return align_type::left;
 7462|  13.4k|            case L'>':
 7463|  13.4k|                return align_type::right;
 7464|  13.4k|            case L'^':
 7465|  13.4k|                return align_type::center;
 7466|  13.4k|            default:
 7467|  13.4k|                return align_type::none;
 7468|  13.4k|        }
 7469|  13.4k|    };
 7470|       |
 7471|  13.4k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  13.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 13.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 13.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 7473|  13.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  13.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  13.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  13.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  13.4k|    const auto begin_before_fill = begin;
 7483|  13.4k|    begin += potential_fill_len;
 7484|       |
 7485|  13.4k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 1.19k, False: 12.2k]
  ------------------
 7486|  1.19k|        return begin_before_fill;
 7487|  1.19k|    }
 7488|       |
 7489|  12.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  12.2k|    const auto begin_after_fill = begin;
 7491|  12.2k|    ++begin;
 7492|       |
 7493|  12.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 12.2k, False: 0]
  ------------------
 7494|  12.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 42, False: 12.2k]
  |  |  ------------------
  ------------------
 7495|     42|            handler.on_error("Invalid fill character '{' in format string");
 7496|     42|            return begin;
 7497|     42|        }
 7498|  12.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 1.69k, False: 10.5k]
  ------------------
 7499|  1.69k|            return begin_before_fill;
 7500|  1.69k|        }
 7501|  12.2k|    }
 7502|       |
 7503|  10.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 8.36k, False: 2.20k]
  ------------------
 7504|  8.36k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 938, False: 7.42k]
  ------------------
 7505|    938|            handler.on_align(potential_align_on_fill);
 7506|    938|            return begin_after_fill;
 7507|    938|        }
 7508|  7.42k|        return begin_before_fill;
 7509|  8.36k|    }
 7510|       |
 7511|  2.20k|    handler.on_fill(potential_fill);
 7512|  2.20k|    handler.on_align(potential_align_after_fill);
 7513|  2.20k|    return begin;
 7514|  10.5k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7437|  13.4k|{
 7438|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|  13.4k|    if constexpr (sizeof(CharT) != 1) {
 7440|  13.4k|        return 1;
 7441|       |    }
 7442|       |    else {
 7443|       |        const auto lengths =
 7444|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|       |            "\3\4";
 7446|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|       |        return len;
 7448|       |    }
 7449|  13.4k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|  25.7k|    auto check_align = [](wchar_t ch) {
 7459|  25.7k|        switch (ch) {
 7460|    446|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 446, False: 25.3k]
  ------------------
 7461|    446|                return align_type::left;
 7462|    410|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 410, False: 25.3k]
  ------------------
 7463|    410|                return align_type::right;
 7464|  2.80k|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 2.80k, False: 22.9k]
  ------------------
 7465|  2.80k|                return align_type::center;
 7466|  22.1k|            default:
  ------------------
  |  Branch (7466:13): [True: 22.1k, False: 3.65k]
  ------------------
 7467|  22.1k|                return align_type::none;
 7468|  25.7k|        }
 7469|  25.7k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7193|  2.20k|    {
 7194|  2.20k|        m_specs.fill = fill;
 7195|  2.20k|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7072|  2.20k|    {
 7073|  2.20k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1079|  2.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7074|  2.20k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1079|  2.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7075|       |        if constexpr (sizeof(CharT) == 1) {
 7076|       |            for (size_t i = 0; i < s.size(); ++i) {
 7077|       |                SCN_GCC_PUSH
 7078|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 7079|       |                m_data[i] = s[i];
 7080|       |                SCN_GCC_POP
 7081|       |            }
 7082|       |            m_size = static_cast<unsigned char>(s.size());
 7083|       |        }
 7084|       |        else if constexpr (sizeof(CharT) == 2) {
 7085|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 7086|       |            m_data[1] =
 7087|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 7088|       |            if (s.size() == 1) {
 7089|       |                return;
 7090|       |            }
 7091|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 7092|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 7093|       |        }
 7094|  2.20k|        else {
 7095|  2.20k|            const auto front = static_cast<unsigned>(s.front());
 7096|  2.20k|            m_data[0] = static_cast<char>(front);
 7097|  2.20k|            m_data[1] = static_cast<char>(front >> 8);
 7098|  2.20k|            m_data[2] = static_cast<char>(front >> 16);
 7099|  2.20k|            m_data[3] = static_cast<char>(front >> 24);
 7100|  2.20k|        }
 7101|  2.20k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7520|  13.3k|{
 7521|  13.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  13.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 8.24k, False: 5.12k]
  |  Branch (7523:33): [True: 3.34k, False: 4.90k]
  ------------------
 7524|  3.34k|        int width = parse_simple_int(begin, end);
 7525|  3.34k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  3.34k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 3.30k, False: 34]
  |  |  ------------------
  ------------------
 7526|  3.30k|            handler.on_width(width);
 7527|  3.30k|        }
 7528|     34|        else {
 7529|     34|            handler.on_error("Invalid field width");
 7530|     34|            return begin;
 7531|     34|        }
 7532|  3.34k|    }
 7533|  13.3k|    return begin;
 7534|  13.3k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7540|  5.20k|{
 7541|  5.20k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  5.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7542|       |
 7543|  5.20k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7543:9): [True: 5.17k, False: 34]
  |  Branch (7543:33): [True: 5.10k, False: 70]
  ------------------
 7544|  5.10k|        int prec = parse_simple_int(begin, end);
 7545|  5.10k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  | 1013|  5.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 5.06k, False: 34]
  |  |  ------------------
  ------------------
 7546|  5.06k|            handler.on_precision(prec);
 7547|  5.06k|        }
 7548|     34|        else {
 7549|     34|            handler.on_error("Invalid field precision");
 7550|     34|            return begin;
 7551|     34|        }
 7552|  5.10k|    }
 7553|  5.17k|    return begin;
 7554|  5.20k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 8059|    634|    {
 8060|    634|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|    634|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 568, False: 66]
  ------------------
 8062|    634|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 502, False: 66]
  ------------------
 8063|    634|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 436, False: 66]
  ------------------
 8064|    634|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 370, False: 66]
  ------------------
 8065|    370|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|    370|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|    370|        }
 8070|       |
 8071|    264|        Handler::on_localized();
 8072|    264|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|  11.3k|{
 9606|  11.3k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  11.3k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  11.3k|{
 9463|  11.3k|#define SCN_VISIT(Type)                                                    \
 9464|  11.3k|    do {                                                                   \
 9465|  11.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  11.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  11.3k|        }                                                                  \
 9468|  11.3k|        else {                                                             \
 9469|  11.3k|            return vis(monostate_val);                                     \
 9470|  11.3k|        }                                                                  \
 9471|  11.3k|    } while (false)
 9472|       |
 9473|  11.3k|    monostate monostate_val{};
 9474|       |
 9475|  11.3k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 11.3k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 11.3k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|  1.29k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 1.29k, False: 10.0k]
  ------------------
 9481|  1.29k|            SCN_VISIT(int);
  ------------------
  |  | 9464|  1.29k|    do {                                                                   \
  |  | 9465|  1.29k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.29k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.29k|        }                                                                  \
  |  | 9468|  1.29k|        else {                                                             \
  |  | 9469|  1.29k|            return vis(monostate_val);                                     \
  |  | 9470|  1.29k|        }                                                                  \
  |  | 9471|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|  1.29k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 11.3k]
  ------------------
 9483|  1.29k|            SCN_VISIT(long);
  ------------------
  |  | 9464|  1.29k|    do {                                                                   \
  |  | 9465|  1.29k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.29k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.29k|        }                                                                  \
  |  | 9468|  1.29k|        else {                                                             \
  |  | 9469|  1.29k|            return vis(monostate_val);                                     \
  |  | 9470|  1.29k|        }                                                                  \
  |  | 9471|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|  1.29k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 11.3k]
  ------------------
 9485|  1.29k|            SCN_VISIT(long long);
  ------------------
  |  | 9464|  1.29k|    do {                                                                   \
  |  | 9465|  1.29k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.29k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.29k|        }                                                                  \
  |  | 9468|  1.29k|        else {                                                             \
  |  | 9469|  1.29k|            return vis(monostate_val);                                     \
  |  | 9470|  1.29k|        }                                                                  \
  |  | 9471|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|  1.29k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 11.3k]
  ------------------
 9487|  1.29k|#if SCN_HAS_INT128
 9488|  1.29k|            SCN_VISIT(int128);
  ------------------
  |  | 9464|  1.29k|    do {                                                                   \
  |  | 9465|  1.29k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.29k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.29k|        }                                                                  \
  |  | 9468|  1.29k|        else {                                                             \
  |  | 9469|  1.29k|            return vis(monostate_val);                                     \
  |  | 9470|  1.29k|        }                                                                  \
  |  | 9471|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|  1.29k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 11.3k]
  ------------------
 9493|  1.29k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|  1.29k|    do {                                                                   \
  |  | 9465|  1.29k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.29k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.29k|        }                                                                  \
  |  | 9468|  1.29k|        else {                                                             \
  |  | 9469|  1.29k|            return vis(monostate_val);                                     \
  |  | 9470|  1.29k|        }                                                                  \
  |  | 9471|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|  1.29k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 11.3k]
  ------------------
 9495|  1.29k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|  1.29k|    do {                                                                   \
  |  | 9465|  1.29k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.29k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.29k|        }                                                                  \
  |  | 9468|  1.29k|        else {                                                             \
  |  | 9469|  1.29k|            return vis(monostate_val);                                     \
  |  | 9470|  1.29k|        }                                                                  \
  |  | 9471|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|  2.58k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 1.29k, False: 10.0k]
  ------------------
 9497|  2.58k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|  2.58k|    do {                                                                   \
  |  | 9465|  2.58k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.58k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.58k|        }                                                                  \
  |  | 9468|  2.58k|        else {                                                             \
  |  | 9469|  2.58k|            return vis(monostate_val);                                     \
  |  | 9470|  2.58k|        }                                                                  \
  |  | 9471|  2.58k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|  2.58k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 11.3k]
  ------------------
 9499|  2.58k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|  2.58k|    do {                                                                   \
  |  | 9465|  2.58k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.58k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.58k|        }                                                                  \
  |  | 9468|  2.58k|        else {                                                             \
  |  | 9469|  2.58k|            return vis(monostate_val);                                     \
  |  | 9470|  2.58k|        }                                                                  \
  |  | 9471|  2.58k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|  2.58k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 11.3k]
  ------------------
 9501|  2.58k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|  2.58k|    do {                                                                   \
  |  | 9465|  2.58k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.58k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.58k|        }                                                                  \
  |  | 9468|  2.58k|        else {                                                             \
  |  | 9469|  2.58k|            return vis(monostate_val);                                     \
  |  | 9470|  2.58k|        }                                                                  \
  |  | 9471|  2.58k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|  2.58k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 11.3k]
  ------------------
 9503|  2.58k|#if SCN_HAS_INT128
 9504|  2.58k|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|  2.58k|    do {                                                                   \
  |  | 9465|  2.58k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.58k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.58k|        }                                                                  \
  |  | 9468|  2.58k|        else {                                                             \
  |  | 9469|  2.58k|            return vis(monostate_val);                                     \
  |  | 9470|  2.58k|        }                                                                  \
  |  | 9471|  2.58k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|  3.81k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 1.23k, False: 10.0k]
  ------------------
 9509|  3.81k|            SCN_VISIT(void*);
  ------------------
  |  | 9464|  3.81k|    do {                                                                   \
  |  | 9465|  3.81k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.81k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.81k|        }                                                                  \
  |  | 9468|  3.81k|        else {                                                             \
  |  | 9469|  3.81k|            return vis(monostate_val);                                     \
  |  | 9470|  3.81k|        }                                                                  \
  |  | 9471|  3.81k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|  5.10k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 1.29k, False: 10.0k]
  ------------------
 9511|  5.10k|            SCN_VISIT(bool);
  ------------------
  |  | 9464|  5.10k|    do {                                                                   \
  |  | 9465|  5.10k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  5.10k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  5.10k|        }                                                                  \
  |  | 9468|  5.10k|        else {                                                             \
  |  | 9469|  5.10k|            return vis(monostate_val);                                     \
  |  | 9470|  5.10k|        }                                                                  \
  |  | 9471|  5.10k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|  5.10k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 11.3k]
  ------------------
 9513|  5.10k|            SCN_VISIT(char);
  ------------------
  |  | 9464|  5.10k|    do {                                                                   \
  |  | 9465|  5.10k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  5.10k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  5.10k|        }                                                                  \
  |  | 9468|  5.10k|        else {                                                             \
  |  | 9469|  5.10k|            return vis(monostate_val);                                     \
  |  | 9470|  5.10k|        }                                                                  \
  |  | 9471|  5.10k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|  6.33k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 1.23k, False: 10.0k]
  ------------------
 9515|  6.33k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|  6.33k|    do {                                                                   \
  |  | 9465|  6.33k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  6.33k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  6.33k|        }                                                                  \
  |  | 9468|  6.33k|        else {                                                             \
  |  | 9469|  6.33k|            return vis(monostate_val);                                     \
  |  | 9470|  6.33k|        }                                                                  \
  |  | 9471|  6.33k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|  6.33k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 11.3k]
  ------------------
 9517|  6.33k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|  6.33k|    do {                                                                   \
  |  | 9465|  6.33k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  6.33k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  6.33k|        }                                                                  \
  |  | 9468|  6.33k|        else {                                                             \
  |  | 9469|  6.33k|            return vis(monostate_val);                                     \
  |  | 9470|  6.33k|        }                                                                  \
  |  | 9471|  6.33k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  6.33k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 11.3k]
  ------------------
 9519|  6.33k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  6.33k|    do {                                                                   \
  |  | 9465|  6.33k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  6.33k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  6.33k|        }                                                                  \
  |  | 9468|  6.33k|        else {                                                             \
  |  | 9469|  6.33k|            return vis(monostate_val);                                     \
  |  | 9470|  6.33k|        }                                                                  \
  |  | 9471|  6.33k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  7.62k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 1.29k, False: 10.0k]
  ------------------
 9521|  7.62k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  7.62k|    do {                                                                   \
  |  | 9465|  7.62k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  7.62k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  7.62k|        }                                                                  \
  |  | 9468|  7.62k|        else {                                                             \
  |  | 9469|  7.62k|            return vis(monostate_val);                                     \
  |  | 9470|  7.62k|        }                                                                  \
  |  | 9471|  7.62k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|  7.62k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 11.3k]
  ------------------
 9523|  7.62k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|  7.62k|    do {                                                                   \
  |  | 9465|  7.62k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  7.62k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  7.62k|        }                                                                  \
  |  | 9468|  7.62k|        else {                                                             \
  |  | 9469|  7.62k|            return vis(monostate_val);                                     \
  |  | 9470|  7.62k|        }                                                                  \
  |  | 9471|  7.62k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|  7.62k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 11.3k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|  7.62k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 11.3k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 11.3k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 11.3k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 11.3k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  1.23k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 1.23k, False: 10.0k]
  ------------------
 9555|  1.23k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  1.23k|    do {                                                                   \
  |  | 9465|  1.23k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  1.23k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  1.23k|        }                                                                  \
  |  | 9468|  1.23k|        else {                                                             \
  |  | 9469|  1.23k|            return vis(monostate_val);                                     \
  |  | 9470|  1.23k|        }                                                                  \
  |  | 9471|  1.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  2.46k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 1.23k, False: 10.0k]
  ------------------
 9557|  2.46k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  2.46k|    do {                                                                   \
  |  | 9465|  2.46k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  2.46k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  2.46k|        }                                                                  \
  |  | 9468|  2.46k|        else {                                                             \
  |  | 9469|  2.46k|            return vis(monostate_val);                                     \
  |  | 9470|  2.46k|        }                                                                  \
  |  | 9471|  2.46k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  3.69k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 1.23k, False: 10.0k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|  3.69k|            else {
 9563|  3.69k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|  3.69k|    do {                                                                   \
  |  | 9465|  3.69k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  3.69k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  3.69k|        }                                                                  \
  |  | 9468|  3.69k|        else {                                                             \
  |  | 9469|  3.69k|            return vis(monostate_val);                                     \
  |  | 9470|  3.69k|        }                                                                  \
  |  | 9471|  3.69k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|  3.69k|            }
 9565|  3.69k|        }
 9566|       |
 9567|  3.69k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 11.3k]
  ------------------
 9568|  3.69k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  3.69k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  3.69k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 11.3k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 11.3k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  11.3k|            SCN_CLANG_POP
 9585|  11.3k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3512|  6.31k|    {
 3513|  6.31k|        return m_iterator;
 3514|  6.31k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1601|  1.10k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.10k|    {
 1604|  1.10k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  473|  1.10k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.10k|    {
  475|  1.10k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.21k|    {
 1348|  1.21k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3517|  2.91k|    {
 3518|  2.91k|        return m_sentinel;
 3519|  2.91k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1647|    116|        : base(unexpect, std::move(e.error())),
 1648|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    116|    {
 1650|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  482|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    116|          m_has_value(false)
  484|    116|    {
  485|    116|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3496|  2.91k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  2.91k|    static_cast<    \
  |  | 1084|  2.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  2.91k|    static_cast<    \
  |  | 1084|  2.91k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  2.91k|    {
 3498|  2.91k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  522|  2.43k|    {
  523|  2.43k|        return m_has_value;
  524|  2.43k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1800|  1.10k|    {
 1801|  1.10k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.10k|        return this->get_value();
 1803|  1.10k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  488|  1.10k|    {
  489|  1.10k|        return m_value;
  490|  1.10k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 2010|  1.21k|    {
 2011|  1.21k|        return detail::transform_error_impl(std::move(*this),
 2012|  1.21k|                                            std::forward<F>(f));
 2013|  1.21k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1493|  1.21k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.21k|    else {
 1504|  1.21k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.21k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.21k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.10k, False: 116]
  |  |  ------------------
  ------------------
 1506|  1.21k|                   ? result(*std::forward<Exp>(exp))
 1507|  1.21k|                   : result(unexpect,
 1508|    116|                            trivial_invoke(std::forward<F>(f),
 1509|    116|                                           std::forward<Exp>(exp).error()));
 1510|  1.21k|    }
 1511|  1.21k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1836|  1.10k|    {
 1837|  1.10k|        return std::move(value());
 1838|  1.10k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1601|  1.10k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.10k|    {
 1604|  1.10k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  473|  1.10k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.10k|    {
  475|  1.10k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.21k|    {
 1348|  1.21k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1787|    116|    {
 1788|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|    116|        return std::move(this->get_unexpected().error());
 1790|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  505|    116|    {
  506|    116|        return m_unexpected;
  507|    116|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1657|    116|        : base(unexpect, std::forward<Args>(args)...),
 1658|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|    116|    {
 1660|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  482|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    116|          m_has_value(false)
  484|    116|    {
  485|    116|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1771|  1.21k|    {
 1772|  1.21k|        return has_value();
 1773|  1.21k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.43k|    {
  523|  2.43k|        return m_has_value;
  524|  2.43k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1777|    116|    {
 1778|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    116|        return this->get_unexpected().error();
 1780|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    116|    {
  506|    116|        return m_unexpected;
  507|    116|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1836|  1.10k|    {
 1837|  1.10k|        return std::move(value());
 1838|  1.10k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1800|  1.10k|    {
 1801|  1.10k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.10k|        return this->get_value();
 1803|  1.10k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.10k|    {
  489|  1.10k|        return m_value;
  490|  1.10k|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  50.5k|{
   44|  50.5k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  50.5k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  50.5k|{
   60|  50.5k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  50.5k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  5.62k|{
   89|  5.62k|    auto result = make_scan_result<Source, Args...>();
   90|  5.62k|    fill_scan_result(result,
   91|  5.62k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  5.62k|                           make_scan_args<wscan_context>(result->values())));
   93|  5.62k|    return result;
   94|  5.62k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  5.62k|{
  131|  5.62k|    auto result = make_scan_result<Source, Args...>();
  132|  5.62k|    fill_scan_result(result,
  133|  5.62k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  5.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  5.62k|                           make_scan_args<wscan_context>(result->values())));
  135|  5.62k|    return result;
  136|  5.62k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  75.8k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  75.8k|{
  309|  75.8k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  75.8k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    242|{
  315|    242|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    242|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 121, False: 121]
  ------------------
  317|    242|                    : std::locale{};
  318|    242|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1855|    908|{
 1856|    908|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|    908|                                      m_nan_payload_buffer, value);
 1858|    908|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|    908|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 1859|      0|        value = this->setsign(value);
 1860|      0|        return n;
 1861|      0|    }
 1862|       |
 1863|    908|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 0, False: 908]
  ------------------
 1864|    908|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 0, False: 0]
  ------------------
 1865|      0|        return detail::unexpected_scan_error(
 1866|      0|            scan_error::value_negative_overflow, n.error().msg());
 1867|      0|    }
 1868|    908|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 0, False: 908]
  ------------------
 1869|    908|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 0, False: 0]
  ------------------
 1870|      0|        return detail::unexpected_scan_error(
 1871|      0|            scan_error::value_negative_underflow, n.error().msg());
 1872|      0|    }
 1873|    908|    return n;
 1874|    908|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1855|    950|{
 1856|    950|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|    950|                                      m_nan_payload_buffer, value);
 1858|    950|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|    950|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 98, False: 852]
  |  |  ------------------
  ------------------
 1859|     98|        value = this->setsign(value);
 1860|     98|        return n;
 1861|     98|    }
 1862|       |
 1863|    852|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 0, False: 852]
  ------------------
 1864|    852|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 0, False: 0]
  ------------------
 1865|      0|        return detail::unexpected_scan_error(
 1866|      0|            scan_error::value_negative_overflow, n.error().msg());
 1867|      0|    }
 1868|    852|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 0, False: 852]
  ------------------
 1869|    852|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 0, False: 0]
  ------------------
 1870|      0|        return detail::unexpected_scan_error(
 1871|      0|            scan_error::value_negative_underflow, n.error().msg());
 1872|      0|    }
 1873|    852|    return n;
 1874|    852|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|     22|{
 2217|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 22, False: 0]
  ------------------
 2223|     22|        SCN_UNLIKELY_ATTR
 2224|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|     22|                                             "Invalid integer value");
 2226|     22|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|      0|    auto start = source.data();
 2230|      0|    const auto end = source.data() + source.size();
 2231|      0|    {
 2232|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 0, False: 0]
  ------------------
 2233|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 0, False: 0]
  ------------------
 2234|      0|                break;
 2235|      0|            }
 2236|      0|        }
 2237|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2238|      0|            value = 0;
 2239|      0|            return ranges::next(source.begin(),
 2240|      0|                                ranges::distance(source.data(), start));
 2241|      0|        }
 2242|      0|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|      0|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 0, False: 0]
  ------------------
 2247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|      0|                             detail::make_string_view_from_pointers(start, end),
 2249|      0|                             value, sign == sign_type::minus_sign));
 2250|      0|            return ranges::next(source.begin(),
 2251|      0|                                ranges::distance(source.data(), ptr));
 2252|      0|        }
 2253|      0|    }
 2254|       |
 2255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2257|      0|                     base, sign == sign_type::minus_sign));
 2258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|    918|{
 2217|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 918, False: 0]
  ------------------
 2223|    918|        SCN_UNLIKELY_ATTR
 2224|    918|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    918|                                             "Invalid integer value");
 2226|    918|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|      0|    auto start = source.data();
 2230|      0|    const auto end = source.data() + source.size();
 2231|      0|    {
 2232|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 0, False: 0]
  ------------------
 2233|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 0, False: 0]
  ------------------
 2234|      0|                break;
 2235|      0|            }
 2236|      0|        }
 2237|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2238|      0|            value = 0;
 2239|      0|            return ranges::next(source.begin(),
 2240|      0|                                ranges::distance(source.data(), start));
 2241|      0|        }
 2242|      0|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|      0|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 0, False: 0]
  ------------------
 2247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|      0|                             detail::make_string_view_from_pointers(start, end),
 2249|      0|                             value, sign == sign_type::minus_sign));
 2250|      0|            return ranges::next(source.begin(),
 2251|      0|                                ranges::distance(source.data(), ptr));
 2252|      0|        }
 2253|      0|    }
 2254|       |
 2255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2257|      0|                     base, sign == sign_type::minus_sign));
 2258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|    976|{
 2217|    976|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|    976|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|    976|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|    976|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|    976|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 900, False: 76]
  ------------------
 2223|    900|        SCN_UNLIKELY_ATTR
 2224|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    900|                                             "Invalid integer value");
 2226|    900|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|     76|    auto start = source.data();
 2230|     76|    const auto end = source.data() + source.size();
 2231|     76|    {
 2232|    152|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 124, False: 28]
  ------------------
 2233|    124|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 48, False: 76]
  ------------------
 2234|     48|                break;
 2235|     48|            }
 2236|    124|        }
 2237|     76|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 76, False: 0]
  |  |  |  Branch (1014:45): [True: 28, False: 48]
  |  |  |  Branch (1014:45): [True: 48, False: 0]
  |  |  ------------------
  ------------------
 2238|     76|            value = 0;
 2239|     76|            return ranges::next(source.begin(),
 2240|     76|                                ranges::distance(source.data(), start));
 2241|     76|        }
 2242|     76|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2257|      0|                     base, sign == sign_type::minus_sign));
 2258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|    918|{
 2217|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 918, False: 0]
  ------------------
 2223|    918|        SCN_UNLIKELY_ATTR
 2224|    918|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    918|                                             "Invalid integer value");
 2226|    918|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|      0|    auto start = source.data();
 2230|      0|    const auto end = source.data() + source.size();
 2231|      0|    {
 2232|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 0, False: 0]
  ------------------
 2233|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 0, False: 0]
  ------------------
 2234|      0|                break;
 2235|      0|            }
 2236|      0|        }
 2237|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2238|      0|            value = 0;
 2239|      0|            return ranges::next(source.begin(),
 2240|      0|                                ranges::distance(source.data(), start));
 2241|      0|        }
 2242|      0|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|      0|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 0, False: 0]
  ------------------
 2247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|      0|                             detail::make_string_view_from_pointers(start, end),
 2249|      0|                             value, sign == sign_type::minus_sign));
 2250|      0|            return ranges::next(source.begin(),
 2251|      0|                                ranges::distance(source.data(), ptr));
 2252|      0|        }
 2253|      0|    }
 2254|       |
 2255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2257|      0|                     base, sign == sign_type::minus_sign));
 2258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|    926|{
 2217|    926|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|    926|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|    926|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|    926|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|    926|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 860, False: 66]
  ------------------
 2223|    860|        SCN_UNLIKELY_ATTR
 2224|    860|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    860|                                             "Invalid integer value");
 2226|    860|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|     66|    auto start = source.data();
 2230|     66|    const auto end = source.data() + source.size();
 2231|     66|    {
 2232|    132|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 110, False: 22]
  ------------------
 2233|    110|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 44, False: 66]
  ------------------
 2234|     44|                break;
 2235|     44|            }
 2236|    110|        }
 2237|     66|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 66, False: 0]
  |  |  |  Branch (1014:45): [True: 22, False: 44]
  |  |  |  Branch (1014:45): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 2238|     66|            value = 0;
 2239|     66|            return ranges::next(source.begin(),
 2240|     66|                                ranges::distance(source.data(), start));
 2241|     66|        }
 2242|     66|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2257|      0|                     base, sign == sign_type::minus_sign));
 2258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|    900|{
 2217|    900|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|    900|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|    900|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|    900|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|    900|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    900|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|    900|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 900, False: 0]
  ------------------
 2223|    900|        SCN_UNLIKELY_ATTR
 2224|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    900|                                             "Invalid integer value");
 2226|    900|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|      0|    auto start = source.data();
 2230|      0|    const auto end = source.data() + source.size();
 2231|      0|    {
 2232|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 0, False: 0]
  ------------------
 2233|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 0, False: 0]
  ------------------
 2234|      0|                break;
 2235|      0|            }
 2236|      0|        }
 2237|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2238|      0|            value = 0;
 2239|      0|            return ranges::next(source.begin(),
 2240|      0|                                ranges::distance(source.data(), start));
 2241|      0|        }
 2242|      0|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|      0|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 0, False: 0]
  ------------------
 2247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|      0|                             detail::make_string_view_from_pointers(start, end),
 2249|      0|                             value, sign == sign_type::minus_sign));
 2250|      0|            return ranges::next(source.begin(),
 2251|      0|                                ranges::distance(source.data(), ptr));
 2252|      0|        }
 2253|      0|    }
 2254|       |
 2255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2257|      0|                     base, sign == sign_type::minus_sign));
 2258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|    874|{
 2217|    874|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|    874|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|    874|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|    874|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|    874|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 822, False: 52]
  ------------------
 2223|    822|        SCN_UNLIKELY_ATTR
 2224|    822|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    822|                                             "Invalid integer value");
 2226|    822|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|     52|    auto start = source.data();
 2230|     52|    const auto end = source.data() + source.size();
 2231|     52|    {
 2232|    104|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 94, False: 10]
  ------------------
 2233|     94|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 42, False: 52]
  ------------------
 2234|     42|                break;
 2235|     42|            }
 2236|     94|        }
 2237|     52|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52, False: 0]
  |  |  |  Branch (1014:45): [True: 10, False: 42]
  |  |  |  Branch (1014:45): [True: 42, False: 0]
  |  |  ------------------
  ------------------
 2238|     52|            value = 0;
 2239|     52|            return ranges::next(source.begin(),
 2240|     52|                                ranges::distance(source.data(), start));
 2241|     52|        }
 2242|     52|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|       |        if (base == 10) {
 2247|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2248|       |                             detail::make_string_view_from_pointers(start, end),
 2249|       |                             value, sign == sign_type::minus_sign));
 2250|       |            return ranges::next(source.begin(),
 2251|       |                                ranges::distance(source.data(), ptr));
 2252|       |        }
 2253|       |    }
 2254|       |
 2255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2257|      0|                     base, sign == sign_type::minus_sign));
 2258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2983|  25.2k|{
 2984|  25.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2985|  25.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3001|  50.5k|{
 3002|  50.5k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 3003|  50.5k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  3.88k|{
  207|  3.88k|    return find_classic_impl(
  208|  3.88k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  3.88k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  3.88k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  26.8k|{
  215|  26.8k|    return find_classic_impl(
  216|  26.8k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  26.8k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  26.8k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    342|{
  329|    342|    SCN_UNLIKELY_ATTR
  330|    342|    return e;
  331|    342|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2952|  25.2k|{
 2953|  25.2k|    return vscan_internal(source, format, args);
 2954|  25.2k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2966|  50.5k|{
 2967|  50.5k|    return vscan_internal(source, format, args);
 2968|  50.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  3.88k|{
  130|  3.88k|    auto it = source.begin();
  131|       |
  132|  11.4k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 8.28k, False: 3.14k]
  ------------------
  133|  8.28k|        auto sv =
  134|  8.28k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  8.28k|                .substr(0, 8);
  136|       |
  137|  8.28k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 2.82k, False: 5.45k]
  ------------------
  138|  2.82k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  2.82k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  2.82k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 420, False: 2.40k]
  ------------------
  141|    420|                break;
  142|    420|            }
  143|  2.40k|            continue;
  144|  2.82k|        }
  145|       |
  146|  20.5k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 15.4k, False: 5.13k]
  ------------------
  147|  15.4k|            auto tmp =
  148|  15.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  15.4k|            auto res = get_next_code_point(tmp);
  150|  15.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 318, False: 15.1k]
  ------------------
  151|    318|                return it;
  152|    318|            }
  153|  15.1k|            i += static_cast<std::size_t>(
  154|  15.1k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  15.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  15.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  15.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  15.1k|        }
  158|  5.45k|    }
  159|       |
  160|  3.56k|    return detail::make_string_view_iterator(source, it);
  161|  3.88k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  33.8k|{
  117|  33.8k|    static_assert(sizeof(*source.data()) == 1);
  118|  33.8k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|  33.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  33.8k|    uint64_t word{};
  120|  33.8k|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  33.8k|    return has_byte_greater(word, 127) != 0;
  123|  33.8k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  16.3k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  15.4k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  26.8k|{
  130|  26.8k|    auto it = source.begin();
  131|       |
  132|  33.4k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 25.5k, False: 7.81k]
  ------------------
  133|  25.5k|        auto sv =
  134|  25.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  25.5k|                .substr(0, 8);
  136|       |
  137|  25.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 13.1k, False: 12.4k]
  ------------------
  138|  13.1k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  13.1k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  13.1k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 11.1k, False: 1.93k]
  ------------------
  141|  11.1k|                break;
  142|  11.1k|            }
  143|  1.93k|            continue;
  144|  13.1k|        }
  145|       |
  146|  23.6k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 18.9k, False: 4.63k]
  ------------------
  147|  18.9k|            auto tmp =
  148|  18.9k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  18.9k|            auto res = get_next_code_point(tmp);
  150|  18.9k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 7.84k, False: 11.1k]
  ------------------
  151|  7.84k|                return it;
  152|  7.84k|            }
  153|  11.1k|            i += static_cast<std::size_t>(
  154|  11.1k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  11.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  11.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  11.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  11.1k|        }
  158|  12.4k|    }
  159|       |
  160|  18.9k|    return detail::make_string_view_iterator(source, it);
  161|  26.8k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  25.4k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  18.9k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|    908|{
 1764|    908|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 908]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|    908|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 908]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|    908|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 908]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|    908|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 908]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|    908|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|    908|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 8, False: 900]
  ------------------
 1834|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1835|      8|            return detail::unexpected_scan_error(
 1836|      8|                scan_error::invalid_scanned_value,
 1837|      8|                "Invalid floating-point digit");
 1838|      8|        }
 1839|      8|    }
 1840|    900|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 900, False: 0]
  |  |  ------------------
  ------------------
 1841|    900|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|    900|                                             "Invalid floating-point digit");
 1843|    900|    }
 1844|       |
 1845|      0|    return dispatch_parse_float_value<
 1846|      0|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|      0|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|      0|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|    900|}
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  937|     98|    {
  938|     98|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (938:13): [True: 98, False: 0]
  |  Branch (938:41): [True: 0, False: 98]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::invalid_scanned_value,
  942|      0|                "strtod failed: No conversion");
  943|      0|        }
  944|       |
  945|     98|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (945:13): [True: 0, False: 98]
  ------------------
  946|     98|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (946:13): [True: 0, False: 0]
  ------------------
  947|      0|            SCN_UNLIKELY_ATTR
  948|      0|            return detail::unexpected_scan_error(
  949|      0|                scan_error::invalid_scanned_value,
  950|      0|                "strtod failed: Hexfloats parsed, "
  951|      0|                "but they're disallowed by the format string");
  952|      0|        }
  953|       |
  954|     98|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (954:13): [True: 0, False: 98]
  |  Branch (954:34): [True: 0, False: 0]
  ------------------
  955|      0|            SCN_UNLIKELY_ATTR
  956|      0|            return detail::unexpected_scan_error(
  957|      0|                scan_error::value_positive_underflow,
  958|      0|                "strtod failed: Value too small");
  959|      0|        }
  960|     98|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (960:13): [True: 0, False: 98]
  |  Branch (960:34): [True: 0, False: 0]
  ------------------
  961|      0|            SCN_UNLIKELY_ATTR
  962|      0|            return detail::unexpected_scan_error(
  963|      0|                scan_error::value_negative_underflow,
  964|      0|                "strtod failed: Value too small");
  965|      0|        }
  966|       |
  967|       |        // This doesn't set ERANGE on all C standard library implementations,
  968|       |        // so we need to check whether we were actually expecting infinity
  969|     98|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (969:13): [True: 98, False: 0]
  ------------------
  970|     98|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (970:13): [True: 98, False: 0]
  ------------------
  971|     98|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (971:13): [True: 0, False: 98]
  ------------------
  972|      0|            SCN_UNLIKELY_ATTR
  973|      0|            return detail::unexpected_scan_error(
  974|      0|                scan_error::value_positive_overflow,
  975|      0|                "strtod failed: Value too large");
  976|      0|        }
  977|     98|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (977:13): [True: 98, False: 0]
  ------------------
  978|     98|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (978:13): [True: 98, False: 0]
  ------------------
  979|     98|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (979:13): [True: 0, False: 98]
  ------------------
  980|      0|            SCN_UNLIKELY_ATTR
  981|      0|            return detail::unexpected_scan_error(
  982|      0|                scan_error::value_negative_overflow,
  983|      0|                "strtod failed: Value too large");
  984|      0|        }
  985|       |
  986|     98|        return {};
  987|     98|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  772|     98|{
  773|     98|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (773:12): [True: 98, False: 0]
  |  Branch (773:44): [True: 0, False: 0]
  ------------------
  774|     98|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  815|     98|{
  816|     98|    if constexpr (std::numeric_limits<T>::has_infinity) {
  817|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  818|       |        using repr = typename float_traits<T>::value_repr;
  819|       |        repr expected{};
  820|       |        SCN_GCC_PUSH
  821|       |        SCN_GCC_IGNORE("-Woverflow")
  822|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  823|       |        SCN_GCC_POP
  824|       |        repr received{};
  825|       |        std::memcpy(&received, &value, sizeof(repr));
  826|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  827|       |            expected.one = 1;
  828|       |            received.padding = 0;
  829|       |        }
  830|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  831|       |#else
  832|     98|        return value == std::numeric_limits<T>::infinity();
  833|     98|#endif
  834|       |    }
  835|       |    else {
  836|       |        return false;
  837|       |    }
  838|     98|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  842|     98|{
  843|     98|    if constexpr (std::numeric_limits<T>::has_infinity) {
  844|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  845|       |        using repr = typename float_traits<T>::value_repr;
  846|       |        repr expected{};
  847|       |        SCN_GCC_PUSH
  848|       |        SCN_GCC_IGNORE("-Woverflow")
  849|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  850|       |        SCN_GCC_POP
  851|       |        expected.negative = 1;
  852|       |        repr received{};
  853|       |        std::memcpy(&received, &value, sizeof(repr));
  854|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  855|       |            expected.one = 1;
  856|       |            received.padding = 0;
  857|       |        }
  858|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  859|       |#else
  860|     98|        return value == -std::numeric_limits<T>::infinity();
  861|     98|#endif
  862|       |    }
  863|       |    else {
  864|       |        return false;
  865|       |    }
  866|     98|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|    950|{
 1764|    950|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 950]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|    950|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 950]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|    950|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 950]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|    950|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 950]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|    950|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|    950|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 60, False: 890]
  ------------------
 1834|     60|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22, False: 38]
  |  |  ------------------
  ------------------
 1835|     22|            return detail::unexpected_scan_error(
 1836|     22|                scan_error::invalid_scanned_value,
 1837|     22|                "Invalid floating-point digit");
 1838|     22|        }
 1839|     60|    }
 1840|    928|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 830, False: 98]
  |  |  ------------------
  ------------------
 1841|    830|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|    830|                                             "Invalid floating-point digit");
 1843|    830|    }
 1844|       |
 1845|     98|    return dispatch_parse_float_value<
 1846|     98|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|     98|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|     98|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|    928|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|     98|{
 1738|     98|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|     98|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|     98|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|     98|{
 1738|     98|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|     98|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|     98|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|     98|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|     98|    else {
 1742|     98|        auto next =
 1743|     98|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|     98|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|     98|                if (!err.has_value()) {
 1748|     98|                    return unexpected(err.error());
 1749|     98|                }
 1750|     98|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|     98|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|     98|        };
 1754|     98|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|     98|    }
 1756|     98|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|     98|{
 1713|     98|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|     98|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|     98|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|     98|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1093|     98|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|     98|    {
 1095|     98|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1099|     98|    {
 1100|     98|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|     98|                           generic_strtod);
 1102|     98|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  894|     98|    {
  895|     98|        CharT* end{};
  896|     98|        errno = 0;
  897|     98|        value = strtod_cb(src, &end);
  898|     98|        const auto saved_errno = errno;
  899|     98|        auto chars_read = end - src;
  900|       |
  901|     98|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|     98|    do {                                                            \
  |  | 3985|     98|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 98]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|     98|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|     98|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 38, False: 60]
  ------------------
  904|     98|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 38, False: 0]
  ------------------
  905|     38|            chars_read -= 2;
  906|     38|        }
  907|       |
  908|     98|        return chars_read;
  909|     98|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|     98|    {
  915|     98|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 78, False: 20]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|     78|            auto first_space = read_until_classic_space(input.view());
  918|     78|            input.assign(
  919|     78|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|     78|        }
  921|       |
  922|     98|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 38, False: 60]
  ------------------
  923|       |            if constexpr (std::is_same_v<CharT, char>) {
  924|       |                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|     38|            else {
  927|     38|                input.get_allocated_string().insert(0, L"0x");
  928|     38|            }
  929|     38|        }
  930|       |
  931|     98|        return input.get_allocated_string().c_str();
  932|     98|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1106|     98|    {
 1107|       |        if constexpr (std::is_same_v<CharT, char>) {
 1108|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|     98|        else {
 1111|     98|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|     98|        }
 1113|     98|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1038|     98|    {
 1039|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1040|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1041|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1042|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1043|       |        }
 1044|       |#endif
 1045|       |
 1046|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1047|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return ::wcstof_l(str, str_end, cloc);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return ::wcstod_l(str, str_end, cloc);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return ::wcstold_l(str, str_end, cloc);
 1056|       |        }
 1057|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1058|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1059|       |        if constexpr (std::is_same_v<T, float>) {
 1060|       |            return ::_wcstof_l(str, str_end, cloc);
 1061|       |        }
 1062|       |        else if constexpr (std::is_same_v<T, double>) {
 1063|       |            return ::_wcstod_l(str, str_end, cloc);
 1064|       |        }
 1065|       |        else if constexpr (std::is_same_v<T, long double>) {
 1066|       |            return ::_wcstold_l(str, str_end, cloc);
 1067|       |        }
 1068|       |#else
 1069|     98|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1070|       |        if constexpr (std::is_same_v<T, float>) {
 1071|       |            return std::wcstof(str, str_end);
 1072|       |        }
 1073|     98|        else if constexpr (std::is_same_v<T, double>) {
 1074|     98|            return std::wcstod(str, str_end);
 1075|       |        }
 1076|       |        else if constexpr (std::is_same_v<T, long double>) {
 1077|       |            return std::wcstold(str, str_end);
 1078|       |        }
 1079|      0|#endif
 1080|       |
 1081|     98|        SCN_EXPECT(false);
  ------------------
  |  | 1079|     98|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|     98|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1082|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1083|     98|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|  50.5k|{
 2398|  50.5k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 50.2k, False: 378]
  ------------------
 2399|  50.2k|        return false;
 2400|  50.2k|    }
 2401|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 126, False: 252]
  |  Branch (2401:39): [True: 18, False: 108]
  ------------------
 2402|  50.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2673|  50.5k|        : format_handler_base{argcount},
 2674|  50.5k|          parse_ctx{source_tag<Source&&>, format},
 2675|  50.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  50.5k|    static_cast<    \
  |  | 1084|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  50.5k|    static_cast<    \
  |  | 1084|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  50.5k|    {
 2677|  50.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2491|   151k|    format_handler_base(size_t argcount) : args_count(argcount)
 2492|   151k|    {
 2493|   151k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 2494|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2495|      0|        }
 2496|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2624|  50.5k|        : contiguous_ctx(source, args, loc)
 2625|  50.5k|    {
 2626|  50.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  50.5k|{
 2815|  50.5k|    const auto beg = handler.get_ctx().begin();
 2816|  50.5k|    detail::parse_format_string<false>(format, handler);
 2817|  50.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 48.3k, False: 2.18k]
  |  |  ------------------
  ------------------
 2818|  48.3k|        return unexpected(err.error());
 2819|  48.3k|    }
 2820|  2.18k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  50.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2798|   283k|    {
 2799|   283k|        return ctx.get();
 2800|   283k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2629|   283k|    {
 2630|   283k|        return contiguous_ctx;
 2631|   283k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2680|  69.5k|    {
 2681|   100k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 34.8k, False: 65.6k]
  ------------------
 2682|  34.8k|            auto it = get_ctx().begin();
 2683|  34.8k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 1.13k, False: 33.7k]
  ------------------
 2684|  1.13k|                SCN_UNLIKELY_ATTR
 2685|  1.13k|                return on_error(
 2686|  1.13k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|  1.13k|            }
 2688|       |
 2689|  33.7k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|  33.7k|                    detail::make_string_view_from_pointers(begin, end));
 2691|  33.7k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 1.97k, False: 31.7k]
  ------------------
 2692|  1.97k|                SCN_UNLIKELY_ATTR
 2693|  1.97k|                return on_error({scan_error::invalid_format_string,
 2694|  1.97k|                                 "Invalid encoding in format string"});
 2695|  1.97k|            }
 2696|  31.7k|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 8.53k, False: 23.2k]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|  8.53k|                get_ctx().advance_to(
 2699|  8.53k|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|  8.53k|                auto begin_it = impl::read_while_classic_space(
 2702|  8.53k|                    detail::make_string_view_from_pointers(
 2703|  8.53k|                        detail::to_address(after_space_it),
 2704|  8.53k|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|  8.53k|                begin = detail::to_address(begin_it) - 1;
 2707|  8.53k|                continue;
 2708|  8.53k|            }
 2709|       |
 2710|  23.2k|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 816, False: 22.4k]
  ------------------
 2711|    816|                SCN_UNLIKELY_ATTR
 2712|    816|                return on_error({scan_error::invalid_literal,
 2713|    816|                                 "Unexpected literal character in source"});
 2714|    816|            }
 2715|  22.4k|            get_ctx().advance_to(ranges::next(it));
 2716|  22.4k|        }
 2717|  69.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2540|   183k|    {
 2541|   183k|        error = unexpected(err);
 2542|   183k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 2747|  5.79k|    {
 2748|  5.79k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2749|  5.79k|        set_arg_as_visited(arg_id);
 2750|       |
 2751|  5.79k|        on_visit_scan_arg(
 2752|  5.79k|            impl::default_arg_reader<context_type>{
 2753|  5.79k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2754|  5.79k|            arg);
 2755|  5.79k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2452|  30.4k|{
 2453|  30.4k|    auto arg = ctx.arg(id);
 2454|  30.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.36k, False: 29.1k]
  |  |  ------------------
  ------------------
 2455|  1.36k|        handler.on_error("Failed to find argument with ID");
 2456|  1.36k|    }
 2457|  30.4k|    return arg;
 2458|  30.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2566|  49.1k|    {
 2567|  49.1k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.44k, False: 46.6k]
  |  |  ------------------
  ------------------
 2568|  2.44k|            on_error({scan_error::invalid_format_string,
 2569|  2.44k|                      "Argument ID out-of-range"});
 2570|  2.44k|            return;
 2571|  2.44k|        }
 2572|       |
 2573|  46.6k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1014|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 234, False: 46.4k]
  |  |  ------------------
  ------------------
 2574|    234|            on_error({scan_error::invalid_format_string,
 2575|    234|                      "Argument with this ID has already been scanned"});
 2576|    234|        }
 2577|       |
 2578|  46.6k|        if (SCN_LIKELY(id < 64u)) {
  ------------------
  |  | 1013|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 46.6k, False: 0]
  |  |  ------------------
  ------------------
 2579|  46.6k|            visited_args_lower64 |= (1ull << id);
 2580|  46.6k|            return;
 2581|  46.6k|        }
 2582|       |
 2583|      0|        id -= 64u;
 2584|      0|        visited_args_upper[id / 8u] |= static_cast<uint8_t>(1u << (id % 8u));
 2585|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2550|  46.6k|    {
 2551|  46.6k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 46.6k]
  |  |  ------------------
  ------------------
 2552|      0|            on_error({scan_error::invalid_format_string,
 2553|      0|                      "Argument ID out-of-range"});
 2554|      0|            return false;
 2555|      0|        }
 2556|       |
 2557|  46.6k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1013|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 46.6k, False: 0]
  |  |  ------------------
  ------------------
 2558|  46.6k|            return (visited_args_lower64 >> id) & 1ull;
 2559|  46.6k|        }
 2560|       |
 2561|      0|        id -= 64;
 2562|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2563|  46.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2731|  5.79k|    {
 2732|  5.79k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 126, False: 5.67k]
  |  Branch (2732:13): [True: 126, False: 5.67k]
  |  Branch (2732:29): [True: 0, False: 5.67k]
  ------------------
 2733|    126|            SCN_UNLIKELY_ATTR
 2734|    126|            return;
 2735|    126|        }
 2736|       |
 2737|  5.67k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  5.67k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.94k, False: 1.72k]
  |  |  ------------------
  ------------------
 2739|  3.94k|            on_error(r.error());
 2740|  3.94k|        }
 2741|  1.72k|        else {
 2742|  1.72k|            get_ctx().advance_to(*r);
 2743|  1.72k|        }
 2744|  5.67k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2720|  30.0k|    {
 2721|  30.0k|        return parse_ctx.next_arg_id();
 2722|  30.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 2724|    520|    {
 2725|    520|        parse_ctx.check_arg_id(id);
 2726|    520|        return id;
 2727|    520|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2760|  24.6k|    {
 2761|  24.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  24.6k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  24.6k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 24.6k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|  24.6k|        auto specs = detail::format_specs{};
 2774|  24.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|  24.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|  24.6k|            detail::get_arg_type(arg)};
 2777|       |
 2778|  24.6k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|  24.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 2.35k, False: 22.3k]
  |  Branch (2779:29): [True: 644, False: 21.6k]
  ------------------
 2780|  3.00k|            SCN_UNLIKELY_ATTR
 2781|  3.00k|            on_error({scan_error::invalid_format_string,
 2782|  3.00k|                      "Missing '}' in format string"});
 2783|  3.00k|            return parse_ctx.begin();
 2784|  3.00k|        }
 2785|  21.6k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 244, False: 21.4k]
  |  |  ------------------
  ------------------
 2786|    244|            return parse_ctx.begin();
 2787|    244|        }
 2788|  21.4k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|  21.4k|        on_visit_scan_arg(
 2791|  21.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|  21.4k|                                           get_ctx().locale()},
 2793|  21.4k|            arg);
 2794|  21.4k|        return parse_ctx.begin();
 2795|  21.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2470|  24.6k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|  24.6k|    {
 2472|  24.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2731|  21.4k|    {
 2732|  21.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 102, False: 21.3k]
  |  Branch (2732:13): [True: 102, False: 21.3k]
  |  Branch (2732:29): [True: 0, False: 21.3k]
  ------------------
 2733|    102|            SCN_UNLIKELY_ATTR
 2734|    102|            return;
 2735|    102|        }
 2736|       |
 2737|  21.3k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  21.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 17.4k, False: 3.89k]
  |  |  ------------------
  ------------------
 2739|  17.4k|            on_error(r.error());
 2740|  17.4k|        }
 2741|  3.89k|        else {
 2742|  3.89k|            get_ctx().advance_to(*r);
 2743|  3.89k|        }
 2744|  21.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2534|   147k|    {
 2535|   147k|        SCN_UNLIKELY_ATTR
 2536|   147k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2537|   147k|                                              msg);
 2538|   147k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2499|   151k|    {
 2500|   151k|        {
 2501|   151k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2501:45): [True: 0, False: 151k]
  ------------------
 2502|   151k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2502:35): [True: 0, False: 151k]
  ------------------
 2503|   151k|                                      ? std::numeric_limits<uint64_t>::max()
 2504|   151k|                                      : (1ull << args_count_lower64) - 1;
 2505|       |
 2506|   151k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2506:17): [True: 105k, False: 46.4k]
  ------------------
 2507|   105k|                return on_error({scan_error::invalid_format_string,
 2508|   105k|                                 "Argument list not exhausted"});
 2509|   105k|            }
 2510|   151k|        }
 2511|       |
 2512|  46.4k|        if (args_count < 64) {
  ------------------
  |  Branch (2512:13): [True: 46.4k, False: 0]
  ------------------
 2513|  46.4k|            return;
 2514|  46.4k|        }
 2515|       |
 2516|      0|        auto last_args_count = args_count - 64;
 2517|      0|        for (auto it = visited_args_upper.begin();
 2518|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2518:14): [True: 0, False: 0]
  ------------------
 2519|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2519:17): [True: 0, False: 0]
  ------------------
 2520|      0|                return on_error({scan_error::invalid_format_string,
 2521|      0|                                 "Argument list not exhausted"});
 2522|      0|            }
 2523|      0|            last_args_count -= 8;
 2524|      0|        }
 2525|       |
 2526|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2527|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2527:13): [True: 0, False: 0]
  ------------------
 2528|      0|            return on_error({scan_error::invalid_format_string,
 2529|      0|                             "Argument list not exhausted"});
 2530|      0|        }
 2531|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2545|   477k|    {
 2546|   477k|        return error;
 2547|   477k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|  50.5k|{
 2830|  50.5k|    const auto argcount = args.size();
 2831|  50.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 18, False: 50.5k]
  |  Branch (2831:60): [True: 18, False: 0]
  ------------------
 2832|     18|        auto arg = args.get(0);
 2833|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|     18|    static_cast<    \
  |  | 1084|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|     18|    }
 2835|       |
 2836|  50.5k|    auto handler = format_handler<true, CharT>{
 2837|  50.5k|        ranges::subrange<const CharT*>{source.data(),
 2838|  50.5k|                                       source.data() + source.size()},
 2839|  50.5k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  50.5k|    static_cast<    \
  |  | 1084|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  50.5k|    static_cast<    \
  |  | 1084|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|  50.5k|    return vscan_parse_format_string(format, handler);
 2841|  50.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|     18|{
 2411|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|     18|    auto reader =
 2417|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|     18|            ranges::subrange<const CharT*>{source.data(),
 2419|     18|                                           source.data() + source.size()},
 2420|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|     18|    static_cast<    \
  |  | 1084|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|     18|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|      8|    return ranges::distance(source.data(), it);
 2423|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   101k|{
 2830|   101k|    const auto argcount = args.size();
 2831|   101k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 18, False: 101k]
  |  Branch (2831:60): [True: 18, False: 0]
  ------------------
 2832|     18|        auto arg = args.get(0);
 2833|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|     18|    static_cast<    \
  |  | 1084|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|     18|    }
 2835|       |
 2836|   101k|    auto handler = format_handler<true, CharT>{
 2837|   101k|        ranges::subrange<const CharT*>{source.data(),
 2838|   101k|                                       source.data() + source.size()},
 2839|   101k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   101k|    static_cast<    \
  |  | 1084|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   101k|    static_cast<    \
  |  | 1084|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   101k|    return vscan_parse_format_string(format, handler);
 2841|   101k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   101k|{
 2398|   101k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 94.8k, False: 6.35k]
  ------------------
 2399|  94.8k|        return false;
 2400|  94.8k|    }
 2401|  6.35k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 126, False: 6.22k]
  |  Branch (2401:39): [True: 18, False: 108]
  ------------------
 2402|   101k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|     18|{
 2411|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|     18|    auto reader =
 2417|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|     18|            ranges::subrange<const CharT*>{source.data(),
 2419|     18|                                           source.data() + source.size()},
 2420|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|     18|    static_cast<    \
  |  | 1084|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|     18|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|      8|    return ranges::distance(source.data(), it);
 2423|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2673|   101k|        : format_handler_base{argcount},
 2674|   101k|          parse_ctx{source_tag<Source&&>, format},
 2675|   101k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   101k|    static_cast<    \
  |  | 1084|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   101k|    static_cast<    \
  |  | 1084|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   101k|    {
 2677|   101k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2624|   101k|        : contiguous_ctx(source, args, loc)
 2625|   101k|    {
 2626|   101k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   101k|{
 2815|   101k|    const auto beg = handler.get_ctx().begin();
 2816|   101k|    detail::parse_format_string<false>(format, handler);
 2817|   101k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 99.0k, False: 2.13k]
  |  |  ------------------
  ------------------
 2818|  99.0k|        return unexpected(err.error());
 2819|  99.0k|    }
 2820|  2.13k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   101k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2798|   621M|    {
 2799|   621M|        return ctx.get();
 2800|   621M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2629|   621M|    {
 2630|   621M|        return contiguous_ctx;
 2631|   621M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2680|   117k|    {
 2681|   207M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 207M, False: 83.5k]
  ------------------
 2682|   207M|            auto it = get_ctx().begin();
 2683|   207M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 546, False: 207M]
  ------------------
 2684|    546|                SCN_UNLIKELY_ATTR
 2685|    546|                return on_error(
 2686|    546|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|    546|            }
 2688|       |
 2689|   207M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|   207M|                    detail::make_string_view_from_pointers(begin, end));
 2691|   207M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 32.0k, False: 207M]
  ------------------
 2692|  32.0k|                SCN_UNLIKELY_ATTR
 2693|  32.0k|                return on_error({scan_error::invalid_format_string,
 2694|  32.0k|                                 "Invalid encoding in format string"});
 2695|  32.0k|            }
 2696|   207M|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 4.56k, False: 207M]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|  4.56k|                get_ctx().advance_to(
 2699|  4.56k|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|  4.56k|                auto begin_it = impl::read_while_classic_space(
 2702|  4.56k|                    detail::make_string_view_from_pointers(
 2703|  4.56k|                        detail::to_address(after_space_it),
 2704|  4.56k|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|  4.56k|                begin = detail::to_address(begin_it) - 1;
 2707|  4.56k|                continue;
 2708|  4.56k|            }
 2709|       |
 2710|   207M|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 1.25k, False: 207M]
  ------------------
 2711|  1.25k|                SCN_UNLIKELY_ATTR
 2712|  1.25k|                return on_error({scan_error::invalid_literal,
 2713|  1.25k|                                 "Unexpected literal character in source"});
 2714|  1.25k|            }
 2715|   207M|            get_ctx().advance_to(ranges::next(it));
 2716|   207M|        }
 2717|   117k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 2747|  4.64k|    {
 2748|  4.64k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2749|  4.64k|        set_arg_as_visited(arg_id);
 2750|       |
 2751|  4.64k|        on_visit_scan_arg(
 2752|  4.64k|            impl::default_arg_reader<context_type>{
 2753|  4.64k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2754|  4.64k|            arg);
 2755|  4.64k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2452|  18.6k|{
 2453|  18.6k|    auto arg = ctx.arg(id);
 2454|  18.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.07k, False: 17.5k]
  |  |  ------------------
  ------------------
 2455|  1.07k|        handler.on_error("Failed to find argument with ID");
 2456|  1.07k|    }
 2457|  18.6k|    return arg;
 2458|  18.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2731|  4.64k|    {
 2732|  4.64k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 166, False: 4.48k]
  |  Branch (2732:13): [True: 166, False: 4.48k]
  |  Branch (2732:29): [True: 0, False: 4.48k]
  ------------------
 2733|    166|            SCN_UNLIKELY_ATTR
 2734|    166|            return;
 2735|    166|        }
 2736|       |
 2737|  4.48k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  4.48k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.10k, False: 1.38k]
  |  |  ------------------
  ------------------
 2739|  3.10k|            on_error(r.error());
 2740|  3.10k|        }
 2741|  1.38k|        else {
 2742|  1.38k|            get_ctx().advance_to(*r);
 2743|  1.38k|        }
 2744|  4.48k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2720|  17.2k|    {
 2721|  17.2k|        return parse_ctx.next_arg_id();
 2722|  17.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 2724|  1.48k|    {
 2725|  1.48k|        parse_ctx.check_arg_id(id);
 2726|  1.48k|        return id;
 2727|  1.48k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2760|  14.0k|    {
 2761|  14.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  14.0k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  14.0k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 14.0k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|  14.0k|        auto specs = detail::format_specs{};
 2774|  14.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|  14.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|  14.0k|            detail::get_arg_type(arg)};
 2777|       |
 2778|  14.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|  14.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 1.87k, False: 12.1k]
  |  Branch (2779:29): [True: 336, False: 11.7k]
  ------------------
 2780|  2.21k|            SCN_UNLIKELY_ATTR
 2781|  2.21k|            on_error({scan_error::invalid_format_string,
 2782|  2.21k|                      "Missing '}' in format string"});
 2783|  2.21k|            return parse_ctx.begin();
 2784|  2.21k|        }
 2785|  11.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 354, False: 11.4k]
  |  |  ------------------
  ------------------
 2786|    354|            return parse_ctx.begin();
 2787|    354|        }
 2788|  11.4k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|  11.4k|        on_visit_scan_arg(
 2791|  11.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|  11.4k|                                           get_ctx().locale()},
 2793|  11.4k|            arg);
 2794|  11.4k|        return parse_ctx.begin();
 2795|  11.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2470|  14.0k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|  14.0k|    {
 2472|  14.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2731|  11.4k|    {
 2732|  11.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 122, False: 11.3k]
  |  Branch (2732:13): [True: 122, False: 11.3k]
  |  Branch (2732:29): [True: 0, False: 11.3k]
  ------------------
 2733|    122|            SCN_UNLIKELY_ATTR
 2734|    122|            return;
 2735|    122|        }
 2736|       |
 2737|  11.3k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  11.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8.33k, False: 2.98k]
  |  |  ------------------
  ------------------
 2739|  8.33k|            on_error(r.error());
 2740|  8.33k|        }
 2741|  2.98k|        else {
 2742|  2.98k|            get_ctx().advance_to(*r);
 2743|  2.98k|        }
 2744|  11.3k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|  2.81k|{
 1487|  2.81k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|  2.81k|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|  2.81k|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|  2.81k|            return transcode_to_string_impl_to32(src, dest);
 1498|  2.81k|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|  2.81k|    SCN_EXPECT(false);
  ------------------
  |  | 1079|  2.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|  2.81k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|  2.81k|{
 1379|  2.81k|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|  2.81k|    auto it = src.begin();
 1382|   136k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 133k, False: 2.81k]
  ------------------
 1383|   133k|        auto res = get_next_code_point(
 1384|   133k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|   133k|                                                                 src.end()));
 1386|   133k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.31k, False: 130k]
  |  |  ------------------
  ------------------
 1387|  3.31k|            dest.push_back(DestCharT{0xfffd});
 1388|  3.31k|        }
 1389|   130k|        else {
 1390|   130k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|   130k|        }
 1392|   133k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|   133k|    }
 1394|  2.81k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|   250k|{
 1303|   250k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|   250k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|   250k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.73k, False: 244k]
  |  |  ------------------
  ------------------
 1307|  5.73k|        return {get_start_for_next_code_point(input),
 1308|  5.73k|                detail::invalid_code_point};
 1309|  5.73k|    }
 1310|   244k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 964, False: 243k]
  |  |  ------------------
  ------------------
 1311|    964|        return {input.end(), detail::invalid_code_point};
 1312|    964|    }
 1313|       |
 1314|   243k|    return {input.begin() + len,
 1315|   243k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|   244k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  5.73k|{
 1289|  5.73k|    auto it = input.begin();
 1290|  15.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 14.4k, False: 1.36k]
  ------------------
 1291|  14.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 4.36k, False: 10.1k]
  ------------------
 1292|  4.36k|            break;
 1293|  4.36k|        }
 1294|  14.4k|    }
 1295|  5.73k|    return it;
 1296|  5.73k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  817|  55.2k|    constexpr parse_error(code c) : m_code(c)
  818|  55.2k|    {
  819|  55.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|  55.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  820|  55.2k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  832|  23.2k|    {
  833|  23.2k|        return a.m_code == b.m_code;
  834|  23.2k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  836|  4.53k|    {
  837|  4.53k|        return !(a == b);
  838|  4.53k|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1851|     98|    clocale_restorer(int cat) : m_category(cat)
 1852|     98|    {
 1853|     98|        const auto loc = std::setlocale(cat, nullptr);
 1854|     98|        std::strcpy(m_locbuf, loc);
 1855|     98|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1857|     98|    {
 1858|       |        // Restore locale to what it was before
 1859|     98|        std::setlocale(m_category, m_locbuf);
 1860|     98|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1880|     98|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1881|     98|    {
 1882|     98|        std::setlocale(cat, "C");
 1883|     98|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3108|  14.8k|    {
 3109|  14.8k|        SCN_UNLIKELY_ATTR
 3110|  14.8k|        m_msg = msg;
 3111|  14.8k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3113|  32.6k|    {
 3114|  32.6k|        return m_msg == nullptr;
 3115|  32.6k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3760|  1.30k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5116|   351k|    {
 5117|   351k|        on_charset_range(cp, cp + 1);
 5118|   351k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5121|   354k|    {
 5122|   354k|        if (end <= 127) {
  ------------------
  |  Branch (5122:13): [True: 168k, False: 186k]
  ------------------
 5123|   168k|            return;
 5124|   168k|        }
 5125|       |
 5126|  36.0M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5126:25): [True: 36.0M, False: 183k]
  ------------------
 5127|       |            // TODO: check for overlap
 5128|  36.0M|            if (elem.first == end) {
  ------------------
  |  Branch (5128:17): [True: 546, False: 36.0M]
  ------------------
 5129|    546|                elem.first = begin;
 5130|    546|                return;
 5131|    546|            }
 5132|       |
 5133|  36.0M|            if (elem.second == begin) {
  ------------------
  |  Branch (5133:17): [True: 1.71k, False: 36.0M]
  ------------------
 5134|  1.71k|                elem.second = end;
 5135|  1.71k|                return;
 5136|  1.71k|            }
 5137|  36.0M|        }
 5138|       |
 5139|   183k|        extra_ranges.push_back(std::make_pair(begin, end));
 5140|   183k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5143|    852|    {
 5144|       |        // no-op
 5145|    852|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5158|   361k|    {
 5159|   361k|        return err;
 5160|   361k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5471|  1.63k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  41.7k|{
  458|  41.7k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  41.7k|        static_cast<unsigned char>(ch))];
  460|  41.7k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   250k|{
  469|   250k|    return static_cast<unsigned char>(ch) <= 127;
  470|   250k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  3.83k|{
  474|  3.83k|#if WCHAR_MIN < 0
  475|  3.83k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 3.80k, False: 30]
  |  Branch (475:23): [True: 3.64k, False: 156]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  3.83k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   273k|{
  483|   273k|    return cp <= 127;
  484|   273k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|  33.8k|{
  538|  33.8k|    SCN_GCC_PUSH
  539|  33.8k|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|  33.8k|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|  33.8k|    SCN_GCC_POP
  542|  33.8k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  793|  49.4k|{
  794|  49.4k|    return e != eof_error::good;
  795|  49.4k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  807|    354|{
  808|    354|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|    354|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    354|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  809|    354|    return scan_error{scan_error::end_of_input, "EOF"};
  810|    354|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  854|  1.11k|{
  855|  1.11k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  1.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  856|  1.11k|    return parse_error::eof;
  857|  1.11k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  863|  4.53k|{
  864|  4.53k|    if (err == parse_error::good) {
  ------------------
  |  Branch (864:9): [True: 0, False: 4.53k]
  ------------------
  865|      0|        return {};
  866|      0|    }
  867|       |
  868|  4.53k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (868:9): [True: 146, False: 4.38k]
  ------------------
  869|    146|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  870|    146|    }
  871|       |
  872|  4.38k|    return detail::unexpected_scan_error(code, msg);
  873|  4.53k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  877|  4.57k|{
  878|  4.57k|    return [code, msg](parse_error err) {
  879|  4.57k|        assert(err != parse_error::good);
  880|  4.57k|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|  4.57k|    };
  882|  4.57k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2381|  3.75k|{
 2382|  3.75k|    unsigned char running_diff{0};
 2383|  13.1k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2383:24): [True: 9.35k, False: 3.75k]
  ------------------
 2384|  9.35k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2385|  9.35k|    }
 2386|  3.75k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2386:12): [True: 0, False: 3.75k]
  |  Branch (2386:33): [True: 0, False: 3.75k]
  ------------------
 2387|  3.75k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2465|   162k|{
 2466|   162k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2466:9): [True: 40.6k, False: 121k]
  ------------------
 2467|   162k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2467:10): [True: 224, False: 40.4k]
  ------------------
 2468|  40.6k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2468:10): [True: 108, False: 40.3k]
  ------------------
 2469|  40.6k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2469:10): [True: 72, False: 40.2k]
  ------------------
 2470|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2471|  40.6k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2471:11): [True: 15.2k, False: 25.0k]
  |  Branch (2471:27): [True: 2.50k, False: 12.7k]
  |  Branch (2471:43): [True: 1.69k, False: 810]
  ------------------
 2472|  40.6k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2472:11): [True: 12.7k, False: 25.8k]
  |  Branch (2472:27): [True: 214, False: 12.5k]
  ------------------
 2473|  40.6k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2473:11): [True: 12.4k, False: 25.8k]
  |  Branch (2473:27): [True: 218, False: 12.2k]
  ------------------
 2474|  40.6k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2474:11): [True: 12.2k, False: 25.8k]
  |  Branch (2474:27): [True: 462, False: 11.7k]
  ------------------
 2475|  40.6k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2475:11): [True: 11.7k, False: 25.8k]
  |  Branch (2475:27): [True: 214, False: 11.5k]
  ------------------
 2476|  40.6k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2476:11): [True: 11.5k, False: 25.8k]
  |  Branch (2476:27): [True: 210, False: 11.3k]
  ------------------
 2477|  40.6k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2477:11): [True: 11.3k, False: 25.8k]
  |  Branch (2477:27): [True: 284, False: 11.0k]
  ------------------
 2478|  40.6k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2478:11): [True: 10.8k, False: 26.1k]
  |  Branch (2478:28): [True: 464, False: 10.3k]
  ------------------
 2479|  40.6k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2479:11): [True: 10.3k, False: 26.1k]
  |  Branch (2479:28): [True: 556, False: 9.81k]
  ------------------
 2480|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2481|  40.6k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2481:11): [True: 9.97k, False: 25.9k]
  |  Branch (2481:28): [True: 78, False: 9.89k]
  ------------------
 2482|       |         // Supplemental Symbols and Pictographs:
 2483|  40.6k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2483:11): [True: 9.89k, False: 25.9k]
  |  Branch (2483:28): [True: 74, False: 9.81k]
  ------------------
 2484|  4.87k|        return 2;
 2485|  4.87k|    }
 2486|   157k|    return 1;
 2487|   162k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2490|   104k|{
 2491|   104k|    return calculate_text_width_for_fmt_v10(cp);
 2492|   104k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2505|    244|{
 2506|    244|    return calculate_text_width_for_fmt_v10(cp);
 2507|    244|}
_ZN3scn2v44impl11char_to_intEc:
 3302|  17.0k|{
 3303|  17.0k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3304|  17.0k|}
_ZN3scn2v44impl11char_to_intEw:
 3306|  8.19k|{
 3307|  8.19k|#if WCHAR_MIN < 0
 3308|  8.19k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3308:9): [True: 8.19k, False: 0]
  |  Branch (3308:20): [True: 8.09k, False: 102]
  ------------------
 3309|       |#else
 3310|       |    if (ch <= 255) {
 3311|       |#endif
 3312|  8.09k|        return char_to_int(static_cast<char>(ch));
 3313|  8.09k|    }
 3314|    102|    return 255;
 3315|  8.19k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4440|    336|{
 4441|    336|    RE2::Options opt{RE2::Quiet};
 4442|    336|    std::string_view stringflags{};
 4443|       |
 4444|    336|    if ((flags & detail::regex_flags::multiline) == detail::regex_flags::none) {
  ------------------
  |  Branch (4444:9): [True: 324, False: 12]
  ------------------
 4445|    324|        stringflags = "(?m)";
 4446|    324|    }
 4447|    336|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4447:9): [True: 6, False: 330]
  ------------------
 4448|    336|        detail::regex_flags::none) {
 4449|      6|        opt.set_dot_nl(true);
 4450|      6|    }
 4451|    336|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4451:9): [True: 6, False: 330]
  ------------------
 4452|      6|        opt.set_case_sensitive(false);
 4453|      6|    }
 4454|    336|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4454:9): [True: 6, False: 330]
  ------------------
 4455|      6|        opt.set_never_capture(true);
 4456|      6|    }
 4457|       |
 4458|    336|    return {opt, stringflags};
 4459|    336|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4769|    438|{
 4770|    438|    std::string result{pattern};
 4771|  4.15k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4771:24): [True: 3.71k, False: 438]
  ------------------
 4772|  3.71k|        result.replace(n, 2, "/");
 4773|  3.71k|        ++n;
 4774|  3.71k|    }
 4775|    438|    return result;
 4776|    438|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6145|  7.78k|{
 6146|  7.78k|    if (specs.width != 0) {
  ------------------
  |  Branch (6146:9): [True: 2.08k, False: 5.70k]
  ------------------
 6147|  2.08k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6147:13): [True: 908, False: 1.17k]
  ------------------
 6148|    908|            return detail::unexpected_scan_error(
 6149|    908|                scan_error::length_too_short,
 6150|    908|                "Scanned value too narrow, width did not exceed what "
 6151|    908|                "was specified in the format string");
 6152|    908|        }
 6153|  2.08k|    }
 6154|  6.87k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6154:9): [True: 2.94k, False: 3.93k]
  ------------------
 6155|       |        // Ensured by take_width_view
 6156|  2.94k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1080|  2.94k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6157|  2.94k|                   specs.precision);
 6158|  2.94k|    }
 6159|  6.87k|    return {};
 6160|  6.87k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  63.2k|    {
  304|  63.2k|        ranges::advance(x, n);
  305|  63.2k|        return x;
  306|  63.2k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  63.2k|    {
  268|  63.2k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  63.2k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   103k|    {
  151|   103k|        i += n;
  152|   103k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  55.7k|    {
  108|  55.7k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  55.7k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  55.7k|    {
   87|  55.7k|        return s - i;
   88|  55.7k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.88k|    {
  304|  5.88k|        ranges::advance(x, n);
  305|  5.88k|        return x;
  306|  5.88k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.88k|    {
  268|  5.88k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.88k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.88k|    {
  151|  5.88k|        i += n;
  152|  5.88k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.67k|    {
  108|  2.67k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.67k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.67k|    {
   87|  2.67k|        return s - i;
   88|  2.67k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3054|   123k|    {
 3055|   123k|        return m_current;
 3056|   123k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3054|   207M|    {
 3055|   207M|        return m_current;
 3056|   207M|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5748|  2.35k|    {
 5749|  2.35k|        reader_error_handler eh{};
 5750|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5751|       |            detail::check_code_point_type_specs(specs, eh);
 5752|       |        }
 5753|  2.35k|        else {
 5754|  2.35k|            detail::check_char_type_specs(specs, eh);
 5755|  2.35k|        }
 5756|  2.35k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.68k, False: 666]
  |  |  ------------------
  ------------------
 5757|  1.68k|            return detail::unexpected_scan_error(
 5758|  1.68k|                scan_error::invalid_format_string, eh.m_msg);
 5759|  1.68k|        }
 5760|    666|        return {};
 5761|  2.35k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  772|  20.4k|    {
  773|  20.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  20.4k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  2.70k|        : m_fptr([](storage fn,
  753|  2.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.70k|              cvref<T> obj = *get<T>(fn);
  755|  2.70k|              if constexpr (std::is_void_v<R>) {
  756|  2.70k|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.70k|              }
  758|  2.70k|              else {
  759|  2.70k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.70k|              }
  761|  2.70k|          }),
  762|  2.70k|          m_storage(std::addressof(f))
  763|  2.70k|    {
  764|  2.70k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  753|  7.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  7.11k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  7.11k|              else {
  759|  7.11k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  7.11k|              }
  761|  7.11k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  689|  7.11k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  7.11k|        else if constexpr (std::is_object_v<T>) {
  694|  7.11k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  7.11k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  2.70k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  2.70k|        {
  668|  2.70k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  772|   642k|    {
  773|   642k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   642k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   642k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  23.2k|        : m_fptr([](storage fn,
  753|  23.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  23.2k|              cvref<T> obj = *get<T>(fn);
  755|  23.2k|              if constexpr (std::is_void_v<R>) {
  756|  23.2k|                  obj(static_cast<decltype(args)>(args)...);
  757|  23.2k|              }
  758|  23.2k|              else {
  759|  23.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  23.2k|              }
  761|  23.2k|          }),
  762|  23.2k|          m_storage(std::addressof(f))
  763|  23.2k|    {
  764|  23.2k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  753|   294k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   294k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   294k|              else {
  759|   294k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   294k|              }
  761|   294k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  689|   294k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   294k|        else if constexpr (std::is_object_v<T>) {
  694|   294k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   294k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  23.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  23.2k|        {
  668|  23.2k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5743|  1.90k|    {
 5744|  1.90k|        return false;
 5745|  1.90k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  878|  4.53k|    return [code, msg](parse_error err) {
  879|  4.53k|        assert(err != parse_error::good);
  880|  4.53k|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|  4.53k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1904|     62|    {
 1905|     62|        auto stdloc = loc.get<std::locale>();
 1906|     62|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|     62|        grouping = numpunct.grouping();
 1908|     62|        thousands_sep =
 1909|     62|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 62]
  ------------------
 1910|     62|        decimal_point = numpunct.decimal_point();
 1911|     62|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1841|     84|{
 1842|     84|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 84, False: 0]
  ------------------
 1843|     84|        return std::use_facet<Facet>(stdloc);
 1844|     84|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|     84|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2511|  40.8k|{
 2512|  40.8k|    size_t count{0};
 2513|  40.8k|    for_each_code_point(input, [&count](char32_t cp) {
 2514|  40.8k|        count += calculate_text_width_for_fmt_v10(cp);
 2515|  40.8k|    });
 2516|  40.8k|    return count;
 2517|  40.8k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1569|  40.8k|{
 1570|       |    // TODO: Could be optimized by being eager
 1571|  40.8k|    auto it = input.begin();
 1572|  89.4k|    while (it != input.end()) {
  ------------------
  |  Branch (1572:12): [True: 48.5k, False: 40.8k]
  ------------------
 1573|  48.5k|        auto res = get_next_code_point(
 1574|  48.5k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1575|  48.5k|        cb(res.value);
 1576|  48.5k|        it = detail::make_string_view_iterator(input, res.iterator);
 1577|  48.5k|    }
 1578|  40.8k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  772|  57.2k|    {
  773|  57.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  57.2k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  752|  40.8k|        : m_fptr([](storage fn,
  753|  40.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  40.8k|              cvref<T> obj = *get<T>(fn);
  755|  40.8k|              if constexpr (std::is_void_v<R>) {
  756|  40.8k|                  obj(static_cast<decltype(args)>(args)...);
  757|  40.8k|              }
  758|  40.8k|              else {
  759|  40.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  40.8k|              }
  761|  40.8k|          }),
  762|  40.8k|          m_storage(std::addressof(f))
  763|  40.8k|    {
  764|  40.8k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  753|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  48.5k|              cvref<T> obj = *get<T>(fn);
  755|  48.5k|              if constexpr (std::is_void_v<R>) {
  756|  48.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|       |              else {
  759|       |                  return obj(static_cast<decltype(args)>(args)...);
  760|       |              }
  761|  48.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  689|  48.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  48.5k|        else if constexpr (std::is_object_v<T>) {
  694|  48.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  48.5k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2513|  48.5k|    for_each_code_point(input, [&count](char32_t cp) {
 2514|  48.5k|        count += calculate_text_width_for_fmt_v10(cp);
 2515|  48.5k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  666|  40.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  40.8k|        {
  668|  40.8k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1705|  4.47k|    {
 1706|  4.47k|        return m_view;
 1707|  4.47k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1695|  4.77k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2583|  29.8k|    {
 2584|  29.8k|        return m_multibyte_left;
 2585|  29.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E22is_current_double_wideEv:
 2588|  8.67k|    {
 2589|  8.67k|        assert(count() != 0 || multibyte_left() != 0);
 2590|  8.67k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2591|  8.67k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2815|  94.4k|    {
 2816|  94.4k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1014|  94.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.53k, False: 92.9k]
  |  |  ------------------
  ------------------
 2817|  1.53k|            return 0;
 2818|  1.53k|        }
 2819|       |
 2820|  92.9k|        if (cplen == 1) {
  ------------------
  |  Branch (2820:13): [True: 58.8k, False: 34.1k]
  ------------------
 2821|  58.8k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|  58.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  58.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2822|  58.8k|            auto cp = static_cast<char32_t>(*m_current);
 2823|  58.8k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2824|  58.8k|        }
 2825|       |
 2826|  34.1k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2827|  34.1k|                                           cplen);
 2828|  34.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 422, False: 33.6k]
  |  |  ------------------
  ------------------
 2829|    422|            return 0;
 2830|    422|        }
 2831|       |
 2832|  33.6k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2833|  33.6k|        return static_cast<difference_type>(calculate_text_width(
 2834|  33.6k|            std::basic_string_view<value_type>{cp_str.data(), cp_str.size()}));
 2835|  34.1k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1981|  36.8k|{
 1982|  36.8k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  36.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  36.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|  36.8k|    if constexpr (ranges::sized_range<Range>) {
 1985|  36.8k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|  36.8k|        if (sz < count) {
  ------------------
  |  Branch (1986:13): [True: 530, False: 36.2k]
  ------------------
 1987|    530|            return unexpected(eof_error::eof);
 1988|    530|        }
 1989|       |
 1990|  36.2k|        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|       |    else {
 1993|       |        auto it = range.begin();
 1994|       |        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
 1995|       |            return ranges::next(it, count);
 1996|       |        }
 1997|       |
 1998|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1999|       |            if (it == range.end()) {
 2000|       |                return unexpected(eof_error::eof);
 2001|       |            }
 2002|       |        }
 2003|       |
 2004|       |        return it;
 2005|       |    }
 2006|  36.8k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2809|  94.4k|    {
 2810|  94.4k|        return static_cast<difference_type>(
 2811|  94.4k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2812|  94.4k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2594|   137k|    {
 2595|   137k|        return *m_current;
 2596|   137k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2603|   164k|    {
 2604|   164k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2605|   164k|        _increment_current();
 2606|   164k|        return *this;
 2607|   164k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2838|   164k|    {
 2839|   164k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2839:13): [True: 85.7k, False: 78.6k]
  ------------------
 2840|  85.7k|            auto cplen = _get_cp_length_at_current();
 2841|  85.7k|            m_multibyte_left = cplen - 1;
 2842|  85.7k|            m_count -= _get_width_at_current_cp_start(cplen);
 2843|  85.7k|        }
 2844|  78.6k|        else {
 2845|  78.6k|            --m_multibyte_left;
 2846|  78.6k|        }
 2847|       |
 2848|   164k|        ++m_current;
 2849|   164k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2699|  97.0k|    {
 2700|  97.0k|        return !(a == b);
 2701|  97.0k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2691|   108k|    {
 2692|   108k|        return a.m_current == b.m_current;
 2693|   108k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2598|  14.8k|    {
 2599|  14.8k|        return *m_current;
 2600|  14.8k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.53k|    {
  268|  1.53k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.53k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.53k|    {
  161|  1.53k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.53k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.53k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.53k|        else {
  169|  1.53k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.53k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.53k|        }
  173|  1.53k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 2014|  27.0k|    {
 2015|  27.0k|        return !codepoint.empty();
 2016|  27.0k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1807|  2.18k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|  2.18k|    else {
 1814|  2.18k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|  2.18k|    }
 1816|  2.18k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1660|  2.18k|    {
 1661|  2.18k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|  2.18k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1744|  2.18k|    {
 1745|  2.18k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|  2.18k|        else {
 1779|  2.18k|            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|  2.18k|            if constexpr (ranges::common_range<Range>) {
 1784|  2.18k|                std::copy(ranges::begin(range), ranges::end(range),
 1785|  2.18k|                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|  2.18k|            m_view = string_view_type{str.data(), str.size()};
 1794|  2.18k|        }
 1795|  2.18k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2543|  26.0k|        : m_current(x), m_end(s), m_count(n)
 2544|  26.0k|    {
 2545|  26.0k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2575|   156k|    {
 2576|   156k|        return m_current;
 2577|   156k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 3004|  10.7k|    {
 3005|  10.7k|        return take_width_view{r, n};
 3006|  10.7k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2972|  10.7k|        : m_base(base), m_count(count)
 2973|  10.7k|    {
 2974|  10.7k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2884|  10.7k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5788|    374|    {
 5789|    374|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5789:13): [True: 338, False: 36]
  ------------------
 5790|    374|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5790:13): [True: 0, False: 36]
  ------------------
 5791|    338|            return read_default(range, value, loc);
 5792|    338|        }
 5793|       |
 5794|     36|        reader_impl_for_int<CharT> reader{};
 5795|     36|        signed char tmp_value{};
 5796|     36|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5797|     36|        value = static_cast<char>(tmp_value);
 5798|     36|        return ret;
 5799|    374|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5770|    338|    {
 5771|    338|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    338|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    338|        if constexpr (std::is_same_v<CharT, char>) {
 5773|    338|            return code_unit_reader<char>{}.read(range, value);
 5774|       |        }
 5775|       |        else {
 5776|       |            SCN_UNUSED(range);
 5777|       |            SCN_EXPECT(false);
 5778|       |            SCN_UNREACHABLE;
 5779|       |        }
 5780|    338|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5688|    338|    {
 5689|    338|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3996|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    338|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    338|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|    338|        ch = *range.begin();
 5691|    338|        return it;
 5692|    338|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1970|  2.48k|{
 1971|  2.48k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.48k]
  |  |  ------------------
  ------------------
 1972|      0|        return unexpected(e);
 1973|      0|    }
 1974|       |
 1975|  2.48k|    return ranges::next(range.begin());
 1976|  2.48k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  960|  2.48k|{
  961|  2.48k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  2.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.48k]
  |  |  ------------------
  ------------------
  962|      0|        return eof_error::eof;
  963|      0|    }
  964|  2.48k|    return eof_error::good;
  965|  2.48k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  954|  2.48k|{
  955|  2.48k|    return is_range_eof(r.begin(), r.end());
  956|  2.48k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  938|  29.5k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  29.5k|    {
  948|  29.5k|        return begin == end;
  949|  29.5k|    }
  950|  29.5k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2940|   149k|        {
 2941|   149k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2941:21): [True: 5.90k, False: 143k]
  |  Branch (2941:39): [True: 1.18k, False: 4.72k]
  ------------------
 2942|   149k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2942:20): [True: 1.38k, False: 146k]
  ------------------
 2943|   149k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2943:21): [True: 23.9k, False: 122k]
  |  Branch (2943:39): [True: 8.67k, False: 15.2k]
  ------------------
 2944|   146k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2944:21): [True: 106, False: 8.56k]
  ------------------
 2945|   149k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2988|  70.7k|    {
 2989|  70.7k|        return sentinel<true>{m_base.get().end()};
 2990|  70.7k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2887|   122k|    {
 2888|   122k|        return view;
 2889|   122k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2921|  70.7k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1083|  70.7k|    static_cast<    \
  |  | 1084|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.52k|    {
  296|  2.52k|        ++x;
  297|  2.52k|        return x;
  298|  2.52k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2982|  26.0k|    {
 2983|  26.0k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2984|  26.0k|                                      m_count};
 2985|  26.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3661|     36|    {
 3662|     36|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     36|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|     36|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|     36|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 36]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|      0|            else {
 3673|      0|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 0]
  ------------------
 3674|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|      0|            }
 3680|      0|        }
 3681|       |
 3682|     36|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 36]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|     36|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|     36|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3688|     36|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     36|    }                                                  \
  |  |  |  | 3995|     36|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|                    parse_integer_digits_without_thsep(
 3690|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|      0|                        prefix_result.parsed_base));
 3692|       |
 3693|      0|            auto buf = make_contiguous_buffer(
 3694|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|      0|        }
 3703|       |
 3704|      0|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|      0|            localized_number_formatting_options<CharT>{loc};
 3710|      0|#endif
 3711|       |
 3712|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3439|  1.06k|{
 3440|  1.06k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|  1.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 1.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  1.06k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  1.06k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|  1.06k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|  1.06k|        parse_integer_base_prefix(
 3445|  1.06k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|  1.06k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 0, False: 1.06k]
  ------------------
 3448|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 0, False: 0]
  |  Branch (3448:13): [True: 0, False: 0]
  ------------------
 3449|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 0, False: 0]
  ------------------
 3450|      0|            digits_begin_it = base_prefix_begin_it;
 3451|      0|        }
 3452|      0|        else {
 3453|      0|            parsed_zero = false;
 3454|      0|        }
 3455|      0|    }
 3456|  1.06k|    else {
 3457|  1.06k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 0, False: 1.06k]
  |  Branch (3457:13): [True: 1.06k, False: 0]
  ------------------
 3458|  1.06k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 1.06k, False: 0]
  ------------------
 3459|  1.06k|            digits_begin_it = base_prefix_begin_it;
 3460|  1.06k|        }
 3461|  1.06k|    }
 3462|       |
 3463|  1.06k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 1.06k, False: 0]
  ------------------
 3464|  1.06k|        sign = sign_type::plus_sign;
 3465|  1.06k|    }
 3466|  1.06k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|  1.06k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|  1.06k|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3320|  1.42k|{
 3321|  1.42k|    auto r = read_one_of_code_unit(range, "+-");
 3322|  1.42k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 1.42k, False: 0]
  ------------------
 3323|  1.42k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 1.42k, False: 0]
  ------------------
 3324|  1.42k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|  1.42k|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|  1.42k|    }
 3328|       |
 3329|      0|    auto& it = *r;
 3330|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 0, False: 0]
  ------------------
 3331|      0|        return std::pair{it, sign_type::minus_sign};
 3332|      0|    }
 3333|      0|    return std::pair{it, sign_type::plus_sign};
 3334|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2434|  1.42k|{
 2435|  1.42k|    auto it = read_code_unit(range);
 2436|  1.42k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.42k]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|  2.85k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 2.85k, False: 1.42k]
  ------------------
 2441|  2.85k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 0, False: 2.85k]
  ------------------
 2442|      0|            return *it;
 2443|      0|        }
 2444|  2.85k|    }
 2445|       |
 2446|  1.42k|    return unexpected(parse_error::error);
 2447|  1.42k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3406|  1.06k|{
 3407|  1.06k|    switch (base) {
 3408|     14|        case 2:
  ------------------
  |  Branch (3408:9): [True: 14, False: 1.04k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|     14|                    false};
 3412|       |
 3413|     14|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 14, False: 1.04k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|     14|            bool zero_parsed = false;
 3416|     14|            auto it = apply_opt(
 3417|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|     14|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|    334|        case 16:
  ------------------
  |  Branch (3421:9): [True: 334, False: 726]
  ------------------
 3422|       |            // allow 0x/0X
 3423|    334|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|    334|                    false};
 3425|       |
 3426|     26|        case 0:
  ------------------
  |  Branch (3426:9): [True: 26, False: 1.03k]
  ------------------
 3427|       |            // detect base
 3428|     26|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|    672|        default:
  ------------------
  |  Branch (3430:9): [True: 672, False: 388]
  ------------------
 3431|       |            // no base prefix allowed
 3432|    672|            return {range.begin(), base, false};
 3433|  1.06k|    }
 3434|  1.06k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2453|    362|{
 2454|    362|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 362, False: 0]
  ------------------
 2455|    362|        return range.begin();
 2456|    362|    }
 2457|      0|    return *result;
 2458|    362|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3357|     40|{
 3358|     40|    return read_matching_string_classic_nocase(range, "0b");
 3359|     40|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2392|  1.50k|{
 2393|  1.50k|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  1.50k|    else {
 2407|  1.50k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.50k|            if (ch < 'A' || ch > 'Z') {
 2409|  1.50k|                return ch;
 2410|  1.50k|            }
 2411|  1.50k|            return static_cast<char_type>(ch +
 2412|  1.50k|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.50k|        };
 2414|       |
 2415|  1.50k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 262, False: 1.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    262|    }                                                  \
  |  |  |  | 3995|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  1.24k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  1.24k|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  1.24k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.24k, False: 0]
  |  |  ------------------
  ------------------
 2420|  1.24k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  1.24k|                    return ascii_tolower(a) ==
 2422|  1.24k|                           static_cast<detail::char_t<Range>>(b);
 2423|  1.24k|                }))) {
 2424|  1.24k|            return unexpected(parse_error::error);
 2425|  1.24k|        }
 2426|       |
 2427|      0|        return it;
 2428|  1.24k|    }
 2429|  1.50k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1981|  7.07k|{
 1982|  7.07k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  7.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|  7.07k|    else {
 1993|  7.07k|        auto it = range.begin();
 1994|  7.07k|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 0, False: 7.07k]
  ------------------
 1995|      0|            return ranges::next(it, count);
 1996|      0|        }
 1997|       |
 1998|  26.0k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 19.3k, False: 6.74k]
  ------------------
 1999|  19.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 332, False: 18.9k]
  ------------------
 2000|    332|                return unexpected(eof_error::eof);
 2001|    332|            }
 2002|  19.3k|        }
 2003|       |
 2004|  6.74k|        return it;
 2005|  7.07k|    }
 2006|  7.07k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1113|  7.07k|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|       |                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|       |        else {
 1125|       |            if (r.begin().stores_parent()) {
 1126|       |                return static_cast<size_t>(
 1127|       |                    r.begin().parent()->chars_available() -
 1128|       |                    r.begin().position());
 1129|       |            }
 1130|       |            return r.begin().contiguous_segment().size();
 1131|       |        }
 1132|       |    }
 1133|  7.07k|    else {
 1134|  7.07k|        SCN_UNUSED(r);
  ------------------
  |  | 1064|  7.07k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1135|  7.07k|        return 0;
 1136|  7.07k|    }
 1137|  7.07k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2407|  1.24k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.24k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 70, False: 1.17k]
  |  Branch (2408:29): [True: 1.17k, False: 0]
  ------------------
 2409|  1.24k|                return ch;
 2410|  1.24k|            }
 2411|      0|            return static_cast<char_type>(ch +
 2412|      0|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.24k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3371|     40|{
 3372|     40|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 0, False: 40]
  ------------------
 3373|      0|        return *r;
 3374|      0|    }
 3375|       |
 3376|     40|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 0, False: 40]
  ------------------
 3377|      0|        zero_parsed = true;
 3378|      0|        return *r;
 3379|      0|    }
 3380|       |
 3381|     40|    return unexpected(parse_error::error);
 3382|     40|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2307|     40|{
 2308|     40|    auto it = read_code_unit(range);
 2309|     40|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 2310|      0|        return unexpected(make_eof_parse_error(it.error()));
 2311|      0|    }
 2312|       |
 2313|     40|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2314|     40|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|     40|        return unexpected(parse_error::error);
 2316|     40|    }
 2317|       |
 2318|      0|    return *it;
 2319|     40|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1970|     40|{
 1971|     40|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 1972|      0|        return unexpected(e);
 1973|      0|    }
 1974|       |
 1975|     40|    return ranges::next(range.begin());
 1976|     40|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  960|     40|{
  961|     40|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
  962|      0|        return eof_error::eof;
  963|      0|    }
  964|     40|    return eof_error::good;
  965|     40|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  954|  27.0k|{
  955|  27.0k|    return is_range_eof(r.begin(), r.end());
  956|  27.0k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3364|    360|{
 3365|    360|    return read_matching_string_classic_nocase(range, "0x");
 3366|    360|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3387|     26|{
 3388|     26|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 0, False: 26]
  ------------------
 3389|      0|        return {*r, 16, false};
 3390|      0|    }
 3391|     26|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 0, False: 26]
  ------------------
 3392|      0|        return {*r, 2, false};
 3393|      0|    }
 3394|     26|    {
 3395|     26|        bool zero_parsed{false};
 3396|     26|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 0, False: 26]
  ------------------
 3397|      0|            return {*r, 8, zero_parsed};
 3398|      0|        }
 3399|     26|    }
 3400|     26|    return {range.begin(), 10, false};
 3401|     26|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3473|  1.03k|{
 3474|  1.03k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|  1.03k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|  1.03k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|       |    if constexpr (ranges::contiguous_range<Range>) {
 3478|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3479|       |            return detail::unexpected_scan_error(
 3480|       |                scan_error::invalid_scanned_value,
 3481|       |                "Failed to parse integer: No digits found");
 3482|       |        }
 3483|       |        return range.end();
 3484|       |    }
 3485|  1.03k|    else {
 3486|  1.03k|        return read_while1_code_unit(range,
 3487|  1.03k|                                     [&](char_type ch) noexcept {
 3488|  1.03k|                                         return char_to_int(ch) < base;
 3489|  1.03k|                                     })
 3490|  1.03k|            .transform_error(map_parse_error_to_scan_error(
 3491|  1.03k|                scan_error::invalid_scanned_value,
 3492|  1.03k|                "Failed to parse integer: No digits found"));
 3493|  1.03k|    }
 3494|  1.03k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2153|  1.40k|{
 2154|  1.40k|    auto it = read_while_code_unit(range, pred);
 2155|  1.40k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 1.40k, False: 0]
  ------------------
 2156|  1.40k|        return unexpected(parse_error::error);
 2157|  1.40k|    }
 2158|      0|    return it;
 2159|  1.40k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2133|  1.40k|{
 2134|  1.40k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  1.40k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2100|  1.40k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|  1.40k|    else {
 2105|  1.40k|        auto first = range.begin();
 2106|  1.40k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 1.40k, False: 0]
  ------------------
 2107|  1.40k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 1.40k, False: 0]
  ------------------
 2108|  1.40k|                return first;
 2109|  1.40k|            }
 2110|  1.40k|        }
 2111|      0|        return first;
 2112|  1.40k|    }
 2113|  1.40k|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2953|  75.7k|        {
 2954|  75.7k|            return !(y == x);
 2955|  75.7k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  752|  1.03k|        : m_fptr([](storage fn,
  753|  1.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.03k|              cvref<T> obj = *get<T>(fn);
  755|  1.03k|              if constexpr (std::is_void_v<R>) {
  756|  1.03k|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.03k|              }
  758|  1.03k|              else {
  759|  1.03k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.03k|              }
  761|  1.03k|          }),
  762|  1.03k|          m_storage(std::addressof(f))
  763|  1.03k|    {
  764|  1.03k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  753|  1.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.03k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.03k|              else {
  759|  1.03k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.03k|              }
  761|  1.03k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  689|  1.03k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.03k|        else if constexpr (std::is_object_v<T>) {
  694|  1.03k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.03k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3487|  1.03k|                                     [&](char_type ch) noexcept {
 3488|  1.03k|                                         return char_to_int(ch) < base;
 3489|  1.03k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  666|  1.03k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.03k|        {
  668|  1.03k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3504|     24|{
 3505|     24|    std::basic_string<CharT> output;
 3506|     24|    std::string thsep_indices;
 3507|     24|    auto it = range.begin();
 3508|     24|    bool digit_matched = false;
 3509|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 24, False: 0]
  ------------------
 3510|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 0, False: 24]
  ------------------
 3511|      0|            thsep_indices.push_back(
 3512|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|      0|        }
 3514|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 24, False: 0]
  ------------------
 3515|     24|            break;
 3516|     24|        }
 3517|      0|        else {
 3518|      0|            output.push_back(*it);
 3519|      0|            digit_matched = true;
 3520|      0|        }
 3521|     24|    }
 3522|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3523|     24|        return detail::unexpected_scan_error(
 3524|     24|            scan_error::invalid_scanned_value,
 3525|     24|            "Failed to parse integer: No digits found");
 3526|     24|    }
 3527|      0|    return std::tuple{it, output, thsep_indices};
 3528|     24|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2579|   307k|    {
 2580|   307k|        return m_count;
 2581|   307k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5788|    286|    {
 5789|    286|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5789:13): [True: 264, False: 22]
  ------------------
 5790|    286|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5790:13): [True: 0, False: 22]
  ------------------
 5791|    264|            return read_default(range, value, loc);
 5792|    264|        }
 5793|       |
 5794|     22|        reader_impl_for_int<CharT> reader{};
 5795|     22|        signed char tmp_value{};
 5796|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5797|     22|        value = static_cast<char>(tmp_value);
 5798|     22|        return ret;
 5799|    286|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5770|    896|    {
 5771|    896|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    896|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    896|        if constexpr (std::is_same_v<CharT, char>) {
 5773|    896|            return code_unit_reader<char>{}.read(range, value);
 5774|       |        }
 5775|       |        else {
 5776|       |            SCN_UNUSED(range);
 5777|       |            SCN_EXPECT(false);
 5778|       |            SCN_UNREACHABLE;
 5779|       |        }
 5780|    896|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5688|    896|    {
 5689|    896|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3996|    896|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    896|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    896|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 896]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    896|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    896|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|    896|        ch = *range.begin();
 5691|    896|        return it;
 5692|    896|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|  6.50k|{
 1971|  6.50k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  6.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 6.50k]
  |  |  ------------------
  ------------------
 1972|      0|        return unexpected(e);
 1973|      0|    }
 1974|       |
 1975|  6.50k|    return ranges::next(range.begin());
 1976|  6.50k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  960|  21.7k|{
  961|  21.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 21.7k]
  |  |  ------------------
  ------------------
  962|      0|        return eof_error::eof;
  963|      0|    }
  964|  21.7k|    return eof_error::good;
  965|  21.7k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  954|   276k|{
  955|   276k|    return is_range_eof(r.begin(), r.end());
  956|   276k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  938|   311k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   311k|    {
  948|   311k|        return begin == end;
  949|   311k|    }
  950|   311k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  28.9k|    {
  296|  28.9k|        ++x;
  297|  28.9k|        return x;
  298|  28.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|     22|    {
 3662|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     22|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|     22|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 22]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|      0|            else {
 3673|      0|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 0]
  ------------------
 3674|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|      0|            }
 3680|      0|        }
 3681|       |
 3682|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 22]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3688|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     22|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|     22|                    parse_integer_digits_without_thsep(
 3690|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|     22|                        prefix_result.parsed_base));
 3692|       |
 3693|     22|            auto buf = make_contiguous_buffer(
 3694|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3996|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     22|    }                                                  \
  |  |  |  | 3995|     22|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|     22|        }
 3703|       |
 3704|      0|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|      0|            localized_number_formatting_options<CharT>{loc};
 3710|      0|#endif
 3711|       |
 3712|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3439|  2.77k|{
 3440|  2.77k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|  2.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 2.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  2.77k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  2.77k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|  2.77k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|  2.77k|        parse_integer_base_prefix(
 3445|  2.77k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|  2.77k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 0, False: 2.77k]
  ------------------
 3448|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 0, False: 0]
  ------------------
 3449|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 0, False: 0]
  ------------------
 3450|      0|            digits_begin_it = base_prefix_begin_it;
 3451|      0|        }
 3452|      0|        else {
 3453|      0|            parsed_zero = false;
 3454|      0|        }
 3455|      0|    }
 3456|  2.77k|    else {
 3457|  2.77k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 0, False: 2.77k]
  ------------------
 3458|  2.77k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 2.77k, False: 0]
  ------------------
 3459|  2.77k|            digits_begin_it = base_prefix_begin_it;
 3460|  2.77k|        }
 3461|  2.77k|    }
 3462|       |
 3463|  2.77k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 2.77k, False: 0]
  ------------------
 3464|  2.77k|        sign = sign_type::plus_sign;
 3465|  2.77k|    }
 3466|  2.77k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|  2.77k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|  2.77k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|  3.70k|{
 3321|  3.70k|    auto r = read_one_of_code_unit(range, "+-");
 3322|  3.70k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 3.70k, False: 0]
  ------------------
 3323|  3.70k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 3.70k, False: 0]
  ------------------
 3324|  3.70k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|  3.70k|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|  3.70k|    }
 3328|       |
 3329|      0|    auto& it = *r;
 3330|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 0, False: 0]
  ------------------
 3331|      0|        return std::pair{it, sign_type::minus_sign};
 3332|      0|    }
 3333|      0|    return std::pair{it, sign_type::plus_sign};
 3334|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|  3.70k|{
 2435|  3.70k|    auto it = read_code_unit(range);
 2436|  3.70k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|  7.41k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 7.41k, False: 3.70k]
  ------------------
 2441|  7.41k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 0, False: 7.41k]
  ------------------
 2442|      0|            return *it;
 2443|      0|        }
 2444|  7.41k|    }
 2445|       |
 2446|  3.70k|    return unexpected(parse_error::error);
 2447|  3.70k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3406|  2.77k|{
 3407|  2.77k|    switch (base) {
 3408|      6|        case 2:
  ------------------
  |  Branch (3408:9): [True: 6, False: 2.77k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|      6|                    false};
 3412|       |
 3413|     26|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 26, False: 2.75k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|     26|            bool zero_parsed = false;
 3416|     26|            auto it = apply_opt(
 3417|     26|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|     26|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|    912|        case 16:
  ------------------
  |  Branch (3421:9): [True: 912, False: 1.86k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|    912|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|    912|                    false};
 3425|       |
 3426|     16|        case 0:
  ------------------
  |  Branch (3426:9): [True: 16, False: 2.76k]
  ------------------
 3427|       |            // detect base
 3428|     16|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|  1.81k|        default:
  ------------------
  |  Branch (3430:9): [True: 1.81k, False: 960]
  ------------------
 3431|       |            // no base prefix allowed
 3432|  1.81k|            return {range.begin(), base, false};
 3433|  2.77k|    }
 3434|  2.77k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2453|    944|{
 2454|    944|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 944, False: 0]
  ------------------
 2455|    944|        return range.begin();
 2456|    944|    }
 2457|      0|    return *result;
 2458|    944|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3357|     22|{
 3358|     22|    return read_matching_string_classic_nocase(range, "0b");
 3359|     22|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|  3.76k|{
 2393|  3.76k|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|  3.76k|                  std::is_same_v<char_type, char>) {
 2397|  3.76k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2397:13): [True: 8, False: 3.75k]
  ------------------
 2398|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|      8|        }
 2400|  3.75k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2400:13): [True: 3.75k, False: 0]
  ------------------
 2401|  3.75k|            return unexpected(parse_error::error);
 2402|  3.75k|        }
 2403|      0|        return ranges::next(range.begin(),
 2404|      0|                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|       |    else {
 2407|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|       |            if (ch < 'A' || ch > 'Z') {
 2409|       |                return ch;
 2410|       |            }
 2411|       |            return static_cast<char_type>(ch +
 2412|       |                                          static_cast<char_type>('a' - 'A'));
 2413|       |        };
 2414|       |
 2415|       |        SCN_TRY(it, read_exactly_n_code_units(
 2416|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|       |                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|       |        if (SCN_UNLIKELY(!std::equal(
 2420|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|       |                    return ascii_tolower(a) ==
 2422|       |                           static_cast<detail::char_t<Range>>(b);
 2423|       |                }))) {
 2424|       |            return unexpected(parse_error::error);
 2425|       |        }
 2426|       |
 2427|       |        return it;
 2428|       |    }
 2429|  3.76k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3371|     42|{
 3372|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 0, False: 42]
  ------------------
 3373|      0|        return *r;
 3374|      0|    }
 3375|       |
 3376|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 0, False: 42]
  ------------------
 3377|      0|        zero_parsed = true;
 3378|      0|        return *r;
 3379|      0|    }
 3380|       |
 3381|     42|    return unexpected(parse_error::error);
 3382|     42|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|  1.90k|{
 2308|  1.90k|    auto it = read_code_unit(range);
 2309|  1.90k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.90k]
  |  |  ------------------
  ------------------
 2310|      0|        return unexpected(make_eof_parse_error(it.error()));
 2311|      0|    }
 2312|       |
 2313|  1.90k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.90k, False: 0]
  |  |  ------------------
  ------------------
 2314|  1.90k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|  1.90k|        return unexpected(parse_error::error);
 2316|  1.90k|    }
 2317|       |
 2318|      0|    return *it;
 2319|  1.90k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3364|    928|{
 3365|    928|    return read_matching_string_classic_nocase(range, "0x");
 3366|    928|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3387|     16|{
 3388|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 0, False: 16]
  ------------------
 3389|      0|        return {*r, 16, false};
 3390|      0|    }
 3391|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 0, False: 16]
  ------------------
 3392|      0|        return {*r, 2, false};
 3393|      0|    }
 3394|     16|    {
 3395|     16|        bool zero_parsed{false};
 3396|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 0, False: 16]
  ------------------
 3397|      0|            return {*r, 8, zero_parsed};
 3398|      0|        }
 3399|     16|    }
 3400|     16|    return {range.begin(), 10, false};
 3401|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3473|  2.75k|{
 3474|  2.75k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|  2.75k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|  2.75k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|  2.75k|    if constexpr (ranges::contiguous_range<Range>) {
 3478|  2.75k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.75k]
  |  |  ------------------
  ------------------
 3479|      0|            return detail::unexpected_scan_error(
 3480|      0|                scan_error::invalid_scanned_value,
 3481|      0|                "Failed to parse integer: No digits found");
 3482|      0|        }
 3483|  2.75k|        return range.end();
 3484|       |    }
 3485|       |    else {
 3486|       |        return read_while1_code_unit(range,
 3487|       |                                     [&](char_type ch) noexcept {
 3488|       |                                         return char_to_int(ch) < base;
 3489|       |                                     })
 3490|       |            .transform_error(map_parse_error_to_scan_error(
 3491|       |                scan_error::invalid_scanned_value,
 3492|       |                "Failed to parse integer: No digits found"));
 3493|       |    }
 3494|  2.75k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3504|     20|{
 3505|     20|    std::basic_string<CharT> output;
 3506|     20|    std::string thsep_indices;
 3507|     20|    auto it = range.begin();
 3508|     20|    bool digit_matched = false;
 3509|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 20, False: 0]
  ------------------
 3510|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 0, False: 20]
  ------------------
 3511|      0|            thsep_indices.push_back(
 3512|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|      0|        }
 3514|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 20, False: 0]
  ------------------
 3515|     20|            break;
 3516|     20|        }
 3517|      0|        else {
 3518|      0|            output.push_back(*it);
 3519|      0|            digit_matched = true;
 3520|      0|        }
 3521|     20|    }
 3522|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3523|     20|        return detail::unexpected_scan_error(
 3524|     20|            scan_error::invalid_scanned_value,
 3525|     20|            "Failed to parse integer: No digits found");
 3526|     20|    }
 3527|      0|    return std::tuple{it, output, thsep_indices};
 3528|     20|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|  12.1k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  12.1k|                  ranges::sized_range<Range>) {
 1811|  12.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  12.1k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|  12.1k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  12.1k|    {
 1614|  12.1k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1626|  68.2k|    {
 1627|  68.2k|        return sv;
 1628|  68.2k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 6088|  1.14k|{
 6089|  1.14k|    using char_type = detail::char_t<Range>;
 6090|  1.14k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6091|       |
 6092|  1.14k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6092:9): [True: 474, False: 668]
  ------------------
 6093|    474|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6094|    474|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6095|       |
 6096|    474|        if (max_width == 0) {
  ------------------
  |  Branch (6096:13): [True: 370, False: 104]
  ------------------
 6097|    370|            auto it = read_while_code_unit(range, pred);
 6098|       |
 6099|    370|            if (want_skipped_width) {
  ------------------
  |  Branch (6099:17): [True: 106, False: 264]
  ------------------
 6100|    106|                auto prefix_width =
 6101|    106|                    static_cast<std::ptrdiff_t>(
 6102|    106|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6103|    106|                    ranges::distance(range.begin(), it);
 6104|    106|                return result_type{it, prefix_width};
 6105|    106|            }
 6106|    264|            return result_type{it, 0};
 6107|    370|        }
 6108|       |
 6109|    104|        auto max_width_view = take_width(range, max_width);
 6110|    104|        auto w_it = read_while_code_unit(max_width_view, pred);
 6111|       |
 6112|    104|        if (want_skipped_width) {
  ------------------
  |  Branch (6112:13): [True: 104, False: 0]
  ------------------
 6113|    104|            return result_type{w_it.base(), max_width - w_it.count()};
 6114|    104|        }
 6115|      0|        return result_type{w_it.base(), 0};
 6116|    104|    }
 6117|       |
 6118|    668|    const auto fill_chars = fill.template get_code_units<char_type>();
 6119|    668|    if (max_width == 0) {
  ------------------
  |  Branch (6119:9): [True: 340, False: 328]
  ------------------
 6120|    340|        auto it = read_while_code_units(range, fill_chars);
 6121|       |
 6122|    340|        if (want_skipped_width) {
  ------------------
  |  Branch (6122:13): [True: 118, False: 222]
  ------------------
 6123|    118|            auto prefix_width =
 6124|    118|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6125|    118|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6126|    118|            return result_type{it, prefix_width};
 6127|    118|        }
 6128|    222|        return result_type{it, 0};
 6129|    340|    }
 6130|       |
 6131|    328|    auto max_width_view = take_width(range, max_width);
 6132|    328|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6133|       |
 6134|    328|    if (want_skipped_width) {
  ------------------
  |  Branch (6134:9): [True: 328, False: 0]
  ------------------
 6135|    328|        return result_type{w_it.base(), max_width - w_it.count()};
 6136|    328|    }
 6137|      0|    return result_type{w_it.base(), 0};
 6138|    328|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|    506|{
 2134|    506|    return read_until_code_unit(range, std::not_fn(pred));
 2135|    506|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|    602|{
 2101|    602|    if constexpr (ranges::common_range<Range>) {
 2102|    602|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|    602|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  752|    474|        : m_fptr([](storage fn,
  753|    474|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    474|              cvref<T> obj = *get<T>(fn);
  755|    474|              if constexpr (std::is_void_v<R>) {
  756|    474|                  obj(static_cast<decltype(args)>(args)...);
  757|    474|              }
  758|    474|              else {
  759|    474|                  return obj(static_cast<decltype(args)>(args)...);
  760|    474|              }
  761|    474|          }),
  762|    474|          m_storage(std::addressof(f))
  763|    474|    {
  764|    474|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|    892|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    892|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    892|              else {
  759|    892|                  return obj(static_cast<decltype(args)>(args)...);
  760|    892|              }
  761|    892|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  689|    892|    {
  690|    892|        if constexpr (std::is_const_v<T>) {
  691|    892|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    892|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 6094|    892|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  671|    474|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    474|        {
  673|    474|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2133|    308|{
 2134|    308|    return read_until_code_unit(range, std::not_fn(pred));
 2135|    308|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2100|    482|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|    482|    else {
 2105|    482|        auto first = range.begin();
 2106|  7.72k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 7.50k, False: 220]
  ------------------
 2107|  7.50k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 262, False: 7.24k]
  ------------------
 2108|    262|                return first;
 2109|    262|            }
 2110|  7.50k|        }
 2111|    220|        return first;
 2112|    482|    }
 2113|    482|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2194|    340|{
 2195|    340|    static_assert(ranges::common_range<CodeUnits>);
 2196|       |
 2197|    340|    auto it = range.begin();
 2198|    620|    while (it != range.end()) {
  ------------------
  |  Branch (2198:12): [True: 620, False: 0]
  ------------------
 2199|    620|        auto r = read_exactly_n_code_units(
 2200|    620|            ranges::subrange{it, range.end()},
 2201|    620|            static_cast<std::ptrdiff_t>(needle.size()));
 2202|    620|        if (!r) {
  ------------------
  |  Branch (2202:13): [True: 6, False: 614]
  ------------------
 2203|      6|            return it;
 2204|      6|        }
 2205|    614|        static_assert(
 2206|    614|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2207|    614|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2207:13): [True: 334, False: 280]
  ------------------
 2208|    334|            return it;
 2209|    334|        }
 2210|    280|        it = *r;
 2211|    280|    }
 2212|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2213|      0|    return it;
 2214|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2194|    328|{
 2195|    328|    static_assert(ranges::common_range<CodeUnits>);
 2196|       |
 2197|    328|    auto it = range.begin();
 2198|    672|    while (it != range.end()) {
  ------------------
  |  Branch (2198:12): [True: 626, False: 46]
  ------------------
 2199|    626|        auto r = read_exactly_n_code_units(
 2200|    626|            ranges::subrange{it, range.end()},
 2201|    626|            static_cast<std::ptrdiff_t>(needle.size()));
 2202|    626|        if (!r) {
  ------------------
  |  Branch (2202:13): [True: 70, False: 556]
  ------------------
 2203|     70|            return it;
 2204|     70|        }
 2205|    556|        static_assert(
 2206|    556|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2207|    556|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2207:13): [True: 212, False: 344]
  ------------------
 2208|    212|            return it;
 2209|    212|        }
 2210|    344|        it = *r;
 2211|    344|    }
 2212|     46|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1080|     46|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|     46|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2213|     46|    return it;
 2214|     46|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3128|    568|{
 3129|    568|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 0, False: 568]
  ------------------
 3130|      0|        auto it = read_while_classic_space(range);
 3131|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3133|      0|            return unexpected(e);
 3134|      0|        }
 3135|       |
 3136|      0|        return it;
 3137|      0|    }
 3138|       |
 3139|    568|    return read_while_classic_space(range);
 3140|    568|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2276|    568|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|    568|    else {
 2286|    568|        auto it = range.begin();
 2287|       |
 2288|    568|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|    568|            auto seg = get_contiguous_beginning(range);
 2290|    568|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|    568|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 0, False: 568]
  ------------------
 2292|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|      0|            }
 2294|    568|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|    568|        }
 2296|       |
 2297|    568|        SCN_UNUSED(it);
  ------------------
  |  | 1064|    568|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|    568|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|    568|            return detail::is_cp_space(cp);
 2300|    568|        });
 2301|    568|    }
 2302|    568|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1054|  1.53k|{
 1055|  1.53k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|  1.53k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|       |                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|       |        else {
 1072|       |            return r.begin().contiguous_segment();
 1073|       |        }
 1074|       |    }
 1075|  1.53k|    else {
 1076|  1.53k|        return std::basic_string_view<detail::char_t<Range>>{};
 1077|  1.53k|    }
 1078|  1.53k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2241|    796|{
 2242|    796|    return read_until_code_point(range, std::not_fn(pred));
 2243|    796|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2219|  1.01k|{
 2220|  1.01k|    auto it = range.begin();
 2221|  13.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 13.2k, False: 392]
  ------------------
 2222|  13.2k|        const auto val =
 2223|  13.2k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  13.2k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  13.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 11.9k, False: 1.23k]
  |  |  ------------------
  ------------------
 2225|  11.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  11.9k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  11.9k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  11.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 626, False: 11.3k]
  ------------------
 2229|    626|                return it;
 2230|    626|            }
 2231|  11.9k|        }
 2232|  12.5k|        it = val.iterator;
 2233|  12.5k|    }
 2234|       |
 2235|    392|    return it;
 2236|  1.01k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 2023|  27.0k|{
 2024|  27.0k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  27.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  27.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  27.0k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  27.0k|    auto it = range.begin();
 2028|  27.0k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  27.0k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.93k, False: 24.0k]
  |  |  ------------------
  ------------------
 2031|  2.93k|        ++it;
 2032|  2.93k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|  2.93k|        return {it, {}};
 2034|  2.93k|    }
 2035|       |
 2036|  24.0k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 20.7k, False: 3.31k]
  ------------------
 2037|  20.7k|        ++it;
 2038|  20.7k|        return {it, string_type(1, *range.begin())};
 2039|  20.7k|    }
 2040|       |
 2041|  3.31k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  3.31k|    return {it, string_type{range.begin(), it}};
 2043|  24.0k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1288|  2.93k|{
 1289|  2.93k|    auto it = input.begin();
 1290|  3.39k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 3.20k, False: 192]
  ------------------
 1291|  3.20k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 2.74k, False: 462]
  ------------------
 1292|  2.74k|            break;
 1293|  2.74k|        }
 1294|  3.20k|    }
 1295|  2.93k|    return it;
 1296|  2.93k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  3.31k|    {
  283|  3.31k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.31k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  3.31k|    {
  227|  3.31k|        constexpr iter_difference_t<I> zero{0};
  228|  3.31k|        iter_difference_t<I> counter{0};
  229|       |
  230|  3.31k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 3.31k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  3.31k|        else {
  237|  11.2k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 8.04k, False: 3.20k]
  |  Branch (237:34): [True: 7.93k, False: 114]
  ------------------
  238|  7.93k|                ++i;
  239|  7.93k|                ++counter;
  240|  7.93k|            }
  241|  3.31k|        }
  242|       |
  243|  3.31k|        return counter;
  244|  3.31k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  752|    568|        : m_fptr([](storage fn,
  753|    568|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    568|              cvref<T> obj = *get<T>(fn);
  755|    568|              if constexpr (std::is_void_v<R>) {
  756|    568|                  obj(static_cast<decltype(args)>(args)...);
  757|    568|              }
  758|    568|              else {
  759|    568|                  return obj(static_cast<decltype(args)>(args)...);
  760|    568|              }
  761|    568|          }),
  762|    568|          m_storage(std::addressof(f))
  763|    568|    {
  764|    568|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  753|  1.71k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.71k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.71k|              else {
  759|  1.71k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.71k|              }
  761|  1.71k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  689|  1.71k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.71k|        else if constexpr (std::is_object_v<T>) {
  694|  1.71k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.71k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2298|  1.71k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  1.71k|            return detail::is_cp_space(cp);
 2300|  1.71k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|    568|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    568|        {
  668|    568|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|  6.93k|{
 3129|  6.93k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 6.77k, False: 158]
  ------------------
 3130|  6.77k|        auto it = read_while_classic_space(range);
 3131|  6.77k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  6.77k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  6.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 6.77k]
  |  |  ------------------
  ------------------
 3133|      0|            return unexpected(e);
 3134|      0|        }
 3135|       |
 3136|  6.77k|        return it;
 3137|  6.77k|    }
 3138|       |
 3139|    158|    return read_while_classic_space(range);
 3140|  6.93k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|  15.4k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|  15.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|  15.4k|        auto buf = make_contiguous_buffer(range);
 2281|  15.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|  15.4k|        return ranges::next(range.begin(),
 2283|  15.4k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|  15.4k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|  18.3k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  18.3k|                  ranges::sized_range<Range>) {
 1811|  18.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  18.3k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1612|  18.3k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  18.3k|    {
 1614|  18.3k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|  4.78k|    {
 3219|  4.78k|        reader_error_handler eh{};
 3220|  4.78k|        get_derived().check_specs_impl(specs, eh);
 3221|  4.78k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.40k, False: 1.37k]
  |  |  ------------------
  ------------------
 3222|  3.40k|            return detail::unexpected_scan_error(
 3223|  3.40k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  3.40k|        }
 3225|  1.37k|        return {};
 3226|  4.78k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3230|  4.78k|    {
 3231|  4.78k|        return static_cast<Derived&>(*this);
 3232|  4.78k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3607|  4.78k|    {
 3608|  4.78k|        detail::check_int_type_specs(specs, eh);
 3609|  4.78k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3213|  2.64k|    {
 3214|  2.64k|        return true;
 3215|  2.64k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3661|    354|    {
 3662|    354|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    354|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    354|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    354|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 354]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|      0|            else {
 3673|      0|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 0]
  ------------------
 3674|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|      0|            }
 3680|      0|        }
 3681|       |
 3682|    354|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 354]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    354|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    354|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 342, False: 12]
  |  |  ------------------
  ------------------
 3688|    342|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    342|    }                                                  \
  |  |  |  | 3995|    342|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|                    parse_integer_digits_without_thsep(
 3690|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|      0|                        prefix_result.parsed_base));
 3692|       |
 3693|      0|            auto buf = make_contiguous_buffer(
 3694|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|      0|        }
 3703|       |
 3704|     12|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     12|            localized_number_formatting_options<CharT>{loc};
 3710|     12|#endif
 3711|       |
 3712|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|     12|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|    296|    {
 3662|    296|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    296|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    296|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    296|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 296]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|      0|            else {
 3673|      0|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 0]
  ------------------
 3674|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|      0|            }
 3680|      0|        }
 3681|       |
 3682|    296|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 296]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    296|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    296|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 286, False: 10]
  |  |  ------------------
  ------------------
 3688|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    286|                    parse_integer_digits_without_thsep(
 3690|    286|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    286|                        prefix_result.parsed_base));
 3692|       |
 3693|    286|            auto buf = make_contiguous_buffer(
 3694|    286|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    286|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    286|    }                                                  \
  |  |  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|    286|        }
 3703|       |
 3704|     10|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     10|            localized_number_formatting_options<CharT>{loc};
 3710|     10|#endif
 3711|       |
 3712|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|     10|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3661|    354|    {
 3662|    354|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    354|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    354|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    354|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 354]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    354|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 354]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    354|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    354|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 342, False: 12]
  |  |  ------------------
  ------------------
 3688|    342|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    342|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    342|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    342|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    342|    }                                                  \
  |  |  |  | 3995|    342|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|                    parse_integer_digits_without_thsep(
 3690|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|      0|                        prefix_result.parsed_base));
 3692|       |
 3693|      0|            auto buf = make_contiguous_buffer(
 3694|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|      0|        }
 3703|       |
 3704|     12|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     12|            localized_number_formatting_options<CharT>{loc};
 3710|     12|#endif
 3711|       |
 3712|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     12|    }                                                  \
  |  |  |  | 3995|     12|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|    296|    {
 3662|    296|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    296|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    296|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    296|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 296]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    296|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 296]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    296|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    296|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 286, False: 10]
  |  |  ------------------
  ------------------
 3688|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    286|                    parse_integer_digits_without_thsep(
 3690|    286|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    286|                        prefix_result.parsed_base));
 3692|       |
 3693|    286|            auto buf = make_contiguous_buffer(
 3694|    286|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    286|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    286|    }                                                  \
  |  |  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|    286|        }
 3703|       |
 3704|     10|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     10|            localized_number_formatting_options<CharT>{loc};
 3710|     10|#endif
 3711|       |
 3712|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|     10|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3661|    316|    {
 3662|    316|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    316|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    316|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    316|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 316]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    316|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 316]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    316|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    316|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 316, False: 0]
  |  |  ------------------
  ------------------
 3688|    316|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    316|    }                                                  \
  |  |  |  | 3995|    316|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|                    parse_integer_digits_without_thsep(
 3690|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|      0|                        prefix_result.parsed_base));
 3692|       |
 3693|      0|            auto buf = make_contiguous_buffer(
 3694|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|      0|        }
 3703|       |
 3704|      0|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|      0|            localized_number_formatting_options<CharT>{loc};
 3710|      0|#endif
 3711|       |
 3712|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|    900|    {
 3662|    900|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 900]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    900|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    900|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    900|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 900]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    900|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 900]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    900|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    900|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 900, False: 0]
  |  |  ------------------
  ------------------
 3688|    900|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 900]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    900|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    900|                    parse_integer_digits_without_thsep(
 3690|    900|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    900|                        prefix_result.parsed_base));
 3692|       |
 3693|    900|            auto buf = make_contiguous_buffer(
 3694|    900|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    900|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 900, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    900|    }                                                  \
  |  |  |  | 3995|    900|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|      0|                                        prefix_result.parsed_base));
 3698|       |
 3699|      0|            return ranges::next(
 3700|      0|                prefix_result.iterator,
 3701|      0|                ranges::distance(buf.view().begin(), result_it));
 3702|    900|        }
 3703|       |
 3704|      0|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|      0|            localized_number_formatting_options<CharT>{loc};
 3710|      0|#endif
 3711|       |
 3712|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|  2.39k|    {
 3219|  2.39k|        reader_error_handler eh{};
 3220|  2.39k|        get_derived().check_specs_impl(specs, eh);
 3221|  2.39k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  2.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.69k, False: 702]
  |  |  ------------------
  ------------------
 3222|  1.69k|            return detail::unexpected_scan_error(
 3223|  1.69k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  1.69k|        }
 3225|    702|        return {};
 3226|  2.39k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3230|  2.39k|    {
 3231|  2.39k|        return static_cast<Derived&>(*this);
 3232|  2.39k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4272|  2.39k|    {
 4273|  2.39k|        detail::check_float_type_specs(specs, eh);
 4274|  2.39k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3213|  1.33k|    {
 3214|  1.33k|        return true;
 3215|  1.33k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4346|    664|    {
 4347|    664|        unsigned options{};
 4348|    664|        if (specs.localized) {
  ------------------
  |  Branch (4348:13): [True: 18, False: 646]
  ------------------
 4349|     18|            options |= float_reader_base::allow_thsep;
 4350|     18|        }
 4351|       |
 4352|    664|        SCN_GCC_COMPAT_PUSH
 4353|    664|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4354|       |
 4355|    664|        switch (specs.type) {
 4356|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4356:13): [True: 28, False: 636]
  ------------------
 4357|     28|                return options | float_reader_base::allow_fixed;
 4358|       |
 4359|     14|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4359:13): [True: 14, False: 650]
  ------------------
 4360|     14|                return options | float_reader_base::allow_scientific;
 4361|       |
 4362|     16|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4362:13): [True: 16, False: 648]
  ------------------
 4363|     16|                return options | float_reader_base::allow_hex;
 4364|       |
 4365|     12|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4365:13): [True: 12, False: 652]
  ------------------
 4366|     12|                return options | float_reader_base::allow_scientific |
 4367|     12|                       float_reader_base::allow_fixed;
 4368|       |
 4369|    594|            case detail::presentation_type::none:
  ------------------
  |  Branch (4369:13): [True: 594, False: 70]
  ------------------
 4370|    594|                return options | float_reader_base::allow_scientific |
 4371|    594|                       float_reader_base::allow_fixed |
 4372|    594|                       float_reader_base::allow_hex;
 4373|       |
 4374|      0|            default:
  ------------------
  |  Branch (4374:13): [True: 0, False: 664]
  ------------------
 4375|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4376|    664|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4377|    664|        }
 4378|       |
 4379|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4380|    664|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3775|    664|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1895|  1.29k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1655|  2.59k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4163|    908|    {
 4164|    908|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4164:13): [True: 908, False: 0]
  ------------------
 4165|    908|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4165:13): [True: 908, False: 0]
  ------------------
 4166|    908|            return;
 4167|    908|        }
 4168|       |
 4169|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4170|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4170:13): [True: 0, False: 0]
  ------------------
 4171|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4171:27): [True: 0, False: 0]
  ------------------
 4172|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4172:21): [True: 0, False: 0]
  ------------------
 4173|      0|                    ch = CharT{'.'};
 4174|      0|                }
 4175|      0|            }
 4176|      0|        }
 4177|       |
 4178|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4178:13): [True: 0, False: 0]
  ------------------
 4179|      0|            return;
 4180|      0|        }
 4181|       |
 4182|      0|        auto first =
 4183|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4184|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4184:13): [True: 0, False: 0]
  ------------------
 4185|      0|            return;
 4186|      0|        }
 4187|       |
 4188|      0|        m_thsep_indices.push_back(
 4189|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4190|       |
 4191|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4191:31): [True: 0, False: 0]
  ------------------
 4192|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4192:17): [True: 0, False: 0]
  ------------------
 4193|      0|                *first++ = std::move(*it);
 4194|      0|            }
 4195|      0|            else {
 4196|      0|                m_thsep_indices.push_back(
 4197|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4198|      0|            }
 4199|      0|        }
 4200|       |
 4201|      0|        str.erase(first, str.end());
 4202|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1710|    948|    {
 1711|    948|        return m_storage.has_value();
 1712|    948|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1715|    474|    {
 1716|    474|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|    474|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    474|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|    474|        return *m_storage;
 1718|    474|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  772|    366|    {
  773|    366|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|    366|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3794|     12|    {
 3795|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|     12|        return read_source_impl(range);
 3801|     12|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3820|    366|    {
 3821|    366|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 366]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    366|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|    366|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|    366|        auto it = sign_result.first;
 3824|    366|        m_sign = sign_result.second;
 3825|       |
 3826|    366|        auto digits_begin = it;
 3827|    366|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|       |                      ranges::sized_range<Range>) {
 3830|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3831|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|       |                SCN_TRY_ASSIGN(
 3833|       |                    it,
 3834|       |                    do_read_source_impl(
 3835|       |                        r,
 3836|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|       |            }
 3839|       |            else {
 3840|       |                auto cb = [&](const auto& rr)
 3841|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|       |                    auto res = read_all(rr);
 3843|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|       |                        return detail::unexpected_scan_error(
 3845|       |                            scan_error::invalid_scanned_value,
 3846|       |                            "Invalid float value");
 3847|       |                    }
 3848|       |                    return res;
 3849|       |                };
 3850|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3851|       |            }
 3852|       |        }
 3853|    366|        else {
 3854|    366|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 366, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    366|    }                                                  \
  |  | 3995|    366|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3855|      0|                it,
 3856|      0|                do_read_source_impl(
 3857|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|      0|        }
 3860|       |
 3861|    366|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|    366|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    366|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 0, False: 0]
  |  Branch (3863:48): [True: 0, False: 0]
  ------------------
 3864|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 0, False: 0]
  ------------------
 3865|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|      0|        }
 3868|       |
 3869|      0|        handle_separators();
 3870|       |
 3871|      0|        return it;
 3872|    366|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4106|    366|    {
 4107|    366|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|    366|        const bool allowed_nonhex =
 4109|    366|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|    366|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|    366|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 366, False: 0]
  |  Branch (4112:45): [True: 0, False: 366]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|    366|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 366]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|    366|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 366, False: 0]
  |  Branch (4121:45): [True: 0, False: 366]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|    366|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 366]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|    366|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 334, False: 32]
  |  Branch (4128:28): [True: 8, False: 326]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|      8|            auto it = range.begin();
 4132|       |
 4133|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 0, False: 8]
  ------------------
 4134|      0|                m_kind = float_kind::hex_with_prefix;
 4135|      0|                it = *r;
 4136|      0|            }
 4137|      8|            else {
 4138|      8|                m_kind = float_kind::hex_without_prefix;
 4139|      8|            }
 4140|       |
 4141|      8|            return read_hex(ranges::subrange{it, range.end()});
 4142|      8|        }
 4143|    358|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 32, False: 326]
  |  Branch (4143:29): [True: 32, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|     32|            m_kind = float_kind::generic;
 4147|     32|            return read_regular_float(range);
 4148|     32|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|    326|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 326]
  |  |  ------------------
  ------------------
 4154|      0|            m_kind = float_kind::hex_with_prefix;
 4155|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4156|      0|        }
 4157|       |
 4158|    326|        m_kind = float_kind::generic;
 4159|    326|        return read_regular(range);
 4160|    326|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3914|    366|    {
 3915|    366|        auto it = range.begin();
 3916|    366|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 366, False: 0]
  ------------------
 3917|    366|            return unexpected(r.error());
 3918|    366|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3937|    366|    {
 3938|    366|        auto it = range.begin();
 3939|    366|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 366, False: 0]
  ------------------
 3940|    366|            return r.transform_error(map_parse_error_to_scan_error(
 3941|    366|                scan_error::invalid_scanned_value,
 3942|    366|                "Invalid floating-point NaN value"));
 3943|    366|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3907|    334|    {
 3908|    334|        return read_matching_string_classic_nocase(range, "0x");
 3909|    334|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4008|      8|    {
 4009|      8|        auto it = range.begin();
 4010|       |
 4011|      8|        std::ptrdiff_t digits_count = 0;
 4012|      8|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 4013|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 4014|      8|            return r.transform_error(map_parse_error_to_scan_error(
 4015|      8|                scan_error::invalid_scanned_value,
 4016|      8|                "Invalid hexadecimal floating-point value"));
 4017|      8|        }
 4018|      0|        else {
 4019|      0|            digits_count += ranges::distance(it, *r);
 4020|      0|            it = *r;
 4021|      0|        }
 4022|       |
 4023|      0|        m_integral_part_length = digits_count;
 4024|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4024:18): [True: 0, False: 0]
  ------------------
 4025|      0|                                             m_locale_options.decimal_point)) {
 4026|      0|            it = *r;
 4027|      0|        }
 4028|       |
 4029|      0|        if (auto r =
  ------------------
  |  Branch (4029:18): [True: 0, False: 0]
  ------------------
 4030|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 4031|      0|            digits_count += ranges::distance(it, *r);
 4032|      0|            it = *r;
 4033|      0|        }
 4034|       |
 4035|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4036|      0|            return detail::unexpected_scan_error(
 4037|      0|                scan_error::invalid_scanned_value,
 4038|      0|                "No significand digits in hexfloat");
 4039|      0|        }
 4040|       |
 4041|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4042|       |
 4043|      0|        return it;
 4044|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3892|      8|    {
 3893|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 8]
  |  |  |  Branch (1014:45): [True: 0, False: 8]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3894|      8|                         thsep_allowed)) {
 3895|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3896|      0|                return char_to_int(ch) < 16 ||
 3897|      0|                       ch == m_locale_options.thousands_sep;
 3898|      0|            });
 3899|      0|        }
 3900|       |
 3901|      8|        return read_while1_code_unit(
 3902|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3903|      8|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  752|      8|        : m_fptr([](storage fn,
  753|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|      8|              cvref<T> obj = *get<T>(fn);
  755|      8|              if constexpr (std::is_void_v<R>) {
  756|      8|                  obj(static_cast<decltype(args)>(args)...);
  757|      8|              }
  758|      8|              else {
  759|      8|                  return obj(static_cast<decltype(args)>(args)...);
  760|      8|              }
  761|      8|          }),
  762|      8|          m_storage(std::addressof(f))
  763|      8|    {
  764|      8|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  753|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|      8|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|      8|              else {
  759|      8|                  return obj(static_cast<decltype(args)>(args)...);
  760|      8|              }
  761|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  689|      8|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|      8|        else if constexpr (std::is_object_v<T>) {
  694|      8|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|      8|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3902|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  666|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|      8|        {
  668|      8|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4049|    358|    {
 4050|    358|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|    358|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 344, False: 14]
  |  Branch (4051:50): [True: 10, False: 334]
  ------------------
 4052|       |
 4053|    358|        auto it = ranges::begin(range);
 4054|    358|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|    358|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|    358|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 358, False: 0]
  |  |  ------------------
  ------------------
 4058|    358|            return r.transform_error(
 4059|    358|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|    358|                                              "Invalid floating-point value"));
 4061|    358|        }
 4062|      0|        else {
 4063|      0|            digits_count += ranges::distance(it, *r);
 4064|      0|            it = *r;
 4065|      0|        }
 4066|       |
 4067|      0|        m_integral_part_length = digits_count;
 4068|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 0, False: 0]
  ------------------
 4069|      0|                                             m_locale_options.decimal_point)) {
 4070|      0|            it = *r;
 4071|      0|        }
 4072|       |
 4073|      0|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 0, False: 0]
  ------------------
 4074|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|      0|            digits_count += ranges::distance(it, *r);
 4076|      0|            it = *r;
 4077|      0|        }
 4078|       |
 4079|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|      0|        auto beg_exp_it = it;
 4086|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 0, False: 0]
  ------------------
 4087|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|      0|        }
 4089|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 0]
  |  Branch (4089:29): [True: 0, False: 0]
  ------------------
 4090|      0|            return detail::unexpected_scan_error(
 4091|      0|                scan_error::invalid_scanned_value,
 4092|      0|                "No exponent given to scientific float");
 4093|      0|        }
 4094|       |
 4095|      0|        m_kind =
 4096|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|       |
 4098|      0|        return it;
 4099|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3877|    358|    {
 3878|    358|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|    358|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 358]
  |  |  |  Branch (1014:45): [True: 0, False: 358]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|    358|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|    358|        return read_while1_code_unit(
 3887|    358|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|    358|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  752|    358|        : m_fptr([](storage fn,
  753|    358|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    358|              cvref<T> obj = *get<T>(fn);
  755|    358|              if constexpr (std::is_void_v<R>) {
  756|    358|                  obj(static_cast<decltype(args)>(args)...);
  757|    358|              }
  758|    358|              else {
  759|    358|                  return obj(static_cast<decltype(args)>(args)...);
  760|    358|              }
  761|    358|          }),
  762|    358|          m_storage(std::addressof(f))
  763|    358|    {
  764|    358|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  753|    358|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    358|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    358|              else {
  759|    358|                  return obj(static_cast<decltype(args)>(args)...);
  760|    358|              }
  761|    358|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  689|    358|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    358|        else if constexpr (std::is_object_v<T>) {
  694|    358|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    358|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3887|    358|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  666|    358|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    358|        {
  668|    358|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3780|    354|    {
 3781|    354|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 354]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|    354|        return read_source_impl(range);
 3787|    354|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  772|    930|    {
  773|    930|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|    930|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3794|      6|    {
 3795|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|      6|        return read_source_impl(range);
 3801|      6|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3820|    930|    {
 3821|    930|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 930]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    930|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|    930|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|    930|        auto it = sign_result.first;
 3824|    930|        m_sign = sign_result.second;
 3825|       |
 3826|    930|        auto digits_begin = it;
 3827|    930|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|    930|                      ranges::sized_range<Range>) {
 3830|    930|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1014|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 930]
  |  |  |  Branch (1014:45): [True: 0, False: 930]
  |  |  |  Branch (1014:45): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 3831|    930|                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|      0|    }                                                  \
  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3833|      0|                    it,
 3834|      0|                    do_read_source_impl(
 3835|      0|                        r,
 3836|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|      0|            }
 3839|    930|            else {
 3840|    930|                auto cb = [&](const auto& rr)
 3841|    930|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|    930|                    auto res = read_all(rr);
 3843|    930|                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|    930|                        return detail::unexpected_scan_error(
 3845|    930|                            scan_error::invalid_scanned_value,
 3846|    930|                            "Invalid float value");
 3847|    930|                    }
 3848|    930|                    return res;
 3849|    930|                };
 3850|    930|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3991|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 22, False: 908]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|     22|    }                                                  \
  |  | 3995|    930|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3851|    908|            }
 3852|       |        }
 3853|       |        else {
 3854|       |            SCN_TRY_ASSIGN(
 3855|       |                it,
 3856|       |                do_read_source_impl(
 3857|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|       |        }
 3860|       |
 3861|    930|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|    908|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 908, False: 0]
  |  Branch (3863:48): [True: 908, False: 0]
  ------------------
 3864|    908|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 908, False: 0]
  ------------------
 3865|    908|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 908, False: 0]
  ------------------
 3866|    908|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|    908|        }
 3868|       |
 3869|    908|        handle_separators();
 3870|       |
 3871|    908|        return it;
 3872|    930|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3914|    930|    {
 3915|    930|        auto it = range.begin();
 3916|    930|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 930, False: 0]
  ------------------
 3917|    930|            return unexpected(r.error());
 3918|    930|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3937|    930|    {
 3938|    930|        auto it = range.begin();
 3939|    930|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 930, False: 0]
  ------------------
 3940|    930|            return r.transform_error(map_parse_error_to_scan_error(
 3941|    930|                scan_error::invalid_scanned_value,
 3942|    930|                "Invalid floating-point NaN value"));
 3943|    930|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3907|    908|    {
 3908|    908|        return read_matching_string_classic_nocase(range, "0x");
 3909|    908|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2153|     22|{
 2154|     22|    auto it = read_while_code_unit(range, pred);
 2155|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 22, False: 0]
  ------------------
 2156|     22|        return unexpected(parse_error::error);
 2157|     22|    }
 2158|      0|    return it;
 2159|     22|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4049|     22|    {
 4050|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 8, False: 14]
  |  Branch (4051:50): [True: 4, False: 4]
  ------------------
 4052|       |
 4053|     22|        auto it = ranges::begin(range);
 4054|     22|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 4058|     22|            return r.transform_error(
 4059|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|     22|                                              "Invalid floating-point value"));
 4061|     22|        }
 4062|      0|        else {
 4063|      0|            digits_count += ranges::distance(it, *r);
 4064|      0|            it = *r;
 4065|      0|        }
 4066|       |
 4067|      0|        m_integral_part_length = digits_count;
 4068|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 0, False: 0]
  ------------------
 4069|      0|                                             m_locale_options.decimal_point)) {
 4070|      0|            it = *r;
 4071|      0|        }
 4072|       |
 4073|      0|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 0, False: 0]
  ------------------
 4074|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|      0|            digits_count += ranges::distance(it, *r);
 4076|      0|            it = *r;
 4077|      0|        }
 4078|       |
 4079|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|      0|        auto beg_exp_it = it;
 4086|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 0, False: 0]
  ------------------
 4087|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|      0|        }
 4089|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 0]
  |  Branch (4089:29): [True: 0, False: 0]
  ------------------
 4090|      0|            return detail::unexpected_scan_error(
 4091|      0|                scan_error::invalid_scanned_value,
 4092|      0|                "No exponent given to scientific float");
 4093|      0|        }
 4094|       |
 4095|      0|        m_kind =
 4096|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|       |
 4098|      0|        return it;
 4099|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3877|     22|    {
 3878|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 22]
  |  |  |  Branch (1014:45): [True: 0, False: 22]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|     22|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|     22|        return read_while1_code_unit(
 3887|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|     22|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|     22|        : m_fptr([](storage fn,
  753|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     22|              cvref<T> obj = *get<T>(fn);
  755|     22|              if constexpr (std::is_void_v<R>) {
  756|     22|                  obj(static_cast<decltype(args)>(args)...);
  757|     22|              }
  758|     22|              else {
  759|     22|                  return obj(static_cast<decltype(args)>(args)...);
  760|     22|              }
  761|     22|          }),
  762|     22|          m_storage(std::addressof(f))
  763|     22|    {
  764|     22|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  753|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     22|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|     22|              else {
  759|     22|                  return obj(static_cast<decltype(args)>(args)...);
  760|     22|              }
  761|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  689|     22|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|     22|        else if constexpr (std::is_object_v<T>) {
  694|     22|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|     22|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3887|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|     22|        {
  668|     22|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4106|    930|    {
 4107|    930|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|    930|        const bool allowed_nonhex =
 4109|    930|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|    930|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|    930|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 930, False: 0]
  |  Branch (4112:45): [True: 0, False: 930]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|    930|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 930]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|    930|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 930, False: 0]
  |  Branch (4121:45): [True: 0, False: 930]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|    930|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 930]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|    930|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 908, False: 22]
  |  Branch (4128:28): [True: 8, False: 900]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|      8|            auto it = range.begin();
 4132|       |
 4133|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 0, False: 8]
  ------------------
 4134|      0|                m_kind = float_kind::hex_with_prefix;
 4135|      0|                it = *r;
 4136|      0|            }
 4137|      8|            else {
 4138|      8|                m_kind = float_kind::hex_without_prefix;
 4139|      8|            }
 4140|       |
 4141|      8|            return read_hex(ranges::subrange{it, range.end()});
 4142|      8|        }
 4143|    922|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 22, False: 900]
  |  Branch (4143:29): [True: 22, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|     22|            m_kind = float_kind::generic;
 4147|     22|            return read_regular_float(range);
 4148|     22|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|    900|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 900]
  |  |  ------------------
  ------------------
 4154|      0|            m_kind = float_kind::hex_with_prefix;
 4155|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4156|      0|        }
 4157|       |
 4158|    900|        m_kind = float_kind::generic;
 4159|    900|        return read_regular(range);
 4160|    900|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3841|    908|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|    908|                    auto res = read_all(rr);
 3843|    908|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1014|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 3844|      0|                        return detail::unexpected_scan_error(
 3845|      0|                            scan_error::invalid_scanned_value,
 3846|      0|                            "Invalid float value");
 3847|      0|                    }
 3848|    908|                    return res;
 3849|    908|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1963|    908|{
 1964|    908|    return ranges::next(range.begin(), range.end());
 1965|    908|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    908|    {
  313|    908|        ranges::advance(x, bound);
  314|    908|        return x;
  315|    908|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    908|    {
  275|    908|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    908|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    992|    {
  190|    992|        i = std::move(bound);
  191|    992|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1700|    908|    {
 1701|    908|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|    908|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1744|    908|    {
 1745|    908|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|    908|                      ranges::sized_range<Range>) {
 1750|    908|            m_storage.reset();
 1751|    908|            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|    908|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3780|    924|    {
 3781|    924|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 924]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|    924|        return read_source_impl(range);
 3787|    924|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3806|    908|    {
 3807|    908|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|    908|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    908|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|    908|        const std::ptrdiff_t sign_len =
 3810|    908|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 0, False: 908]
  ------------------
 3811|       |
 3812|    908|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    908|    }                                                  \
  |  |  |  | 3995|    908|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    908|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|    908|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4297|    366|    {
 4298|    366|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|    366|#if !SCN_DISABLE_LOCALE
 4301|    366|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 12, False: 354]
  ------------------
 4302|     12|            return read_impl<Range>(
 4303|     12|                range, rd,
 4304|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4305|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|     12|                },
 4307|     12|                value, loc);
 4308|     12|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|    354|        return read_impl<Range>(
 4314|    354|            range, rd,
 4315|    354|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    354|                return r.read_source(SCN_FWD(args)...);
 4317|    354|            },
 4318|    354|            value);
 4319|    366|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|    366|    {
 4336|    366|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|    366|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 366, False: 0]
  |  |  ------------------
  ------------------
 4338|    366|            return unexpected(r.error());
 4339|    366|        }
 4340|       |
 4341|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    366|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|      0|        return ranges::next(range.begin(), n);
 4343|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  752|     12|        : m_fptr([](storage fn,
  753|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     12|              cvref<T> obj = *get<T>(fn);
  755|     12|              if constexpr (std::is_void_v<R>) {
  756|     12|                  obj(static_cast<decltype(args)>(args)...);
  757|     12|              }
  758|     12|              else {
  759|     12|                  return obj(static_cast<decltype(args)>(args)...);
  760|     12|              }
  761|     12|          }),
  762|     12|          m_storage(std::addressof(f))
  763|     12|    {
  764|     12|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  753|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     12|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|     12|              else {
  759|     12|                  return obj(static_cast<decltype(args)>(args)...);
  760|     12|              }
  761|     12|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|     12|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|     12|        else if constexpr (std::is_object_v<T>) {
  694|     12|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|     12|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4304|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4305|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|     12|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|     12|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|     12|        {
  668|     12|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  752|    354|        : m_fptr([](storage fn,
  753|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    354|              cvref<T> obj = *get<T>(fn);
  755|    354|              if constexpr (std::is_void_v<R>) {
  756|    354|                  obj(static_cast<decltype(args)>(args)...);
  757|    354|              }
  758|    354|              else {
  759|    354|                  return obj(static_cast<decltype(args)>(args)...);
  760|    354|              }
  761|    354|          }),
  762|    354|          m_storage(std::addressof(f))
  763|    354|    {
  764|    354|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  753|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    354|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    354|              else {
  759|    354|                  return obj(static_cast<decltype(args)>(args)...);
  760|    354|              }
  761|    354|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|    354|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    354|        else if constexpr (std::is_object_v<T>) {
  694|    354|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    354|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4315|    354|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    354|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|    354|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|    354|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    354|        {
  668|    354|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|    298|    {
 4298|    298|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|    298|#if !SCN_DISABLE_LOCALE
 4301|    298|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 6, False: 292]
  ------------------
 4302|      6|            return read_impl<Range>(
 4303|      6|                range, rd,
 4304|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4305|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|      6|                },
 4307|      6|                value, loc);
 4308|      6|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|    292|        return read_impl<Range>(
 4314|    292|            range, rd,
 4315|    292|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    292|                return r.read_source(SCN_FWD(args)...);
 4317|    292|            },
 4318|    292|            value);
 4319|    298|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|    930|    {
 4336|    930|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|    930|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22, False: 908]
  |  |  ------------------
  ------------------
 4338|     22|            return unexpected(r.error());
 4339|     22|        }
 4340|       |
 4341|    908|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|    908|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    908|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    908|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 908, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    908|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    908|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    908|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    908|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    908|    }                                                  \
  |  |  |  | 3995|    930|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|      0|        return ranges::next(range.begin(), n);
 4343|    908|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|      6|        : m_fptr([](storage fn,
  753|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|      6|              cvref<T> obj = *get<T>(fn);
  755|      6|              if constexpr (std::is_void_v<R>) {
  756|      6|                  obj(static_cast<decltype(args)>(args)...);
  757|      6|              }
  758|      6|              else {
  759|      6|                  return obj(static_cast<decltype(args)>(args)...);
  760|      6|              }
  761|      6|          }),
  762|      6|          m_storage(std::addressof(f))
  763|      6|    {
  764|      6|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|      6|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|      6|              else {
  759|      6|                  return obj(static_cast<decltype(args)>(args)...);
  760|      6|              }
  761|      6|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|      6|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|      6|        else if constexpr (std::is_object_v<T>) {
  694|      6|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|      6|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4305|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|      6|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|      6|        {
  668|      6|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|    292|        : m_fptr([](storage fn,
  753|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    292|              cvref<T> obj = *get<T>(fn);
  755|    292|              if constexpr (std::is_void_v<R>) {
  756|    292|                  obj(static_cast<decltype(args)>(args)...);
  757|    292|              }
  758|    292|              else {
  759|    292|                  return obj(static_cast<decltype(args)>(args)...);
  760|    292|              }
  761|    292|          }),
  762|    292|          m_storage(std::addressof(f))
  763|    292|    {
  764|    292|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    292|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    292|              else {
  759|    292|                  return obj(static_cast<decltype(args)>(args)...);
  760|    292|              }
  761|    292|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|    292|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    292|        else if constexpr (std::is_object_v<T>) {
  694|    292|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    292|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|    292|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    292|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|    292|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|    292|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    292|        {
  668|    292|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5935|  2.98k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|  2.98k|                       std::is_same_v<T, std::wstring>) {
 5954|  2.98k|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  2.98k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5328|  8.95k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|  7.06k|    {
 3219|  7.06k|        reader_error_handler eh{};
 3220|  7.06k|        get_derived().check_specs_impl(specs, eh);
 3221|  7.06k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  7.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 438, False: 6.62k]
  |  |  ------------------
  ------------------
 3222|    438|            return detail::unexpected_scan_error(
 3223|    438|                scan_error::invalid_format_string, eh.m_msg);
 3224|    438|        }
 3225|  6.62k|        return {};
 3226|  7.06k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3230|  7.06k|    {
 3231|  7.06k|        return static_cast<Derived&>(*this);
 3232|  7.06k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5332|  7.06k|    {
 5333|  7.06k|        detail::check_string_type_specs(specs, eh);
 5334|       |
 5335|  7.06k|        SCN_GCC_COMPAT_PUSH
 5336|  7.06k|        SCN_GCC_COMPAT_IGNORE("-Wswitch")
 5337|  7.06k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-default")
 5338|       |
 5339|  7.06k|        switch (specs.type) {
  ------------------
  |  Branch (5339:17): [True: 432, False: 6.63k]
  ------------------
 5340|  1.81k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5340:13): [True: 1.81k, False: 5.24k]
  ------------------
 5341|  1.81k|                m_type = reader_type::word;
 5342|  1.81k|                break;
 5343|       |
 5344|    726|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5344:13): [True: 726, False: 6.33k]
  ------------------
 5345|    726|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5345:21): [True: 102, False: 624]
  ------------------
 5346|    726|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5346:21): [True: 360, False: 264]
  ------------------
 5347|    462|                    m_type = reader_type::custom_word;
 5348|    462|                }
 5349|    264|                else {
 5350|    264|                    m_type = reader_type::word;
 5351|    264|                }
 5352|    726|                break;
 5353|      0|            }
 5354|       |
 5355|    186|            case detail::presentation_type::character:
  ------------------
  |  Branch (5355:13): [True: 186, False: 6.87k]
  ------------------
 5356|    186|                m_type = reader_type::character;
 5357|    186|                break;
 5358|       |
 5359|  3.36k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5359:13): [True: 3.36k, False: 3.70k]
  ------------------
 5360|  3.36k|                m_type = reader_type::character_set;
 5361|  3.36k|                break;
 5362|       |
 5363|      0|#if !SCN_DISABLE_REGEX
 5364|    102|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5364:13): [True: 102, False: 6.96k]
  ------------------
 5365|    102|                m_type = reader_type::regex;
 5366|    102|                break;
 5367|       |
 5368|    438|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5368:13): [True: 438, False: 6.62k]
  ------------------
 5369|    438|                m_type = reader_type::regex_escaped;
 5370|    438|                break;
 5371|  7.06k|#endif
 5372|  7.06k|        }
 5373|       |
 5374|  7.06k|        SCN_GCC_COMPAT_POP
 5375|  7.06k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5378|  11.1k|    {
 5379|  11.1k|        return m_type == reader_type::word;
 5380|  11.1k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1263|  8.39k|{
 1264|  8.39k|    auto it = src.begin();
 1265|   408k|    while (it != src.end()) {
  ------------------
  |  Branch (1265:12): [True: 401k, False: 6.43k]
  ------------------
 1266|   401k|        const auto len = static_cast<std::ptrdiff_t>(
 1267|   401k|            detail::code_point_length_by_starting_code_unit(*it));
 1268|   401k|        SCN_EXPECT(len >= 0);
  ------------------
  |  | 1079|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1269|   401k|        if (len == 0) {
  ------------------
  |  Branch (1269:13): [True: 1.29k, False: 400k]
  ------------------
 1270|  1.29k|            return false;
 1271|  1.29k|        }
 1272|   400k|        if (std::distance(it, src.end()) < len) {
  ------------------
  |  Branch (1272:13): [True: 234, False: 400k]
  ------------------
 1273|    234|            return false;
 1274|    234|        }
 1275|   400k|        const auto cp = detail::decode_code_point_exhaustive(
 1276|   400k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1277|   400k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1277:13): [True: 432, False: 399k]
  ------------------
 1278|    432|            return false;
 1279|    432|        }
 1280|   399k|        it += len;
 1281|   399k|    }
 1282|  6.43k|    return true;
 1283|  8.39k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|    474|{
 3171|    474|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|    474|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3172:13): [True: 474, False: 0]
  ------------------
 3173|    474|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1083|    474|    static_cast<    \
  |  | 1084|    474|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3174|    474|        }
 3175|      0|        else {
 3176|      0|            dest.assign(source.view());
 3177|      0|        }
 3178|       |    }
 3179|       |    else {
 3180|       |        return transcode_impl(source.view(), dest);
 3181|       |    }
 3182|       |
 3183|    474|    return {};
 3184|    474|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5229|  3.35k|        {
 5230|  3.35k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5230:17): [True: 588, False: 2.76k]
  ------------------
 5231|    588|                return {};
 5232|    588|            }
 5233|       |
 5234|  2.76k|            auto charset_string = specs.charset_string<SourceCharT>();
 5235|  2.76k|            auto it = detail::to_address(charset_string.begin());
 5236|  2.76k|            auto set = detail::parse_presentation_set(
 5237|  2.76k|                it, detail::to_address(charset_string.end()), nonascii);
 5238|  2.76k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3984|  2.76k|    do {                                                            \
  |  | 3985|  2.76k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 2.76k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  2.76k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5239|  2.76k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1080|  2.76k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5240|  2.76k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1080|  2.76k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5241|       |
 5242|  2.76k|            std::sort(nonascii.extra_ranges.begin(),
 5243|  2.76k|                      nonascii.extra_ranges.end());
 5244|  2.76k|            return {};
 5245|  2.76k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5262|   263k|        {
 5263|   263k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5263:17): [True: 41.9k, False: 221k]
  ------------------
 5264|  41.9k|                return helper.is_char_set_in_extra_literals(cp);
 5265|  41.9k|            }
 5266|       |
 5267|   221k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5268|   263k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5212|  41.9k|        {
 5213|       |            // TODO: binary search?
 5214|  41.9k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5214:17): [True: 0, False: 41.9k]
  ------------------
 5215|      0|                return false;
 5216|      0|            }
 5217|       |
 5218|  41.9k|            const auto cp_val = static_cast<uint32_t>(cp);
 5219|  41.9k|            return std::find_if(
 5220|  41.9k|                       nonascii.extra_ranges.begin(),
 5221|  41.9k|                       nonascii.extra_ranges.end(),
 5222|  41.9k|                       [cp_val](const auto& pair) noexcept {
 5223|  41.9k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5224|  41.9k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5225|  41.9k|                       }) != nonascii.extra_ranges.end();
 5226|  41.9k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5222|  8.14M|                       [cp_val](const auto& pair) noexcept {
 5223|  8.14M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5223:35): [True: 8.14M, False: 1.95k]
  ------------------
 5224|  8.14M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5224:35): [True: 40.2k, False: 8.10M]
  ------------------
 5225|  8.14M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5202|   230k|        {
 5203|   230k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1079|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|   230k|            const auto val =
 5205|   230k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5206|   230k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5207|   230k|                    (val % 8)) &
 5208|   230k|                   1u;
 5209|   230k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5253|  10.3k|        {
 5254|  10.3k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5254:17): [True: 1.89k, False: 8.44k]
  ------------------
 5255|  1.89k|                return false;
 5256|  1.89k|            }
 5257|       |
 5258|  8.44k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5259|  10.3k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5199|  3.35k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5396|    824|    {
 5397|    824|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    824|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    824|        return read_impl(range, specs, value);
 5399|    824|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5416|    824|    {
 5417|    824|        SCN_CLANG_PUSH
 5418|    824|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    824|        switch (m_type) {
 5421|    322|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 322, False: 502]
  ------------------
 5422|    322|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|    100|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 100, False: 724]
  ------------------
 5425|    100|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|    100|                                                                   value);
 5427|       |
 5428|     58|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 58, False: 766]
  ------------------
 5429|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    276|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 276, False: 548]
  ------------------
 5432|    276|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    276|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      2|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 2, False: 822]
  ------------------
 5437|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      2|                    range, specs.charset_string<SourceCharT>(),
 5439|      2|                    specs.regexp_flags, value);
 5440|       |
 5441|     66|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 66, False: 758]
  ------------------
 5442|     66|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|     66|                    range,
 5444|     66|                    get_unescaped_regex_pattern(
 5445|     66|                        specs.charset_string<SourceCharT>()),
 5446|     66|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 824]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    824|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    824|        }
 5453|       |
 5454|    824|        SCN_CLANG_POP
 5455|    824|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4950|    322|    {
 4951|    322|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    322|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4884|    480|{
 4885|    480|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    480|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    480|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 182, False: 298]
  ------------------
 4889|    182|        return detail::unexpected_scan_error(
 4890|    182|            scan_error::invalid_scanned_value,
 4891|    182|            "Invalid encoding in scanned string");
 4892|    182|    }
 4893|       |
 4894|    298|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    298|    do {                                                            \
  |  | 3985|    298|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 298]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    298|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    298|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    298|    static_cast<    \
  |  | 1084|    298|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    298|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2247|    966|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|    966|    else {
 2257|    966|        auto it = range.begin();
 2258|       |
 2259|    966|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|    966|            auto seg = get_contiguous_beginning(range);
 2261|    966|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|    966|                seg_it != seg.end()) {
  ------------------
  |  Branch (2262:17): [True: 0, False: 966]
  ------------------
 2263|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|      0|            }
 2265|    966|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|    966|        }
 2267|       |
 2268|      0|        return read_until_code_point(
 2269|    966|            ranges::subrange{it, range.end()},
 2270|    966|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|    966|    }
 2272|    966|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2219|    966|{
 2220|    966|    auto it = range.begin();
 2221|  14.5k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 13.7k, False: 750]
  ------------------
 2222|  13.7k|        const auto val =
 2223|  13.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  13.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  13.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 12.0k, False: 1.69k]
  |  |  ------------------
  ------------------
 2225|  12.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  12.0k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  12.0k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  12.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 216, False: 11.8k]
  ------------------
 2229|    216|                return it;
 2230|    216|            }
 2231|  12.0k|        }
 2232|  13.5k|        it = val.iterator;
 2233|  13.5k|    }
 2234|       |
 2235|    750|    return it;
 2236|    966|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  752|    966|        : m_fptr([](storage fn,
  753|    966|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    966|              cvref<T> obj = *get<T>(fn);
  755|    966|              if constexpr (std::is_void_v<R>) {
  756|    966|                  obj(static_cast<decltype(args)>(args)...);
  757|    966|              }
  758|    966|              else {
  759|    966|                  return obj(static_cast<decltype(args)>(args)...);
  760|    966|              }
  761|    966|          }),
  762|    966|          m_storage(std::addressof(f))
  763|    966|    {
  764|    966|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  753|  12.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  12.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  12.0k|              else {
  759|  12.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  12.0k|              }
  761|  12.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  689|  12.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  12.0k|        else if constexpr (std::is_object_v<T>) {
  694|  12.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  12.0k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2270|  12.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|    966|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    966|        {
  668|    966|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4971|    100|    {
 4972|    100|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 48, False: 52]
  ------------------
 4973|     48|            return read_string_impl(
 4974|     48|                range,
 4975|     48|                read_until_code_unit(
 4976|     48|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     48|                value);
 4978|     48|        }
 4979|     52|        return read_string_impl(
 4980|     52|            range,
 4981|     52|            read_until_code_units(
 4982|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|     52|            value);
 4984|    100|    }
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS0_6detail11mp_identityINDTcl4implISE_EEE4typeEE4typeE:
 2081|    144|{
 2082|       |    if constexpr (ranges::common_range<Range>) {
 2083|       |        return std::find(range.begin(), range.end(), cu);
 2084|       |    }
 2085|    144|    else {
 2086|    144|        auto first = range.begin();
 2087|  2.89k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2087:16): [True: 2.75k, False: 138]
  ------------------
 2088|  2.75k|            if (*first == cu) {
  ------------------
  |  Branch (2088:17): [True: 6, False: 2.74k]
  ------------------
 2089|      6|                return first;
 2090|      6|            }
 2091|  2.75k|        }
 2092|    138|        return first;
 2093|    144|    }
 2094|    144|}
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2164|    156|{
 2165|    156|    static_assert(ranges::common_range<CodeUnits>);
 2166|       |
 2167|       |    if constexpr (ranges::common_range<Range>) {
 2168|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2169|       |                           needle.end());
 2170|       |    }
 2171|    156|    else {
 2172|    156|        auto first = range.begin();
 2173|  2.18k|        while (true) {
  ------------------
  |  Branch (2173:16): [Folded - Ignored]
  ------------------
 2174|  2.18k|            auto it = first;
 2175|  2.67k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2176|  2.67k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2176:21): [True: 102, False: 2.56k]
  ------------------
 2177|    102|                    return first;
 2178|    102|                }
 2179|  2.56k|                if (it == range.end()) {
  ------------------
  |  Branch (2179:21): [True: 54, False: 2.51k]
  ------------------
 2180|     54|                    return it;
 2181|     54|                }
 2182|  2.51k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2182:21): [True: 2.02k, False: 486]
  ------------------
 2183|  2.02k|                    break;
 2184|  2.02k|                }
 2185|  2.51k|            }
 2186|  2.02k|            ++first;
 2187|  2.02k|        }
 2188|    156|    }
 2189|    156|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5073|     58|    {
 5074|     58|        return read_impl(
 5075|     58|            range,
 5076|     58|            [&](const auto& rng) {
 5077|     58|                return read_string_impl(rng, read_all(rng), value);
 5078|     58|            },
 5079|     58|            detail::priority_tag<1>{});
 5080|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5100|     58|    {
 5101|     58|        return read_cb(range);
 5102|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5076|     58|            [&](const auto& rng) {
 5077|     58|                return read_string_impl(rng, read_all(rng), value);
 5078|     58|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1963|    174|{
 1964|    174|    return ranges::next(range.begin(), range.end());
 1965|    174|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    174|    {
  313|    174|        ranges::advance(x, bound);
  314|    174|        return x;
  315|    174|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    174|    {
  275|    174|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    174|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    174|    {
  203|  2.74k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.56k, False: 174]
  ------------------
  204|  2.56k|            ++i;
  205|  2.56k|        }
  206|    174|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5174|    276|    {
 5175|    276|        auto it = read_source_impl(range, {specs});
 5176|    276|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8, False: 268]
  |  |  ------------------
  ------------------
 5177|      8|            return unexpected(it.error());
 5178|      8|        }
 5179|       |
 5180|    268|        return read_string_impl(range, *it, value);
 5181|    276|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5277|    828|    {
 5278|    828|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|    828|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|    828|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|    828|    do {                                                            \
  |  | 3985|    828|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 828]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    828|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|    828|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|    828|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 450, False: 378]
  ------------------
 5286|    450|            const auto cb = [&](char32_t cp) {
 5287|    450|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|    450|            };
 5289|       |
 5290|    450|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 222, False: 228]
  ------------------
 5291|    222|                auto it = read_until_code_point(range, cb);
 5292|    222|                return check_nonempty(it, range);
 5293|    222|            }
 5294|    228|            auto it = read_while_code_point(range, cb);
 5295|    228|            return check_nonempty(it, range);
 5296|    450|        }
 5297|       |
 5298|    378|        const auto cb = [&](SourceCharT ch) {
 5299|    378|            return cb_wrapper.on_ascii_only(ch);
 5300|    378|        };
 5301|       |
 5302|    378|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 174, False: 204]
  ------------------
 5303|    174|            auto it = read_until_code_unit(range, cb);
 5304|    174|            return check_nonempty(it, range);
 5305|    174|        }
 5306|    204|        auto it = read_while_code_unit(range, cb);
 5307|    204|        return check_nonempty(it, range);
 5308|    378|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|    450|        : m_fptr([](storage fn,
  753|    450|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    450|              cvref<T> obj = *get<T>(fn);
  755|    450|              if constexpr (std::is_void_v<R>) {
  756|    450|                  obj(static_cast<decltype(args)>(args)...);
  757|    450|              }
  758|    450|              else {
  759|    450|                  return obj(static_cast<decltype(args)>(args)...);
  760|    450|              }
  761|    450|          }),
  762|    450|          m_storage(std::addressof(f))
  763|    450|    {
  764|    450|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  753|  10.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  10.2k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  10.2k|              else {
  759|  10.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  10.2k|              }
  761|  10.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  689|  10.2k|    {
  690|  10.2k|        if constexpr (std::is_const_v<T>) {
  691|  10.2k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  10.2k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5286|  10.2k|            const auto cb = [&](char32_t cp) {
 5287|  10.2k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|  10.2k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  671|    450|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    450|        {
  673|    450|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5313|    828|    {
 5314|    828|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 24, False: 804]
  ------------------
 5315|     24|            return detail::unexpected_scan_error(
 5316|     24|                scan_error::invalid_scanned_value,
 5317|     24|                "No characters matched in [character set]");
 5318|     24|        }
 5319|       |
 5320|    804|        return it;
 5321|    828|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|    378|        : m_fptr([](storage fn,
  753|    378|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    378|              cvref<T> obj = *get<T>(fn);
  755|    378|              if constexpr (std::is_void_v<R>) {
  756|    378|                  obj(static_cast<decltype(args)>(args)...);
  757|    378|              }
  758|    378|              else {
  759|    378|                  return obj(static_cast<decltype(args)>(args)...);
  760|    378|              }
  761|    378|          }),
  762|    378|          m_storage(std::addressof(f))
  763|    378|    {
  764|    378|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  753|  7.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  7.21k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  7.21k|              else {
  759|  7.21k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  7.21k|              }
  761|  7.21k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  689|  7.21k|    {
  690|  7.21k|        if constexpr (std::is_const_v<T>) {
  691|  7.21k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  7.21k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5298|  7.21k|        const auto cb = [&](SourceCharT ch) {
 5299|  7.21k|            return cb_wrapper.on_ascii_only(ch);
 5300|  7.21k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  671|    378|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    378|        {
  673|    378|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4884|    268|{
 4885|    268|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    268|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    268|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 92, False: 176]
  ------------------
 4889|     92|        return detail::unexpected_scan_error(
 4890|     92|            scan_error::invalid_scanned_value,
 4891|     92|            "Invalid encoding in scanned string");
 4892|     92|    }
 4893|       |
 4894|    176|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    176|    do {                                                            \
  |  | 3985|    176|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 176]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    176|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    176|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    176|    static_cast<    \
  |  | 1084|    176|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    176|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 5017|     68|    {
 5018|     68|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3996|     68|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     68|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     68|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 68, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     68|    }                                                  \
  |  |  |  | 3995|     68|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5019|      0|        return read_string_impl(range, it, value);
 5020|     68|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 5039|    204|    {
 5040|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 5041|       |                      !std::is_same_v<SourceCharT, char>) {
 5042|       |            return detail::unexpected_scan_error(
 5043|       |                scan_error::invalid_format_string,
 5044|       |                "Regex backend doesn't support wide strings as input");
 5045|       |        }
 5046|    204|        else {
 5047|    204|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (5047:17): [True: 204, False: 0]
  ------------------
 5048|    204|                return detail::unexpected_scan_error(
 5049|    204|                    scan_error::invalid_format_string,
 5050|    204|                    "Cannot use regex with a non-contiguous source "
 5051|    204|                    "range");
 5052|    204|            }
 5053|       |
 5054|      0|            auto input = get_as_contiguous(range);
 5055|      0|            SCN_TRY(it,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5056|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 5057|      0|            return ranges::next(range.begin(),
 5058|      0|                                ranges::distance(input.begin(), it));
 5059|      0|        }
 5060|    204|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  969|    204|{
  970|    204|    SCN_UNUSED(r);
  ------------------
  |  | 1064|    204|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  971|       |    if constexpr (ranges::contiguous_range<Range> &&
  972|       |                  ranges::sized_range<Range>) {
  973|       |        return true;
  974|       |    }
  975|       |    else if constexpr (std::is_same_v<
  976|       |                           ranges::const_iterator_t<Range>,
  977|       |                           typename detail::basic_scan_buffer<
  978|       |                               detail::char_t<Range>>::forward_iterator>) {
  979|       |        auto beg = r.begin();
  980|       |        if (!beg.stores_parent()) {
  981|       |            return true;
  982|       |        }
  983|       |        return beg.parent()->is_contiguous();
  984|       |    }
  985|    204|    else {
  986|    204|        return false;
  987|    204|    }
  988|    204|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|  1.34k|    {
 5397|  1.34k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  1.34k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  1.34k|        return read_impl(range, specs, value);
 5399|  1.34k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|  1.34k|    {
 5417|  1.34k|        SCN_CLANG_PUSH
 5418|  1.34k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  1.34k|        switch (m_type) {
 5421|    340|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 340, False: 1.00k]
  ------------------
 5422|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 52, False: 1.29k]
  ------------------
 5425|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     52|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 1.34k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    842|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 842, False: 504]
  ------------------
 5432|    842|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    842|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|     32|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 32, False: 1.31k]
  ------------------
 5437|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|     32|                    range, specs.charset_string<SourceCharT>(),
 5439|     32|                    specs.regexp_flags, value);
 5440|       |
 5441|     80|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 80, False: 1.26k]
  ------------------
 5442|     80|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|     80|                    range,
 5444|     80|                    get_unescaped_regex_pattern(
 5445|     80|                        specs.charset_string<SourceCharT>()),
 5446|     80|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 1.34k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  1.34k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  1.34k|        }
 5453|       |
 5454|  1.34k|        SCN_CLANG_POP
 5455|  1.34k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|    972|    {
 4951|    972|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    972|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|  1.02k|{
 4885|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|  1.02k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|  1.02k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 328, False: 696]
  ------------------
 4889|    328|        return detail::unexpected_scan_error(
 4890|    328|            scan_error::invalid_scanned_value,
 4891|    328|            "Invalid encoding in scanned string");
 4892|    328|    }
 4893|       |
 4894|    696|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    696|    do {                                                            \
  |  | 3985|    696|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    696|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 696]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    696|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    696|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    696|    static_cast<    \
  |  | 1084|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    696|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|  1.13k|{
 3191|  1.13k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|  1.13k|        dest.assign(source.view());
 3193|       |    }
 3194|       |    else {
 3195|       |        return transcode_impl(source.view(), dest);
 3196|       |    }
 3197|       |
 3198|  1.13k|    return {};
 3199|  1.13k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2247|  2.91k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|  2.91k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|  2.91k|        auto buf = make_contiguous_buffer(range);
 2252|  2.91k|        auto it = find_classic_space_narrow_fast(buf.view());
 2253|  2.91k|        return ranges::next(range.begin(),
 2254|  2.91k|                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|       |    else {
 2257|       |        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|       |        return read_until_code_point(
 2269|       |            ranges::subrange{it, range.end()},
 2270|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|       |    }
 2272|  2.91k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4971|     52|    {
 4972|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 22, False: 30]
  ------------------
 4973|     22|            return read_string_impl(
 4974|     22|                range,
 4975|     22|                read_until_code_unit(
 4976|     22|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     22|                value);
 4978|     22|        }
 4979|     30|        return read_string_impl(
 4980|     30|            range,
 4981|     30|            read_until_code_units(
 4982|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|     30|            value);
 4984|     52|    }
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS0_6detail11mp_identityINDTcl4implISC_EEE4typeEE4typeE:
 2081|     66|{
 2082|     66|    if constexpr (ranges::common_range<Range>) {
 2083|     66|        return std::find(range.begin(), range.end(), cu);
 2084|       |    }
 2085|       |    else {
 2086|       |        auto first = range.begin();
 2087|       |        for (; first != range.end(); ++first) {
 2088|       |            if (*first == cu) {
 2089|       |                return first;
 2090|       |            }
 2091|       |        }
 2092|       |        return first;
 2093|       |    }
 2094|     66|}
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2164|     90|{
 2165|     90|    static_assert(ranges::common_range<CodeUnits>);
 2166|       |
 2167|     90|    if constexpr (ranges::common_range<Range>) {
 2168|     90|        return std::search(range.begin(), range.end(), needle.begin(),
 2169|     90|                           needle.end());
 2170|       |    }
 2171|       |    else {
 2172|       |        auto first = range.begin();
 2173|       |        while (true) {
 2174|       |            auto it = first;
 2175|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2176|       |                if (needle_it == needle.end()) {
 2177|       |                    return first;
 2178|       |                }
 2179|       |                if (it == range.end()) {
 2180|       |                    return it;
 2181|       |                }
 2182|       |                if (*it != *needle_it) {
 2183|       |                    break;
 2184|       |                }
 2185|       |            }
 2186|       |            ++first;
 2187|       |        }
 2188|       |    }
 2189|     90|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|    842|    {
 5175|    842|        auto it = read_source_impl(range, {specs});
 5176|    842|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 382, False: 460]
  |  |  ------------------
  ------------------
 5177|    382|            return unexpected(it.error());
 5178|    382|        }
 5179|       |
 5180|    460|        return read_string_impl(range, *it, value);
 5181|    842|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5277|  2.52k|    {
 5278|  2.52k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  2.52k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  2.52k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  2.52k|    do {                                                            \
  |  | 3985|  2.52k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 2.52k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  2.52k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  2.52k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  2.52k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 2.31k, False: 210]
  ------------------
 5286|  2.31k|            const auto cb = [&](char32_t cp) {
 5287|  2.31k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|  2.31k|            };
 5289|       |
 5290|  2.31k|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 222, False: 2.09k]
  ------------------
 5291|    222|                auto it = read_until_code_point(range, cb);
 5292|    222|                return check_nonempty(it, range);
 5293|    222|            }
 5294|  2.09k|            auto it = read_while_code_point(range, cb);
 5295|  2.09k|            return check_nonempty(it, range);
 5296|  2.31k|        }
 5297|       |
 5298|    210|        const auto cb = [&](SourceCharT ch) {
 5299|    210|            return cb_wrapper.on_ascii_only(ch);
 5300|    210|        };
 5301|       |
 5302|    210|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 96, False: 114]
  ------------------
 5303|     96|            auto it = read_until_code_unit(range, cb);
 5304|     96|            return check_nonempty(it, range);
 5305|     96|        }
 5306|    114|        auto it = read_while_code_unit(range, cb);
 5307|    114|        return check_nonempty(it, range);
 5308|    210|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|  2.31k|{
 2220|  2.31k|    auto it = range.begin();
 2221|   254k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 254k, False: 156]
  ------------------
 2222|   254k|        const auto val =
 2223|   254k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   254k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   254k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 253k, False: 954]
  |  |  ------------------
  ------------------
 2225|   253k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   253k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   253k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   253k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 2.16k, False: 251k]
  ------------------
 2229|  2.16k|                return it;
 2230|  2.16k|            }
 2231|   253k|        }
 2232|   252k|        it = val.iterator;
 2233|   252k|    }
 2234|       |
 2235|    156|    return it;
 2236|  2.31k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|   254k|{
 2024|   254k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   254k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   254k|    auto it = range.begin();
 2028|   254k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   254k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 954, False: 253k]
  |  |  ------------------
  ------------------
 2031|    954|        ++it;
 2032|    954|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|    954|        return {it, {}};
 2034|    954|    }
 2035|       |
 2036|   253k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 212k, False: 40.6k]
  ------------------
 2037|   212k|        ++it;
 2038|   212k|        return {it, string_type(1, *range.begin())};
 2039|   212k|    }
 2040|       |
 2041|  40.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  40.6k|    return {it, string_type{range.begin(), it}};
 2043|   253k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1288|    954|{
 1289|    954|    auto it = input.begin();
 1290|  1.43k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 1.38k, False: 54]
  ------------------
 1291|  1.38k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 900, False: 480]
  ------------------
 1292|    900|            break;
 1293|    900|        }
 1294|  1.38k|    }
 1295|    954|    return it;
 1296|    954|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  40.6k|    {
  283|  40.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  40.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  40.6k|    {
  212|  40.6k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 84, False: 40.5k]
  ------------------
  213|     84|            auto dist = bound - i;
  214|     84|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     84|            return dist;
  216|     84|        }
  217|  40.5k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  40.5k|        return n;
  219|  40.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|  81.2k|    {
  132|  81.2k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 81.2k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|  81.2k|        return t;
  136|  81.2k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 2014|   254k|    {
 2015|   254k|        return !codepoint.empty();
 2016|   254k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|  2.31k|        : m_fptr([](storage fn,
  753|  2.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.31k|              cvref<T> obj = *get<T>(fn);
  755|  2.31k|              if constexpr (std::is_void_v<R>) {
  756|  2.31k|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.31k|              }
  758|  2.31k|              else {
  759|  2.31k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.31k|              }
  761|  2.31k|          }),
  762|  2.31k|          m_storage(std::addressof(f))
  763|  2.31k|    {
  764|  2.31k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  753|   253k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   253k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   253k|              else {
  759|   253k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   253k|              }
  761|   253k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  689|   253k|    {
  690|   253k|        if constexpr (std::is_const_v<T>) {
  691|   253k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   253k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5286|   253k|            const auto cb = [&](char32_t cp) {
 5287|   253k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|   253k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|  2.31k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  2.31k|        {
  673|  2.31k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5313|  2.52k|    {
 5314|  2.52k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 1.14k, False: 1.38k]
  ------------------
 5315|  1.14k|            return detail::unexpected_scan_error(
 5316|  1.14k|                scan_error::invalid_scanned_value,
 5317|  1.14k|                "No characters matched in [character set]");
 5318|  1.14k|        }
 5319|       |
 5320|  1.38k|        return it;
 5321|  2.52k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|  2.09k|{
 2242|  2.09k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  2.09k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|    210|        : m_fptr([](storage fn,
  753|    210|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    210|              cvref<T> obj = *get<T>(fn);
  755|    210|              if constexpr (std::is_void_v<R>) {
  756|    210|                  obj(static_cast<decltype(args)>(args)...);
  757|    210|              }
  758|    210|              else {
  759|    210|                  return obj(static_cast<decltype(args)>(args)...);
  760|    210|              }
  761|    210|          }),
  762|    210|          m_storage(std::addressof(f))
  763|    210|    {
  764|    210|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|  3.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  3.13k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  3.13k|              else {
  759|  3.13k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  3.13k|              }
  761|  3.13k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  689|  3.13k|    {
  690|  3.13k|        if constexpr (std::is_const_v<T>) {
  691|  3.13k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  3.13k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5298|  3.13k|        const auto cb = [&](SourceCharT ch) {
 5299|  3.13k|            return cb_wrapper.on_ascii_only(ch);
 5300|  3.13k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|    210|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    210|        {
  673|    210|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    490|{
 4885|    490|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    490|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    490|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 52, False: 438]
  ------------------
 4889|     52|        return detail::unexpected_scan_error(
 4890|     52|            scan_error::invalid_scanned_value,
 4891|     52|            "Invalid encoding in scanned string");
 4892|     52|    }
 4893|       |
 4894|    438|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    438|    do {                                                            \
  |  | 3985|    438|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    438|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    438|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    438|    static_cast<    \
  |  | 1084|    438|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    438|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 5017|    112|    {
 5018|    112|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3996|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 82, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     82|    }                                                  \
  |  |  |  | 3995|    112|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5019|     30|        return read_string_impl(range, it, value);
 5020|    112|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 5039|    336|    {
 5040|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 5041|       |                      !std::is_same_v<SourceCharT, char>) {
 5042|       |            return detail::unexpected_scan_error(
 5043|       |                scan_error::invalid_format_string,
 5044|       |                "Regex backend doesn't support wide strings as input");
 5045|       |        }
 5046|    336|        else {
 5047|    336|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (5047:17): [True: 0, False: 336]
  ------------------
 5048|      0|                return detail::unexpected_scan_error(
 5049|      0|                    scan_error::invalid_format_string,
 5050|      0|                    "Cannot use regex with a non-contiguous source "
 5051|      0|                    "range");
 5052|      0|            }
 5053|       |
 5054|    336|            auto input = get_as_contiguous(range);
 5055|    336|            SCN_TRY(it,
  ------------------
  |  | 3996|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 246, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    246|    }                                                  \
  |  |  |  | 3995|    336|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5056|     90|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 5057|     90|            return ranges::next(range.begin(),
 5058|     90|                                ranges::distance(input.begin(), it));
 5059|    336|        }
 5060|    336|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  969|    336|{
  970|    336|    SCN_UNUSED(r);
  ------------------
  |  | 1064|    336|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  971|       |    if constexpr (ranges::contiguous_range<Range> &&
  972|    336|                  ranges::sized_range<Range>) {
  973|    336|        return true;
  974|       |    }
  975|       |    else if constexpr (std::is_same_v<
  976|       |                           ranges::const_iterator_t<Range>,
  977|       |                           typename detail::basic_scan_buffer<
  978|       |                               detail::char_t<Range>>::forward_iterator>) {
  979|       |        auto beg = r.begin();
  980|       |        if (!beg.stores_parent()) {
  981|       |            return true;
  982|       |        }
  983|       |        return beg.parent()->is_contiguous();
  984|       |    }
  985|       |    else {
  986|       |        return false;
  987|       |    }
  988|    336|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1082|    336|{
 1083|    336|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  | 1079|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1084|       |
 1085|       |    if constexpr (ranges::contiguous_range<Range> &&
 1086|    336|                  ranges::sized_range<Range>) {
 1087|    336|        return r;
 1088|       |    }
 1089|       |    else if constexpr (std::is_same_v<
 1090|       |                           ranges::const_iterator_t<Range>,
 1091|       |                           typename detail::basic_scan_buffer<
 1092|       |                               detail::char_t<Range>>::forward_iterator>) {
 1093|       |        if constexpr (ranges::common_range<Range>) {
 1094|       |            return detail::make_string_view_from_pointers(
 1095|       |                r.begin().to_contiguous_segment_iterator(),
 1096|       |                r.end().to_contiguous_segment_iterator());
 1097|       |        }
 1098|       |        else {
 1099|       |            return r.begin().contiguous_segment();
 1100|       |        }
 1101|       |    }
 1102|       |    else {
 1103|       |        SCN_EXPECT(false);
 1104|       |        SCN_UNREACHABLE;
 1105|       |        SCN_UNUSED(r);
 1106|       |        // for return type deduction
 1107|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1108|       |    }
 1109|    336|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  992|    336|{
  993|    336|    SCN_UNUSED(r);
  ------------------
  |  | 1064|    336|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|    336|                  ranges::sized_range<Range>) {
  997|    336|        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|       |                               detail::char_t<Range>>::forward_iterator>) {
 1003|       |        auto beg = r.begin();
 1004|       |        if (beg.contiguous_segment().empty()) {
 1005|       |            return false;
 1006|       |        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|       |        else {
 1012|       |            if (beg.stores_parent()) {
 1013|       |                return beg.contiguous_segment().end() ==
 1014|       |                       beg.parent()->current_view().end();
 1015|       |            }
 1016|       |            return true;
 1017|       |        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|    336|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4467|    336|{
 4468|    336|    static_assert(ranges::contiguous_range<Input> &&
 4469|    336|                  ranges::borrowed_range<Input> &&
 4470|    336|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4471|       |
 4472|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4473|       |    std::basic_regex<CharT> re{};
 4474|       |    try {
 4475|       |        SCN_TRY(re_flags, make_regex_flags(flags));
 4476|       |        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4477|       |                                     re_flags | std::regex_constants::nosubs};
 4478|       |    }
 4479|       |    catch (const std::regex_error&) {
 4480|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4481|       |                                             "Invalid regex");
 4482|       |    }
 4483|       |
 4484|       |    std::match_results<const CharT*> matches{};
 4485|       |    try {
 4486|       |        bool found = std::regex_search(input.data(),
 4487|       |                                       input.data() + input.size(), matches, re,
 4488|       |                                       std::regex_constants::match_continuous);
 4489|       |        if (!found || matches.prefix().matched) {
 4490|       |            return detail::unexpected_scan_error(
 4491|       |                scan_error::invalid_scanned_value,
 4492|       |                "Regular expression didn't match");
 4493|       |        }
 4494|       |    }
 4495|       |    catch (const std::regex_error&) {
 4496|       |        return detail::unexpected_scan_error(
 4497|       |            scan_error::invalid_format_string,
 4498|       |            "Regex matching failed with an error");
 4499|       |    }
 4500|       |
 4501|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4502|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4503|       |    auto re =
 4504|       |#if SCN_REGEX_BOOST_USE_ICU
 4505|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4506|       |                             make_regex_flags(flags) |
 4507|       |                                 boost::regex_constants::no_except |
 4508|       |                                 boost::regex_constants::nosubs);
 4509|       |#else
 4510|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4511|       |                                  make_regex_flags(flags) |
 4512|       |                                      boost::regex_constants::no_except |
 4513|       |                                      boost::regex_constants::nosubs};
 4514|       |#endif
 4515|       |    if (re.status() != 0) {
 4516|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4517|       |                                             "Invalid regex");
 4518|       |    }
 4519|       |
 4520|       |    boost::match_results<const CharT*> matches{};
 4521|       |    try {
 4522|       |        bool found =
 4523|       |#if SCN_REGEX_BOOST_USE_ICU
 4524|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4525|       |                                   matches, re,
 4526|       |                                   boost::regex_constants::match_continuous);
 4527|       |#else
 4528|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4529|       |                                matches, re,
 4530|       |                                boost::regex_constants::match_continuous);
 4531|       |#endif
 4532|       |        if (!found || matches.prefix().matched) {
 4533|       |            return detail::unexpected_scan_error(
 4534|       |                scan_error::invalid_scanned_value,
 4535|       |                "Regular expression didn't match");
 4536|       |        }
 4537|       |    }
 4538|       |    catch (const std::runtime_error&) {
 4539|       |        return detail::unexpected_scan_error(
 4540|       |            scan_error::invalid_format_string,
 4541|       |            "Regex matching failed with an error");
 4542|       |    }
 4543|       |
 4544|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4545|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4546|       |    static_assert(std::is_same_v<CharT, char>);
 4547|    336|    std::string flagged_pattern{};
 4548|    336|    auto re = [&]() {
 4549|    336|        auto [opts, flagstr] = make_regex_flags(flags);
 4550|    336|        opts.set_never_capture(true);
 4551|    336|        if (flagstr.empty()) {
 4552|    336|            return re2::RE2{pattern, opts};
 4553|    336|        }
 4554|    336|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4555|    336|        flagged_pattern.append(flagstr);
 4556|    336|        flagged_pattern.append(pattern);
 4557|    336|        return re2::RE2{flagged_pattern, opts};
 4558|    336|    }();
 4559|    336|    if (!re.ok()) {
  ------------------
  |  Branch (4559:9): [True: 96, False: 240]
  ------------------
 4560|     96|        return detail::unexpected_scan_error(
 4561|     96|            scan_error::invalid_format_string,
 4562|     96|            "Failed to parse regular expression");
 4563|     96|    }
 4564|       |
 4565|    240|    auto new_input = detail::make_string_view_from_pointers(
 4566|    240|        detail::to_address(input.begin()), detail::to_address(input.end()));
 4567|    240|    bool found = re2::RE2::Consume(&new_input, re);
 4568|    240|    if (!found) {
  ------------------
  |  Branch (4568:9): [True: 150, False: 90]
  ------------------
 4569|    150|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4570|    150|                                             "Regular expression didn't match");
 4571|    150|    }
 4572|     90|    return input.begin() + ranges::distance(input.data(), new_input.data());
 4573|    240|#endif  // SCN_REGEX_BACKEND == ...
 4574|    240|}
_ZZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_ENKUlvE_clEv:
 4548|    336|    auto re = [&]() {
 4549|    336|        auto [opts, flagstr] = make_regex_flags(flags);
 4550|    336|        opts.set_never_capture(true);
 4551|    336|        if (flagstr.empty()) {
  ------------------
  |  Branch (4551:13): [True: 12, False: 324]
  ------------------
 4552|     12|            return re2::RE2{pattern, opts};
 4553|     12|        }
 4554|    324|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4555|    324|        flagged_pattern.append(flagstr);
 4556|    324|        flagged_pattern.append(pattern);
 4557|    324|        return re2::RE2{flagged_pattern, opts};
 4558|    336|    }();
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5935|  2.98k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|  2.98k|                       std::is_same_v<T, std::wstring>) {
 5954|  2.98k|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  2.98k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|    474|{
 3171|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|       |        if (source.stores_allocated_string()) {
 3173|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3174|       |        }
 3175|       |        else {
 3176|       |            dest.assign(source.view());
 3177|       |        }
 3178|       |    }
 3179|    474|    else {
 3180|    474|        return transcode_impl(source.view(), dest);
 3181|    474|    }
 3182|       |
 3183|      0|    return {};
 3184|    474|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3145|  1.60k|{
 3146|  1.60k|    dst.clear();
 3147|  1.60k|    transcode_valid_to_string(src, dst);
 3148|  1.60k|    return {};
 3149|  1.60k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1526|  1.60k|{
 1527|  1.60k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1528|       |
 1529|  1.60k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1079|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1530|  1.60k|    if constexpr (sizeof(SourceCharT) == 1) {
 1531|       |        if constexpr (sizeof(DestCharT) == 2) {
 1532|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1533|       |            std::u32string tmp;
 1534|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1535|       |            return transcode_to_string_impl_32to16<true>(
 1536|       |                std::u32string_view{tmp}, dest);
 1537|       |        }
 1538|  1.60k|        else if constexpr (sizeof(DestCharT) == 4) {
 1539|  1.60k|            return transcode_valid_to_string_impl_to32(src, dest);
 1540|  1.60k|        }
 1541|       |    }
 1542|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1543|       |        if constexpr (sizeof(DestCharT) == 1) {
 1544|       |            std::u32string tmp;
 1545|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1546|       |            return transcode_to_string_impl_32to8<true>(
 1547|       |                std::u32string_view{tmp}, dest);
 1548|       |        }
 1549|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1550|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1551|       |        }
 1552|       |    }
 1553|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1554|       |        if constexpr (sizeof(DestCharT) == 1) {
 1555|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1556|       |        }
 1557|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1558|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1559|       |        }
 1560|       |    }
 1561|       |
 1562|  1.60k|    SCN_EXPECT(false);
  ------------------
  |  | 1079|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1563|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1564|  1.60k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1399|  1.60k|{
 1400|  1.60k|    static_assert(sizeof(DestCharT) == 4);
 1401|       |
 1402|  1.60k|    auto it = src.begin();
 1403|  97.9k|    while (it != src.end()) {
  ------------------
  |  Branch (1403:12): [True: 96.3k, False: 1.60k]
  ------------------
 1404|  96.3k|        auto res = get_next_code_point_valid(
 1405|  96.3k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1406|  96.3k|                                                                 src.end()));
 1407|  96.3k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  | 1079|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1408|  96.3k|        dest.push_back(static_cast<DestCharT>(res.value));
 1409|  96.3k|        it = detail::make_string_view_iterator(src, res.iterator);
 1410|  96.3k|    }
 1411|  1.60k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1322|  96.3k|{
 1323|  96.3k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1324|       |
 1325|  96.3k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1326|  96.3k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  | 1079|  96.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1327|       |
 1328|  96.3k|    return {input.begin() + static_cast<std::ptrdiff_t>(len),
 1329|  96.3k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1330|  96.3k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5396|    824|    {
 5397|    824|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    824|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    824|        return read_impl(range, specs, value);
 5399|    824|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5416|    824|    {
 5417|    824|        SCN_CLANG_PUSH
 5418|    824|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    824|        switch (m_type) {
 5421|    322|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 322, False: 502]
  ------------------
 5422|    322|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|    100|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 100, False: 724]
  ------------------
 5425|    100|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|    100|                                                                   value);
 5427|       |
 5428|     58|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 58, False: 766]
  ------------------
 5429|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    276|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 276, False: 548]
  ------------------
 5432|    276|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    276|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      2|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 2, False: 822]
  ------------------
 5437|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      2|                    range, specs.charset_string<SourceCharT>(),
 5439|      2|                    specs.regexp_flags, value);
 5440|       |
 5441|     66|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 66, False: 758]
  ------------------
 5442|     66|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|     66|                    range,
 5444|     66|                    get_unescaped_regex_pattern(
 5445|     66|                        specs.charset_string<SourceCharT>()),
 5446|     66|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 824]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    824|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    824|        }
 5453|       |
 5454|    824|        SCN_CLANG_POP
 5455|    824|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4950|    322|    {
 4951|    322|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    322|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4884|    480|{
 4885|    480|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    480|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    480|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 182, False: 298]
  ------------------
 4889|    182|        return detail::unexpected_scan_error(
 4890|    182|            scan_error::invalid_scanned_value,
 4891|    182|            "Invalid encoding in scanned string");
 4892|    182|    }
 4893|       |
 4894|    298|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    298|    do {                                                            \
  |  | 3985|    298|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 298]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    298|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    298|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    298|    static_cast<    \
  |  | 1084|    298|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    298|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4971|    100|    {
 4972|    100|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 48, False: 52]
  ------------------
 4973|     48|            return read_string_impl(
 4974|     48|                range,
 4975|     48|                read_until_code_unit(
 4976|     48|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     48|                value);
 4978|     48|        }
 4979|     52|        return read_string_impl(
 4980|     52|            range,
 4981|     52|            read_until_code_units(
 4982|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|     52|            value);
 4984|    100|    }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5073|     58|    {
 5074|     58|        return read_impl(
 5075|     58|            range,
 5076|     58|            [&](const auto& rng) {
 5077|     58|                return read_string_impl(rng, read_all(rng), value);
 5078|     58|            },
 5079|     58|            detail::priority_tag<1>{});
 5080|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5100|     58|    {
 5101|     58|        return read_cb(range);
 5102|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5076|     58|            [&](const auto& rng) {
 5077|     58|                return read_string_impl(rng, read_all(rng), value);
 5078|     58|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5174|    276|    {
 5175|    276|        auto it = read_source_impl(range, {specs});
 5176|    276|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8, False: 268]
  |  |  ------------------
  ------------------
 5177|      8|            return unexpected(it.error());
 5178|      8|        }
 5179|       |
 5180|    268|        return read_string_impl(range, *it, value);
 5181|    276|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4884|    268|{
 4885|    268|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    268|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    268|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 92, False: 176]
  ------------------
 4889|     92|        return detail::unexpected_scan_error(
 4890|     92|            scan_error::invalid_scanned_value,
 4891|     92|            "Invalid encoding in scanned string");
 4892|     92|    }
 4893|       |
 4894|    176|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    176|    do {                                                            \
  |  | 3985|    176|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 176]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    176|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    176|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    176|    static_cast<    \
  |  | 1084|    176|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    176|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 5017|     68|    {
 5018|     68|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3996|     68|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     68|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     68|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 68, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     68|    }                                                  \
  |  |  |  | 3995|     68|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5019|      0|        return read_string_impl(range, it, value);
 5020|     68|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|  1.34k|    {
 5397|  1.34k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  1.34k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  1.34k|        return read_impl(range, specs, value);
 5399|  1.34k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|  1.34k|    {
 5417|  1.34k|        SCN_CLANG_PUSH
 5418|  1.34k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  1.34k|        switch (m_type) {
 5421|    340|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 340, False: 1.00k]
  ------------------
 5422|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 52, False: 1.29k]
  ------------------
 5425|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     52|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 1.34k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    842|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 842, False: 504]
  ------------------
 5432|    842|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    842|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|     32|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 32, False: 1.31k]
  ------------------
 5437|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|     32|                    range, specs.charset_string<SourceCharT>(),
 5439|     32|                    specs.regexp_flags, value);
 5440|       |
 5441|     80|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 80, False: 1.26k]
  ------------------
 5442|     80|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|     80|                    range,
 5444|     80|                    get_unescaped_regex_pattern(
 5445|     80|                        specs.charset_string<SourceCharT>()),
 5446|     80|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 1.34k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  1.34k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  1.34k|        }
 5453|       |
 5454|  1.34k|        SCN_CLANG_POP
 5455|  1.34k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|    972|    {
 4951|    972|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    972|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|  1.02k|{
 4885|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|  1.02k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|  1.02k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 328, False: 696]
  ------------------
 4889|    328|        return detail::unexpected_scan_error(
 4890|    328|            scan_error::invalid_scanned_value,
 4891|    328|            "Invalid encoding in scanned string");
 4892|    328|    }
 4893|       |
 4894|    696|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    696|    do {                                                            \
  |  | 3985|    696|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    696|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 696]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    696|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    696|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    696|    static_cast<    \
  |  | 1084|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    696|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|  1.13k|{
 3191|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|       |        dest.assign(source.view());
 3193|       |    }
 3194|  1.13k|    else {
 3195|  1.13k|        return transcode_impl(source.view(), dest);
 3196|  1.13k|    }
 3197|       |
 3198|      0|    return {};
 3199|  1.13k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4971|     52|    {
 4972|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 22, False: 30]
  ------------------
 4973|     22|            return read_string_impl(
 4974|     22|                range,
 4975|     22|                read_until_code_unit(
 4976|     22|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     22|                value);
 4978|     22|        }
 4979|     30|        return read_string_impl(
 4980|     30|            range,
 4981|     30|            read_until_code_units(
 4982|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|     30|            value);
 4984|     52|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|    842|    {
 5175|    842|        auto it = read_source_impl(range, {specs});
 5176|    842|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 382, False: 460]
  |  |  ------------------
  ------------------
 5177|    382|            return unexpected(it.error());
 5178|    382|        }
 5179|       |
 5180|    460|        return read_string_impl(range, *it, value);
 5181|    842|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    490|{
 4885|    490|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    490|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    490|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 52, False: 438]
  ------------------
 4889|     52|        return detail::unexpected_scan_error(
 4890|     52|            scan_error::invalid_scanned_value,
 4891|     52|            "Invalid encoding in scanned string");
 4892|     52|    }
 4893|       |
 4894|    438|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    438|    do {                                                            \
  |  | 3985|    438|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 438]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    438|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    438|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    438|    static_cast<    \
  |  | 1084|    438|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    438|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 5017|    112|    {
 5018|    112|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3996|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 82, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     82|    }                                                  \
  |  |  |  | 3995|    112|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5019|     30|        return read_string_impl(range, it, value);
 5020|    112|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5935|  2.98k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|  2.98k|                       std::is_same_v<T, std::wstring_view>) {
 5950|  2.98k|        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|       |                       std::is_same_v<T, std::wstring>) {
 5954|       |        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  2.98k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|    824|    {
 5397|    824|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    824|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    824|        return read_impl(range, specs, value);
 5399|    824|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|    824|    {
 5417|    824|        SCN_CLANG_PUSH
 5418|    824|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    824|        switch (m_type) {
 5421|    322|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 322, False: 502]
  ------------------
 5422|    322|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|    100|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 100, False: 724]
  ------------------
 5425|    100|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|    100|                                                                   value);
 5427|       |
 5428|     58|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 58, False: 766]
  ------------------
 5429|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    276|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 276, False: 548]
  ------------------
 5432|    276|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    276|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      2|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 2, False: 822]
  ------------------
 5437|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      2|                    range, specs.charset_string<SourceCharT>(),
 5439|      2|                    specs.regexp_flags, value);
 5440|       |
 5441|     66|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 66, False: 758]
  ------------------
 5442|     66|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|     66|                    range,
 5444|     66|                    get_unescaped_regex_pattern(
 5445|     66|                        specs.charset_string<SourceCharT>()),
 5446|     66|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 824]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    824|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    824|        }
 5453|       |
 5454|    824|        SCN_CLANG_POP
 5455|    824|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4957|    322|    {
 4958|    322|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|    322|                                     value);
 4960|    322|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4903|    480|{
 4904|    480|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    480|    auto src = [&]() {
 4907|    480|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    480|            return make_contiguous_buffer(
 4909|    480|                ranges::subrange{range.begin().base(), result.base()});
 4910|    480|        }
 4911|    480|        else {
 4912|    480|            return make_contiguous_buffer(
 4913|    480|                ranges::subrange{range.begin(), result});
 4914|    480|        }
 4915|    480|    }();
 4916|    480|    using src_type = decltype(src);
 4917|       |
 4918|    480|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    480|    else {
 4931|    480|        const auto view = src.view();
 4932|    480|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    480|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 182, False: 298]
  ------------------
 4935|    182|            return detail::unexpected_scan_error(
 4936|    182|                scan_error::invalid_scanned_value,
 4937|    182|                "Invalid encoding in scanned string_view");
 4938|    182|        }
 4939|       |
 4940|    298|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    298|    static_cast<    \
  |  | 1084|    298|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    480|    }
 4942|    480|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4906|    480|    auto src = [&]() {
 4907|    480|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    480|            return make_contiguous_buffer(
 4909|    480|                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|       |        else {
 4912|       |            return make_contiguous_buffer(
 4913|       |                ranges::subrange{range.begin(), result});
 4914|       |        }
 4915|    480|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4991|    100|    {
 4992|    100|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4992:13): [True: 48, False: 52]
  ------------------
 4993|     48|            return read_string_view_impl(
 4994|     48|                range,
 4995|     48|                read_until_code_unit(
 4996|     48|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4997|     48|                value);
 4998|     48|        }
 4999|     52|        return read_string_view_impl(
 5000|     52|            range,
 5001|     52|            read_until_code_units(
 5002|     52|                range, specs.fill.template get_code_units<SourceCharT>()),
 5003|     52|            value);
 5004|    100|    }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 5085|     58|    {
 5086|     58|        return read_impl(
 5087|     58|            range,
 5088|     58|            [&](const auto& rng) {
 5089|     58|                return read_string_view_impl(rng, read_all(rng), value);
 5090|     58|            },
 5091|     58|            detail::priority_tag<1>{});
 5092|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5100|     58|    {
 5101|     58|        return read_cb(range);
 5102|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5088|     58|            [&](const auto& rng) {
 5089|     58|                return read_string_view_impl(rng, read_all(rng), value);
 5090|     58|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5188|    276|    {
 5189|    276|        auto it = read_source_impl(range, {specs});
 5190|    276|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8, False: 268]
  |  |  ------------------
  ------------------
 5191|      8|            return unexpected(it.error());
 5192|      8|        }
 5193|       |
 5194|    268|        return read_string_view_impl(range, *it, value);
 5195|    276|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4903|    268|{
 4904|    268|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    268|    auto src = [&]() {
 4907|    268|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    268|            return make_contiguous_buffer(
 4909|    268|                ranges::subrange{range.begin().base(), result.base()});
 4910|    268|        }
 4911|    268|        else {
 4912|    268|            return make_contiguous_buffer(
 4913|    268|                ranges::subrange{range.begin(), result});
 4914|    268|        }
 4915|    268|    }();
 4916|    268|    using src_type = decltype(src);
 4917|       |
 4918|    268|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    268|    else {
 4931|    268|        const auto view = src.view();
 4932|    268|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    268|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 92, False: 176]
  ------------------
 4935|     92|            return detail::unexpected_scan_error(
 4936|     92|                scan_error::invalid_scanned_value,
 4937|     92|                "Invalid encoding in scanned string_view");
 4938|     92|        }
 4939|       |
 4940|    176|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    176|    static_cast<    \
  |  | 1084|    176|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    268|    }
 4942|    268|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4906|    268|    auto src = [&]() {
 4907|    268|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    268|            return make_contiguous_buffer(
 4909|    268|                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|       |        else {
 4912|       |            return make_contiguous_buffer(
 4913|       |                ranges::subrange{range.begin(), result});
 4914|       |        }
 4915|    268|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 5028|     68|    {
 5029|     68|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3996|     68|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     68|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     68|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 68, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     68|    }                                                  \
  |  |  |  | 3995|     68|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5030|      0|        return read_string_view_impl(range, it, value);
 5031|     68|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5396|  1.34k|    {
 5397|  1.34k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  1.34k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  1.34k|        return read_impl(range, specs, value);
 5399|  1.34k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5416|  1.34k|    {
 5417|  1.34k|        SCN_CLANG_PUSH
 5418|  1.34k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  1.34k|        switch (m_type) {
 5421|    340|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 340, False: 1.00k]
  ------------------
 5422|    340|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 52, False: 1.29k]
  ------------------
 5425|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     52|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 1.34k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    842|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 842, False: 504]
  ------------------
 5432|    842|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    842|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|     32|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 32, False: 1.31k]
  ------------------
 5437|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|     32|                    range, specs.charset_string<SourceCharT>(),
 5439|     32|                    specs.regexp_flags, value);
 5440|       |
 5441|     80|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 80, False: 1.26k]
  ------------------
 5442|     80|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|     80|                    range,
 5444|     80|                    get_unescaped_regex_pattern(
 5445|     80|                        specs.charset_string<SourceCharT>()),
 5446|     80|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 1.34k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  1.34k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  1.34k|        }
 5453|       |
 5454|  1.34k|        SCN_CLANG_POP
 5455|  1.34k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4957|    972|    {
 4958|    972|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|    972|                                     value);
 4960|    972|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4903|  1.02k|{
 4904|  1.02k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|  1.02k|    auto src = [&]() {
 4907|  1.02k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|  1.02k|            return make_contiguous_buffer(
 4909|  1.02k|                ranges::subrange{range.begin().base(), result.base()});
 4910|  1.02k|        }
 4911|  1.02k|        else {
 4912|  1.02k|            return make_contiguous_buffer(
 4913|  1.02k|                ranges::subrange{range.begin(), result});
 4914|  1.02k|        }
 4915|  1.02k|    }();
 4916|  1.02k|    using src_type = decltype(src);
 4917|       |
 4918|  1.02k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|  1.02k|    else {
 4931|  1.02k|        const auto view = src.view();
 4932|  1.02k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|  1.02k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 328, False: 696]
  ------------------
 4935|    328|            return detail::unexpected_scan_error(
 4936|    328|                scan_error::invalid_scanned_value,
 4937|    328|                "Invalid encoding in scanned string_view");
 4938|    328|        }
 4939|       |
 4940|    696|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    696|    static_cast<    \
  |  | 1084|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|  1.02k|    }
 4942|  1.02k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4906|  1.02k|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|  1.02k|        else {
 4912|  1.02k|            return make_contiguous_buffer(
 4913|  1.02k|                ranges::subrange{range.begin(), result});
 4914|  1.02k|        }
 4915|  1.02k|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4991|     52|    {
 4992|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4992:13): [True: 22, False: 30]
  ------------------
 4993|     22|            return read_string_view_impl(
 4994|     22|                range,
 4995|     22|                read_until_code_unit(
 4996|     22|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4997|     22|                value);
 4998|     22|        }
 4999|     30|        return read_string_view_impl(
 5000|     30|            range,
 5001|     30|            read_until_code_units(
 5002|     30|                range, specs.fill.template get_code_units<SourceCharT>()),
 5003|     30|            value);
 5004|     52|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5188|    842|    {
 5189|    842|        auto it = read_source_impl(range, {specs});
 5190|    842|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 382, False: 460]
  |  |  ------------------
  ------------------
 5191|    382|            return unexpected(it.error());
 5192|    382|        }
 5193|       |
 5194|    460|        return read_string_view_impl(range, *it, value);
 5195|    842|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4903|    490|{
 4904|    490|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    490|    auto src = [&]() {
 4907|    490|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    490|            return make_contiguous_buffer(
 4909|    490|                ranges::subrange{range.begin().base(), result.base()});
 4910|    490|        }
 4911|    490|        else {
 4912|    490|            return make_contiguous_buffer(
 4913|    490|                ranges::subrange{range.begin(), result});
 4914|    490|        }
 4915|    490|    }();
 4916|    490|    using src_type = decltype(src);
 4917|       |
 4918|    490|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    490|    else {
 4931|    490|        const auto view = src.view();
 4932|    490|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    490|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 52, False: 438]
  ------------------
 4935|     52|            return detail::unexpected_scan_error(
 4936|     52|                scan_error::invalid_scanned_value,
 4937|     52|                "Invalid encoding in scanned string_view");
 4938|     52|        }
 4939|       |
 4940|    438|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    438|    static_cast<    \
  |  | 1084|    438|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    490|    }
 4942|    490|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4906|    490|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|    490|        else {
 4912|    490|            return make_contiguous_buffer(
 4913|    490|                ranges::subrange{range.begin(), result});
 4914|    490|        }
 4915|    490|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 5028|    112|    {
 5029|    112|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3996|    112|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    112|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    112|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 82, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     82|    }                                                  \
  |  |  |  | 3995|    112|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5030|     30|        return read_string_view_impl(range, it, value);
 5031|    112|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5748|  1.23k|    {
 5749|  1.23k|        reader_error_handler eh{};
 5750|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5751|       |            detail::check_code_point_type_specs(specs, eh);
 5752|       |        }
 5753|  1.23k|        else {
 5754|  1.23k|            detail::check_char_type_specs(specs, eh);
 5755|  1.23k|        }
 5756|  1.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 624, False: 606]
  |  |  ------------------
  ------------------
 5757|    624|            return detail::unexpected_scan_error(
 5758|    624|                scan_error::invalid_format_string, eh.m_msg);
 5759|    624|        }
 5760|    606|        return {};
 5761|  1.23k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  772|  14.2k|    {
  773|  14.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  14.2k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  2.86k|        : m_fptr([](storage fn,
  753|  2.86k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.86k|              cvref<T> obj = *get<T>(fn);
  755|  2.86k|              if constexpr (std::is_void_v<R>) {
  756|  2.86k|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.86k|              }
  758|  2.86k|              else {
  759|  2.86k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.86k|              }
  761|  2.86k|          }),
  762|  2.86k|          m_storage(std::addressof(f))
  763|  2.86k|    {
  764|  2.86k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  753|  6.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  6.53k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  6.53k|              else {
  759|  6.53k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  6.53k|              }
  761|  6.53k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  689|  6.53k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  6.53k|        else if constexpr (std::is_object_v<T>) {
  694|  6.53k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  6.53k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  2.86k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  2.86k|        {
  668|  2.86k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5743|  1.63k|    {
 5744|  1.63k|        return false;
 5745|  1.63k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1904|    132|    {
 1905|    132|        auto stdloc = loc.get<std::locale>();
 1906|    132|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|    132|        grouping = numpunct.grouping();
 1908|    132|        thousands_sep =
 1909|    132|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 132]
  ------------------
 1910|    132|        decimal_point = numpunct.decimal_point();
 1911|    132|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1841|    158|{
 1842|    158|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 158, False: 0]
  ------------------
 1843|    158|        return std::use_facet<Facet>(stdloc);
 1844|    158|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|    158|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2511|  3.40k|{
 2512|  3.40k|    size_t count{0};
 2513|  3.40k|    for_each_code_point(input, [&count](char32_t cp) {
 2514|  3.40k|        count += calculate_text_width_for_fmt_v10(cp);
 2515|  3.40k|    });
 2516|  3.40k|    return count;
 2517|  3.40k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1569|  3.40k|{
 1570|       |    // TODO: Could be optimized by being eager
 1571|  3.40k|    auto it = input.begin();
 1572|  12.0k|    while (it != input.end()) {
  ------------------
  |  Branch (1572:12): [True: 8.69k, False: 3.40k]
  ------------------
 1573|  8.69k|        auto res = get_next_code_point(
 1574|  8.69k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1575|  8.69k|        cb(res.value);
 1576|  8.69k|        it = detail::make_string_view_iterator(input, res.iterator);
 1577|  8.69k|    }
 1578|  3.40k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|   207M|{
 1303|   207M|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|   207M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   207M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|   207M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|   207M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   207M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 207M]
  |  |  ------------------
  ------------------
 1307|      0|        return {get_start_for_next_code_point(input),
 1308|      0|                detail::invalid_code_point};
 1309|      0|    }
 1310|   207M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|   207M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 207M]
  |  |  ------------------
  ------------------
 1311|      0|        return {input.end(), detail::invalid_code_point};
 1312|      0|    }
 1313|       |
 1314|   207M|    return {input.begin() + len,
 1315|   207M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|   207M|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  752|  3.40k|        : m_fptr([](storage fn,
  753|  3.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  3.40k|              cvref<T> obj = *get<T>(fn);
  755|  3.40k|              if constexpr (std::is_void_v<R>) {
  756|  3.40k|                  obj(static_cast<decltype(args)>(args)...);
  757|  3.40k|              }
  758|  3.40k|              else {
  759|  3.40k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  3.40k|              }
  761|  3.40k|          }),
  762|  3.40k|          m_storage(std::addressof(f))
  763|  3.40k|    {
  764|  3.40k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  753|  8.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  8.69k|              cvref<T> obj = *get<T>(fn);
  755|  8.69k|              if constexpr (std::is_void_v<R>) {
  756|  8.69k|                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|       |              else {
  759|       |                  return obj(static_cast<decltype(args)>(args)...);
  760|       |              }
  761|  8.69k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  689|  8.69k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  8.69k|        else if constexpr (std::is_object_v<T>) {
  694|  8.69k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  8.69k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2513|  8.69k|    for_each_code_point(input, [&count](char32_t cp) {
 2514|  8.69k|        count += calculate_text_width_for_fmt_v10(cp);
 2515|  8.69k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  666|  3.40k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  3.40k|        {
  668|  3.40k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1705|  3.25k|    {
 1706|  3.25k|        return m_view;
 1707|  3.25k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1695|  3.08k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2583|  4.59k|    {
 2584|  4.59k|        return m_multibyte_left;
 2585|  4.59k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E22is_current_double_wideEv:
 2588|  3.77k|    {
 2589|  3.77k|        assert(count() != 0 || multibyte_left() != 0);
 2590|  3.77k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2591|  3.77k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2815|  38.2k|    {
 2816|  38.2k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1014|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 2817|      0|            return 0;
 2818|      0|        }
 2819|       |
 2820|  38.2k|        if (cplen == 1) {
  ------------------
  |  Branch (2820:13): [True: 38.2k, False: 0]
  ------------------
 2821|  38.2k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|  38.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  38.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2822|  38.2k|            auto cp = static_cast<char32_t>(*m_current);
 2823|  38.2k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2824|  38.2k|        }
 2825|       |
 2826|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2827|      0|                                           cplen);
 2828|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2829|      0|            return 0;
 2830|      0|        }
 2831|       |
 2832|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2833|      0|        return static_cast<difference_type>(calculate_text_width(
 2834|      0|            std::basic_string_view<value_type>{cp_str.data(), cp_str.size()}));
 2835|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1981|  5.65k|{
 1982|  5.65k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  5.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|  5.65k|    if constexpr (ranges::sized_range<Range>) {
 1985|  5.65k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|  5.65k|        if (sz < count) {
  ------------------
  |  Branch (1986:13): [True: 184, False: 5.46k]
  ------------------
 1987|    184|            return unexpected(eof_error::eof);
 1988|    184|        }
 1989|       |
 1990|  5.46k|        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|       |    else {
 1993|       |        auto it = range.begin();
 1994|       |        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
 1995|       |            return ranges::next(it, count);
 1996|       |        }
 1997|       |
 1998|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1999|       |            if (it == range.end()) {
 2000|       |                return unexpected(eof_error::eof);
 2001|       |            }
 2002|       |        }
 2003|       |
 2004|       |        return it;
 2005|       |    }
 2006|  5.65k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2809|  38.2k|    {
 2810|  38.2k|        return static_cast<difference_type>(
 2811|  38.2k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2812|  38.2k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2594|  47.2k|    {
 2595|  47.2k|        return *m_current;
 2596|  47.2k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2603|  34.4k|    {
 2604|  34.4k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2605|  34.4k|        _increment_current();
 2606|  34.4k|        return *this;
 2607|  34.4k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2838|  34.4k|    {
 2839|  34.4k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2839:13): [True: 34.4k, False: 0]
  ------------------
 2840|  34.4k|            auto cplen = _get_cp_length_at_current();
 2841|  34.4k|            m_multibyte_left = cplen - 1;
 2842|  34.4k|            m_count -= _get_width_at_current_cp_start(cplen);
 2843|  34.4k|        }
 2844|      0|        else {
 2845|      0|            --m_multibyte_left;
 2846|      0|        }
 2847|       |
 2848|  34.4k|        ++m_current;
 2849|  34.4k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SE_EENS1_20incrementable_traitsISE_E15difference_typeEE4typeESE_SF_:
  107|     22|    {
  108|     22|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|     22|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISF_E15difference_typeEE4typeESF_SE_NS0_6detail12priority_tagILm0EEE:
   93|     22|    {
   94|     22|        iter_difference_t<I> counter{0};
   95|     44|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 22, False: 22]
  ------------------
   96|     22|            ++i;
   97|     22|            ++counter;
   98|     22|        }
   99|     22|        return counter;
  100|     22|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2699|  12.1k|    {
 2700|  12.1k|        return !(a == b);
 2701|  12.1k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2691|  13.4k|    {
 2692|  13.4k|        return a.m_current == b.m_current;
 2693|  13.4k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2598|  5.35k|    {
 2599|  5.35k|        return *m_current;
 2600|  5.35k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS1_20incrementable_traitsISD_E15difference_typeE:
  303|     72|    {
  304|     72|        ranges::advance(x, n);
  305|     72|        return x;
  306|     72|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|     72|    {
  268|     72|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     72|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     72|    {
  161|     72|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     72|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 72, False: 0]
  ------------------
  164|    144|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 72, False: 72]
  ------------------
  165|     72|                ++i;
  166|     72|            }
  167|     72|        }
  168|      0|        else {
  169|      0|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 0]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|      0|        }
  173|     72|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 2014|  11.8k|    {
 2015|  11.8k|        return !codepoint.empty();
 2016|  11.8k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1807|    810|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|    810|    else {
 1814|    810|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|    810|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|    810|    }
 1816|    810|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1660|    810|    {
 1661|    810|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|    810|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|    810|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1744|    830|    {
 1745|    830|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|    830|        else {
 1779|    830|            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|    830|            if constexpr (ranges::common_range<Range>) {
 1784|    830|                std::copy(ranges::begin(range), ranges::end(range),
 1785|    830|                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|    830|            m_view = string_view_type{str.data(), str.size()};
 1794|    830|        }
 1795|    830|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2543|  13.8k|        : m_current(x), m_end(s), m_count(n)
 2544|  13.8k|    {
 2545|  13.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2575|  50.6k|    {
 2576|  50.6k|        return m_current;
 2577|  50.6k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2276|  4.56k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  4.56k|    else {
 2286|  4.56k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|  4.56k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  4.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  4.56k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  4.56k|            return detail::is_cp_space(cp);
 2300|  4.56k|        });
 2301|  4.56k|    }
 2302|  4.56k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2241|  4.56k|{
 2242|  4.56k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  4.56k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2219|  4.56k|{
 2220|  4.56k|    auto it = range.begin();
 2221|  10.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 6.56k, False: 3.91k]
  ------------------
 2222|  6.56k|        const auto val =
 2223|  6.56k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  6.56k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  6.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 6.56k, False: 0]
  |  |  ------------------
  ------------------
 2225|  6.56k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  6.56k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  6.56k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  6.56k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 658, False: 5.90k]
  ------------------
 2229|    658|                return it;
 2230|    658|            }
 2231|  6.56k|        }
 2232|  5.90k|        it = val.iterator;
 2233|  5.90k|    }
 2234|       |
 2235|  3.91k|    return it;
 2236|  4.56k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|  53.2k|{
 2024|  53.2k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  53.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  53.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  53.2k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  53.2k|    auto it = range.begin();
 2028|  53.2k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  53.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 53.2k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  53.2k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 53.2k, False: 0]
  ------------------
 2037|  53.2k|        ++it;
 2038|  53.2k|        return {it, string_type(1, *range.begin())};
 2039|  53.2k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  53.2k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  954|  73.4k|{
  955|  73.4k|    return is_range_eof(r.begin(), r.end());
  956|  73.4k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  938|   207M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   207M|    {
  948|   207M|        return begin == end;
  949|   207M|    }
  950|   207M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    928|    {
  190|    928|        i = std::move(bound);
  191|    928|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 2014|  53.2k|    {
 2015|  53.2k|        return !codepoint.empty();
 2016|  53.2k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  752|  4.56k|        : m_fptr([](storage fn,
  753|  4.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  4.56k|              cvref<T> obj = *get<T>(fn);
  755|  4.56k|              if constexpr (std::is_void_v<R>) {
  756|  4.56k|                  obj(static_cast<decltype(args)>(args)...);
  757|  4.56k|              }
  758|  4.56k|              else {
  759|  4.56k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  4.56k|              }
  761|  4.56k|          }),
  762|  4.56k|          m_storage(std::addressof(f))
  763|  4.56k|    {
  764|  4.56k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  753|  6.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  6.56k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  6.56k|              else {
  759|  6.56k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  6.56k|              }
  761|  6.56k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  689|  6.56k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  6.56k|        else if constexpr (std::is_object_v<T>) {
  694|  6.56k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  6.56k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2298|  6.56k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  6.56k|            return detail::is_cp_space(cp);
 2300|  6.56k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  666|  4.56k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  4.56k|        {
  668|  4.56k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  960|  20.2k|{
  961|  20.2k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  962|      0|        return eof_error::eof;
  963|      0|    }
  964|  20.2k|    return eof_error::good;
  965|  20.2k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 3004|  5.50k|    {
 3005|  5.50k|        return take_width_view{r, n};
 3006|  5.50k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2972|  5.50k|        : m_base(base), m_count(count)
 2973|  5.50k|    {
 2974|  5.50k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2884|  5.50k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5824|    196|    {
 5825|    196|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5825:13): [True: 150, False: 46]
  ------------------
 5826|    196|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5826:13): [True: 0, False: 46]
  ------------------
 5827|    150|            return read_default(range, value, loc);
 5828|    150|        }
 5829|       |
 5830|     46|        reader_impl_for_int<CharT> reader{};
 5831|     46|        using integer_type =
 5832|     46|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5833|     46|        integer_type tmp_value{};
 5834|     46|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5835|     46|        value = static_cast<wchar_t>(tmp_value);
 5836|     46|        return ret;
 5837|    196|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5808|    150|    {
 5809|    150|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    150|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5810|       |        if constexpr (std::is_same_v<CharT, char>) {
 5811|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5812|       |        }
 5813|    150|        else {
 5814|    150|            return code_unit_reader<wchar_t>{}.read(range, value);
 5815|    150|        }
 5816|    150|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5688|    150|    {
 5689|    150|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3996|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    150|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|    150|        ch = *range.begin();
 5691|    150|        return it;
 5692|    150|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1970|  1.32k|{
 1971|  1.32k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.32k]
  |  |  ------------------
  ------------------
 1972|      0|        return unexpected(e);
 1973|      0|    }
 1974|       |
 1975|  1.32k|    return ranges::next(range.begin());
 1976|  1.32k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  960|  1.32k|{
  961|  1.32k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.32k]
  |  |  ------------------
  ------------------
  962|      0|        return eof_error::eof;
  963|      0|    }
  964|  1.32k|    return eof_error::good;
  965|  1.32k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  954|  1.32k|{
  955|  1.32k|    return is_range_eof(r.begin(), r.end());
  956|  1.32k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  938|  13.2k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  13.2k|    {
  948|  13.2k|        return begin == end;
  949|  13.2k|    }
  950|  13.2k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2940|  46.4k|        {
 2941|  46.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2941:21): [True: 820, False: 45.6k]
  |  Branch (2941:39): [True: 820, False: 0]
  ------------------
 2942|  46.4k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2942:20): [True: 360, False: 45.2k]
  ------------------
 2943|  46.4k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2943:21): [True: 3.77k, False: 41.5k]
  |  Branch (2943:39): [True: 3.77k, False: 0]
  ------------------
 2944|  45.2k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2944:21): [True: 54, False: 3.71k]
  ------------------
 2945|  46.4k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2988|  29.5k|    {
 2989|  29.5k|        return sentinel<true>{m_base.get().end()};
 2990|  29.5k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2887|  57.2k|    {
 2888|  57.2k|        return view;
 2889|  57.2k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2921|  29.5k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1083|  29.5k|    static_cast<    \
  |  | 1084|  29.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.42k|    {
  296|  1.42k|        ++x;
  297|  1.42k|        return x;
  298|  1.42k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2982|  13.8k|    {
 2983|  13.8k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2984|  13.8k|                                      m_count};
 2985|  13.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3661|    250|    {
 3662|    250|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    250|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    250|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    250|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 250]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|      0|            else {
 3673|      0|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 0]
  ------------------
 3674|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|      0|            }
 3680|      0|        }
 3681|       |
 3682|    250|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 12, False: 238]
  ------------------
 3683|     12|            value = T{0};
 3684|     12|            return std::next(prefix_result.iterator);
 3685|     12|        }
 3686|       |
 3687|    238|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    238|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 212, False: 26]
  |  |  ------------------
  ------------------
 3688|    212|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    212|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    212|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    212|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 192, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    192|    }                                                  \
  |  |  |  | 3995|    212|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    212|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|     20|                    parse_integer_digits_without_thsep(
 3690|     20|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|     20|                        prefix_result.parsed_base));
 3692|       |
 3693|     20|            auto buf = make_contiguous_buffer(
 3694|     20|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|     20|            SCN_TRY(result_it,
  ------------------
  |  | 3996|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     20|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|     20|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|     20|                                        prefix_result.parsed_base));
 3698|       |
 3699|     20|            return ranges::next(
 3700|     20|                prefix_result.iterator,
 3701|     20|                ranges::distance(buf.view().begin(), result_it));
 3702|     20|        }
 3703|       |
 3704|     26|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     26|            localized_number_formatting_options<CharT>{loc};
 3710|     26|#endif
 3711|       |
 3712|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     22|    }                                                  \
  |  |  |  | 3995|     26|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      4|                parse_integer_digits_with_thsep(
 3714|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      4|                    prefix_result.parsed_base, locale_options));
 3716|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      4|            parse_digits_result;
 3718|      4|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      4|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      4|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      4|            nothsep_source.data(), nothsep_source.size()};
 3722|      4|        SCN_TRY(
  ------------------
  |  | 3996|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      4|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      4|            nothsep_source_it,
 3724|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      4|                                prefix_result.parsed_base));
 3726|       |
 3727|      4|        return ranges::next(
 3728|      4|            prefix_result.iterator,
 3729|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      4|                ranges::ssize(thsep_indices));
 3731|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3439|    602|{
 3440|    602|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    602|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|    602|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|    602|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|    602|        parse_integer_base_prefix(
 3445|    602|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|    602|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 18, False: 584]
  ------------------
 3448|     18|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 6, False: 12]
  |  Branch (3448:13): [True: 18, False: 0]
  ------------------
 3449|     18|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 12, False: 0]
  ------------------
 3450|     18|            digits_begin_it = base_prefix_begin_it;
 3451|     18|        }
 3452|      0|        else {
 3453|      0|            parsed_zero = false;
 3454|      0|        }
 3455|     18|    }
 3456|    584|    else {
 3457|    584|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 0, False: 584]
  |  Branch (3457:13): [True: 532, False: 52]
  ------------------
 3458|    584|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 532, False: 52]
  ------------------
 3459|    532|            digits_begin_it = base_prefix_begin_it;
 3460|    532|        }
 3461|    584|    }
 3462|       |
 3463|    602|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 602, False: 0]
  ------------------
 3464|    602|        sign = sign_type::plus_sign;
 3465|    602|    }
 3466|    602|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|    602|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|    602|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3320|    792|{
 3321|    792|    auto r = read_one_of_code_unit(range, "+-");
 3322|    792|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 792, False: 0]
  ------------------
 3323|    792|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 792, False: 0]
  ------------------
 3324|    792|            return std::pair{range.begin(), sign_type::default_sign};
 3325|    792|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|    792|    }
 3328|       |
 3329|      0|    auto& it = *r;
 3330|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 0, False: 0]
  ------------------
 3331|      0|        return std::pair{it, sign_type::minus_sign};
 3332|      0|    }
 3333|      0|    return std::pair{it, sign_type::plus_sign};
 3334|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2434|    792|{
 2435|    792|    auto it = read_code_unit(range);
 2436|    792|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 792]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|  1.58k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.58k, False: 792]
  ------------------
 2441|  1.58k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 0, False: 1.58k]
  ------------------
 2442|      0|            return *it;
 2443|      0|        }
 2444|  1.58k|    }
 2445|       |
 2446|    792|    return unexpected(parse_error::error);
 2447|    792|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3406|    602|{
 3407|    602|    switch (base) {
 3408|     26|        case 2:
  ------------------
  |  Branch (3408:9): [True: 26, False: 576]
  ------------------
 3409|       |            // allow 0b/0B
 3410|     26|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|     26|                    false};
 3412|       |
 3413|     30|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 30, False: 572]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|     30|            bool zero_parsed = false;
 3416|     30|            auto it = apply_opt(
 3417|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|     30|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|    170|        case 16:
  ------------------
  |  Branch (3421:9): [True: 170, False: 432]
  ------------------
 3422|       |            // allow 0x/0X
 3423|    170|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|    170|                    false};
 3425|       |
 3426|     38|        case 0:
  ------------------
  |  Branch (3426:9): [True: 38, False: 564]
  ------------------
 3427|       |            // detect base
 3428|     38|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|    338|        default:
  ------------------
  |  Branch (3430:9): [True: 338, False: 264]
  ------------------
 3431|       |            // no base prefix allowed
 3432|    338|            return {range.begin(), base, false};
 3433|    602|    }
 3434|    602|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2453|    226|{
 2454|    226|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 220, False: 6]
  ------------------
 2455|    220|        return range.begin();
 2456|    220|    }
 2457|      6|    return *result;
 2458|    226|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3357|     64|{
 3358|     64|    return read_matching_string_classic_nocase(range, "0b");
 3359|     64|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2392|    898|{
 2393|    898|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|    898|    else {
 2407|    898|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|    898|            if (ch < 'A' || ch > 'Z') {
 2409|    898|                return ch;
 2410|    898|            }
 2411|    898|            return static_cast<char_type>(ch +
 2412|    898|                                          static_cast<char_type>('a' - 'A'));
 2413|    898|        };
 2414|       |
 2415|    898|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|    898|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    898|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    898|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    898|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 230, False: 668]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    230|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    230|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    230|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    230|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    230|    }                                                  \
  |  |  |  | 3995|    898|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    898|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|    668|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|    668|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|    668|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 668, False: 0]
  |  |  ------------------
  ------------------
 2420|    668|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|    668|                    return ascii_tolower(a) ==
 2422|    668|                           static_cast<detail::char_t<Range>>(b);
 2423|    668|                }))) {
 2424|    668|            return unexpected(parse_error::error);
 2425|    668|        }
 2426|       |
 2427|      0|        return it;
 2428|    668|    }
 2429|    898|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1981|    898|{
 1982|    898|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|    898|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    898|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|    898|    else {
 1993|    898|        auto it = range.begin();
 1994|    898|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 0, False: 898]
  ------------------
 1995|      0|            return ranges::next(it, count);
 1996|      0|        }
 1997|       |
 1998|  2.78k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 2.12k, False: 668]
  ------------------
 1999|  2.12k|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 230, False: 1.89k]
  ------------------
 2000|    230|                return unexpected(eof_error::eof);
 2001|    230|            }
 2002|  2.12k|        }
 2003|       |
 2004|    668|        return it;
 2005|    898|    }
 2006|    898|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1113|    898|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|       |                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|       |        else {
 1125|       |            if (r.begin().stores_parent()) {
 1126|       |                return static_cast<size_t>(
 1127|       |                    r.begin().parent()->chars_available() -
 1128|       |                    r.begin().position());
 1129|       |            }
 1130|       |            return r.begin().contiguous_segment().size();
 1131|       |        }
 1132|       |    }
 1133|    898|    else {
 1134|    898|        SCN_UNUSED(r);
  ------------------
  |  | 1064|    898|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1135|    898|        return 0;
 1136|    898|    }
 1137|    898|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2407|    722|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|    722|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 156, False: 566]
  |  Branch (2408:29): [True: 566, False: 0]
  ------------------
 2409|    722|                return ch;
 2410|    722|            }
 2411|      0|            return static_cast<char_type>(ch +
 2412|      0|                                          static_cast<char_type>('a' - 'A'));
 2413|    722|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3371|     68|{
 3372|     68|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 0, False: 68]
  ------------------
 3373|      0|        return *r;
 3374|      0|    }
 3375|       |
 3376|     68|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 18, False: 50]
  ------------------
 3377|     18|        zero_parsed = true;
 3378|     18|        return *r;
 3379|     18|    }
 3380|       |
 3381|     50|    return unexpected(parse_error::error);
 3382|     68|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2307|     90|{
 2308|     90|    auto it = read_code_unit(range);
 2309|     90|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2310|      8|        return unexpected(make_eof_parse_error(it.error()));
 2311|      8|    }
 2312|       |
 2313|     82|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 64, False: 18]
  |  |  ------------------
  ------------------
 2314|     82|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|     64|        return unexpected(parse_error::error);
 2316|     64|    }
 2317|       |
 2318|     18|    return *it;
 2319|     82|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1970|    110|{
 1971|    110|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
 1972|     14|        return unexpected(e);
 1973|     14|    }
 1974|       |
 1975|     96|    return ranges::next(range.begin());
 1976|    110|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  960|    110|{
  961|    110|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
  962|     14|        return eof_error::eof;
  963|     14|    }
  964|     96|    return eof_error::good;
  965|    110|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  954|  11.9k|{
  955|  11.9k|    return is_range_eof(r.begin(), r.end());
  956|  11.9k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3364|    208|{
 3365|    208|    return read_matching_string_classic_nocase(range, "0x");
 3366|    208|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3387|     38|{
 3388|     38|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 0, False: 38]
  ------------------
 3389|      0|        return {*r, 16, false};
 3390|      0|    }
 3391|     38|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 0, False: 38]
  ------------------
 3392|      0|        return {*r, 2, false};
 3393|      0|    }
 3394|     38|    {
 3395|     38|        bool zero_parsed{false};
 3396|     38|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 12, False: 26]
  ------------------
 3397|     12|            return {*r, 8, zero_parsed};
 3398|     12|        }
 3399|     38|    }
 3400|     26|    return {range.begin(), 10, false};
 3401|     38|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3473|    532|{
 3474|    532|    SCN_UNUSED(base);
  ------------------
  |  | 1064|    532|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|    532|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|       |    if constexpr (ranges::contiguous_range<Range>) {
 3478|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3479|       |            return detail::unexpected_scan_error(
 3480|       |                scan_error::invalid_scanned_value,
 3481|       |                "Failed to parse integer: No digits found");
 3482|       |        }
 3483|       |        return range.end();
 3484|       |    }
 3485|    532|    else {
 3486|    532|        return read_while1_code_unit(range,
 3487|    532|                                     [&](char_type ch) noexcept {
 3488|    532|                                         return char_to_int(ch) < base;
 3489|    532|                                     })
 3490|    532|            .transform_error(map_parse_error_to_scan_error(
 3491|    532|                scan_error::invalid_scanned_value,
 3492|    532|                "Failed to parse integer: No digits found"));
 3493|    532|    }
 3494|    532|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2153|    744|{
 2154|    744|    auto it = read_while_code_unit(range, pred);
 2155|    744|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 678, False: 66]
  ------------------
 2156|    678|        return unexpected(parse_error::error);
 2157|    678|    }
 2158|     66|    return it;
 2159|    744|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2133|    744|{
 2134|    744|    return read_until_code_unit(range, std::not_fn(pred));
 2135|    744|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2100|    744|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|    744|    else {
 2105|    744|        auto first = range.begin();
 2106|    810|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 780, False: 30]
  ------------------
 2107|    780|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 714, False: 66]
  ------------------
 2108|    714|                return first;
 2109|    714|            }
 2110|    780|        }
 2111|     30|        return first;
 2112|    744|    }
 2113|    744|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2953|  23.6k|        {
 2954|  23.6k|            return !(y == x);
 2955|  23.6k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  752|    532|        : m_fptr([](storage fn,
  753|    532|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    532|              cvref<T> obj = *get<T>(fn);
  755|    532|              if constexpr (std::is_void_v<R>) {
  756|    532|                  obj(static_cast<decltype(args)>(args)...);
  757|    532|              }
  758|    532|              else {
  759|    532|                  return obj(static_cast<decltype(args)>(args)...);
  760|    532|              }
  761|    532|          }),
  762|    532|          m_storage(std::addressof(f))
  763|    532|    {
  764|    532|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  753|    562|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    562|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    562|              else {
  759|    562|                  return obj(static_cast<decltype(args)>(args)...);
  760|    562|              }
  761|    562|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  689|    562|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    562|        else if constexpr (std::is_object_v<T>) {
  694|    562|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    562|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3487|    562|                                     [&](char_type ch) noexcept {
 3488|    562|                                         return char_to_int(ch) < base;
 3489|    562|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  666|    532|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    532|        {
  668|    532|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3504|     52|{
 3505|     52|    std::basic_string<CharT> output;
 3506|     52|    std::string thsep_indices;
 3507|     52|    auto it = range.begin();
 3508|     52|    bool digit_matched = false;
 3509|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 56, False: 4]
  ------------------
 3510|     56|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 0, False: 56]
  ------------------
 3511|      0|            thsep_indices.push_back(
 3512|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|      0|        }
 3514|     56|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 48, False: 8]
  ------------------
 3515|     48|            break;
 3516|     48|        }
 3517|      8|        else {
 3518|      8|            output.push_back(*it);
 3519|      8|            digit_matched = true;
 3520|      8|        }
 3521|     56|    }
 3522|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3523|     44|        return detail::unexpected_scan_error(
 3524|     44|            scan_error::invalid_scanned_value,
 3525|     44|            "Failed to parse integer: No digits found");
 3526|     44|    }
 3527|      8|    return std::tuple{it, output, thsep_indices};
 3528|     52|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2579|  97.3k|    {
 2580|  97.3k|        return m_count;
 2581|  97.3k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5824|    408|    {
 5825|    408|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5825:13): [True: 360, False: 48]
  ------------------
 5826|    408|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5826:13): [True: 0, False: 48]
  ------------------
 5827|    360|            return read_default(range, value, loc);
 5828|    360|        }
 5829|       |
 5830|     48|        reader_impl_for_int<CharT> reader{};
 5831|     48|        using integer_type =
 5832|     48|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5833|     48|        integer_type tmp_value{};
 5834|     48|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5835|     48|        value = static_cast<wchar_t>(tmp_value);
 5836|     48|        return ret;
 5837|    408|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5808|    860|    {
 5809|    860|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    860|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5810|       |        if constexpr (std::is_same_v<CharT, char>) {
 5811|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5812|       |        }
 5813|    860|        else {
 5814|    860|            return code_unit_reader<wchar_t>{}.read(range, value);
 5815|    860|        }
 5816|    860|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5688|    860|    {
 5689|    860|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3996|    860|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    860|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    860|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 860]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    860|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    860|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5690|    860|        ch = *range.begin();
 5691|    860|        return it;
 5692|    860|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|  6.46k|{
 1971|  6.46k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  6.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 6.46k]
  |  |  ------------------
  ------------------
 1972|      0|        return unexpected(e);
 1973|      0|    }
 1974|       |
 1975|  6.46k|    return ranges::next(range.begin());
 1976|  6.46k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   207M|    {
  296|   207M|        ++x;
  297|   207M|        return x;
  298|   207M|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|    482|    {
 3662|    482|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    482|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    482|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    482|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 482]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    482|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    482|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    482|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 482]
  ------------------
 3666|       |            if constexpr (!std::is_signed_v<T>) {
 3667|       |                return detail::unexpected_scan_error(
 3668|       |                    scan_error::invalid_scanned_value,
 3669|       |                    "Unexpected '-' sign when parsing an "
 3670|       |                    "unsigned value");
 3671|       |            }
 3672|      0|            else {
 3673|      0|                if (specs.type ==
  ------------------
  |  Branch (3673:21): [True: 0, False: 0]
  ------------------
 3674|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3675|      0|                    return detail::unexpected_scan_error(
 3676|      0|                        scan_error::invalid_scanned_value,
 3677|      0|                        "'u'-option disallows negative values");
 3678|      0|                }
 3679|      0|            }
 3680|      0|        }
 3681|       |
 3682|    482|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 10, False: 472]
  ------------------
 3683|     10|            value = T{0};
 3684|     10|            return std::next(prefix_result.iterator);
 3685|     10|        }
 3686|       |
 3687|    472|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    472|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 448, False: 24]
  |  |  ------------------
  ------------------
 3688|    448|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    448|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    448|                    parse_integer_digits_without_thsep(
 3690|    448|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    448|                        prefix_result.parsed_base));
 3692|       |
 3693|    448|            auto buf = make_contiguous_buffer(
 3694|    448|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    448|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 400, False: 48]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    400|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    400|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    400|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    400|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    400|    }                                                  \
  |  |  |  | 3995|    448|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|     48|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|     48|                                        prefix_result.parsed_base));
 3698|       |
 3699|     48|            return ranges::next(
 3700|     48|                prefix_result.iterator,
 3701|     48|                ranges::distance(buf.view().begin(), result_it));
 3702|    448|        }
 3703|       |
 3704|     24|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     24|            localized_number_formatting_options<CharT>{loc};
 3710|     24|#endif
 3711|       |
 3712|     24|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 20, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     20|    }                                                  \
  |  |  |  | 3995|     24|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      4|                parse_integer_digits_with_thsep(
 3714|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      4|                    prefix_result.parsed_base, locale_options));
 3716|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      4|            parse_digits_result;
 3718|      4|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      4|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      4|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      4|            nothsep_source.data(), nothsep_source.size()};
 3722|      4|        SCN_TRY(
  ------------------
  |  | 3996|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      4|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      4|            nothsep_source_it,
 3724|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      4|                                prefix_result.parsed_base));
 3726|       |
 3727|      4|        return ranges::next(
 3728|      4|            prefix_result.iterator,
 3729|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      4|                ranges::ssize(thsep_indices));
 3731|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3439|  2.78k|{
 3440|  2.78k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|  2.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 2.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  2.78k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  2.78k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|  2.78k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|  2.78k|        parse_integer_base_prefix(
 3445|  2.78k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|  2.78k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 16, False: 2.76k]
  ------------------
 3448|     16|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 0, False: 16]
  ------------------
 3449|     16|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 16, False: 0]
  ------------------
 3450|     16|            digits_begin_it = base_prefix_begin_it;
 3451|     16|        }
 3452|      0|        else {
 3453|      0|            parsed_zero = false;
 3454|      0|        }
 3455|     16|    }
 3456|  2.76k|    else {
 3457|  2.76k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 0, False: 2.76k]
  ------------------
 3458|  2.76k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 2.62k, False: 142]
  ------------------
 3459|  2.62k|            digits_begin_it = base_prefix_begin_it;
 3460|  2.62k|        }
 3461|  2.76k|    }
 3462|       |
 3463|  2.78k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 2.78k, False: 0]
  ------------------
 3464|  2.78k|        sign = sign_type::plus_sign;
 3465|  2.78k|    }
 3466|  2.78k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|  2.78k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|  2.78k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|  3.72k|{
 3321|  3.72k|    auto r = read_one_of_code_unit(range, "+-");
 3322|  3.72k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 3.72k, False: 0]
  ------------------
 3323|  3.72k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 3.72k, False: 0]
  ------------------
 3324|  3.72k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|  3.72k|        }
 3326|      0|        return unexpected(eof_error::eof);
 3327|  3.72k|    }
 3328|       |
 3329|      0|    auto& it = *r;
 3330|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 0, False: 0]
  ------------------
 3331|      0|        return std::pair{it, sign_type::minus_sign};
 3332|      0|    }
 3333|      0|    return std::pair{it, sign_type::plus_sign};
 3334|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|  3.73k|{
 2435|  3.73k|    auto it = read_code_unit(range);
 2436|  3.73k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.73k]
  |  |  ------------------
  ------------------
 2437|      0|        return unexpected(make_eof_parse_error(it.error()));
 2438|      0|    }
 2439|       |
 2440|  7.46k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 7.46k, False: 3.73k]
  ------------------
 2441|  7.46k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 0, False: 7.46k]
  ------------------
 2442|      0|            return *it;
 2443|      0|        }
 2444|  7.46k|    }
 2445|       |
 2446|  3.73k|    return unexpected(parse_error::error);
 2447|  3.73k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3406|  2.78k|{
 3407|  2.78k|    switch (base) {
 3408|     60|        case 2:
  ------------------
  |  Branch (3408:9): [True: 60, False: 2.72k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|     60|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|     60|                    false};
 3412|       |
 3413|     16|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 16, False: 2.76k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|     16|            bool zero_parsed = false;
 3416|     16|            auto it = apply_opt(
 3417|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|     16|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|    886|        case 16:
  ------------------
  |  Branch (3421:9): [True: 886, False: 1.89k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|    886|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|    886|                    false};
 3425|       |
 3426|     32|        case 0:
  ------------------
  |  Branch (3426:9): [True: 32, False: 2.74k]
  ------------------
 3427|       |            // detect base
 3428|     32|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|  1.78k|        default:
  ------------------
  |  Branch (3430:9): [True: 1.78k, False: 994]
  ------------------
 3431|       |            // no base prefix allowed
 3432|  1.78k|            return {range.begin(), base, false};
 3433|  2.78k|    }
 3434|  2.78k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2453|    962|{
 2454|    962|    if (!result) {
  ------------------
  |  Branch (2454:9): [True: 956, False: 6]
  ------------------
 2455|    956|        return range.begin();
 2456|    956|    }
 2457|      6|    return *result;
 2458|    962|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3357|     92|{
 3358|     92|    return read_matching_string_classic_nocase(range, "0b");
 3359|     92|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|  3.88k|{
 2393|  3.88k|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  3.88k|    else {
 2407|  3.88k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  3.88k|            if (ch < 'A' || ch > 'Z') {
 2409|  3.88k|                return ch;
 2410|  3.88k|            }
 2411|  3.88k|            return static_cast<char_type>(ch +
 2412|  3.88k|                                          static_cast<char_type>('a' - 'A'));
 2413|  3.88k|        };
 2414|       |
 2415|  3.88k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  3.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  3.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  3.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  3.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 8, False: 3.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      8|    }                                                  \
  |  |  |  | 3995|  3.88k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  3.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  3.87k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  3.87k|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  3.87k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.87k, False: 0]
  |  |  ------------------
  ------------------
 2420|  3.87k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  3.87k|                    return ascii_tolower(a) ==
 2422|  3.87k|                           static_cast<detail::char_t<Range>>(b);
 2423|  3.87k|                }))) {
 2424|  3.87k|            return unexpected(parse_error::error);
 2425|  3.87k|        }
 2426|       |
 2427|      0|        return it;
 2428|  3.87k|    }
 2429|  3.88k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2407|  4.04k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  4.04k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 538, False: 3.50k]
  |  Branch (2408:29): [True: 3.50k, False: 0]
  ------------------
 2409|  4.04k|                return ch;
 2410|  4.04k|            }
 2411|      0|            return static_cast<char_type>(ch +
 2412|      0|                                          static_cast<char_type>('a' - 'A'));
 2413|  4.04k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3371|     48|{
 3372|     48|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3372:14): [True: 0, False: 48]
  ------------------
 3373|      0|        return *r;
 3374|      0|    }
 3375|       |
 3376|     48|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3376:14): [True: 16, False: 32]
  ------------------
 3377|     16|        zero_parsed = true;
 3378|     16|        return *r;
 3379|     16|    }
 3380|       |
 3381|     32|    return unexpected(parse_error::error);
 3382|     48|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|  1.87k|{
 2308|  1.87k|    auto it = read_code_unit(range);
 2309|  1.87k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.87k]
  |  |  ------------------
  ------------------
 2310|      0|        return unexpected(make_eof_parse_error(it.error()));
 2311|      0|    }
 2312|       |
 2313|  1.87k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 70]
  |  |  ------------------
  ------------------
 2314|  1.87k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|  1.80k|        return unexpected(parse_error::error);
 2316|  1.80k|    }
 2317|       |
 2318|     70|    return *it;
 2319|  1.87k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3364|    918|{
 3365|    918|    return read_matching_string_classic_nocase(range, "0x");
 3366|    918|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3387|     32|{
 3388|     32|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3388:14): [True: 0, False: 32]
  ------------------
 3389|      0|        return {*r, 16, false};
 3390|      0|    }
 3391|     32|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3391:14): [True: 0, False: 32]
  ------------------
 3392|      0|        return {*r, 2, false};
 3393|      0|    }
 3394|     32|    {
 3395|     32|        bool zero_parsed{false};
 3396|     32|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3396:18): [True: 10, False: 22]
  ------------------
 3397|     10|            return {*r, 8, zero_parsed};
 3398|     10|        }
 3399|     32|    }
 3400|     22|    return {range.begin(), 10, false};
 3401|     32|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3473|  2.71k|{
 3474|  2.71k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|  2.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|  2.71k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|  2.71k|    if constexpr (ranges::contiguous_range<Range>) {
 3478|  2.71k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.71k]
  |  |  ------------------
  ------------------
 3479|      0|            return detail::unexpected_scan_error(
 3480|      0|                scan_error::invalid_scanned_value,
 3481|      0|                "Failed to parse integer: No digits found");
 3482|      0|        }
 3483|  2.71k|        return range.end();
 3484|       |    }
 3485|       |    else {
 3486|       |        return read_while1_code_unit(range,
 3487|       |                                     [&](char_type ch) noexcept {
 3488|       |                                         return char_to_int(ch) < base;
 3489|       |                                     })
 3490|       |            .transform_error(map_parse_error_to_scan_error(
 3491|       |                scan_error::invalid_scanned_value,
 3492|       |                "Failed to parse integer: No digits found"));
 3493|       |    }
 3494|  2.71k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3504|     48|{
 3505|     48|    std::basic_string<CharT> output;
 3506|     48|    std::string thsep_indices;
 3507|     48|    auto it = range.begin();
 3508|     48|    bool digit_matched = false;
 3509|     56|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3509:12): [True: 56, False: 0]
  ------------------
 3510|     56|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3510:13): [True: 0, False: 56]
  ------------------
 3511|      0|            thsep_indices.push_back(
 3512|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3513|      0|        }
 3514|     56|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3514:18): [True: 48, False: 8]
  ------------------
 3515|     48|            break;
 3516|     48|        }
 3517|      8|        else {
 3518|      8|            output.push_back(*it);
 3519|      8|            digit_matched = true;
 3520|      8|        }
 3521|     56|    }
 3522|     48|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1014|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 40, False: 8]
  |  |  ------------------
  ------------------
 3523|     40|        return detail::unexpected_scan_error(
 3524|     40|            scan_error::invalid_scanned_value,
 3525|     40|            "Failed to parse integer: No digits found");
 3526|     40|    }
 3527|      8|    return std::tuple{it, output, thsep_indices};
 3528|     48|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1807|  9.78k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  9.78k|                  ranges::sized_range<Range>) {
 1811|  9.78k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  9.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  9.78k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|  9.78k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  9.78k|    {
 1614|  9.78k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1626|  11.5k|    {
 1627|  11.5k|        return sv;
 1628|  11.5k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 6088|  1.39k|{
 6089|  1.39k|    using char_type = detail::char_t<Range>;
 6090|  1.39k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6091|       |
 6092|  1.39k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6092:9): [True: 1.39k, False: 0]
  ------------------
 6093|  1.39k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6094|  1.39k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6095|       |
 6096|  1.39k|        if (max_width == 0) {
  ------------------
  |  Branch (6096:13): [True: 1.18k, False: 206]
  ------------------
 6097|  1.18k|            auto it = read_while_code_unit(range, pred);
 6098|       |
 6099|  1.18k|            if (want_skipped_width) {
  ------------------
  |  Branch (6099:17): [True: 138, False: 1.04k]
  ------------------
 6100|    138|                auto prefix_width =
 6101|    138|                    static_cast<std::ptrdiff_t>(
 6102|    138|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6103|    138|                    ranges::distance(range.begin(), it);
 6104|    138|                return result_type{it, prefix_width};
 6105|    138|            }
 6106|  1.04k|            return result_type{it, 0};
 6107|  1.18k|        }
 6108|       |
 6109|    206|        auto max_width_view = take_width(range, max_width);
 6110|    206|        auto w_it = read_while_code_unit(max_width_view, pred);
 6111|       |
 6112|    206|        if (want_skipped_width) {
  ------------------
  |  Branch (6112:13): [True: 206, False: 0]
  ------------------
 6113|    206|            return result_type{w_it.base(), max_width - w_it.count()};
 6114|    206|        }
 6115|      0|        return result_type{w_it.base(), 0};
 6116|    206|    }
 6117|       |
 6118|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6119|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6119:9): [True: 0, False: 0]
  ------------------
 6120|      0|        auto it = read_while_code_units(range, fill_chars);
 6121|       |
 6122|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 0]
  ------------------
 6123|      0|            auto prefix_width =
 6124|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6125|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6126|      0|            return result_type{it, prefix_width};
 6127|      0|        }
 6128|      0|        return result_type{it, 0};
 6129|      0|    }
 6130|       |
 6131|      0|    auto max_width_view = take_width(range, max_width);
 6132|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6133|       |
 6134|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6134:9): [True: 0, False: 0]
  ------------------
 6135|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6136|      0|    }
 6137|      0|    return result_type{w_it.base(), 0};
 6138|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|  1.30k|{
 2134|  1.30k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  1.30k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|  1.39k|{
 2101|  1.39k|    if constexpr (ranges::common_range<Range>) {
 2102|  1.39k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|  1.39k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  752|  1.39k|        : m_fptr([](storage fn,
  753|  1.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.39k|              cvref<T> obj = *get<T>(fn);
  755|  1.39k|              if constexpr (std::is_void_v<R>) {
  756|  1.39k|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.39k|              }
  758|  1.39k|              else {
  759|  1.39k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.39k|              }
  761|  1.39k|          }),
  762|  1.39k|          m_storage(std::addressof(f))
  763|  1.39k|    {
  764|  1.39k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|  2.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.26k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  2.26k|              else {
  759|  2.26k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.26k|              }
  761|  2.26k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  689|  2.26k|    {
  690|  2.26k|        if constexpr (std::is_const_v<T>) {
  691|  2.26k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  2.26k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 6094|  2.26k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  671|  1.39k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  1.39k|        {
  673|  1.39k|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2133|    296|{
 2134|    296|    return read_until_code_unit(range, std::not_fn(pred));
 2135|    296|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2100|    398|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|    398|    else {
 2105|    398|        auto first = range.begin();
 2106|  2.21k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 2.10k, False: 114]
  ------------------
 2107|  2.10k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 284, False: 1.81k]
  ------------------
 2108|    284|                return first;
 2109|    284|            }
 2110|  2.10k|        }
 2111|    114|        return first;
 2112|    398|    }
 2113|    398|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3128|    440|{
 3129|    440|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 0, False: 440]
  ------------------
 3130|      0|        auto it = read_while_classic_space(range);
 3131|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3133|      0|            return unexpected(e);
 3134|      0|        }
 3135|       |
 3136|      0|        return it;
 3137|      0|    }
 3138|       |
 3139|    440|    return read_while_classic_space(range);
 3140|    440|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2276|    440|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|    440|    else {
 2286|    440|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|    440|        SCN_UNUSED(it);
  ------------------
  |  | 1064|    440|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|    440|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|    440|            return detail::is_cp_space(cp);
 2300|    440|        });
 2301|    440|    }
 2302|    440|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2241|    590|{
 2242|    590|    return read_until_code_point(range, std::not_fn(pred));
 2243|    590|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2219|    788|{
 2220|    788|    auto it = range.begin();
 2221|  5.74k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 5.58k, False: 168]
  ------------------
 2222|  5.58k|        const auto val =
 2223|  5.58k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  5.58k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  5.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 5.58k, False: 0]
  |  |  ------------------
  ------------------
 2225|  5.58k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  5.58k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  5.58k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  5.58k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 620, False: 4.96k]
  ------------------
 2229|    620|                return it;
 2230|    620|            }
 2231|  5.58k|        }
 2232|  4.96k|        it = val.iterator;
 2233|  4.96k|    }
 2234|       |
 2235|    168|    return it;
 2236|    788|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 2023|  11.8k|{
 2024|  11.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  11.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  11.8k|    auto it = range.begin();
 2028|  11.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  11.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  11.8k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 11.8k, False: 0]
  ------------------
 2037|  11.8k|        ++it;
 2038|  11.8k|        return {it, string_type(1, *range.begin())};
 2039|  11.8k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  11.8k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  752|    440|        : m_fptr([](storage fn,
  753|    440|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    440|              cvref<T> obj = *get<T>(fn);
  755|    440|              if constexpr (std::is_void_v<R>) {
  756|    440|                  obj(static_cast<decltype(args)>(args)...);
  757|    440|              }
  758|    440|              else {
  759|    440|                  return obj(static_cast<decltype(args)>(args)...);
  760|    440|              }
  761|    440|          }),
  762|    440|          m_storage(std::addressof(f))
  763|    440|    {
  764|    440|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  753|    852|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    852|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    852|              else {
  759|    852|                  return obj(static_cast<decltype(args)>(args)...);
  760|    852|              }
  761|    852|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  689|    852|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    852|        else if constexpr (std::is_object_v<T>) {
  694|    852|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    852|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2298|    852|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|    852|            return detail::is_cp_space(cp);
 2300|    852|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|    440|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    440|        {
  668|    440|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|  6.94k|{
 3129|  6.94k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 6.56k, False: 380]
  ------------------
 3130|  6.56k|        auto it = read_while_classic_space(range);
 3131|  6.56k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  6.56k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 6.56k]
  |  |  ------------------
  ------------------
 3133|      0|            return unexpected(e);
 3134|      0|        }
 3135|       |
 3136|  6.56k|        return it;
 3137|  6.56k|    }
 3138|       |
 3139|    380|    return read_while_classic_space(range);
 3140|  6.94k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|  11.5k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  11.5k|    else {
 2286|  11.5k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|  11.5k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  11.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  11.5k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  11.5k|            return detail::is_cp_space(cp);
 2300|  11.5k|        });
 2301|  11.5k|    }
 2302|  11.5k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|  11.7k|{
 2242|  11.7k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  11.7k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|  14.6k|{
 2220|  14.6k|    auto it = range.begin();
 2221|  49.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 46.6k, False: 3.14k]
  ------------------
 2222|  46.6k|        const auto val =
 2223|  46.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  46.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 46.6k, False: 0]
  |  |  ------------------
  ------------------
 2225|  46.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  46.6k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  46.6k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  46.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 11.4k, False: 35.1k]
  ------------------
 2229|  11.4k|                return it;
 2230|  11.4k|            }
 2231|  46.6k|        }
 2232|  35.1k|        it = val.iterator;
 2233|  35.1k|    }
 2234|       |
 2235|  3.14k|    return it;
 2236|  14.6k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|  11.5k|        : m_fptr([](storage fn,
  753|  11.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  11.5k|              cvref<T> obj = *get<T>(fn);
  755|  11.5k|              if constexpr (std::is_void_v<R>) {
  756|  11.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  11.5k|              }
  758|  11.5k|              else {
  759|  11.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  11.5k|              }
  761|  11.5k|          }),
  762|  11.5k|          m_storage(std::addressof(f))
  763|  11.5k|    {
  764|  11.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  17.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  17.9k|              else {
  759|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  17.9k|              }
  761|  17.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|  17.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  17.9k|        else if constexpr (std::is_object_v<T>) {
  694|  17.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  17.9k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2298|  17.9k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  17.9k|            return detail::is_cp_space(cp);
 2300|  17.9k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|  11.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  11.5k|        {
  668|  11.5k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|  2.58k|    {
 3219|  2.58k|        reader_error_handler eh{};
 3220|  2.58k|        get_derived().check_specs_impl(specs, eh);
 3221|  2.58k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.26k, False: 1.32k]
  |  |  ------------------
  ------------------
 3222|  1.26k|            return detail::unexpected_scan_error(
 3223|  1.26k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  1.26k|        }
 3225|  1.32k|        return {};
 3226|  2.58k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3230|  2.58k|    {
 3231|  2.58k|        return static_cast<Derived&>(*this);
 3232|  2.58k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3607|  2.58k|    {
 3608|  2.58k|        detail::check_int_type_specs(specs, eh);
 3609|  2.58k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3213|  2.47k|    {
 3214|  2.47k|        return true;
 3215|  2.47k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3661|    204|    {
 3662|    204|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 204]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    204|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    204|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    204|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 204]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    204|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 6, False: 198]
  ------------------
 3683|      6|            value = T{0};
 3684|      6|            return std::next(prefix_result.iterator);
 3685|      6|        }
 3686|       |
 3687|    198|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    198|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 172, False: 26]
  |  |  ------------------
  ------------------
 3688|    172|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    172|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    172|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    172|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 158, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    158|    }                                                  \
  |  |  |  | 3995|    172|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    172|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|     14|                    parse_integer_digits_without_thsep(
 3690|     14|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|     14|                        prefix_result.parsed_base));
 3692|       |
 3693|     14|            auto buf = make_contiguous_buffer(
 3694|     14|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|     14|            SCN_TRY(result_it,
  ------------------
  |  | 3996|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     14|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|     14|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|     14|                                        prefix_result.parsed_base));
 3698|       |
 3699|     14|            return ranges::next(
 3700|     14|                prefix_result.iterator,
 3701|     14|                ranges::distance(buf.view().begin(), result_it));
 3702|     14|        }
 3703|       |
 3704|     26|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     26|            localized_number_formatting_options<CharT>{loc};
 3710|     26|#endif
 3711|       |
 3712|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     22|    }                                                  \
  |  |  |  | 3995|     26|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      4|                parse_integer_digits_with_thsep(
 3714|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      4|                    prefix_result.parsed_base, locale_options));
 3716|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      4|            parse_digits_result;
 3718|      4|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      4|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      4|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      4|            nothsep_source.data(), nothsep_source.size()};
 3722|      4|        SCN_TRY(
  ------------------
  |  | 3996|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      4|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      4|            nothsep_source_it,
 3724|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      4|                                prefix_result.parsed_base));
 3726|       |
 3727|      4|        return ranges::next(
 3728|      4|            prefix_result.iterator,
 3729|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      4|                ranges::ssize(thsep_indices));
 3731|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|    434|    {
 3662|    434|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    434|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    434|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    434|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 434]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    434|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 6, False: 428]
  ------------------
 3683|      6|            value = T{0};
 3684|      6|            return std::next(prefix_result.iterator);
 3685|      6|        }
 3686|       |
 3687|    428|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    428|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 404, False: 24]
  |  |  ------------------
  ------------------
 3688|    404|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    404|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    404|                    parse_integer_digits_without_thsep(
 3690|    404|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    404|                        prefix_result.parsed_base));
 3692|       |
 3693|    404|            auto buf = make_contiguous_buffer(
 3694|    404|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    404|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 360, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    360|    }                                                  \
  |  |  |  | 3995|    404|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|     44|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|     44|                                        prefix_result.parsed_base));
 3698|       |
 3699|     44|            return ranges::next(
 3700|     44|                prefix_result.iterator,
 3701|     44|                ranges::distance(buf.view().begin(), result_it));
 3702|    404|        }
 3703|       |
 3704|     24|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|     24|            localized_number_formatting_options<CharT>{loc};
 3710|     24|#endif
 3711|       |
 3712|     24|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 20, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     20|    }                                                  \
  |  |  |  | 3995|     24|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      4|                parse_integer_digits_with_thsep(
 3714|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      4|                    prefix_result.parsed_base, locale_options));
 3716|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      4|            parse_digits_result;
 3718|      4|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      4|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      4|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      4|            nothsep_source.data(), nothsep_source.size()};
 3722|      4|        SCN_TRY(
  ------------------
  |  | 3996|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      4|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      4|            nothsep_source_it,
 3724|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      4|                                prefix_result.parsed_base));
 3726|       |
 3727|      4|        return ranges::next(
 3728|      4|            prefix_result.iterator,
 3729|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      4|                ranges::ssize(thsep_indices));
 3731|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3661|    148|    {
 3662|    148|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 148]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    148|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    148|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    148|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 148]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    148|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 148]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    148|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    148|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 148, False: 0]
  |  |  ------------------
  ------------------
 3688|    148|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 138, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    138|    }                                                  \
  |  |  |  | 3995|    148|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|     10|                    parse_integer_digits_without_thsep(
 3690|     10|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|     10|                        prefix_result.parsed_base));
 3692|       |
 3693|     10|            auto buf = make_contiguous_buffer(
 3694|     10|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|     10|            SCN_TRY(result_it,
  ------------------
  |  | 3996|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     10|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|     10|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|     10|                                        prefix_result.parsed_base));
 3698|       |
 3699|     10|            return ranges::next(
 3700|     10|                prefix_result.iterator,
 3701|     10|                ranges::distance(buf.view().begin(), result_it));
 3702|     10|        }
 3703|       |
 3704|      0|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|      0|            localized_number_formatting_options<CharT>{loc};
 3710|      0|#endif
 3711|       |
 3712|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3661|    864|    {
 3662|    864|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3996|    864|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    864|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    864|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 864]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    864|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    864|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3663|    864|                                   .transform_error(make_eof_scan_error));
 3664|       |
 3665|    864|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3665:13): [True: 0, False: 864]
  ------------------
 3666|      0|            if constexpr (!std::is_signed_v<T>) {
 3667|      0|                return detail::unexpected_scan_error(
 3668|      0|                    scan_error::invalid_scanned_value,
 3669|      0|                    "Unexpected '-' sign when parsing an "
 3670|      0|                    "unsigned value");
 3671|       |            }
 3672|       |            else {
 3673|       |                if (specs.type ==
 3674|       |                    detail::presentation_type::int_unsigned_decimal) {
 3675|       |                    return detail::unexpected_scan_error(
 3676|       |                        scan_error::invalid_scanned_value,
 3677|       |                        "'u'-option disallows negative values");
 3678|       |                }
 3679|       |            }
 3680|      0|        }
 3681|       |
 3682|    864|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3682:13): [True: 0, False: 864]
  ------------------
 3683|      0|            value = T{0};
 3684|      0|            return std::next(prefix_result.iterator);
 3685|      0|        }
 3686|       |
 3687|    864|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1013|    864|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 864, False: 0]
  |  |  ------------------
  ------------------
 3688|    864|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    864|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    864|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    864|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 864]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    864|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    864|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|    864|                    parse_integer_digits_without_thsep(
 3690|    864|                        ranges::subrange{prefix_result.iterator, range.end()},
 3691|    864|                        prefix_result.parsed_base));
 3692|       |
 3693|    864|            auto buf = make_contiguous_buffer(
 3694|    864|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3695|    864|            SCN_TRY(result_it,
  ------------------
  |  | 3996|    864|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    864|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    864|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 822, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    822|    }                                                  \
  |  |  |  | 3995|    864|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    864|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3696|     42|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3697|     42|                                        prefix_result.parsed_base));
 3698|       |
 3699|     42|            return ranges::next(
 3700|     42|                prefix_result.iterator,
 3701|     42|                ranges::distance(buf.view().begin(), result_it));
 3702|    864|        }
 3703|       |
 3704|      0|        auto locale_options =
 3705|       |#if SCN_DISABLE_LOCALE
 3706|       |            localized_number_formatting_options<CharT>{};
 3707|       |        SCN_UNUSED(loc);
 3708|       |#else
 3709|      0|            localized_number_formatting_options<CharT>{loc};
 3710|      0|#endif
 3711|       |
 3712|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3713|      0|                parse_integer_digits_with_thsep(
 3714|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3715|      0|                    prefix_result.parsed_base, locale_options));
 3716|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3717|      0|            parse_digits_result;
 3718|      0|        SCN_UNUSED(after_digits_it);
  ------------------
  |  | 1064|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3719|       |
 3720|      0|        auto nothsep_source_view = std::basic_string_view<CharT>{
 3721|      0|            nothsep_source.data(), nothsep_source.size()};
 3722|      0|        SCN_TRY(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3723|      0|            nothsep_source_it,
 3724|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3725|      0|                                prefix_result.parsed_base));
 3726|       |
 3727|      0|        return ranges::next(
 3728|      0|            prefix_result.iterator,
 3729|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3730|      0|                ranges::ssize(thsep_indices));
 3731|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|  1.29k|    {
 3219|  1.29k|        reader_error_handler eh{};
 3220|  1.29k|        get_derived().check_specs_impl(specs, eh);
 3221|  1.29k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 634, False: 658]
  |  |  ------------------
  ------------------
 3222|    634|            return detail::unexpected_scan_error(
 3223|    634|                scan_error::invalid_format_string, eh.m_msg);
 3224|    634|        }
 3225|    658|        return {};
 3226|  1.29k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3230|  1.29k|    {
 3231|  1.29k|        return static_cast<Derived&>(*this);
 3232|  1.29k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4272|  1.29k|    {
 4273|  1.29k|        detail::check_float_type_specs(specs, eh);
 4274|  1.29k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3213|  1.25k|    {
 3214|  1.25k|        return true;
 3215|  1.25k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4346|    638|    {
 4347|    638|        unsigned options{};
 4348|    638|        if (specs.localized) {
  ------------------
  |  Branch (4348:13): [True: 32, False: 606]
  ------------------
 4349|     32|            options |= float_reader_base::allow_thsep;
 4350|     32|        }
 4351|       |
 4352|    638|        SCN_GCC_COMPAT_PUSH
 4353|    638|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4354|       |
 4355|    638|        switch (specs.type) {
 4356|     20|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4356:13): [True: 20, False: 618]
  ------------------
 4357|     20|                return options | float_reader_base::allow_fixed;
 4358|       |
 4359|     10|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4359:13): [True: 10, False: 628]
  ------------------
 4360|     10|                return options | float_reader_base::allow_scientific;
 4361|       |
 4362|     74|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4362:13): [True: 74, False: 564]
  ------------------
 4363|     74|                return options | float_reader_base::allow_hex;
 4364|       |
 4365|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4365:13): [True: 2, False: 636]
  ------------------
 4366|      2|                return options | float_reader_base::allow_scientific |
 4367|      2|                       float_reader_base::allow_fixed;
 4368|       |
 4369|    532|            case detail::presentation_type::none:
  ------------------
  |  Branch (4369:13): [True: 532, False: 106]
  ------------------
 4370|    532|                return options | float_reader_base::allow_scientific |
 4371|    532|                       float_reader_base::allow_fixed |
 4372|    532|                       float_reader_base::allow_hex;
 4373|       |
 4374|      0|            default:
  ------------------
  |  Branch (4374:13): [True: 0, False: 638]
  ------------------
 4375|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4376|    638|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4377|    638|        }
 4378|       |
 4379|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4380|    638|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3775|    638|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1895|  1.13k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1655|  2.27k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4163|    950|    {
 4164|    950|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4164:13): [True: 950, False: 0]
  ------------------
 4165|    950|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4165:13): [True: 950, False: 0]
  ------------------
 4166|    950|            return;
 4167|    950|        }
 4168|       |
 4169|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4170|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4170:13): [True: 0, False: 0]
  ------------------
 4171|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4171:27): [True: 0, False: 0]
  ------------------
 4172|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4172:21): [True: 0, False: 0]
  ------------------
 4173|      0|                    ch = CharT{'.'};
 4174|      0|                }
 4175|      0|            }
 4176|      0|        }
 4177|       |
 4178|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4178:13): [True: 0, False: 0]
  ------------------
 4179|      0|            return;
 4180|      0|        }
 4181|       |
 4182|      0|        auto first =
 4183|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4184|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4184:13): [True: 0, False: 0]
  ------------------
 4185|      0|            return;
 4186|      0|        }
 4187|       |
 4188|      0|        m_thsep_indices.push_back(
 4189|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4190|       |
 4191|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4191:31): [True: 0, False: 0]
  ------------------
 4192|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4192:17): [True: 0, False: 0]
  ------------------
 4193|      0|                *first++ = std::move(*it);
 4194|      0|            }
 4195|      0|            else {
 4196|      0|                m_thsep_indices.push_back(
 4197|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4198|      0|            }
 4199|      0|        }
 4200|       |
 4201|      0|        str.erase(first, str.end());
 4202|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1710|    850|    {
 1711|    850|        return m_storage.has_value();
 1712|    850|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1715|    444|    {
 1716|    444|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|    444|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    444|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|    444|        return *m_storage;
 1718|    444|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  772|    190|    {
  773|    190|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|    190|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3794|     16|    {
 3795|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|     16|        return read_source_impl(range);
 3801|     16|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3820|    190|    {
 3821|    190|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    190|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|    190|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|    190|        auto it = sign_result.first;
 3824|    190|        m_sign = sign_result.second;
 3825|       |
 3826|    190|        auto digits_begin = it;
 3827|    190|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|       |                      ranges::sized_range<Range>) {
 3830|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3831|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|       |                SCN_TRY_ASSIGN(
 3833|       |                    it,
 3834|       |                    do_read_source_impl(
 3835|       |                        r,
 3836|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|       |            }
 3839|       |            else {
 3840|       |                auto cb = [&](const auto& rr)
 3841|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|       |                    auto res = read_all(rr);
 3843|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|       |                        return detail::unexpected_scan_error(
 3845|       |                            scan_error::invalid_scanned_value,
 3846|       |                            "Invalid float value");
 3847|       |                    }
 3848|       |                    return res;
 3849|       |                };
 3850|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3851|       |            }
 3852|       |        }
 3853|    190|        else {
 3854|    190|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 170, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    170|    }                                                  \
  |  | 3995|    190|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3855|     20|                it,
 3856|     20|                do_read_source_impl(
 3857|     20|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|     20|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|     20|        }
 3860|       |
 3861|    190|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|     20|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 20, False: 0]
  |  Branch (3863:48): [True: 20, False: 0]
  ------------------
 3864|     20|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 20, False: 0]
  ------------------
 3865|     20|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 20, False: 0]
  ------------------
 3866|     20|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|     20|        }
 3868|       |
 3869|     20|        handle_separators();
 3870|       |
 3871|     20|        return it;
 3872|    190|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4106|    190|    {
 4107|    190|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|    190|        const bool allowed_nonhex =
 4109|    190|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|    190|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|    190|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 190, False: 0]
  |  Branch (4112:45): [True: 0, False: 190]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|    190|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 190]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|    190|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 190, False: 0]
  |  Branch (4121:45): [True: 0, False: 190]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|    190|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 190]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|    190|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 178, False: 12]
  |  Branch (4128:28): [True: 20, False: 158]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|     20|            auto it = range.begin();
 4132|       |
 4133|     20|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 0, False: 20]
  ------------------
 4134|      0|                m_kind = float_kind::hex_with_prefix;
 4135|      0|                it = *r;
 4136|      0|            }
 4137|     20|            else {
 4138|     20|                m_kind = float_kind::hex_without_prefix;
 4139|     20|            }
 4140|       |
 4141|     20|            return read_hex(ranges::subrange{it, range.end()});
 4142|     20|        }
 4143|    170|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 12, False: 158]
  |  Branch (4143:29): [True: 12, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|     12|            m_kind = float_kind::generic;
 4147|     12|            return read_regular_float(range);
 4148|     12|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|    158|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 158]
  |  |  ------------------
  ------------------
 4154|      0|            m_kind = float_kind::hex_with_prefix;
 4155|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4156|      0|        }
 4157|       |
 4158|    158|        m_kind = float_kind::generic;
 4159|    158|        return read_regular(range);
 4160|    158|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3914|    190|    {
 3915|    190|        auto it = range.begin();
 3916|    190|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 190, False: 0]
  ------------------
 3917|    190|            return unexpected(r.error());
 3918|    190|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3937|    190|    {
 3938|    190|        auto it = range.begin();
 3939|    190|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 190, False: 0]
  ------------------
 3940|    190|            return r.transform_error(map_parse_error_to_scan_error(
 3941|    190|                scan_error::invalid_scanned_value,
 3942|    190|                "Invalid floating-point NaN value"));
 3943|    190|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3907|    178|    {
 3908|    178|        return read_matching_string_classic_nocase(range, "0x");
 3909|    178|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4008|     20|    {
 4009|     20|        auto it = range.begin();
 4010|       |
 4011|     20|        std::ptrdiff_t digits_count = 0;
 4012|     20|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 4013|     20|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14, False: 6]
  |  |  ------------------
  ------------------
 4014|     14|            return r.transform_error(map_parse_error_to_scan_error(
 4015|     14|                scan_error::invalid_scanned_value,
 4016|     14|                "Invalid hexadecimal floating-point value"));
 4017|     14|        }
 4018|      6|        else {
 4019|      6|            digits_count += ranges::distance(it, *r);
 4020|      6|            it = *r;
 4021|      6|        }
 4022|       |
 4023|      6|        m_integral_part_length = digits_count;
 4024|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4024:18): [True: 0, False: 6]
  ------------------
 4025|      6|                                             m_locale_options.decimal_point)) {
 4026|      0|            it = *r;
 4027|      0|        }
 4028|       |
 4029|      6|        if (auto r =
  ------------------
  |  Branch (4029:18): [True: 0, False: 6]
  ------------------
 4030|      6|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 4031|      0|            digits_count += ranges::distance(it, *r);
 4032|      0|            it = *r;
 4033|      0|        }
 4034|       |
 4035|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 4036|      0|            return detail::unexpected_scan_error(
 4037|      0|                scan_error::invalid_scanned_value,
 4038|      0|                "No significand digits in hexfloat");
 4039|      0|        }
 4040|       |
 4041|      6|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4042|       |
 4043|      6|        return it;
 4044|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3892|     26|    {
 3893|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 26]
  |  |  |  Branch (1014:45): [True: 0, False: 26]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3894|     26|                         thsep_allowed)) {
 3895|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3896|      0|                return char_to_int(ch) < 16 ||
 3897|      0|                       ch == m_locale_options.thousands_sep;
 3898|      0|            });
 3899|      0|        }
 3900|       |
 3901|     26|        return read_while1_code_unit(
 3902|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3903|     26|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  752|     26|        : m_fptr([](storage fn,
  753|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     26|              cvref<T> obj = *get<T>(fn);
  755|     26|              if constexpr (std::is_void_v<R>) {
  756|     26|                  obj(static_cast<decltype(args)>(args)...);
  757|     26|              }
  758|     26|              else {
  759|     26|                  return obj(static_cast<decltype(args)>(args)...);
  760|     26|              }
  761|     26|          }),
  762|     26|          m_storage(std::addressof(f))
  763|     26|    {
  764|     26|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  753|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     28|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|     28|              else {
  759|     28|                  return obj(static_cast<decltype(args)>(args)...);
  760|     28|              }
  761|     28|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  689|     28|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|     28|        else if constexpr (std::is_object_v<T>) {
  694|     28|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|     28|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3902|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  666|     26|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|     26|        {
  668|     26|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESM_NSK_17basic_string_viewIcNSK_11char_traitsIcEEEE:
 3980|     20|    {
 3981|     20|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 0, False: 20]
  ------------------
 3982|      0|            auto beg_exp_it = range.begin();
 3983|      0|            auto it = *r;
 3984|       |
 3985|      0|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|      0|                it = r_sign->first;
 3988|      0|            }
 3989|       |
 3990|      0|            if (auto r_exp = read_while1_code_unit(
 3991|      0|                    ranges::subrange{it, range.end()},
 3992|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3994|      0|                it = beg_exp_it;
 3995|      0|            }
 3996|      0|            else {
 3997|      0|                it = *r_exp;
 3998|      0|            }
 3999|       |
 4000|      0|            return it;
 4001|      0|        }
 4002|     20|        return range.begin();
 4003|     20|    }
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2434|     20|{
 2435|     20|    auto it = read_code_unit(range);
 2436|     20|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6, False: 14]
  |  |  ------------------
  ------------------
 2437|      6|        return unexpected(make_eof_parse_error(it.error()));
 2438|      6|    }
 2439|       |
 2440|     28|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 28, False: 14]
  ------------------
 2441|     28|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 0, False: 28]
  ------------------
 2442|      0|            return *it;
 2443|      0|        }
 2444|     28|    }
 2445|       |
 2446|     14|    return unexpected(parse_error::error);
 2447|     14|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4049|    170|    {
 4050|    170|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|    170|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 162, False: 8]
  |  Branch (4051:50): [True: 4, False: 158]
  ------------------
 4052|       |
 4053|    170|        auto it = ranges::begin(range);
 4054|    170|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|    170|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|    170|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 154, False: 16]
  |  |  ------------------
  ------------------
 4058|    154|            return r.transform_error(
 4059|    154|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|    154|                                              "Invalid floating-point value"));
 4061|    154|        }
 4062|     16|        else {
 4063|     16|            digits_count += ranges::distance(it, *r);
 4064|     16|            it = *r;
 4065|     16|        }
 4066|       |
 4067|     16|        m_integral_part_length = digits_count;
 4068|     16|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 0, False: 16]
  ------------------
 4069|     16|                                             m_locale_options.decimal_point)) {
 4070|      0|            it = *r;
 4071|      0|        }
 4072|       |
 4073|     16|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 0, False: 16]
  ------------------
 4074|     16|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|      0|            digits_count += ranges::distance(it, *r);
 4076|      0|            it = *r;
 4077|      0|        }
 4078|       |
 4079|     16|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|     16|        auto beg_exp_it = it;
 4086|     16|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 14, False: 2]
  ------------------
 4087|     14|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|     14|        }
 4089|     16|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 2, False: 14]
  |  Branch (4089:29): [True: 2, False: 0]
  ------------------
 4090|      2|            return detail::unexpected_scan_error(
 4091|      2|                scan_error::invalid_scanned_value,
 4092|      2|                "No exponent given to scientific float");
 4093|      2|        }
 4094|       |
 4095|     14|        m_kind =
 4096|     14|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 14, False: 0]
  ------------------
 4097|       |
 4098|     14|        return it;
 4099|     16|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3877|    186|    {
 3878|    186|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 186]
  |  |  |  Branch (1014:45): [True: 0, False: 186]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|    186|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|    186|        return read_while1_code_unit(
 3887|    186|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|    186|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  752|    186|        : m_fptr([](storage fn,
  753|    186|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    186|              cvref<T> obj = *get<T>(fn);
  755|    186|              if constexpr (std::is_void_v<R>) {
  756|    186|                  obj(static_cast<decltype(args)>(args)...);
  757|    186|              }
  758|    186|              else {
  759|    186|                  return obj(static_cast<decltype(args)>(args)...);
  760|    186|              }
  761|    186|          }),
  762|    186|          m_storage(std::addressof(f))
  763|    186|    {
  764|    186|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  753|    190|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    190|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    190|              else {
  759|    190|                  return obj(static_cast<decltype(args)>(args)...);
  760|    190|              }
  761|    190|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  689|    190|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    190|        else if constexpr (std::is_object_v<T>) {
  694|    190|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    190|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3887|    190|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  666|    186|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    186|        {
  668|    186|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSH_:
 1700|     20|    {
 1701|     20|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|     20|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3780|    174|    {
 3781|    174|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 174]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|    174|        return read_source_impl(range);
 3787|    174|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  772|    948|    {
  773|    948|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|    948|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|    948|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3794|     16|    {
 3795|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|     16|        return read_source_impl(range);
 3801|     16|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3820|    948|    {
 3821|    948|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|    948|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    948|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    948|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 948]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    948|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    948|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|    948|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|    948|        auto it = sign_result.first;
 3824|    948|        m_sign = sign_result.second;
 3825|       |
 3826|    948|        auto digits_begin = it;
 3827|    948|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|    948|                      ranges::sized_range<Range>) {
 3830|    948|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1014|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 948]
  |  |  |  Branch (1014:45): [True: 0, False: 948]
  |  |  |  Branch (1014:45): [True: 0, False: 948]
  |  |  ------------------
  ------------------
 3831|    948|                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|      0|    }                                                  \
  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3833|      0|                    it,
 3834|      0|                    do_read_source_impl(
 3835|      0|                        r,
 3836|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|      0|            }
 3839|    948|            else {
 3840|    948|                auto cb = [&](const auto& rr)
 3841|    948|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|    948|                    auto res = read_all(rr);
 3843|    948|                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|    948|                        return detail::unexpected_scan_error(
 3845|    948|                            scan_error::invalid_scanned_value,
 3846|    948|                            "Invalid float value");
 3847|    948|                    }
 3848|    948|                    return res;
 3849|    948|                };
 3850|    948|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3991|    948|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    948|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 18, False: 930]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|     18|    }                                                  \
  |  | 3995|    948|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    948|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3851|    930|            }
 3852|       |        }
 3853|       |        else {
 3854|       |            SCN_TRY_ASSIGN(
 3855|       |                it,
 3856|       |                do_read_source_impl(
 3857|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|       |        }
 3860|       |
 3861|    948|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|    948|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    948|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|    930|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 930, False: 0]
  |  Branch (3863:48): [True: 930, False: 0]
  ------------------
 3864|    930|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 930, False: 0]
  ------------------
 3865|    930|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 930, False: 0]
  ------------------
 3866|    930|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|    930|        }
 3868|       |
 3869|    930|        handle_separators();
 3870|       |
 3871|    930|        return it;
 3872|    948|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3914|    948|    {
 3915|    948|        auto it = range.begin();
 3916|    948|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 948, False: 0]
  ------------------
 3917|    948|            return unexpected(r.error());
 3918|    948|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3937|    948|    {
 3938|    948|        auto it = range.begin();
 3939|    948|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 948, False: 0]
  ------------------
 3940|    948|            return r.transform_error(map_parse_error_to_scan_error(
 3941|    948|                scan_error::invalid_scanned_value,
 3942|    948|                "Invalid floating-point NaN value"));
 3943|    948|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3907|    928|    {
 3908|    928|        return read_matching_string_classic_nocase(range, "0x");
 3909|    928|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2153|     24|{
 2154|     24|    auto it = read_while_code_unit(range, pred);
 2155|     24|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 20, False: 4]
  ------------------
 2156|     20|        return unexpected(parse_error::error);
 2157|     20|    }
 2158|      4|    return it;
 2159|     24|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3980|      2|    {
 3981|      2|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 0, False: 2]
  ------------------
 3982|      0|            auto beg_exp_it = range.begin();
 3983|      0|            auto it = *r;
 3984|       |
 3985|      0|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 0, False: 0]
  ------------------
 3986|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|      0|                it = r_sign->first;
 3988|      0|            }
 3989|       |
 3990|      0|            if (auto r_exp = read_while1_code_unit(
 3991|      0|                    ranges::subrange{it, range.end()},
 3992|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3994|      0|                it = beg_exp_it;
 3995|      0|            }
 3996|      0|            else {
 3997|      0|                it = *r_exp;
 3998|      0|            }
 3999|       |
 4000|      0|            return it;
 4001|      0|        }
 4002|      2|        return range.begin();
 4003|      2|    }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4049|     20|    {
 4050|     20|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|     20|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 8, False: 12]
  |  Branch (4051:50): [True: 6, False: 2]
  ------------------
 4052|       |
 4053|     20|        auto it = ranges::begin(range);
 4054|     20|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|     20|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|     20|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16, False: 4]
  |  |  ------------------
  ------------------
 4058|     16|            return r.transform_error(
 4059|     16|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|     16|                                              "Invalid floating-point value"));
 4061|     16|        }
 4062|      4|        else {
 4063|      4|            digits_count += ranges::distance(it, *r);
 4064|      4|            it = *r;
 4065|      4|        }
 4066|       |
 4067|      4|        m_integral_part_length = digits_count;
 4068|      4|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 0, False: 4]
  ------------------
 4069|      4|                                             m_locale_options.decimal_point)) {
 4070|      0|            it = *r;
 4071|      0|        }
 4072|       |
 4073|      4|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 0, False: 4]
  ------------------
 4074|      4|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|      0|            digits_count += ranges::distance(it, *r);
 4076|      0|            it = *r;
 4077|      0|        }
 4078|       |
 4079|      4|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|      4|        auto beg_exp_it = it;
 4086|      4|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 2, False: 2]
  ------------------
 4087|      2|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|      2|        }
 4089|      4|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 2, False: 2]
  |  Branch (4089:29): [True: 2, False: 0]
  ------------------
 4090|      2|            return detail::unexpected_scan_error(
 4091|      2|                scan_error::invalid_scanned_value,
 4092|      2|                "No exponent given to scientific float");
 4093|      2|        }
 4094|       |
 4095|      2|        m_kind =
 4096|      2|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 2, False: 0]
  ------------------
 4097|       |
 4098|      2|        return it;
 4099|      4|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3877|     24|    {
 3878|     24|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 24]
  |  |  |  Branch (1014:45): [True: 0, False: 24]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|     24|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|     24|        return read_while1_code_unit(
 3887|     24|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|     24|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|     24|        : m_fptr([](storage fn,
  753|     24|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     24|              cvref<T> obj = *get<T>(fn);
  755|     24|              if constexpr (std::is_void_v<R>) {
  756|     24|                  obj(static_cast<decltype(args)>(args)...);
  757|     24|              }
  758|     24|              else {
  759|     24|                  return obj(static_cast<decltype(args)>(args)...);
  760|     24|              }
  761|     24|          }),
  762|     24|          m_storage(std::addressof(f))
  763|     24|    {
  764|     24|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  753|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     28|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|     28|              else {
  759|     28|                  return obj(static_cast<decltype(args)>(args)...);
  760|     28|              }
  761|     28|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  689|     28|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|     28|        else if constexpr (std::is_object_v<T>) {
  694|     28|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|     28|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3887|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|     24|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|     24|        {
  668|     24|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4106|    948|    {
 4107|    948|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|    948|        const bool allowed_nonhex =
 4109|    948|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|    948|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|    948|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 948, False: 0]
  |  Branch (4112:45): [True: 0, False: 948]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|    948|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 948]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|    948|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 948, False: 0]
  |  Branch (4121:45): [True: 0, False: 948]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|    948|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 948]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|    948|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 928, False: 20]
  |  Branch (4128:28): [True: 54, False: 874]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|     54|            auto it = range.begin();
 4132|       |
 4133|     54|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 0, False: 54]
  ------------------
 4134|      0|                m_kind = float_kind::hex_with_prefix;
 4135|      0|                it = *r;
 4136|      0|            }
 4137|     54|            else {
 4138|     54|                m_kind = float_kind::hex_without_prefix;
 4139|     54|            }
 4140|       |
 4141|     54|            return read_hex(ranges::subrange{it, range.end()});
 4142|     54|        }
 4143|    894|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 20, False: 874]
  |  Branch (4143:29): [True: 20, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|     20|            m_kind = float_kind::generic;
 4147|     20|            return read_regular_float(range);
 4148|     20|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|    874|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|    874|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 874]
  |  |  ------------------
  ------------------
 4154|      0|            m_kind = float_kind::hex_with_prefix;
 4155|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4156|      0|        }
 4157|       |
 4158|    874|        m_kind = float_kind::generic;
 4159|    874|        return read_regular(range);
 4160|    874|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3841|    928|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|    928|                    auto res = read_all(rr);
 3843|    928|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1014|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 928]
  |  |  ------------------
  ------------------
 3844|      0|                        return detail::unexpected_scan_error(
 3845|      0|                            scan_error::invalid_scanned_value,
 3846|      0|                            "Invalid float value");
 3847|      0|                    }
 3848|    928|                    return res;
 3849|    928|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1963|    928|{
 1964|    928|    return ranges::next(range.begin(), range.end());
 1965|    928|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    928|    {
  313|    928|        ranges::advance(x, bound);
  314|    928|        return x;
  315|    928|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    928|    {
  275|    928|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    928|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1700|    930|    {
 1701|    930|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|    930|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1744|    930|    {
 1745|    930|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|    930|                      ranges::sized_range<Range>) {
 1750|    930|            m_storage.reset();
 1751|    930|            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|    930|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3780|    932|    {
 3781|    932|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|    932|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 932]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|    932|        return read_source_impl(range);
 3787|    932|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3806|    950|    {
 3807|    950|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|    950|        const std::ptrdiff_t sign_len =
 3810|    950|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 0, False: 950]
  ------------------
 3811|       |
 3812|    950|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|    950|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    950|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    950|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    950|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 852, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    852|    }                                                  \
  |  |  |  | 3995|    950|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    950|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|     98|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|    950|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4297|    190|    {
 4298|    190|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|    190|#if !SCN_DISABLE_LOCALE
 4301|    190|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 16, False: 174]
  ------------------
 4302|     16|            return read_impl<Range>(
 4303|     16|                range, rd,
 4304|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4305|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|     16|                },
 4307|     16|                value, loc);
 4308|     16|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|    174|        return read_impl<Range>(
 4314|    174|            range, rd,
 4315|    174|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    174|                return r.read_source(SCN_FWD(args)...);
 4317|    174|            },
 4318|    174|            value);
 4319|    190|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|    190|    {
 4336|    190|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|    190|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 170, False: 20]
  |  |  ------------------
  ------------------
 4338|    170|            return unexpected(r.error());
 4339|    170|        }
 4340|       |
 4341|     20|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    190|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|     20|        return ranges::next(range.begin(), n);
 4343|     20|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  752|     16|        : m_fptr([](storage fn,
  753|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     16|              cvref<T> obj = *get<T>(fn);
  755|     16|              if constexpr (std::is_void_v<R>) {
  756|     16|                  obj(static_cast<decltype(args)>(args)...);
  757|     16|              }
  758|     16|              else {
  759|     16|                  return obj(static_cast<decltype(args)>(args)...);
  760|     16|              }
  761|     16|          }),
  762|     16|          m_storage(std::addressof(f))
  763|     16|    {
  764|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  753|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     16|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|     16|              else {
  759|     16|                  return obj(static_cast<decltype(args)>(args)...);
  760|     16|              }
  761|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|     16|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|     16|        else if constexpr (std::is_object_v<T>) {
  694|     16|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4304|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4305|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|     16|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|     16|        {
  668|     16|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  752|    174|        : m_fptr([](storage fn,
  753|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    174|              cvref<T> obj = *get<T>(fn);
  755|    174|              if constexpr (std::is_void_v<R>) {
  756|    174|                  obj(static_cast<decltype(args)>(args)...);
  757|    174|              }
  758|    174|              else {
  759|    174|                  return obj(static_cast<decltype(args)>(args)...);
  760|    174|              }
  761|    174|          }),
  762|    174|          m_storage(std::addressof(f))
  763|    174|    {
  764|    174|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  753|    174|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    174|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    174|              else {
  759|    174|                  return obj(static_cast<decltype(args)>(args)...);
  760|    174|              }
  761|    174|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|    174|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    174|        else if constexpr (std::is_object_v<T>) {
  694|    174|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    174|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4315|    174|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    174|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|    174|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|    174|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    174|        {
  668|    174|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|    448|    {
 4298|    448|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|    448|#if !SCN_DISABLE_LOCALE
 4301|    448|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 16, False: 432]
  ------------------
 4302|     16|            return read_impl<Range>(
 4303|     16|                range, rd,
 4304|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4305|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|     16|                },
 4307|     16|                value, loc);
 4308|     16|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|    432|        return read_impl<Range>(
 4314|    432|            range, rd,
 4315|    432|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    432|                return r.read_source(SCN_FWD(args)...);
 4317|    432|            },
 4318|    432|            value);
 4319|    448|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|    948|    {
 4336|    948|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|    948|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18, False: 930]
  |  |  ------------------
  ------------------
 4338|     18|            return unexpected(r.error());
 4339|     18|        }
 4340|       |
 4341|    930|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 852, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    852|    }                                                  \
  |  |  |  | 3995|    948|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    948|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|     78|        return ranges::next(range.begin(), n);
 4343|    930|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|     16|        : m_fptr([](storage fn,
  753|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     16|              cvref<T> obj = *get<T>(fn);
  755|     16|              if constexpr (std::is_void_v<R>) {
  756|     16|                  obj(static_cast<decltype(args)>(args)...);
  757|     16|              }
  758|     16|              else {
  759|     16|                  return obj(static_cast<decltype(args)>(args)...);
  760|     16|              }
  761|     16|          }),
  762|     16|          m_storage(std::addressof(f))
  763|     16|    {
  764|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     16|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|     16|              else {
  759|     16|                  return obj(static_cast<decltype(args)>(args)...);
  760|     16|              }
  761|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|     16|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|     16|        else if constexpr (std::is_object_v<T>) {
  694|     16|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4305|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|     16|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|     16|        {
  668|     16|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|    432|        : m_fptr([](storage fn,
  753|    432|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    432|              cvref<T> obj = *get<T>(fn);
  755|    432|              if constexpr (std::is_void_v<R>) {
  756|    432|                  obj(static_cast<decltype(args)>(args)...);
  757|    432|              }
  758|    432|              else {
  759|    432|                  return obj(static_cast<decltype(args)>(args)...);
  760|    432|              }
  761|    432|          }),
  762|    432|          m_storage(std::addressof(f))
  763|    432|    {
  764|    432|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|    432|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    432|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    432|              else {
  759|    432|                  return obj(static_cast<decltype(args)>(args)...);
  760|    432|              }
  761|    432|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|    432|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    432|        else if constexpr (std::is_object_v<T>) {
  694|    432|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    432|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|    432|            [](float_reader<CharT>& r, auto&&... args) {
 4316|    432|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|    432|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|    432|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    432|        {
  668|    432|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5935|  1.73k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|  1.73k|                       std::is_same_v<T, std::wstring>) {
 5954|  1.73k|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  1.73k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5328|  5.19k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|  3.69k|    {
 3219|  3.69k|        reader_error_handler eh{};
 3220|  3.69k|        get_derived().check_specs_impl(specs, eh);
 3221|  3.69k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  3.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 654, False: 3.03k]
  |  |  ------------------
  ------------------
 3222|    654|            return detail::unexpected_scan_error(
 3223|    654|                scan_error::invalid_format_string, eh.m_msg);
 3224|    654|        }
 3225|  3.03k|        return {};
 3226|  3.69k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3230|  3.69k|    {
 3231|  3.69k|        return static_cast<Derived&>(*this);
 3232|  3.69k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5332|  3.69k|    {
 5333|  3.69k|        detail::check_string_type_specs(specs, eh);
 5334|       |
 5335|  3.69k|        SCN_GCC_COMPAT_PUSH
 5336|  3.69k|        SCN_GCC_COMPAT_IGNORE("-Wswitch")
 5337|  3.69k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-default")
 5338|       |
 5339|  3.69k|        switch (specs.type) {
  ------------------
  |  Branch (5339:17): [True: 648, False: 3.04k]
  ------------------
 5340|  1.53k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5340:13): [True: 1.53k, False: 2.15k]
  ------------------
 5341|  1.53k|                m_type = reader_type::word;
 5342|  1.53k|                break;
 5343|       |
 5344|    288|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5344:13): [True: 288, False: 3.40k]
  ------------------
 5345|    288|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5345:21): [True: 54, False: 234]
  ------------------
 5346|    288|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5346:21): [True: 138, False: 96]
  ------------------
 5347|    192|                    m_type = reader_type::custom_word;
 5348|    192|                }
 5349|     96|                else {
 5350|     96|                    m_type = reader_type::word;
 5351|     96|                }
 5352|    288|                break;
 5353|      0|            }
 5354|       |
 5355|     90|            case detail::presentation_type::character:
  ------------------
  |  Branch (5355:13): [True: 90, False: 3.60k]
  ------------------
 5356|     90|                m_type = reader_type::character;
 5357|     90|                break;
 5358|       |
 5359|  1.12k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5359:13): [True: 1.12k, False: 2.56k]
  ------------------
 5360|  1.12k|                m_type = reader_type::character_set;
 5361|  1.12k|                break;
 5362|       |
 5363|      0|#if !SCN_DISABLE_REGEX
 5364|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5364:13): [True: 0, False: 3.69k]
  ------------------
 5365|      0|                m_type = reader_type::regex;
 5366|      0|                break;
 5367|       |
 5368|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5368:13): [True: 0, False: 3.69k]
  ------------------
 5369|      0|                m_type = reader_type::regex_escaped;
 5370|      0|                break;
 5371|  3.69k|#endif
 5372|  3.69k|        }
 5373|       |
 5374|  3.69k|        SCN_GCC_COMPAT_POP
 5375|  3.69k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5378|  6.06k|    {
 5379|  6.06k|        return m_type == reader_type::word;
 5380|  6.06k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1263|  5.55k|{
 1264|  5.55k|    auto it = src.begin();
 1265|  53.5k|    while (it != src.end()) {
  ------------------
  |  Branch (1265:12): [True: 48.9k, False: 4.58k]
  ------------------
 1266|  48.9k|        const auto len = static_cast<std::ptrdiff_t>(
 1267|  48.9k|            detail::code_point_length_by_starting_code_unit(*it));
 1268|  48.9k|        SCN_EXPECT(len >= 0);
  ------------------
  |  | 1079|  48.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  48.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1269|  48.9k|        if (len == 0) {
  ------------------
  |  Branch (1269:13): [True: 0, False: 48.9k]
  ------------------
 1270|      0|            return false;
 1271|      0|        }
 1272|  48.9k|        if (std::distance(it, src.end()) < len) {
  ------------------
  |  Branch (1272:13): [True: 0, False: 48.9k]
  ------------------
 1273|      0|            return false;
 1274|      0|        }
 1275|  48.9k|        const auto cp = detail::decode_code_point_exhaustive(
 1276|  48.9k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1277|  48.9k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1277:13): [True: 966, False: 48.0k]
  ------------------
 1278|    966|            return false;
 1279|    966|        }
 1280|  48.0k|        it += len;
 1281|  48.0k|    }
 1282|  4.58k|    return true;
 1283|  5.55k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|    308|{
 3171|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|       |        if (source.stores_allocated_string()) {
 3173|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3174|       |        }
 3175|       |        else {
 3176|       |            dest.assign(source.view());
 3177|       |        }
 3178|       |    }
 3179|    308|    else {
 3180|    308|        return transcode_impl(source.view(), dest);
 3181|    308|    }
 3182|       |
 3183|      0|    return {};
 3184|    308|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3145|  1.14k|{
 3146|  1.14k|    dst.clear();
 3147|  1.14k|    transcode_valid_to_string(src, dst);
 3148|  1.14k|    return {};
 3149|  1.14k|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1526|  1.14k|{
 1527|  1.14k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1528|       |
 1529|  1.14k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1079|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1530|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1531|       |        if constexpr (sizeof(DestCharT) == 2) {
 1532|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1533|       |            std::u32string tmp;
 1534|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1535|       |            return transcode_to_string_impl_32to16<true>(
 1536|       |                std::u32string_view{tmp}, dest);
 1537|       |        }
 1538|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1539|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1540|       |        }
 1541|       |    }
 1542|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1543|       |        if constexpr (sizeof(DestCharT) == 1) {
 1544|       |            std::u32string tmp;
 1545|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1546|       |            return transcode_to_string_impl_32to8<true>(
 1547|       |                std::u32string_view{tmp}, dest);
 1548|       |        }
 1549|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1550|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1551|       |        }
 1552|       |    }
 1553|  1.14k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1554|  1.14k|        if constexpr (sizeof(DestCharT) == 1) {
 1555|  1.14k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1556|       |        }
 1557|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1558|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1559|       |        }
 1560|  1.14k|    }
 1561|       |
 1562|  1.14k|    SCN_EXPECT(false);
  ------------------
  |  | 1079|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1563|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1564|  1.14k|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1416|  1.14k|{
 1417|  1.14k|    static_assert(sizeof(SourceCharT) == 4);
 1418|  1.14k|    static_assert(sizeof(DestCharT) == 1);
 1419|       |
 1420|  10.6k|    for (auto cp : src) {
  ------------------
  |  Branch (1420:18): [True: 10.6k, False: 1.14k]
  ------------------
 1421|  10.6k|        const auto u32cp = static_cast<uint32_t>(cp);
 1422|  10.6k|        if (SCN_UNLIKELY(!VerifiedValid && static_cast<char32_t>(cp) >=
  ------------------
  |  | 1014|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [Folded - Ignored]
  |  |  |  Branch (1014:45): [Folded - Ignored]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1423|  10.6k|                                               detail::invalid_code_point)) {
 1424|       |            // Replacement character
 1425|      0|            dest.push_back(static_cast<char>(0xef));
 1426|      0|            dest.push_back(static_cast<char>(0xbf));
 1427|      0|            dest.push_back(static_cast<char>(0xbd));
 1428|      0|        }
 1429|  10.6k|        else if (cp < 128) {
  ------------------
  |  Branch (1429:18): [True: 8.78k, False: 1.86k]
  ------------------
 1430|  8.78k|            dest.push_back(static_cast<char>(cp));
 1431|  8.78k|        }
 1432|  1.86k|        else if (cp < 2048) {
  ------------------
  |  Branch (1432:18): [True: 168, False: 1.69k]
  ------------------
 1433|    168|            dest.push_back(
 1434|    168|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1435|    168|            dest.push_back(
 1436|    168|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1437|    168|        }
 1438|  1.69k|        else if (cp < 65536) {
  ------------------
  |  Branch (1438:18): [True: 1.13k, False: 556]
  ------------------
 1439|  1.13k|            dest.push_back(
 1440|  1.13k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1441|  1.13k|            dest.push_back(static_cast<char>(
 1442|  1.13k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1443|  1.13k|            dest.push_back(
 1444|  1.13k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1445|  1.13k|        }
 1446|    556|        else {
 1447|    556|            dest.push_back(
 1448|    556|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1449|    556|            dest.push_back(static_cast<char>(
 1450|    556|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1451|    556|            dest.push_back(static_cast<char>(
 1452|    556|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1453|    556|            dest.push_back(
 1454|    556|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1455|    556|        }
 1456|  10.6k|    }
 1457|  1.14k|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5229|  1.12k|        {
 5230|  1.12k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5230:17): [True: 378, False: 750]
  ------------------
 5231|    378|                return {};
 5232|    378|            }
 5233|       |
 5234|    750|            auto charset_string = specs.charset_string<SourceCharT>();
 5235|    750|            auto it = detail::to_address(charset_string.begin());
 5236|    750|            auto set = detail::parse_presentation_set(
 5237|    750|                it, detail::to_address(charset_string.end()), nonascii);
 5238|    750|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3984|    750|    do {                                                            \
  |  | 3985|    750|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 750]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    750|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5239|    750|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1080|    750|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5240|    750|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1080|    750|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5241|       |
 5242|    750|            std::sort(nonascii.extra_ranges.begin(),
 5243|    750|                      nonascii.extra_ranges.end());
 5244|    750|            return {};
 5245|    750|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5262|  9.71k|        {
 5263|  9.71k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5263:17): [True: 2.94k, False: 6.76k]
  ------------------
 5264|  2.94k|                return helper.is_char_set_in_extra_literals(cp);
 5265|  2.94k|            }
 5266|       |
 5267|  6.76k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5268|  9.71k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5212|  2.94k|        {
 5213|       |            // TODO: binary search?
 5214|  2.94k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5214:17): [True: 0, False: 2.94k]
  ------------------
 5215|      0|                return false;
 5216|      0|            }
 5217|       |
 5218|  2.94k|            const auto cp_val = static_cast<uint32_t>(cp);
 5219|  2.94k|            return std::find_if(
 5220|  2.94k|                       nonascii.extra_ranges.begin(),
 5221|  2.94k|                       nonascii.extra_ranges.end(),
 5222|  2.94k|                       [cp_val](const auto& pair) noexcept {
 5223|  2.94k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5224|  2.94k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5225|  2.94k|                       }) != nonascii.extra_ranges.end();
 5226|  2.94k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5222|  30.5k|                       [cp_val](const auto& pair) noexcept {
 5223|  30.5k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5223:35): [True: 29.3k, False: 1.16k]
  ------------------
 5224|  30.5k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5224:35): [True: 2.66k, False: 26.6k]
  ------------------
 5225|  30.5k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5202|  10.4k|        {
 5203|  10.4k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1079|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|  10.4k|            const auto val =
 5205|  10.4k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5206|  10.4k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5207|  10.4k|                    (val % 8)) &
 5208|  10.4k|                   1u;
 5209|  10.4k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5253|  3.83k|        {
 5254|  3.83k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5254:17): [True: 186, False: 3.64k]
  ------------------
 5255|    186|                return false;
 5256|    186|            }
 5257|       |
 5258|  3.64k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5259|  3.83k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5199|  1.12k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5396|    388|    {
 5397|    388|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    388|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    388|        return read_impl(range, specs, value);
 5399|    388|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5416|    388|    {
 5417|    388|        SCN_CLANG_PUSH
 5418|    388|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    388|        switch (m_type) {
 5421|    152|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 152, False: 236]
  ------------------
 5422|    152|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 30, False: 358]
  ------------------
 5425|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     30|                                                                   value);
 5427|       |
 5428|     26|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 26, False: 362]
  ------------------
 5429|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    180|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 180, False: 208]
  ------------------
 5432|    180|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    180|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 388]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 388]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 388]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    388|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    388|        }
 5453|       |
 5454|    388|        SCN_CLANG_POP
 5455|    388|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4950|    152|    {
 4951|    152|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    152|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4884|    208|{
 4885|    208|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    208|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    208|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 66, False: 142]
  ------------------
 4889|     66|        return detail::unexpected_scan_error(
 4890|     66|            scan_error::invalid_scanned_value,
 4891|     66|            "Invalid encoding in scanned string");
 4892|     66|    }
 4893|       |
 4894|    142|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    142|    do {                                                            \
  |  | 3985|    142|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 142]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    142|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    142|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    142|    static_cast<    \
  |  | 1084|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    142|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2247|    456|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|    456|    else {
 2257|    456|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|    456|        return read_until_code_point(
 2269|    456|            ranges::subrange{it, range.end()},
 2270|    456|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|    456|    }
 2272|    456|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2219|    456|{
 2220|    456|    auto it = range.begin();
 2221|  6.64k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 6.27k, False: 378]
  ------------------
 2222|  6.27k|        const auto val =
 2223|  6.27k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  6.27k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  6.27k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 6.27k, False: 0]
  |  |  ------------------
  ------------------
 2225|  6.27k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  6.27k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  6.27k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  6.27k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 78, False: 6.19k]
  ------------------
 2229|     78|                return it;
 2230|     78|            }
 2231|  6.27k|        }
 2232|  6.19k|        it = val.iterator;
 2233|  6.19k|    }
 2234|       |
 2235|    378|    return it;
 2236|    456|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  752|    456|        : m_fptr([](storage fn,
  753|    456|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    456|              cvref<T> obj = *get<T>(fn);
  755|    456|              if constexpr (std::is_void_v<R>) {
  756|    456|                  obj(static_cast<decltype(args)>(args)...);
  757|    456|              }
  758|    456|              else {
  759|    456|                  return obj(static_cast<decltype(args)>(args)...);
  760|    456|              }
  761|    456|          }),
  762|    456|          m_storage(std::addressof(f))
  763|    456|    {
  764|    456|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  753|  6.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  6.27k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  6.27k|              else {
  759|  6.27k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  6.27k|              }
  761|  6.27k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  689|  6.27k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  6.27k|        else if constexpr (std::is_object_v<T>) {
  694|  6.27k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  6.27k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2270|  6.27k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|    456|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    456|        {
  668|    456|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4971|     30|    {
 4972|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 30, False: 0]
  ------------------
 4973|     30|            return read_string_impl(
 4974|     30|                range,
 4975|     30|                read_until_code_unit(
 4976|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     30|                value);
 4978|     30|        }
 4979|      0|        return read_string_impl(
 4980|      0|            range,
 4981|      0|            read_until_code_units(
 4982|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|      0|            value);
 4984|     30|    }
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS0_6detail11mp_identityINDTcl4implISE_EEE4typeEE4typeE:
 2081|     90|{
 2082|       |    if constexpr (ranges::common_range<Range>) {
 2083|       |        return std::find(range.begin(), range.end(), cu);
 2084|       |    }
 2085|     90|    else {
 2086|     90|        auto first = range.begin();
 2087|  2.12k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2087:16): [True: 2.04k, False: 84]
  ------------------
 2088|  2.04k|            if (*first == cu) {
  ------------------
  |  Branch (2088:17): [True: 6, False: 2.03k]
  ------------------
 2089|      6|                return first;
 2090|      6|            }
 2091|  2.04k|        }
 2092|     84|        return first;
 2093|     90|    }
 2094|     90|}
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5073|     26|    {
 5074|     26|        return read_impl(
 5075|     26|            range,
 5076|     26|            [&](const auto& rng) {
 5077|     26|                return read_string_impl(rng, read_all(rng), value);
 5078|     26|            },
 5079|     26|            detail::priority_tag<1>{});
 5080|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5100|     26|    {
 5101|     26|        return read_cb(range);
 5102|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5076|     26|            [&](const auto& rng) {
 5077|     26|                return read_string_impl(rng, read_all(rng), value);
 5078|     26|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1963|     78|{
 1964|     78|    return ranges::next(range.begin(), range.end());
 1965|     78|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     78|    {
  313|     78|        ranges::advance(x, bound);
  314|     78|        return x;
  315|     78|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     78|    {
  275|     78|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     78|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     78|    {
  203|  1.37k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.29k, False: 78]
  ------------------
  204|  1.29k|            ++i;
  205|  1.29k|        }
  206|     78|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5174|    180|    {
 5175|    180|        auto it = read_source_impl(range, {specs});
 5176|    180|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10, False: 170]
  |  |  ------------------
  ------------------
 5177|     10|            return unexpected(it.error());
 5178|     10|        }
 5179|       |
 5180|    170|        return read_string_impl(range, *it, value);
 5181|    180|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5277|    540|    {
 5278|    540|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|    540|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|    540|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|    540|    do {                                                            \
  |  | 3985|    540|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 540]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    540|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|    540|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|    540|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 348, False: 192]
  ------------------
 5286|    348|            const auto cb = [&](char32_t cp) {
 5287|    348|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|    348|            };
 5289|       |
 5290|    348|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 198, False: 150]
  ------------------
 5291|    198|                auto it = read_until_code_point(range, cb);
 5292|    198|                return check_nonempty(it, range);
 5293|    198|            }
 5294|    150|            auto it = read_while_code_point(range, cb);
 5295|    150|            return check_nonempty(it, range);
 5296|    348|        }
 5297|       |
 5298|    192|        const auto cb = [&](SourceCharT ch) {
 5299|    192|            return cb_wrapper.on_ascii_only(ch);
 5300|    192|        };
 5301|       |
 5302|    192|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 102, False: 90]
  ------------------
 5303|    102|            auto it = read_until_code_unit(range, cb);
 5304|    102|            return check_nonempty(it, range);
 5305|    102|        }
 5306|     90|        auto it = read_while_code_unit(range, cb);
 5307|     90|        return check_nonempty(it, range);
 5308|    192|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|    348|        : m_fptr([](storage fn,
  753|    348|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    348|              cvref<T> obj = *get<T>(fn);
  755|    348|              if constexpr (std::is_void_v<R>) {
  756|    348|                  obj(static_cast<decltype(args)>(args)...);
  757|    348|              }
  758|    348|              else {
  759|    348|                  return obj(static_cast<decltype(args)>(args)...);
  760|    348|              }
  761|    348|          }),
  762|    348|          m_storage(std::addressof(f))
  763|    348|    {
  764|    348|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  753|  4.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  4.72k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  4.72k|              else {
  759|  4.72k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  4.72k|              }
  761|  4.72k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  689|  4.72k|    {
  690|  4.72k|        if constexpr (std::is_const_v<T>) {
  691|  4.72k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  4.72k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5286|  4.72k|            const auto cb = [&](char32_t cp) {
 5287|  4.72k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|  4.72k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  671|    348|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    348|        {
  673|    348|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5313|    540|    {
 5314|    540|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 30, False: 510]
  ------------------
 5315|     30|            return detail::unexpected_scan_error(
 5316|     30|                scan_error::invalid_scanned_value,
 5317|     30|                "No characters matched in [character set]");
 5318|     30|        }
 5319|       |
 5320|    510|        return it;
 5321|    540|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|    192|        : m_fptr([](storage fn,
  753|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    192|              cvref<T> obj = *get<T>(fn);
  755|    192|              if constexpr (std::is_void_v<R>) {
  756|    192|                  obj(static_cast<decltype(args)>(args)...);
  757|    192|              }
  758|    192|              else {
  759|    192|                  return obj(static_cast<decltype(args)>(args)...);
  760|    192|              }
  761|    192|          }),
  762|    192|          m_storage(std::addressof(f))
  763|    192|    {
  764|    192|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  753|  1.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.72k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.72k|              else {
  759|  1.72k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.72k|              }
  761|  1.72k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  689|  1.72k|    {
  690|  1.72k|        if constexpr (std::is_const_v<T>) {
  691|  1.72k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.72k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5298|  1.72k|        const auto cb = [&](SourceCharT ch) {
 5299|  1.72k|            return cb_wrapper.on_ascii_only(ch);
 5300|  1.72k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  671|    192|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    192|        {
  673|    192|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4884|    170|{
 4885|    170|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    170|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    170|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 4, False: 166]
  ------------------
 4889|      4|        return detail::unexpected_scan_error(
 4890|      4|            scan_error::invalid_scanned_value,
 4891|      4|            "Invalid encoding in scanned string");
 4892|      4|    }
 4893|       |
 4894|    166|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    166|    do {                                                            \
  |  | 3985|    166|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 166]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    166|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    166|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    166|    static_cast<    \
  |  | 1084|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    166|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|    608|    {
 5397|    608|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    608|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    608|        return read_impl(range, specs, value);
 5399|    608|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|    608|    {
 5417|    608|        SCN_CLANG_PUSH
 5418|    608|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    608|        switch (m_type) {
 5421|    380|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 380, False: 228]
  ------------------
 5422|    380|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 32, False: 576]
  ------------------
 5425|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     32|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 608]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 196, False: 412]
  ------------------
 5432|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    196|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 608]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 608]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 608]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    608|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    608|        }
 5453|       |
 5454|    608|        SCN_CLANG_POP
 5455|    608|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|    880|    {
 4951|    880|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    880|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|    912|{
 4885|    912|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    912|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    912|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 246, False: 666]
  ------------------
 4889|    246|        return detail::unexpected_scan_error(
 4890|    246|            scan_error::invalid_scanned_value,
 4891|    246|            "Invalid encoding in scanned string");
 4892|    246|    }
 4893|       |
 4894|    666|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    666|    do {                                                            \
  |  | 3985|    666|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    666|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 666]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    666|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    666|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    666|    static_cast<    \
  |  | 1084|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    666|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|    838|{
 3191|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|       |        dest.assign(source.view());
 3193|       |    }
 3194|    838|    else {
 3195|    838|        return transcode_impl(source.view(), dest);
 3196|    838|    }
 3197|       |
 3198|      0|    return {};
 3199|    838|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2247|  2.64k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|  2.64k|    else {
 2257|  2.64k|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|  2.64k|        return read_until_code_point(
 2269|  2.64k|            ranges::subrange{it, range.end()},
 2270|  2.64k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|  2.64k|    }
 2272|  2.64k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|  2.64k|        : m_fptr([](storage fn,
  753|  2.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.64k|              cvref<T> obj = *get<T>(fn);
  755|  2.64k|              if constexpr (std::is_void_v<R>) {
  756|  2.64k|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.64k|              }
  758|  2.64k|              else {
  759|  2.64k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.64k|              }
  761|  2.64k|          }),
  762|  2.64k|          m_storage(std::addressof(f))
  763|  2.64k|    {
  764|  2.64k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|  21.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  21.8k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  21.8k|              else {
  759|  21.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  21.8k|              }
  761|  21.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|  21.8k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  21.8k|        else if constexpr (std::is_object_v<T>) {
  694|  21.8k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  21.8k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2270|  21.8k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|  2.64k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  2.64k|        {
  668|  2.64k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4971|     32|    {
 4972|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 32, False: 0]
  ------------------
 4973|     32|            return read_string_impl(
 4974|     32|                range,
 4975|     32|                read_until_code_unit(
 4976|     32|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     32|                value);
 4978|     32|        }
 4979|      0|        return read_string_impl(
 4980|      0|            range,
 4981|      0|            read_until_code_units(
 4982|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|      0|            value);
 4984|     32|    }
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS0_6detail11mp_identityINDTcl4implISC_EEE4typeEE4typeE:
 2081|     96|{
 2082|     96|    if constexpr (ranges::common_range<Range>) {
 2083|     96|        return std::find(range.begin(), range.end(), cu);
 2084|       |    }
 2085|       |    else {
 2086|       |        auto first = range.begin();
 2087|       |        for (; first != range.end(); ++first) {
 2088|       |            if (*first == cu) {
 2089|       |                return first;
 2090|       |            }
 2091|       |        }
 2092|       |        return first;
 2093|       |    }
 2094|     96|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|    196|    {
 5175|    196|        auto it = read_source_impl(range, {specs});
 5176|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18, False: 178]
  |  |  ------------------
  ------------------
 5177|     18|            return unexpected(it.error());
 5178|     18|        }
 5179|       |
 5180|    178|        return read_string_impl(range, *it, value);
 5181|    196|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5277|    588|    {
 5278|    588|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|    588|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|    588|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|    588|    do {                                                            \
  |  | 3985|    588|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 588]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    588|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|    588|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|    588|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 402, False: 186]
  ------------------
 5286|    402|            const auto cb = [&](char32_t cp) {
 5287|    402|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|    402|            };
 5289|       |
 5290|    402|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 210, False: 192]
  ------------------
 5291|    210|                auto it = read_until_code_point(range, cb);
 5292|    210|                return check_nonempty(it, range);
 5293|    210|            }
 5294|    192|            auto it = read_while_code_point(range, cb);
 5295|    192|            return check_nonempty(it, range);
 5296|    402|        }
 5297|       |
 5298|    186|        const auto cb = [&](SourceCharT ch) {
 5299|    186|            return cb_wrapper.on_ascii_only(ch);
 5300|    186|        };
 5301|       |
 5302|    186|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 90, False: 96]
  ------------------
 5303|     90|            auto it = read_until_code_unit(range, cb);
 5304|     90|            return check_nonempty(it, range);
 5305|     90|        }
 5306|     96|        auto it = read_while_code_unit(range, cb);
 5307|     96|        return check_nonempty(it, range);
 5308|    186|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|    402|        : m_fptr([](storage fn,
  753|    402|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    402|              cvref<T> obj = *get<T>(fn);
  755|    402|              if constexpr (std::is_void_v<R>) {
  756|    402|                  obj(static_cast<decltype(args)>(args)...);
  757|    402|              }
  758|    402|              else {
  759|    402|                  return obj(static_cast<decltype(args)>(args)...);
  760|    402|              }
  761|    402|          }),
  762|    402|          m_storage(std::addressof(f))
  763|    402|    {
  764|    402|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  753|  4.98k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  4.98k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  4.98k|              else {
  759|  4.98k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  4.98k|              }
  761|  4.98k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  689|  4.98k|    {
  690|  4.98k|        if constexpr (std::is_const_v<T>) {
  691|  4.98k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  4.98k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5286|  4.98k|            const auto cb = [&](char32_t cp) {
 5287|  4.98k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|  4.98k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|    402|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    402|        {
  673|    402|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5313|    588|    {
 5314|    588|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 54, False: 534]
  ------------------
 5315|     54|            return detail::unexpected_scan_error(
 5316|     54|                scan_error::invalid_scanned_value,
 5317|     54|                "No characters matched in [character set]");
 5318|     54|        }
 5319|       |
 5320|    534|        return it;
 5321|    588|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|    186|        : m_fptr([](storage fn,
  753|    186|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    186|              cvref<T> obj = *get<T>(fn);
  755|    186|              if constexpr (std::is_void_v<R>) {
  756|    186|                  obj(static_cast<decltype(args)>(args)...);
  757|    186|              }
  758|    186|              else {
  759|    186|                  return obj(static_cast<decltype(args)>(args)...);
  760|    186|              }
  761|    186|          }),
  762|    186|          m_storage(std::addressof(f))
  763|    186|    {
  764|    186|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|  2.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.11k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  2.11k|              else {
  759|  2.11k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.11k|              }
  761|  2.11k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  689|  2.11k|    {
  690|  2.11k|        if constexpr (std::is_const_v<T>) {
  691|  2.11k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  2.11k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5298|  2.11k|        const auto cb = [&](SourceCharT ch) {
 5299|  2.11k|            return cb_wrapper.on_ascii_only(ch);
 5300|  2.11k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|    186|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    186|        {
  673|    186|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    178|{
 4885|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    178|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    178|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 6, False: 172]
  ------------------
 4889|      6|        return detail::unexpected_scan_error(
 4890|      6|            scan_error::invalid_scanned_value,
 4891|      6|            "Invalid encoding in scanned string");
 4892|      6|    }
 4893|       |
 4894|    172|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    172|    do {                                                            \
  |  | 3985|    172|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    172|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    172|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    172|    static_cast<    \
  |  | 1084|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    172|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5935|  1.73k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|  1.73k|                       std::is_same_v<T, std::wstring>) {
 5954|  1.73k|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  1.73k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|    308|{
 3171|    308|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|    308|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3172:13): [True: 308, False: 0]
  ------------------
 3173|    308|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1083|    308|    static_cast<    \
  |  | 1084|    308|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3174|    308|        }
 3175|      0|        else {
 3176|      0|            dest.assign(source.view());
 3177|      0|        }
 3178|       |    }
 3179|       |    else {
 3180|       |        return transcode_impl(source.view(), dest);
 3181|       |    }
 3182|       |
 3183|    308|    return {};
 3184|    308|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5396|    388|    {
 5397|    388|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    388|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    388|        return read_impl(range, specs, value);
 5399|    388|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5416|    388|    {
 5417|    388|        SCN_CLANG_PUSH
 5418|    388|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    388|        switch (m_type) {
 5421|    152|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 152, False: 236]
  ------------------
 5422|    152|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 30, False: 358]
  ------------------
 5425|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     30|                                                                   value);
 5427|       |
 5428|     26|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 26, False: 362]
  ------------------
 5429|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    180|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 180, False: 208]
  ------------------
 5432|    180|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    180|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 388]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 388]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 388]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    388|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    388|        }
 5453|       |
 5454|    388|        SCN_CLANG_POP
 5455|    388|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4950|    152|    {
 4951|    152|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    152|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4884|    208|{
 4885|    208|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    208|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    208|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 66, False: 142]
  ------------------
 4889|     66|        return detail::unexpected_scan_error(
 4890|     66|            scan_error::invalid_scanned_value,
 4891|     66|            "Invalid encoding in scanned string");
 4892|     66|    }
 4893|       |
 4894|    142|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    142|    do {                                                            \
  |  | 3985|    142|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 142]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    142|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    142|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    142|    static_cast<    \
  |  | 1084|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    142|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4971|     30|    {
 4972|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 30, False: 0]
  ------------------
 4973|     30|            return read_string_impl(
 4974|     30|                range,
 4975|     30|                read_until_code_unit(
 4976|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     30|                value);
 4978|     30|        }
 4979|      0|        return read_string_impl(
 4980|      0|            range,
 4981|      0|            read_until_code_units(
 4982|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|      0|            value);
 4984|     30|    }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5073|     26|    {
 5074|     26|        return read_impl(
 5075|     26|            range,
 5076|     26|            [&](const auto& rng) {
 5077|     26|                return read_string_impl(rng, read_all(rng), value);
 5078|     26|            },
 5079|     26|            detail::priority_tag<1>{});
 5080|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5100|     26|    {
 5101|     26|        return read_cb(range);
 5102|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5076|     26|            [&](const auto& rng) {
 5077|     26|                return read_string_impl(rng, read_all(rng), value);
 5078|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5174|    180|    {
 5175|    180|        auto it = read_source_impl(range, {specs});
 5176|    180|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10, False: 170]
  |  |  ------------------
  ------------------
 5177|     10|            return unexpected(it.error());
 5178|     10|        }
 5179|       |
 5180|    170|        return read_string_impl(range, *it, value);
 5181|    180|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4884|    170|{
 4885|    170|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    170|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    170|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 4, False: 166]
  ------------------
 4889|      4|        return detail::unexpected_scan_error(
 4890|      4|            scan_error::invalid_scanned_value,
 4891|      4|            "Invalid encoding in scanned string");
 4892|      4|    }
 4893|       |
 4894|    166|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    166|    do {                                                            \
  |  | 3985|    166|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 166]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    166|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    166|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    166|    static_cast<    \
  |  | 1084|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    166|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|    608|    {
 5397|    608|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    608|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    608|        return read_impl(range, specs, value);
 5399|    608|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|    608|    {
 5417|    608|        SCN_CLANG_PUSH
 5418|    608|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    608|        switch (m_type) {
 5421|    380|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 380, False: 228]
  ------------------
 5422|    380|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 32, False: 576]
  ------------------
 5425|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     32|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 608]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 196, False: 412]
  ------------------
 5432|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    196|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 608]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 608]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 608]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    608|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    608|        }
 5453|       |
 5454|    608|        SCN_CLANG_POP
 5455|    608|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|    880|    {
 4951|    880|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|    880|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|    912|{
 4885|    912|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    912|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    912|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 246, False: 666]
  ------------------
 4889|    246|        return detail::unexpected_scan_error(
 4890|    246|            scan_error::invalid_scanned_value,
 4891|    246|            "Invalid encoding in scanned string");
 4892|    246|    }
 4893|       |
 4894|    666|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    666|    do {                                                            \
  |  | 3985|    666|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    666|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 666]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    666|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    666|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    666|    static_cast<    \
  |  | 1084|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    666|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|    838|{
 3191|    838|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|    838|        dest.assign(source.view());
 3193|       |    }
 3194|       |    else {
 3195|       |        return transcode_impl(source.view(), dest);
 3196|       |    }
 3197|       |
 3198|    838|    return {};
 3199|    838|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4971|     32|    {
 4972|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4972:13): [True: 32, False: 0]
  ------------------
 4973|     32|            return read_string_impl(
 4974|     32|                range,
 4975|     32|                read_until_code_unit(
 4976|     32|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4977|     32|                value);
 4978|     32|        }
 4979|      0|        return read_string_impl(
 4980|      0|            range,
 4981|      0|            read_until_code_units(
 4982|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4983|      0|            value);
 4984|     32|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|    196|    {
 5175|    196|        auto it = read_source_impl(range, {specs});
 5176|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18, False: 178]
  |  |  ------------------
  ------------------
 5177|     18|            return unexpected(it.error());
 5178|     18|        }
 5179|       |
 5180|    178|        return read_string_impl(range, *it, value);
 5181|    196|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    178|{
 4885|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    178|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    178|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 6, False: 172]
  ------------------
 4889|      6|        return detail::unexpected_scan_error(
 4890|      6|            scan_error::invalid_scanned_value,
 4891|      6|            "Invalid encoding in scanned string");
 4892|      6|    }
 4893|       |
 4894|    172|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    172|    do {                                                            \
  |  | 3985|    172|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 172]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    172|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    172|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    172|    static_cast<    \
  |  | 1084|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    172|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5935|  1.73k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|  1.73k|                       std::is_same_v<T, std::wstring_view>) {
 5950|  1.73k|        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|       |                       std::is_same_v<T, std::wstring>) {
 5954|       |        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  1.73k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|    388|    {
 5397|    388|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    388|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    388|        return read_impl(range, specs, value);
 5399|    388|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|    388|    {
 5417|    388|        SCN_CLANG_PUSH
 5418|    388|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    388|        switch (m_type) {
 5421|    152|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 152, False: 236]
  ------------------
 5422|    152|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     30|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 30, False: 358]
  ------------------
 5425|     30|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     30|                                                                   value);
 5427|       |
 5428|     26|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 26, False: 362]
  ------------------
 5429|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    180|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 180, False: 208]
  ------------------
 5432|    180|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    180|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 388]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 388]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 388]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    388|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    388|        }
 5453|       |
 5454|    388|        SCN_CLANG_POP
 5455|    388|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4957|    152|    {
 4958|    152|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|    152|                                     value);
 4960|    152|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4903|    208|{
 4904|    208|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    208|    auto src = [&]() {
 4907|    208|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    208|            return make_contiguous_buffer(
 4909|    208|                ranges::subrange{range.begin().base(), result.base()});
 4910|    208|        }
 4911|    208|        else {
 4912|    208|            return make_contiguous_buffer(
 4913|    208|                ranges::subrange{range.begin(), result});
 4914|    208|        }
 4915|    208|    }();
 4916|    208|    using src_type = decltype(src);
 4917|       |
 4918|    208|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    208|    else {
 4931|    208|        const auto view = src.view();
 4932|    208|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    208|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 66, False: 142]
  ------------------
 4935|     66|            return detail::unexpected_scan_error(
 4936|     66|                scan_error::invalid_scanned_value,
 4937|     66|                "Invalid encoding in scanned string_view");
 4938|     66|        }
 4939|       |
 4940|    142|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    142|    static_cast<    \
  |  | 1084|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    208|    }
 4942|    208|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4906|    208|    auto src = [&]() {
 4907|    208|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    208|            return make_contiguous_buffer(
 4909|    208|                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|       |        else {
 4912|       |            return make_contiguous_buffer(
 4913|       |                ranges::subrange{range.begin(), result});
 4914|       |        }
 4915|    208|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4991|     30|    {
 4992|     30|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4992:13): [True: 30, False: 0]
  ------------------
 4993|     30|            return read_string_view_impl(
 4994|     30|                range,
 4995|     30|                read_until_code_unit(
 4996|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4997|     30|                value);
 4998|     30|        }
 4999|      0|        return read_string_view_impl(
 5000|      0|            range,
 5001|      0|            read_until_code_units(
 5002|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 5003|      0|            value);
 5004|     30|    }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 5085|     26|    {
 5086|     26|        return read_impl(
 5087|     26|            range,
 5088|     26|            [&](const auto& rng) {
 5089|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5090|     26|            },
 5091|     26|            detail::priority_tag<1>{});
 5092|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5100|     26|    {
 5101|     26|        return read_cb(range);
 5102|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5088|     26|            [&](const auto& rng) {
 5089|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5090|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5188|    180|    {
 5189|    180|        auto it = read_source_impl(range, {specs});
 5190|    180|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10, False: 170]
  |  |  ------------------
  ------------------
 5191|     10|            return unexpected(it.error());
 5192|     10|        }
 5193|       |
 5194|    170|        return read_string_view_impl(range, *it, value);
 5195|    180|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4903|    170|{
 4904|    170|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    170|    auto src = [&]() {
 4907|    170|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    170|            return make_contiguous_buffer(
 4909|    170|                ranges::subrange{range.begin().base(), result.base()});
 4910|    170|        }
 4911|    170|        else {
 4912|    170|            return make_contiguous_buffer(
 4913|    170|                ranges::subrange{range.begin(), result});
 4914|    170|        }
 4915|    170|    }();
 4916|    170|    using src_type = decltype(src);
 4917|       |
 4918|    170|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    170|    else {
 4931|    170|        const auto view = src.view();
 4932|    170|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    170|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 4, False: 166]
  ------------------
 4935|      4|            return detail::unexpected_scan_error(
 4936|      4|                scan_error::invalid_scanned_value,
 4937|      4|                "Invalid encoding in scanned string_view");
 4938|      4|        }
 4939|       |
 4940|    166|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    166|    static_cast<    \
  |  | 1084|    166|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    170|    }
 4942|    170|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4906|    170|    auto src = [&]() {
 4907|    170|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    170|            return make_contiguous_buffer(
 4909|    170|                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|       |        else {
 4912|       |            return make_contiguous_buffer(
 4913|       |                ranges::subrange{range.begin(), result});
 4914|       |        }
 4915|    170|    }();
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5396|    608|    {
 5397|    608|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    608|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|    608|        return read_impl(range, specs, value);
 5399|    608|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5416|    608|    {
 5417|    608|        SCN_CLANG_PUSH
 5418|    608|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|    608|        switch (m_type) {
 5421|    380|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 380, False: 228]
  ------------------
 5422|    380|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 32, False: 576]
  ------------------
 5425|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|     32|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 608]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 196, False: 412]
  ------------------
 5432|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|    196|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 608]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 608]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 608]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|    608|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|    608|        }
 5453|       |
 5454|    608|        SCN_CLANG_POP
 5455|    608|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4957|    880|    {
 4958|    880|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|    880|                                     value);
 4960|    880|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4903|    912|{
 4904|    912|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    912|    auto src = [&]() {
 4907|    912|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    912|            return make_contiguous_buffer(
 4909|    912|                ranges::subrange{range.begin().base(), result.base()});
 4910|    912|        }
 4911|    912|        else {
 4912|    912|            return make_contiguous_buffer(
 4913|    912|                ranges::subrange{range.begin(), result});
 4914|    912|        }
 4915|    912|    }();
 4916|    912|    using src_type = decltype(src);
 4917|       |
 4918|    912|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    912|    else {
 4931|    912|        const auto view = src.view();
 4932|    912|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    912|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 246, False: 666]
  ------------------
 4935|    246|            return detail::unexpected_scan_error(
 4936|    246|                scan_error::invalid_scanned_value,
 4937|    246|                "Invalid encoding in scanned string_view");
 4938|    246|        }
 4939|       |
 4940|    666|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    666|    static_cast<    \
  |  | 1084|    666|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    912|    }
 4942|    912|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4906|    912|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|    912|        else {
 4912|    912|            return make_contiguous_buffer(
 4913|    912|                ranges::subrange{range.begin(), result});
 4914|    912|        }
 4915|    912|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4991|     32|    {
 4992|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4992:13): [True: 32, False: 0]
  ------------------
 4993|     32|            return read_string_view_impl(
 4994|     32|                range,
 4995|     32|                read_until_code_unit(
 4996|     32|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4997|     32|                value);
 4998|     32|        }
 4999|      0|        return read_string_view_impl(
 5000|      0|            range,
 5001|      0|            read_until_code_units(
 5002|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 5003|      0|            value);
 5004|     32|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5188|    196|    {
 5189|    196|        auto it = read_source_impl(range, {specs});
 5190|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18, False: 178]
  |  |  ------------------
  ------------------
 5191|     18|            return unexpected(it.error());
 5192|     18|        }
 5193|       |
 5194|    178|        return read_string_view_impl(range, *it, value);
 5195|    196|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4903|    178|{
 4904|    178|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    178|    auto src = [&]() {
 4907|    178|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    178|            return make_contiguous_buffer(
 4909|    178|                ranges::subrange{range.begin().base(), result.base()});
 4910|    178|        }
 4911|    178|        else {
 4912|    178|            return make_contiguous_buffer(
 4913|    178|                ranges::subrange{range.begin(), result});
 4914|    178|        }
 4915|    178|    }();
 4916|    178|    using src_type = decltype(src);
 4917|       |
 4918|    178|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    178|    else {
 4931|    178|        const auto view = src.view();
 4932|    178|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    178|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 6, False: 172]
  ------------------
 4935|      6|            return detail::unexpected_scan_error(
 4936|      6|                scan_error::invalid_scanned_value,
 4937|      6|                "Invalid encoding in scanned string_view");
 4938|      6|        }
 4939|       |
 4940|    172|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    172|    static_cast<    \
  |  | 1084|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    178|    }
 4942|    178|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4906|    178|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|    178|        else {
 4912|    178|            return make_contiguous_buffer(
 4913|    178|                ranges::subrange{range.begin(), result});
 4914|    178|        }
 4915|    178|    }();
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1807|  8.53k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  8.53k|                  ranges::sized_range<Range>) {
 1811|  8.53k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  8.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  8.53k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1612|  8.53k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  8.53k|    {
 1614|  8.53k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2247|     78|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|     78|    else {
 2257|     78|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|     78|        return read_until_code_point(
 2269|     78|            ranges::subrange{it, range.end()},
 2270|     78|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|     78|    }
 2272|     78|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  752|     78|        : m_fptr([](storage fn,
  753|     78|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|     78|              cvref<T> obj = *get<T>(fn);
  755|     78|              if constexpr (std::is_void_v<R>) {
  756|     78|                  obj(static_cast<decltype(args)>(args)...);
  757|     78|              }
  758|     78|              else {
  759|     78|                  return obj(static_cast<decltype(args)>(args)...);
  760|     78|              }
  761|     78|          }),
  762|     78|          m_storage(std::addressof(f))
  763|     78|    {
  764|     78|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  753|  1.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.92k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.92k|              else {
  759|  1.92k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.92k|              }
  761|  1.92k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  689|  1.92k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.92k|        else if constexpr (std::is_object_v<T>) {
  694|  1.92k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.92k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2270|  1.92k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  666|     78|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|     78|        {
  668|     78|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1700|     78|    {
 1701|     78|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|     78|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1744|     78|    {
 1745|     78|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|     78|                                          std::basic_string<CharT>>) {
 1755|     78|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1085|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1756|     78|            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|     78|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4206|     98|    {
 4207|     98|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 98]
  ------------------
 4208|      0|            return std::copysign(value, static_cast<T>(-1.0));
 4209|      0|        }
 4210|     98|        return std::copysign(value, static_cast<T>(1.0));
 4211|     98|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|  5.68k|{
 5922|  5.68k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  5.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 5.68k]
  |  |  ------------------
  ------------------
 5923|      0|        return unexpected(e);
 5924|      0|    }
 5925|       |
 5926|  5.68k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 632, False: 5.05k]
  ------------------
 5927|    632|        return range.begin();
 5928|    632|    }
 5929|       |
 5930|  5.05k|    return skip_classic_whitespace(range);
 5931|  5.68k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|    632|    {
 3651|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|    632|        return read_default_with_base(range, value, 10);
 3653|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|    632|    {
 3651|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|    632|        return read_default_with_base(range, value, 10);
 3653|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5873|  1.24k|    {
 5874|  1.24k|        return true;
 5875|  1.24k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5891|    900|    {
 5892|    900|        detail::format_specs specs{};
 5893|    900|        specs.type = detail::presentation_type::int_hex;
 5894|       |
 5895|    900|        std::uintptr_t intvalue{};
 5896|    900|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3996|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 900, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    900|    }                                                  \
  |  |  |  | 3995|    900|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5897|      0|                                                                intvalue, loc));
 5898|      0|        value = reinterpret_cast<void*>(intvalue);
 5899|      0|        return result;
 5900|    900|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3213|  1.57k|    {
 3214|  1.57k|        return true;
 3215|  1.57k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5626|    632|    {
 5627|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5628|       |
 5629|    632|        return bool_reader<CharT>{}.read_classic(range, value);
 5630|    632|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5470|  1.13k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5476|  1.04k|    {
 5477|  1.04k|        scan_error err{scan_error::invalid_scanned_value,
 5478|  1.04k|                       "Failed to read boolean"};
 5479|       |
 5480|  1.04k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5480:13): [True: 918, False: 128]
  ------------------
 5481|    918|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5481:22): [True: 0, False: 918]
  ------------------
 5482|      0|                return *r;
 5483|      0|            }
 5484|    918|            else {
 5485|    918|                err = r.error();
 5486|    918|            }
 5487|    918|        }
 5488|       |
 5489|  1.04k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5489:13): [True: 1.02k, False: 22]
  ------------------
 5490|  1.02k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5490:22): [True: 0, False: 1.02k]
  ------------------
 5491|      0|                return *r;
 5492|      0|            }
 5493|  1.02k|            else {
 5494|  1.02k|                err = r.error();
 5495|  1.02k|            }
 5496|  1.02k|        }
 5497|       |
 5498|  1.04k|        return unexpected(err);
 5499|  1.04k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5505|    930|    {
 5506|    930|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5506:18): [True: 0, False: 930]
  ------------------
 5507|      0|            value = false;
 5508|      0|            return *r;
 5509|      0|        }
 5510|    930|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5510:18): [True: 0, False: 930]
  ------------------
 5511|      0|            value = true;
 5512|      0|            return *r;
 5513|      0|        }
 5514|       |
 5515|    930|        return detail::unexpected_scan_error(
 5516|    930|            scan_error::invalid_scanned_value,
 5517|    930|            "Failed to read numeric boolean value: No match");
 5518|    930|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5523|  1.02k|    {
 5524|  1.02k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5524:18): [True: 0, False: 1.02k]
  ------------------
 5525|      0|            value = true;
 5526|      0|            return *r;
 5527|      0|        }
 5528|  1.02k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5528:18): [True: 0, False: 1.02k]
  ------------------
 5529|      0|            value = false;
 5530|      0|            return *r;
 5531|      0|        }
 5532|       |
 5533|  1.02k|        return detail::unexpected_scan_error(
 5534|  1.02k|            scan_error::invalid_scanned_value,
 5535|  1.02k|            "Failed to read textual boolean value: No match");
 5536|  1.02k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2355|  2.04k|{
 2356|  2.04k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  2.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 100, False: 1.94k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    100|    }                                                  \
  |  |  |  | 3995|  2.04k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2357|  1.94k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2358|  1.94k|                    .transform_error(make_eof_parse_error));
 2359|       |
 2360|  1.94k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2361|  1.94k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2362|  1.94k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1014|  1.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.94k, False: 0]
  |  |  ------------------
  ------------------
 2363|  1.94k|            return unexpected(parse_error::error);
 2364|  1.94k|        }
 2365|      0|        return it;
 2366|       |    }
 2367|       |    else {
 2368|       |        auto range_it = range.begin();
 2369|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2370|       |            if (SCN_UNLIKELY(*range_it !=
 2371|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2372|       |                return unexpected(parse_error::error);
 2373|       |            }
 2374|       |        }
 2375|       |        return it;
 2376|       |    }
 2377|  1.94k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3773|    632|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3759|  1.13k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|    632|    {
 4280|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|    632|        float_reader<CharT> rd{};
 4283|    632|        return read_impl<Range>(
 4284|    632|            range, rd,
 4285|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4286|    632|                return r.read_source(SCN_FWD(args)...);
 4287|    632|            },
 4288|    632|            value);
 4289|    632|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|    632|        : m_fptr([](storage fn,
  753|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    632|              cvref<T> obj = *get<T>(fn);
  755|    632|              if constexpr (std::is_void_v<R>) {
  756|    632|                  obj(static_cast<decltype(args)>(args)...);
  757|    632|              }
  758|    632|              else {
  759|    632|                  return obj(static_cast<decltype(args)>(args)...);
  760|    632|              }
  761|    632|          }),
  762|    632|          m_storage(std::addressof(f))
  763|    632|    {
  764|    632|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|    632|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    632|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    632|              else {
  759|    632|                  return obj(static_cast<decltype(args)>(args)...);
  760|    632|              }
  761|    632|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|    632|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    632|        else if constexpr (std::is_object_v<T>) {
  694|    632|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    632|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|    632|            [](float_reader<CharT>& r, auto&&... args) {
 4286|    632|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|    632|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|    632|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    632|        {
  668|    632|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|    632|    {
 5386|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|    632|    {
 5386|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|    632|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    632|                          basic_contiguous_scan_context<char_type>>) {
 6014|    632|            auto rd = make_reader<T, char_type>();
 6015|    632|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    632|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6001|    632|    {
 6002|    632|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    632|                        .transform_error(make_eof_scan_error));
 6004|    632|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    632|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5385|    632|    {
 5386|    632|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    632|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|    632|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|    632|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3047|  50.5k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|  50.5k|    static_cast<    \
  |  | 1084|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|  50.5k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|  50.5k|          m_current(m_range.begin())
 3050|  50.5k|    {
 3051|  50.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3059|   107k|    {
 3060|   107k|        return m_range.end();
 3061|   107k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1342|  33.7k|{
 1343|       |    // TODO: optimize
 1344|  33.7k|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1079|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1345|  33.7k|    auto res = get_next_code_point(str);
 1346|  33.7k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1347|  33.7k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3074|  36.5k|    {
 3075|  36.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|  36.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  36.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|  36.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|  36.5k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 36.5k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|  36.5k|        }
 3081|  36.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  36.5k|    static_cast<    \
  |  | 1084|  36.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|  36.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3064|  35.7k|    {
 3065|  35.7k|        return ranges::subrange{begin(), end()};
 3066|  35.7k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2276|  8.53k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|  8.53k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|  8.53k|        auto buf = make_contiguous_buffer(range);
 2281|  8.53k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|  8.53k|        return ranges::next(range.begin(),
 2283|  8.53k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|  8.53k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6173|  5.01k|    {
 6174|  5.01k|        const bool need_skipped_width =
 6175|  5.01k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 90, False: 4.92k]
  |  Branch (6175:33): [True: 4.92k, False: 0]
  ------------------
 6176|  5.01k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  5.01k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 258, False: 4.75k]
  ------------------
 6180|  5.01k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 972, False: 3.78k]
  ------------------
 6181|  1.23k|            return skip_fill(rng, specs.precision, specs.fill,
 6182|  1.23k|                             need_skipped_width);
 6183|  1.23k|        }
 6184|  3.78k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 3.58k, False: 196]
  |  Branch (6184:56): [True: 2.26k, False: 1.31k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  2.26k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 2.26k, False: 0]
  ------------------
 6188|  2.26k|                auto max_width_view = take_width(rng, specs.precision);
 6189|  2.26k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|  2.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 238, False: 2.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    238|    }                                                  \
  |  |  |  | 3995|  2.26k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|  2.03k|                                  .transform_error(make_eof_scan_error));
 6191|  2.03k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|  2.26k|            }
 6193|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  2.26k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|                            make_eof_scan_error));
 6195|       |
 6196|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|      0|            return result_type{it, 0};
 6204|      0|        }
 6205|       |
 6206|  1.51k|        return result_type{rng.begin(), 0};
 6207|  3.78k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 6088|  1.23k|{
 6089|  1.23k|    using char_type = detail::char_t<Range>;
 6090|  1.23k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6091|       |
 6092|  1.23k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6092:9): [True: 492, False: 738]
  ------------------
 6093|    492|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6094|    492|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6095|       |
 6096|    492|        if (max_width == 0) {
  ------------------
  |  Branch (6096:13): [True: 0, False: 492]
  ------------------
 6097|      0|            auto it = read_while_code_unit(range, pred);
 6098|       |
 6099|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6099:17): [True: 0, False: 0]
  ------------------
 6100|      0|                auto prefix_width =
 6101|      0|                    static_cast<std::ptrdiff_t>(
 6102|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6103|      0|                    ranges::distance(range.begin(), it);
 6104|      0|                return result_type{it, prefix_width};
 6105|      0|            }
 6106|      0|            return result_type{it, 0};
 6107|      0|        }
 6108|       |
 6109|    492|        auto max_width_view = take_width(range, max_width);
 6110|    492|        auto w_it = read_while_code_unit(max_width_view, pred);
 6111|       |
 6112|    492|        if (want_skipped_width) {
  ------------------
  |  Branch (6112:13): [True: 492, False: 0]
  ------------------
 6113|    492|            return result_type{w_it.base(), max_width - w_it.count()};
 6114|    492|        }
 6115|      0|        return result_type{w_it.base(), 0};
 6116|    492|    }
 6117|       |
 6118|    738|    const auto fill_chars = fill.template get_code_units<char_type>();
 6119|    738|    if (max_width == 0) {
  ------------------
  |  Branch (6119:9): [True: 0, False: 738]
  ------------------
 6120|      0|        auto it = read_while_code_units(range, fill_chars);
 6121|       |
 6122|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 0]
  ------------------
 6123|      0|            auto prefix_width =
 6124|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6125|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6126|      0|            return result_type{it, prefix_width};
 6127|      0|        }
 6128|      0|        return result_type{it, 0};
 6129|      0|    }
 6130|       |
 6131|    738|    auto max_width_view = take_width(range, max_width);
 6132|    738|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6133|       |
 6134|    738|    if (want_skipped_width) {
  ------------------
  |  Branch (6134:9): [True: 738, False: 0]
  ------------------
 6135|    738|        return result_type{w_it.base(), max_width - w_it.count()};
 6136|    738|    }
 6137|      0|    return result_type{w_it.base(), 0};
 6138|    738|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  752|    492|        : m_fptr([](storage fn,
  753|    492|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    492|              cvref<T> obj = *get<T>(fn);
  755|    492|              if constexpr (std::is_void_v<R>) {
  756|    492|                  obj(static_cast<decltype(args)>(args)...);
  757|    492|              }
  758|    492|              else {
  759|    492|                  return obj(static_cast<decltype(args)>(args)...);
  760|    492|              }
  761|    492|          }),
  762|    492|          m_storage(std::addressof(f))
  763|    492|    {
  764|    492|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  753|    708|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    708|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    708|              else {
  759|    708|                  return obj(static_cast<decltype(args)>(args)...);
  760|    708|              }
  761|    708|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  689|    708|    {
  690|    708|        if constexpr (std::is_const_v<T>) {
  691|    708|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    708|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 6094|    708|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|    492|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    492|        {
  673|    492|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|    492|{
 2134|    492|    return read_until_code_unit(range, std::not_fn(pred));
 2135|    492|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|    492|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|    492|    else {
 2105|    492|        auto first = range.begin();
 2106|    744|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 708, False: 36]
  ------------------
 2107|    708|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 456, False: 252]
  ------------------
 2108|    456|                return first;
 2109|    456|            }
 2110|    708|        }
 2111|     36|        return first;
 2112|    492|    }
 2113|    492|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2982|  5.76k|    {
 2983|  5.76k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2984|  5.76k|                                      m_count};
 2985|  5.76k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2887|  24.3k|    {
 2888|  24.3k|        return view;
 2889|  24.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2543|  5.76k|        : m_current(x), m_end(s), m_count(n)
 2544|  5.76k|    {
 2545|  5.76k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2953|  8.22k|        {
 2954|  8.22k|            return !(y == x);
 2955|  8.22k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2940|  17.8k|        {
 2941|  17.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2941:21): [True: 1.15k, False: 16.7k]
  |  Branch (2941:39): [True: 690, False: 468]
  ------------------
 2942|  17.8k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2942:20): [True: 34, False: 17.1k]
  ------------------
 2943|  17.8k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2943:21): [True: 2.14k, False: 14.9k]
  |  Branch (2943:39): [True: 1.53k, False: 608]
  ------------------
 2944|  17.1k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2944:21): [True: 0, False: 1.53k]
  ------------------
 2945|  17.8k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2583|  3.30k|    {
 2584|  3.30k|        return m_multibyte_left;
 2585|  3.30k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2588|  1.53k|    {
 2589|  1.53k|        assert(count() != 0 || multibyte_left() != 0);
 2590|  1.53k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2591|  1.53k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2815|  9.89k|    {
 2816|  9.89k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1014|  9.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.89k]
  |  |  ------------------
  ------------------
 2817|      0|            return 0;
 2818|      0|        }
 2819|       |
 2820|  9.89k|        if (cplen == 1) {
  ------------------
  |  Branch (2820:13): [True: 4.95k, False: 4.94k]
  ------------------
 2821|  4.95k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|  4.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2822|  4.95k|            auto cp = static_cast<char32_t>(*m_current);
 2823|  4.95k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2824|  4.95k|        }
 2825|       |
 2826|  4.94k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2827|  4.94k|                                           cplen);
 2828|  4.94k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 2829|      0|            return 0;
 2830|      0|        }
 2831|       |
 2832|  4.94k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2833|  4.94k|        return static_cast<difference_type>(calculate_text_width(
 2834|  4.94k|            std::basic_string_view<value_type>{cp_str.data(), cp_str.size()}));
 2835|  4.94k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2809|  9.89k|    {
 2810|  9.89k|        return static_cast<difference_type>(
 2811|  9.89k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2812|  9.89k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2988|  12.8k|    {
 2989|  12.8k|        return sentinel<true>{m_base.get().end()};
 2990|  12.8k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2921|  12.8k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1083|  12.8k|    static_cast<    \
  |  | 1084|  12.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2594|  11.6k|    {
 2595|  11.6k|        return *m_current;
 2596|  11.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2603|  15.7k|    {
 2604|  15.7k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2605|  15.7k|        _increment_current();
 2606|  15.7k|        return *this;
 2607|  15.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2838|  15.7k|    {
 2839|  15.7k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2839:13): [True: 8.35k, False: 7.37k]
  ------------------
 2840|  8.35k|            auto cplen = _get_cp_length_at_current();
 2841|  8.35k|            m_multibyte_left = cplen - 1;
 2842|  8.35k|            m_count -= _get_width_at_current_cp_start(cplen);
 2843|  8.35k|        }
 2844|  7.37k|        else {
 2845|  7.37k|            --m_multibyte_left;
 2846|  7.37k|        }
 2847|       |
 2848|  15.7k|        ++m_current;
 2849|  15.7k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2194|    738|{
 2195|    738|    static_assert(ranges::common_range<CodeUnits>);
 2196|       |
 2197|    738|    auto it = range.begin();
 2198|  1.32k|    while (it != range.end()) {
  ------------------
  |  Branch (2198:12): [True: 1.28k, False: 34]
  ------------------
 2199|  1.28k|        auto r = read_exactly_n_code_units(
 2200|  1.28k|            ranges::subrange{it, range.end()},
 2201|  1.28k|            static_cast<std::ptrdiff_t>(needle.size()));
 2202|  1.28k|        if (!r) {
  ------------------
  |  Branch (2202:13): [True: 144, False: 1.14k]
  ------------------
 2203|    144|            return it;
 2204|    144|        }
 2205|  1.14k|        static_assert(
 2206|  1.14k|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2207|  1.14k|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2207:13): [True: 560, False: 582]
  ------------------
 2208|    560|            return it;
 2209|    560|        }
 2210|    582|        it = *r;
 2211|    582|    }
 2212|     34|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1080|     34|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|     34|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2213|     34|    return it;
 2214|     34|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1981|  1.28k|{
 1982|  1.28k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  1.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|  1.28k|    else {
 1993|  1.28k|        auto it = range.begin();
 1994|  1.28k|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 0, False: 1.28k]
  ------------------
 1995|      0|            return ranges::next(it, count);
 1996|      0|        }
 1997|       |
 1998|  5.01k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 3.86k, False: 1.14k]
  ------------------
 1999|  3.86k|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 144, False: 3.72k]
  ------------------
 2000|    144|                return unexpected(eof_error::eof);
 2001|    144|            }
 2002|  3.86k|        }
 2003|       |
 2004|  1.14k|        return it;
 2005|  1.28k|    }
 2006|  1.28k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1113|  1.28k|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|       |                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|       |        else {
 1125|       |            if (r.begin().stores_parent()) {
 1126|       |                return static_cast<size_t>(
 1127|       |                    r.begin().parent()->chars_available() -
 1128|       |                    r.begin().position());
 1129|       |            }
 1130|       |            return r.begin().contiguous_segment().size();
 1131|       |        }
 1132|       |    }
 1133|  1.28k|    else {
 1134|  1.28k|        SCN_UNUSED(r);
  ------------------
  |  | 1064|  1.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1135|  1.28k|        return 0;
 1136|  1.28k|    }
 1137|  1.28k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.26k|    {
  268|  2.26k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.26k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.26k|    {
  161|  2.26k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.26k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.26k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.26k|        else {
  169|  2.26k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.26k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.26k|        }
  173|  2.26k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2699|  9.68k|    {
 2700|  9.68k|        return !(a == b);
 2701|  9.68k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2691|  9.68k|    {
 2692|  9.68k|        return a.m_current == b.m_current;
 2693|  9.68k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 3004|  3.49k|    {
 3005|  3.49k|        return take_width_view{r, n};
 3006|  3.49k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2972|  3.49k|        : m_base(base), m_count(count)
 2973|  3.49k|    {
 2974|  3.49k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2884|  3.49k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|  2.26k|{
 3129|  2.26k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 2.26k, False: 0]
  ------------------
 3130|  2.26k|        auto it = read_while_classic_space(range);
 3131|  2.26k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  2.26k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 238, False: 2.03k]
  |  |  ------------------
  ------------------
 3133|    238|            return unexpected(e);
 3134|    238|        }
 3135|       |
 3136|  2.03k|        return it;
 3137|  2.26k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  2.26k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|  2.26k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  2.26k|    else {
 2286|  2.26k|        auto it = range.begin();
 2287|       |
 2288|  2.26k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|  2.26k|            auto seg = get_contiguous_beginning(range);
 2290|  2.26k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|  2.26k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 0, False: 2.26k]
  ------------------
 2292|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|      0|            }
 2294|  2.26k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|  2.26k|        }
 2296|       |
 2297|  2.26k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  2.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  2.26k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  2.26k|            return detail::is_cp_space(cp);
 2300|  2.26k|        });
 2301|  2.26k|    }
 2302|  2.26k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1054|  2.26k|{
 1055|  2.26k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|  2.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|       |                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|       |        else {
 1072|       |            return r.begin().contiguous_segment();
 1073|       |        }
 1074|       |    }
 1075|  2.26k|    else {
 1076|  2.26k|        return std::basic_string_view<detail::char_t<Range>>{};
 1077|  2.26k|    }
 1078|  2.26k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|  2.26k|{
 2242|  2.26k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  2.26k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|  2.26k|{
 2220|  2.26k|    auto it = range.begin();
 2221|  3.71k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 3.47k, False: 238]
  ------------------
 2222|  3.47k|        const auto val =
 2223|  3.47k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  3.47k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  3.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 3.47k, False: 0]
  |  |  ------------------
  ------------------
 2225|  3.47k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  3.47k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  3.47k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  3.47k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 2.03k, False: 1.44k]
  ------------------
 2229|  2.03k|                return it;
 2230|  2.03k|            }
 2231|  3.47k|        }
 2232|  1.44k|        it = val.iterator;
 2233|  1.44k|    }
 2234|       |
 2235|    238|    return it;
 2236|  2.26k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 2023|  3.47k|{
 2024|  3.47k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  3.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  3.47k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  3.47k|    auto it = range.begin();
 2028|  3.47k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  3.47k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.47k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  3.47k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 2.57k, False: 902]
  ------------------
 2037|  2.57k|        ++it;
 2038|  2.57k|        return {it, string_type(1, *range.begin())};
 2039|  2.57k|    }
 2040|       |
 2041|    902|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|    902|    return {it, string_type{range.begin(), it}};
 2043|  3.47k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  954|  5.74k|{
  955|  5.74k|    return is_range_eof(r.begin(), r.end());
  956|  5.74k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  938|  5.74k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  5.74k|    {
  948|  5.74k|        return begin == end;
  949|  5.74k|    }
  950|  5.74k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    902|    {
  283|    902|        return n - fn::impl_i_n_s(i, n, bound);
  284|    902|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    902|    {
  227|    902|        constexpr iter_difference_t<I> zero{0};
  228|    902|        iter_difference_t<I> counter{0};
  229|       |
  230|    902|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 902]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    902|        else {
  237|  3.34k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.44k, False: 902]
  |  Branch (237:34): [True: 2.44k, False: 0]
  ------------------
  238|  2.44k|                ++i;
  239|  2.44k|                ++counter;
  240|  2.44k|            }
  241|    902|        }
  242|       |
  243|    902|        return counter;
  244|    902|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 2014|  3.47k|    {
 2015|  3.47k|        return !codepoint.empty();
 2016|  3.47k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|  2.26k|        : m_fptr([](storage fn,
  753|  2.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.26k|              cvref<T> obj = *get<T>(fn);
  755|  2.26k|              if constexpr (std::is_void_v<R>) {
  756|  2.26k|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.26k|              }
  758|  2.26k|              else {
  759|  2.26k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.26k|              }
  761|  2.26k|          }),
  762|  2.26k|          m_storage(std::addressof(f))
  763|  2.26k|    {
  764|  2.26k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|  3.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  3.47k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  3.47k|              else {
  759|  3.47k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  3.47k|              }
  761|  3.47k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|  3.47k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  3.47k|        else if constexpr (std::is_object_v<T>) {
  694|  3.47k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  3.47k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|  3.47k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  3.47k|            return detail::is_cp_space(cp);
 2300|  3.47k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  2.26k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  2.26k|        {
  668|  2.26k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  960|  2.26k|{
  961|  2.26k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 238, False: 2.03k]
  |  |  ------------------
  ------------------
  962|    238|        return eof_error::eof;
  963|    238|    }
  964|  2.03k|    return eof_error::good;
  965|  2.26k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2575|  20.4k|    {
 2576|  20.4k|        return m_current;
 2577|  20.4k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2579|  39.8k|    {
 2580|  39.8k|        return m_count;
 2581|  39.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|  5.91k|    {
 6174|  5.91k|        const bool need_skipped_width =
 6175|  5.91k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 1.98k, False: 3.93k]
  |  Branch (6175:33): [True: 0, False: 3.93k]
  ------------------
 6176|  5.91k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  5.91k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 98, False: 5.81k]
  ------------------
 6180|  5.91k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 382, False: 5.43k]
  ------------------
 6181|    480|            return skip_fill(rng, specs.precision, specs.fill,
 6182|    480|                             need_skipped_width);
 6183|    480|        }
 6184|  5.43k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 4.69k, False: 738]
  |  Branch (6184:56): [True: 1.71k, False: 2.97k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  1.71k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 1.71k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|  3.43k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|  1.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 1.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  1.71k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|  3.43k|                            make_eof_scan_error));
 6195|       |
 6196|  3.43k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 1.09k, False: 622]
  ------------------
 6197|  1.09k|                return result_type{
 6198|  1.09k|                    it,
 6199|  1.09k|                    calculate_text_width(make_contiguous_buffer(
 6200|  1.09k|                                             ranges::subrange{rng.begin(), it})
 6201|  1.09k|                                             .view())};
 6202|  1.09k|            }
 6203|    622|            return result_type{it, 0};
 6204|  3.43k|        }
 6205|       |
 6206|  3.71k|        return result_type{rng.begin(), 0};
 6207|  5.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|  3.26k|    {
 6216|  3.26k|        const bool need_skipped_width =
 6217|  3.26k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 464, False: 2.79k]
  |  Branch (6217:33): [True: 1.41k, False: 1.38k]
  ------------------
 6218|  3.26k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  3.26k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 300, False: 2.96k]
  ------------------
 6221|  3.26k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 516, False: 2.44k]
  ------------------
 6222|    816|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 410, False: 406]
  ------------------
 6223|    816|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 154, False: 256]
  ------------------
 6224|    154|                return result_type{rng.begin(), 0};
 6225|    154|            }
 6226|    662|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|    662|                             specs.fill, need_skipped_width);
 6228|    816|        }
 6229|  2.44k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 2.30k, False: 136]
  ------------------
 6230|  2.44k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 1.99k, False: 318]
  ------------------
 6231|  2.44k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 200, False: 1.79k]
  |  Branch (6231:35): [True: 158, False: 42]
  ------------------
 6232|  1.99k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 692, False: 1.14k]
  ------------------
 6233|  1.83k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 568, False: 124]
  ------------------
 6234|    726|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 568, False: 158]
  ------------------
 6235|    568|                const auto initial_width =
 6236|    568|                    specs.precision - prefix_width - value_width;
 6237|    568|                auto max_width_view = take_width(rng, initial_width);
 6238|    568|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 568]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    568|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    568|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|    568|                                  .transform_error(make_eof_scan_error));
 6240|    568|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|    568|            }
 6242|    316|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 158]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    726|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    726|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|    316|                            make_eof_scan_error));
 6244|       |
 6245|    316|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 158, False: 0]
  ------------------
 6246|    158|                return result_type{
 6247|    158|                    it,
 6248|    158|                    calculate_text_width(make_contiguous_buffer(
 6249|    158|                                             ranges::subrange{rng.begin(), it})
 6250|    158|                                             .view())};
 6251|    158|            }
 6252|      0|            return result_type{it, 0};
 6253|    316|        }
 6254|  1.71k|        return result_type{rng.begin(), 0};
 6255|  2.44k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6325|  2.39k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.39k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.39k|            auto rd = make_reader<T, char_type>();
 6331|  2.39k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.39k|    do {                                                            \
  |  | 3985|  2.39k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.70k, False: 688]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.70k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.70k|        }                                                           \
  |  | 3988|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    688|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.39k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    688|    {
 6261|    688|        const bool need_skipped_width =
 6262|    688|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 210, False: 478]
  |  Branch (6262:33): [True: 388, False: 90]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    688|        auto it = rng.begin();
 6266|    688|        std::ptrdiff_t prefix_width = 0;
 6267|    688|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 392, False: 296]
  ------------------
 6268|    392|            auto max_width_view = take_width(rng, specs.precision);
 6269|    392|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 32, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     32|    }                                                  \
  |  |  |  | 3995|    392|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    360|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    360|            it = prefix_result.first.base();
 6272|    360|            prefix_width = prefix_result.second;
 6273|    360|        }
 6274|    296|        else {
 6275|    296|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    296|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    296|            std::tie(it, prefix_width) = prefix_result;
 6277|    296|        }
 6278|    656|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    656|        std::ptrdiff_t value_width = 0;
 6282|    656|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 360, False: 296]
  ------------------
 6283|    360|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 6, False: 354]
  ------------------
 6284|      6|                return detail::unexpected_scan_error(
 6285|      6|                    scan_error::invalid_fill,
 6286|      6|                    "Too many fill characters before value, "
 6287|      6|                    "precision exceeded before reading value");
 6288|      6|            }
 6289|       |
 6290|    354|            const auto initial_width = specs.precision - prefix_width;
 6291|    354|            auto max_width_view =
 6292|    354|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    354|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 354, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    354|    }                                                  \
  |  |  |  | 3995|    354|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|    296|        else {
 6298|    296|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 296, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    296|    }                                                  \
  |  | 3995|    296|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|      0|                                             specs, value, loc));
 6300|       |
 6301|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 0]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|      0|        }
 6307|       |
 6308|       |        // Read postfix
 6309|      0|        std::ptrdiff_t postfix_width = 0;
 6310|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 0, False: 0]
  ------------------
 6311|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6314|      0|                                 value_width));
 6315|      0|            std::tie(it, postfix_width) = postfix_result;
 6316|      0|        }
 6317|       |
 6318|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|      0|            specs, prefix_width, value_width, postfix_width));
 6320|      0|        return it;
 6321|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6325|  2.39k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.39k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.39k|            auto rd = make_reader<T, char_type>();
 6331|  2.39k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.39k|    do {                                                            \
  |  | 3985|  2.39k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.70k, False: 688]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.70k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.70k|        }                                                           \
  |  | 3988|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    688|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.39k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    688|    {
 6261|    688|        const bool need_skipped_width =
 6262|    688|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 210, False: 478]
  |  Branch (6262:33): [True: 388, False: 90]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    688|        auto it = rng.begin();
 6266|    688|        std::ptrdiff_t prefix_width = 0;
 6267|    688|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 392, False: 296]
  ------------------
 6268|    392|            auto max_width_view = take_width(rng, specs.precision);
 6269|    392|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 32, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     32|    }                                                  \
  |  |  |  | 3995|    392|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    360|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    360|            it = prefix_result.first.base();
 6272|    360|            prefix_width = prefix_result.second;
 6273|    360|        }
 6274|    296|        else {
 6275|    296|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    296|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    296|            std::tie(it, prefix_width) = prefix_result;
 6277|    296|        }
 6278|    656|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    656|        std::ptrdiff_t value_width = 0;
 6282|    656|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 360, False: 296]
  ------------------
 6283|    360|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 6, False: 354]
  ------------------
 6284|      6|                return detail::unexpected_scan_error(
 6285|      6|                    scan_error::invalid_fill,
 6286|      6|                    "Too many fill characters before value, "
 6287|      6|                    "precision exceeded before reading value");
 6288|      6|            }
 6289|       |
 6290|    354|            const auto initial_width = specs.precision - prefix_width;
 6291|    354|            auto max_width_view =
 6292|    354|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    354|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 354, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    354|    }                                                  \
  |  |  |  | 3995|    354|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|    296|        else {
 6298|    296|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 296, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    296|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    296|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    296|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    296|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    296|    }                                                  \
  |  | 3995|    296|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|      0|                                             specs, value, loc));
 6300|       |
 6301|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 0]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|      0|        }
 6307|       |
 6308|       |        // Read postfix
 6309|      0|        std::ptrdiff_t postfix_width = 0;
 6310|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 0, False: 0]
  ------------------
 6311|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6314|      0|                                 value_width));
 6315|      0|            std::tie(it, postfix_width) = postfix_result;
 6316|      0|        }
 6317|       |
 6318|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|      0|            specs, prefix_width, value_width, postfix_width));
 6320|      0|        return it;
 6321|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6325|  2.35k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.35k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.35k|            auto rd = make_reader<T, char_type>();
 6331|  2.35k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.35k|    do {                                                            \
  |  | 3985|  2.35k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.74k, False: 612]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.74k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.74k|        }                                                           \
  |  | 3988|  2.35k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    612|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.35k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5878|  2.35k|    {
 5879|  2.35k|        reader_error_handler eh{};
 5880|  2.35k|        detail::check_pointer_type_specs(specs, eh);
 5881|  2.35k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.74k, False: 612]
  |  |  ------------------
  ------------------
 5882|  1.74k|            return detail::unexpected_scan_error(
 5883|  1.74k|                scan_error::invalid_format_string, eh.m_msg);
 5884|  1.74k|        }
 5885|    612|        return {};
 5886|  2.35k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6260|    612|    {
 6261|    612|        const bool need_skipped_width =
 6262|    612|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 202, False: 410]
  |  Branch (6262:33): [True: 342, False: 68]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    612|        auto it = rng.begin();
 6266|    612|        std::ptrdiff_t prefix_width = 0;
 6267|    612|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 344, False: 268]
  ------------------
 6268|    344|            auto max_width_view = take_width(rng, specs.precision);
 6269|    344|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     24|    }                                                  \
  |  |  |  | 3995|    344|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    320|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    320|            it = prefix_result.first.base();
 6272|    320|            prefix_width = prefix_result.second;
 6273|    320|        }
 6274|    268|        else {
 6275|    268|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    268|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    268|            std::tie(it, prefix_width) = prefix_result;
 6277|    268|        }
 6278|    588|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    588|        std::ptrdiff_t value_width = 0;
 6282|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 320, False: 268]
  ------------------
 6283|    320|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 4, False: 316]
  ------------------
 6284|      4|                return detail::unexpected_scan_error(
 6285|      4|                    scan_error::invalid_fill,
 6286|      4|                    "Too many fill characters before value, "
 6287|      4|                    "precision exceeded before reading value");
 6288|      4|            }
 6289|       |
 6290|    316|            const auto initial_width = specs.precision - prefix_width;
 6291|    316|            auto max_width_view =
 6292|    316|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    316|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    316|    }                                                  \
  |  |  |  | 3995|    316|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|    268|        else {
 6298|    268|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 268, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    268|    }                                                  \
  |  | 3995|    268|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|      0|                                             specs, value, loc));
 6300|       |
 6301|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 0]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|      0|        }
 6307|       |
 6308|       |        // Read postfix
 6309|      0|        std::ptrdiff_t postfix_width = 0;
 6310|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 0, False: 0]
  ------------------
 6311|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6314|      0|                                 value_width));
 6315|      0|            std::tie(it, postfix_width) = postfix_result;
 6316|      0|        }
 6317|       |
 6318|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|      0|            specs, prefix_width, value_width, postfix_width));
 6320|      0|        return it;
 6321|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5908|    316|    {
 5909|    316|        SCN_UNUSED(specs);
  ------------------
  |  | 1064|    316|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5910|    316|        return read_default(range, value, loc);
 5911|    316|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5891|    316|    {
 5892|    316|        detail::format_specs specs{};
 5893|    316|        specs.type = detail::presentation_type::int_hex;
 5894|       |
 5895|    316|        std::uintptr_t intvalue{};
 5896|    316|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3996|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    316|    }                                                  \
  |  |  |  | 3995|    316|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5897|      0|                                                                intvalue, loc));
 5898|      0|        value = reinterpret_cast<void*>(intvalue);
 5899|      0|        return result;
 5900|    316|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5908|    268|    {
 5909|    268|        SCN_UNUSED(specs);
  ------------------
  |  | 1064|    268|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5910|    268|        return read_default(range, value, loc);
 5911|    268|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6325|  2.39k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.39k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.39k|            auto rd = make_reader<T, char_type>();
 6331|  2.39k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.39k|    do {                                                            \
  |  | 3985|  2.39k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.44k, False: 944]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.44k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.44k|        }                                                           \
  |  | 3988|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    944|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.39k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|  2.39k|    {
 3219|  2.39k|        reader_error_handler eh{};
 3220|  2.39k|        get_derived().check_specs_impl(specs, eh);
 3221|  2.39k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  2.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.44k, False: 944]
  |  |  ------------------
  ------------------
 3222|  1.44k|            return detail::unexpected_scan_error(
 3223|  1.44k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  1.44k|        }
 3225|    944|        return {};
 3226|  2.39k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3230|  2.39k|    {
 3231|  2.39k|        return static_cast<Derived&>(*this);
 3232|  2.39k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5619|  2.39k|    {
 5620|  2.39k|        detail::check_bool_type_specs(specs, eh);
 5621|  2.39k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    944|    {
 6261|    944|        const bool need_skipped_width =
 6262|    944|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 220, False: 724]
  |  Branch (6262:33): [True: 508, False: 216]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    944|        auto it = rng.begin();
 6266|    944|        std::ptrdiff_t prefix_width = 0;
 6267|    944|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 514, False: 430]
  ------------------
 6268|    514|            auto max_width_view = take_width(rng, specs.precision);
 6269|    514|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 36, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     36|    }                                                  \
  |  |  |  | 3995|    514|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    478|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    478|            it = prefix_result.first.base();
 6272|    478|            prefix_width = prefix_result.second;
 6273|    478|        }
 6274|    430|        else {
 6275|    430|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    430|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    430|            std::tie(it, prefix_width) = prefix_result;
 6277|    430|        }
 6278|    908|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    908|        std::ptrdiff_t value_width = 0;
 6282|    908|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 478, False: 430]
  ------------------
 6283|    478|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 10, False: 468]
  ------------------
 6284|     10|                return detail::unexpected_scan_error(
 6285|     10|                    scan_error::invalid_fill,
 6286|     10|                    "Too many fill characters before value, "
 6287|     10|                    "precision exceeded before reading value");
 6288|     10|            }
 6289|       |
 6290|    468|            const auto initial_width = specs.precision - prefix_width;
 6291|    468|            auto max_width_view =
 6292|    468|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    468|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    468|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    468|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    468|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 468, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    468|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    468|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    468|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    468|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    468|    }                                                  \
  |  |  |  | 3995|    468|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    468|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|    430|        else {
 6298|    430|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 430, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    430|    }                                                  \
  |  | 3995|    430|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|      0|                                             specs, value, loc));
 6300|       |
 6301|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 0]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|      0|        }
 6307|       |
 6308|       |        // Read postfix
 6309|      0|        std::ptrdiff_t postfix_width = 0;
 6310|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 0, False: 0]
  ------------------
 6311|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6314|      0|                                 value_width));
 6315|      0|            std::tie(it, postfix_width) = postfix_result;
 6316|      0|        }
 6317|       |
 6318|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|      0|            specs, prefix_width, value_width, postfix_width));
 6320|      0|        return it;
 6321|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5638|    468|    {
 5639|    468|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5640|       |
 5641|    468|#if !SCN_DISABLE_LOCALE
 5642|    468|        if (specs.localized) {
  ------------------
  |  Branch (5642:13): [True: 18, False: 450]
  ------------------
 5643|     18|            return rd.read_localized(range, loc, value);
 5644|     18|        }
 5645|       |#else
 5646|       |        SCN_UNUSED(loc);
 5647|       |#endif
 5648|       |
 5649|    450|        return rd.read_classic(range, value);
 5650|    468|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5653|    898|    {
 5654|    898|        SCN_GCC_COMPAT_PUSH
 5655|    898|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5656|       |
 5657|    898|        switch (specs.type) {
 5658|    242|            case detail::presentation_type::string:
  ------------------
  |  Branch (5658:13): [True: 242, False: 656]
  ------------------
 5659|    242|                return bool_reader_base::allow_text;
 5660|       |
 5661|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5661:13): [True: 14, False: 884]
  ------------------
 5662|     26|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5662:13): [True: 12, False: 886]
  ------------------
 5663|     32|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5663:13): [True: 6, False: 892]
  ------------------
 5664|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5664:13): [True: 10, False: 888]
  ------------------
 5665|     56|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5665:13): [True: 14, False: 884]
  ------------------
 5666|     62|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5666:13): [True: 6, False: 892]
  ------------------
 5667|     62|                return bool_reader_base::allow_numeric;
 5668|       |
 5669|    594|            default:
  ------------------
  |  Branch (5669:13): [True: 594, False: 304]
  ------------------
 5670|    594|                return bool_reader_base::allow_text |
 5671|    594|                       bool_reader_base::allow_numeric;
 5672|    898|        }
 5673|       |
 5674|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5675|    898|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5549|     18|    {
 5550|     18|        scan_error err{scan_error::invalid_scanned_value,
 5551|     18|                       "Failed to read boolean"};
 5552|       |
 5553|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5553:13): [True: 16, False: 2]
  ------------------
 5554|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5554:22): [True: 0, False: 16]
  ------------------
 5555|      0|                return *r;
 5556|      0|            }
 5557|     16|            else {
 5558|     16|                err = r.error();
 5559|     16|            }
 5560|     16|        }
 5561|       |
 5562|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5562:13): [True: 14, False: 4]
  ------------------
 5563|     14|            auto stdloc = loc.get<std::locale>();
 5564|     14|            const auto& numpunct =
 5565|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5566|     14|            const auto truename = numpunct.truename();
 5567|     14|            const auto falsename = numpunct.falsename();
 5568|       |
 5569|     14|            if (auto r =
  ------------------
  |  Branch (5569:22): [True: 0, False: 14]
  ------------------
 5570|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5571|      0|                return *r;
 5572|      0|            }
 5573|     14|            else {
 5574|     14|                err = r.error();
 5575|     14|            }
 5576|     14|        }
 5577|       |
 5578|     18|        return unexpected(err);
 5579|     18|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5505|    358|    {
 5506|    358|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5506:18): [True: 0, False: 358]
  ------------------
 5507|      0|            value = false;
 5508|      0|            return *r;
 5509|      0|        }
 5510|    358|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5510:18): [True: 0, False: 358]
  ------------------
 5511|      0|            value = true;
 5512|      0|            return *r;
 5513|      0|        }
 5514|       |
 5515|    358|        return detail::unexpected_scan_error(
 5516|    358|            scan_error::invalid_scanned_value,
 5517|    358|            "Failed to read numeric boolean value: No match");
 5518|    358|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2307|    716|{
 2308|    716|    auto it = read_code_unit(range);
 2309|    716|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    716|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 716]
  |  |  ------------------
  ------------------
 2310|      0|        return unexpected(make_eof_parse_error(it.error()));
 2311|      0|    }
 2312|       |
 2313|    716|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|    716|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 716, False: 0]
  |  |  ------------------
  ------------------
 2314|    716|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|    716|        return unexpected(parse_error::error);
 2316|    716|    }
 2317|       |
 2318|      0|    return *it;
 2319|    716|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5589|     14|    {
 5590|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5591|     14|        const auto shorter = std::pair{
 5592|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5592:13): [True: 14, False: 0]
  ------------------
 5593|     14|        const auto longer = std::pair{
 5594|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5594:13): [True: 0, False: 14]
  ------------------
 5595|       |
 5596|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5596:18): [True: 0, False: 14]
  ------------------
 5597|      0|            value = shorter.second;
 5598|      0|            return *r;
 5599|      0|        }
 5600|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5600:18): [True: 0, False: 14]
  ------------------
 5601|      0|            value = longer.second;
 5602|      0|            return *r;
 5603|      0|        }
 5604|       |
 5605|     14|        return detail::unexpected_scan_error(
 5606|     14|            scan_error::invalid_scanned_value,
 5607|     14|            "Failed to read textual boolean: No match");
 5608|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2340|     28|{
 2341|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 14, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     14|    }                                                  \
  |  |  |  | 3995|     28|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     28|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2342|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2343|     14|                    .transform_error(make_eof_parse_error));
 2344|       |
 2345|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2346|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1014|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2347|     14|        return unexpected(parse_error::error);
 2348|     14|    }
 2349|      0|    return it;
 2350|     14|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1981|    872|{
 1982|    872|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|    872|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    872|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|    872|    else {
 1993|    872|        auto it = range.begin();
 1994|    872|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 0, False: 872]
  ------------------
 1995|      0|            return ranges::next(it, count);
 1996|      0|        }
 1997|       |
 1998|  4.33k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 3.64k, False: 690]
  ------------------
 1999|  3.64k|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 182, False: 3.46k]
  ------------------
 2000|    182|                return unexpected(eof_error::eof);
 2001|    182|            }
 2002|  3.64k|        }
 2003|       |
 2004|    690|        return it;
 2005|    872|    }
 2006|    872|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1113|    872|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|       |                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|       |        else {
 1125|       |            if (r.begin().stores_parent()) {
 1126|       |                return static_cast<size_t>(
 1127|       |                    r.begin().parent()->chars_available() -
 1128|       |                    r.begin().position());
 1129|       |            }
 1130|       |            return r.begin().contiguous_segment().size();
 1131|       |        }
 1132|       |    }
 1133|    872|    else {
 1134|    872|        SCN_UNUSED(r);
  ------------------
  |  | 1064|    872|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1135|    872|        return 0;
 1136|    872|    }
 1137|    872|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5476|    450|    {
 5477|    450|        scan_error err{scan_error::invalid_scanned_value,
 5478|    450|                       "Failed to read boolean"};
 5479|       |
 5480|    450|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5480:13): [True: 342, False: 108]
  ------------------
 5481|    342|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5481:22): [True: 0, False: 342]
  ------------------
 5482|      0|                return *r;
 5483|      0|            }
 5484|    342|            else {
 5485|    342|                err = r.error();
 5486|    342|            }
 5487|    342|        }
 5488|       |
 5489|    450|        if (m_options & allow_text) {
  ------------------
  |  Branch (5489:13): [True: 422, False: 28]
  ------------------
 5490|    422|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5490:22): [True: 0, False: 422]
  ------------------
 5491|      0|                return *r;
 5492|      0|            }
 5493|    422|            else {
 5494|    422|                err = r.error();
 5495|    422|            }
 5496|    422|        }
 5497|       |
 5498|    450|        return unexpected(err);
 5499|    450|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5523|    422|    {
 5524|    422|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5524:18): [True: 0, False: 422]
  ------------------
 5525|      0|            value = true;
 5526|      0|            return *r;
 5527|      0|        }
 5528|    422|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5528:18): [True: 0, False: 422]
  ------------------
 5529|      0|            value = false;
 5530|      0|            return *r;
 5531|      0|        }
 5532|       |
 5533|    422|        return detail::unexpected_scan_error(
 5534|    422|            scan_error::invalid_scanned_value,
 5535|    422|            "Failed to read textual boolean value: No match");
 5536|    422|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2355|    844|{
 2356|    844|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|    844|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    844|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    844|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    844|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 168, False: 676]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    168|    }                                                  \
  |  |  |  | 3995|    844|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    844|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2357|    676|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2358|    676|                    .transform_error(make_eof_parse_error));
 2359|       |
 2360|    676|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2361|    676|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2362|    676|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1014|    676|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 676, False: 0]
  |  |  ------------------
  ------------------
 2363|    676|            return unexpected(parse_error::error);
 2364|    676|        }
 2365|      0|        return it;
 2366|       |    }
 2367|       |    else {
 2368|       |        auto range_it = range.begin();
 2369|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2370|       |            if (SCN_UNLIKELY(*range_it !=
 2371|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2372|       |                return unexpected(parse_error::error);
 2373|       |            }
 2374|       |        }
 2375|       |        return it;
 2376|       |    }
 2377|    676|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5638|    430|    {
 5639|    430|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5640|       |
 5641|    430|#if !SCN_DISABLE_LOCALE
 5642|    430|        if (specs.localized) {
  ------------------
  |  Branch (5642:13): [True: 16, False: 414]
  ------------------
 5643|     16|            return rd.read_localized(range, loc, value);
 5644|     16|        }
 5645|       |#else
 5646|       |        SCN_UNUSED(loc);
 5647|       |#endif
 5648|       |
 5649|    414|        return rd.read_classic(range, value);
 5650|    430|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5549|     16|    {
 5550|     16|        scan_error err{scan_error::invalid_scanned_value,
 5551|     16|                       "Failed to read boolean"};
 5552|       |
 5553|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5553:13): [True: 12, False: 4]
  ------------------
 5554|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5554:22): [True: 0, False: 12]
  ------------------
 5555|      0|                return *r;
 5556|      0|            }
 5557|     12|            else {
 5558|     12|                err = r.error();
 5559|     12|            }
 5560|     12|        }
 5561|       |
 5562|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5562:13): [True: 8, False: 8]
  ------------------
 5563|      8|            auto stdloc = loc.get<std::locale>();
 5564|      8|            const auto& numpunct =
 5565|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5566|      8|            const auto truename = numpunct.truename();
 5567|      8|            const auto falsename = numpunct.falsename();
 5568|       |
 5569|      8|            if (auto r =
  ------------------
  |  Branch (5569:22): [True: 0, False: 8]
  ------------------
 5570|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5571|      0|                return *r;
 5572|      0|            }
 5573|      8|            else {
 5574|      8|                err = r.error();
 5575|      8|            }
 5576|      8|        }
 5577|       |
 5578|     16|        return unexpected(err);
 5579|     16|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5589|      8|    {
 5590|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5591|      8|        const auto shorter = std::pair{
 5592|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5592:13): [True: 8, False: 0]
  ------------------
 5593|      8|        const auto longer = std::pair{
 5594|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5594:13): [True: 0, False: 8]
  ------------------
 5595|       |
 5596|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5596:18): [True: 0, False: 8]
  ------------------
 5597|      0|            value = shorter.second;
 5598|      0|            return *r;
 5599|      0|        }
 5600|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5600:18): [True: 0, False: 8]
  ------------------
 5601|      0|            value = longer.second;
 5602|      0|            return *r;
 5603|      0|        }
 5604|       |
 5605|      8|        return detail::unexpected_scan_error(
 5606|      8|            scan_error::invalid_scanned_value,
 5607|      8|            "Failed to read textual boolean: No match");
 5608|      8|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2340|     16|{
 2341|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      2|    }                                                  \
  |  |  |  | 3995|     16|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2342|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2343|     14|                    .transform_error(make_eof_parse_error));
 2344|       |
 2345|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2346|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1014|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2347|     14|        return unexpected(parse_error::error);
 2348|     14|    }
 2349|      0|    return it;
 2350|     14|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6325|  2.35k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.35k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.35k|            auto rd = make_reader<T, char_type>();
 6331|  2.35k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.35k|    do {                                                            \
  |  | 3985|  2.35k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.68k, False: 666]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.68k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.68k|        }                                                           \
  |  | 3988|  2.35k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    666|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.35k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    666|    {
 6261|    666|        const bool need_skipped_width =
 6262|    666|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 206, False: 460]
  |  Branch (6262:33): [True: 376, False: 84]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    666|        auto it = rng.begin();
 6266|    666|        std::ptrdiff_t prefix_width = 0;
 6267|    666|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 380, False: 286]
  ------------------
 6268|    380|            auto max_width_view = take_width(rng, specs.precision);
 6269|    380|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    380|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    380|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    380|            it = prefix_result.first.base();
 6272|    380|            prefix_width = prefix_result.second;
 6273|    380|        }
 6274|    286|        else {
 6275|    286|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    286|            std::tie(it, prefix_width) = prefix_result;
 6277|    286|        }
 6278|    666|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    666|        std::ptrdiff_t value_width = 0;
 6282|    666|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 380, False: 286]
  ------------------
 6283|    380|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 6, False: 374]
  ------------------
 6284|      6|                return detail::unexpected_scan_error(
 6285|      6|                    scan_error::invalid_fill,
 6286|      6|                    "Too many fill characters before value, "
 6287|      6|                    "precision exceeded before reading value");
 6288|      6|            }
 6289|       |
 6290|    374|            const auto initial_width = specs.precision - prefix_width;
 6291|    374|            auto max_width_view =
 6292|    374|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    374|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 36, False: 338]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     36|    }                                                  \
  |  |  |  | 3995|    374|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    338|            it = w_it.base();
 6295|    338|            value_width = initial_width - w_it.count();
 6296|    338|        }
 6297|    286|        else {
 6298|    286|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 22, False: 264]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|     22|    }                                                  \
  |  | 3995|    286|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    264|                                             specs, value, loc));
 6300|       |
 6301|    264|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 198, False: 66]
  ------------------
 6302|    198|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    198|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    198|                        .view()));
 6305|    198|            }
 6306|    264|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    602|        std::ptrdiff_t postfix_width = 0;
 6310|    602|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 602, False: 0]
  ------------------
 6311|    602|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    602|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    602|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    602|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 602]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    602|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    602|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    602|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    602|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    602|                                 value_width));
 6315|    602|            std::tie(it, postfix_width) = postfix_result;
 6316|    602|        }
 6317|       |
 6318|    602|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    602|    do {                                                            \
  |  | 3985|    602|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 174, False: 428]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    174|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    174|        }                                                           \
  |  | 3988|    602|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    602|            specs, prefix_width, value_width, postfix_width));
 6320|    428|        return it;
 6321|    602|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6325|  2.39k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.39k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.39k|            auto rd = make_reader<T, char_type>();
 6331|  2.39k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.39k|    do {                                                            \
  |  | 3985|  2.39k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.69k, False: 702]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.69k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.69k|        }                                                           \
  |  | 3988|  2.39k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    702|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.39k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    702|    {
 6261|    702|        const bool need_skipped_width =
 6262|    702|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 208, False: 494]
  |  Branch (6262:33): [True: 400, False: 94]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    702|        auto it = rng.begin();
 6266|    702|        std::ptrdiff_t prefix_width = 0;
 6267|    702|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 404, False: 298]
  ------------------
 6268|    404|            auto max_width_view = take_width(rng, specs.precision);
 6269|    404|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 30, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     30|    }                                                  \
  |  |  |  | 3995|    404|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    374|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    374|            it = prefix_result.first.base();
 6272|    374|            prefix_width = prefix_result.second;
 6273|    374|        }
 6274|    298|        else {
 6275|    298|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    298|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    298|            std::tie(it, prefix_width) = prefix_result;
 6277|    298|        }
 6278|    672|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    672|        std::ptrdiff_t value_width = 0;
 6282|    672|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 374, False: 298]
  ------------------
 6283|    374|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 8, False: 366]
  ------------------
 6284|      8|                return detail::unexpected_scan_error(
 6285|      8|                    scan_error::invalid_fill,
 6286|      8|                    "Too many fill characters before value, "
 6287|      8|                    "precision exceeded before reading value");
 6288|      8|            }
 6289|       |
 6290|    366|            const auto initial_width = specs.precision - prefix_width;
 6291|    366|            auto max_width_view =
 6292|    366|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    366|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    366|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    366|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    366|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 366, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    366|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    366|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    366|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    366|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    366|    }                                                  \
  |  |  |  | 3995|    366|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    366|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|    298|        else {
 6298|    298|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    298|    }                                                  \
  |  | 3995|    298|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|      0|                                             specs, value, loc));
 6300|       |
 6301|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 0]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|      0|        }
 6307|       |
 6308|       |        // Read postfix
 6309|      0|        std::ptrdiff_t postfix_width = 0;
 6310|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 0, False: 0]
  ------------------
 6311|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6314|      0|                                 value_width));
 6315|      0|            std::tie(it, postfix_width) = postfix_result;
 6316|      0|        }
 6317|       |
 6318|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|      0|            specs, prefix_width, value_width, postfix_width));
 6320|      0|        return it;
 6321|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  2.35k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.35k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.35k|            auto rd = make_reader<T, char_type>();
 6331|  2.35k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.35k|    do {                                                            \
  |  | 3985|  2.35k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 146, False: 2.20k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    146|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    146|        }                                                           \
  |  | 3988|  2.35k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  2.20k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.35k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|  2.20k|    {
 6261|  2.20k|        const bool need_skipped_width =
 6262|  2.20k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 272, False: 1.93k]
  |  Branch (6262:33): [True: 840, False: 1.09k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  2.20k|        auto it = rng.begin();
 6266|  2.20k|        std::ptrdiff_t prefix_width = 0;
 6267|  2.20k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 862, False: 1.34k]
  ------------------
 6268|    862|            auto max_width_view = take_width(rng, specs.precision);
 6269|    862|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    862|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    862|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    862|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    862|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 28, False: 834]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     28|    }                                                  \
  |  |  |  | 3995|    862|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    862|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    834|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    834|            it = prefix_result.first.base();
 6272|    834|            prefix_width = prefix_result.second;
 6273|    834|        }
 6274|  1.34k|        else {
 6275|  1.34k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  1.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 1.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  1.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  1.34k|            std::tie(it, prefix_width) = prefix_result;
 6277|  1.34k|        }
 6278|  2.18k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  2.18k|        std::ptrdiff_t value_width = 0;
 6282|  2.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 834, False: 1.34k]
  ------------------
 6283|    834|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 10, False: 824]
  ------------------
 6284|     10|                return detail::unexpected_scan_error(
 6285|     10|                    scan_error::invalid_fill,
 6286|     10|                    "Too many fill characters before value, "
 6287|     10|                    "precision exceeded before reading value");
 6288|     10|            }
 6289|       |
 6290|    824|            const auto initial_width = specs.precision - prefix_width;
 6291|    824|            auto max_width_view =
 6292|    824|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    824|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    824|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    824|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    824|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 350, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    350|    }                                                  \
  |  |  |  | 3995|    824|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    474|            it = w_it.base();
 6295|    474|            value_width = initial_width - w_it.count();
 6296|    474|        }
 6297|  1.34k|        else {
 6298|  1.34k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  1.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  1.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 580, False: 766]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    580|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    580|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    580|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    580|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    580|    }                                                  \
  |  | 3995|  1.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    766|                                             specs, value, loc));
 6300|       |
 6301|    766|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 214, False: 552]
  ------------------
 6302|    214|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    214|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    214|                        .view()));
 6305|    214|            }
 6306|    766|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  1.24k|        std::ptrdiff_t postfix_width = 0;
 6310|  1.24k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 886, False: 354]
  ------------------
 6311|    886|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 886]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    886|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    886|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    886|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    886|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    886|                                 value_width));
 6315|    886|            std::tie(it, postfix_width) = postfix_result;
 6316|    886|        }
 6317|       |
 6318|  1.24k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  1.24k|    do {                                                            \
  |  | 3985|  1.24k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 84, False: 1.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|     84|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|     84|        }                                                           \
  |  | 3988|  1.24k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  1.24k|            specs, prefix_width, value_width, postfix_width));
 6320|  1.15k|        return it;
 6321|  1.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  2.35k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.35k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.35k|            auto rd = make_reader<T, char_type>();
 6331|  2.35k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.35k|    do {                                                            \
  |  | 3985|  2.35k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 146, False: 2.20k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    146|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    146|        }                                                           \
  |  | 3988|  2.35k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  2.20k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.35k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|  2.20k|    {
 6261|  2.20k|        const bool need_skipped_width =
 6262|  2.20k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 272, False: 1.93k]
  |  Branch (6262:33): [True: 840, False: 1.09k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  2.20k|        auto it = rng.begin();
 6266|  2.20k|        std::ptrdiff_t prefix_width = 0;
 6267|  2.20k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 862, False: 1.34k]
  ------------------
 6268|    862|            auto max_width_view = take_width(rng, specs.precision);
 6269|    862|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    862|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    862|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    862|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    862|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 28, False: 834]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     28|    }                                                  \
  |  |  |  | 3995|    862|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    862|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    834|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    834|            it = prefix_result.first.base();
 6272|    834|            prefix_width = prefix_result.second;
 6273|    834|        }
 6274|  1.34k|        else {
 6275|  1.34k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  1.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 1.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  1.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  1.34k|            std::tie(it, prefix_width) = prefix_result;
 6277|  1.34k|        }
 6278|  2.18k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  2.18k|        std::ptrdiff_t value_width = 0;
 6282|  2.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 834, False: 1.34k]
  ------------------
 6283|    834|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 10, False: 824]
  ------------------
 6284|     10|                return detail::unexpected_scan_error(
 6285|     10|                    scan_error::invalid_fill,
 6286|     10|                    "Too many fill characters before value, "
 6287|     10|                    "precision exceeded before reading value");
 6288|     10|            }
 6289|       |
 6290|    824|            const auto initial_width = specs.precision - prefix_width;
 6291|    824|            auto max_width_view =
 6292|    824|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    824|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    824|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    824|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    824|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 350, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    350|    }                                                  \
  |  |  |  | 3995|    824|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    474|            it = w_it.base();
 6295|    474|            value_width = initial_width - w_it.count();
 6296|    474|        }
 6297|  1.34k|        else {
 6298|  1.34k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  1.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  1.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 580, False: 766]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    580|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    580|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    580|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    580|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    580|    }                                                  \
  |  | 3995|  1.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    766|                                             specs, value, loc));
 6300|       |
 6301|    766|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 214, False: 552]
  ------------------
 6302|    214|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    214|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    214|                        .view()));
 6305|    214|            }
 6306|    766|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  1.24k|        std::ptrdiff_t postfix_width = 0;
 6310|  1.24k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 886, False: 354]
  ------------------
 6311|    886|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 886]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    886|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    886|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    886|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    886|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    886|                                 value_width));
 6315|    886|            std::tie(it, postfix_width) = postfix_result;
 6316|    886|        }
 6317|       |
 6318|  1.24k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  1.24k|    do {                                                            \
  |  | 3985|  1.24k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 84, False: 1.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|     84|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|     84|        }                                                           \
  |  | 3988|  1.24k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  1.24k|            specs, prefix_width, value_width, postfix_width));
 6320|  1.15k|        return it;
 6321|  1.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  2.35k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  2.35k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  2.35k|            auto rd = make_reader<T, char_type>();
 6331|  2.35k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  2.35k|    do {                                                            \
  |  | 3985|  2.35k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 146, False: 2.20k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    146|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    146|        }                                                           \
  |  | 3988|  2.35k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  2.20k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  2.35k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6260|  2.20k|    {
 6261|  2.20k|        const bool need_skipped_width =
 6262|  2.20k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 272, False: 1.93k]
  |  Branch (6262:33): [True: 840, False: 1.09k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  2.20k|        auto it = rng.begin();
 6266|  2.20k|        std::ptrdiff_t prefix_width = 0;
 6267|  2.20k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 862, False: 1.34k]
  ------------------
 6268|    862|            auto max_width_view = take_width(rng, specs.precision);
 6269|    862|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    862|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    862|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    862|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    862|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 28, False: 834]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     28|    }                                                  \
  |  |  |  | 3995|    862|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    862|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    834|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    834|            it = prefix_result.first.base();
 6272|    834|            prefix_width = prefix_result.second;
 6273|    834|        }
 6274|  1.34k|        else {
 6275|  1.34k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  1.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 1.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  1.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  1.34k|            std::tie(it, prefix_width) = prefix_result;
 6277|  1.34k|        }
 6278|  2.18k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  2.18k|        std::ptrdiff_t value_width = 0;
 6282|  2.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 834, False: 1.34k]
  ------------------
 6283|    834|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 10, False: 824]
  ------------------
 6284|     10|                return detail::unexpected_scan_error(
 6285|     10|                    scan_error::invalid_fill,
 6286|     10|                    "Too many fill characters before value, "
 6287|     10|                    "precision exceeded before reading value");
 6288|     10|            }
 6289|       |
 6290|    824|            const auto initial_width = specs.precision - prefix_width;
 6291|    824|            auto max_width_view =
 6292|    824|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    824|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    824|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    824|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    824|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 350, False: 474]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    350|    }                                                  \
  |  |  |  | 3995|    824|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    824|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    474|            it = w_it.base();
 6295|    474|            value_width = initial_width - w_it.count();
 6296|    474|        }
 6297|  1.34k|        else {
 6298|  1.34k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  1.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  1.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 580, False: 766]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    580|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    580|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    580|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    580|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    580|    }                                                  \
  |  | 3995|  1.34k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    766|                                             specs, value, loc));
 6300|       |
 6301|    766|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 214, False: 552]
  ------------------
 6302|    214|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    214|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    214|                        .view()));
 6305|    214|            }
 6306|    766|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  1.24k|        std::ptrdiff_t postfix_width = 0;
 6310|  1.24k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 886, False: 354]
  ------------------
 6311|    886|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    886|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    886|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    886|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    886|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 886]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    886|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    886|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    886|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    886|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    886|                                 value_width));
 6315|    886|            std::tie(it, postfix_width) = postfix_result;
 6316|    886|        }
 6317|       |
 6318|  1.24k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  1.24k|    do {                                                            \
  |  | 3985|  1.24k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 84, False: 1.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|     84|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|     84|        }                                                           \
  |  | 3988|  1.24k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  1.24k|            specs, prefix_width, value_width, postfix_width));
 6320|  1.15k|        return it;
 6321|  1.24k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|  4.50k|{
 5922|  4.50k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  4.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.50k]
  |  |  ------------------
  ------------------
 5923|      0|        return unexpected(e);
 5924|      0|    }
 5925|       |
 5926|  4.50k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 500, False: 4.00k]
  ------------------
 5927|    500|        return range.begin();
 5928|    500|    }
 5929|       |
 5930|  4.00k|    return skip_classic_whitespace(range);
 5931|  4.50k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|    500|    {
 3651|    500|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    500|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|    500|        return read_default_with_base(range, value, 10);
 3653|    500|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|    500|    {
 3615|    500|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|    500|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|    500|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 500]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  1.00k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  1.00k|                parse_integer_digits_without_thsep(
 3634|  1.00k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  1.00k|                    prefix_result.parsed_base));
 3636|       |
 3637|  1.00k|        auto buf = make_contiguous_buffer(
 3638|  1.00k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  1.00k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 500, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    500|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    500|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    500|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    500|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    500|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|      0|                                    prefix_result.parsed_base));
 3642|       |
 3643|      0|        return ranges::next(prefix_result.iterator,
 3644|      0|                            ranges::distance(buf.view().begin(), result_it));
 3645|  1.00k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3650|    500|    {
 3651|    500|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    500|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|    500|        return read_default_with_base(range, value, 10);
 3653|    500|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|    500|    {
 3615|    500|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|    500|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|    500|        if constexpr (!std::is_signed_v<T>) {
 3619|    500|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 0, False: 500]
  ------------------
 3620|      0|                return detail::unexpected_scan_error(
 3621|      0|                    scan_error::invalid_scanned_value,
 3622|      0|                    "Unexpected '-' sign when parsing an "
 3623|      0|                    "unsigned value");
 3624|      0|            }
 3625|    500|        }
 3626|       |
 3627|    500|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 500]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  1.00k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  1.00k|                parse_integer_digits_without_thsep(
 3634|  1.00k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  1.00k|                    prefix_result.parsed_base));
 3636|       |
 3637|  1.00k|        auto buf = make_contiguous_buffer(
 3638|  1.00k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  1.00k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 500, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    500|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    500|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    500|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    500|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    500|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|      0|                                    prefix_result.parsed_base));
 3642|       |
 3643|      0|        return ranges::next(prefix_result.iterator,
 3644|      0|                            ranges::distance(buf.view().begin(), result_it));
 3645|  1.00k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5873|  1.07k|    {
 5874|  1.07k|        return true;
 5875|  1.07k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5891|    864|    {
 5892|    864|        detail::format_specs specs{};
 5893|    864|        specs.type = detail::presentation_type::int_hex;
 5894|       |
 5895|    864|        std::uintptr_t intvalue{};
 5896|    864|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3996|    864|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    864|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    864|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 822, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    822|    }                                                  \
  |  |  |  | 3995|    864|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    864|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5897|     42|                                                                intvalue, loc));
 5898|     42|        value = reinterpret_cast<void*>(intvalue);
 5899|     42|        return result;
 5900|    864|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3213|  1.34k|    {
 3214|  1.34k|        return true;
 3215|  1.34k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5626|    500|    {
 5627|    500|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    500|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5628|       |
 5629|    500|        return bool_reader<CharT>{}.read_classic(range, value);
 5630|    500|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5476|    960|    {
 5477|    960|        scan_error err{scan_error::invalid_scanned_value,
 5478|    960|                       "Failed to read boolean"};
 5479|       |
 5480|    960|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5480:13): [True: 908, False: 52]
  ------------------
 5481|    908|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5481:22): [True: 48, False: 860]
  ------------------
 5482|     48|                return *r;
 5483|     48|            }
 5484|    860|            else {
 5485|    860|                err = r.error();
 5486|    860|            }
 5487|    908|        }
 5488|       |
 5489|    912|        if (m_options & allow_text) {
  ------------------
  |  Branch (5489:13): [True: 872, False: 40]
  ------------------
 5490|    872|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5490:22): [True: 0, False: 872]
  ------------------
 5491|      0|                return *r;
 5492|      0|            }
 5493|    872|            else {
 5494|    872|                err = r.error();
 5495|    872|            }
 5496|    872|        }
 5497|       |
 5498|    912|        return unexpected(err);
 5499|    912|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5505|    936|    {
 5506|    936|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5506:18): [True: 54, False: 882]
  ------------------
 5507|     54|            value = false;
 5508|     54|            return *r;
 5509|     54|        }
 5510|    882|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5510:18): [True: 0, False: 882]
  ------------------
 5511|      0|            value = true;
 5512|      0|            return *r;
 5513|      0|        }
 5514|       |
 5515|    882|        return detail::unexpected_scan_error(
 5516|    882|            scan_error::invalid_scanned_value,
 5517|    882|            "Failed to read numeric boolean value: No match");
 5518|    882|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5523|    872|    {
 5524|    872|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5524:18): [True: 0, False: 872]
  ------------------
 5525|      0|            value = true;
 5526|      0|            return *r;
 5527|      0|        }
 5528|    872|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5528:18): [True: 0, False: 872]
  ------------------
 5529|      0|            value = false;
 5530|      0|            return *r;
 5531|      0|        }
 5532|       |
 5533|    872|        return detail::unexpected_scan_error(
 5534|    872|            scan_error::invalid_scanned_value,
 5535|    872|            "Failed to read textual boolean value: No match");
 5536|    872|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2355|  1.74k|{
 2356|  1.74k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 174, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    174|    }                                                  \
  |  |  |  | 3995|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2357|  1.57k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2358|  1.57k|                    .transform_error(make_eof_parse_error));
 2359|       |
 2360|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2361|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2362|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2363|       |            return unexpected(parse_error::error);
 2364|       |        }
 2365|       |        return it;
 2366|       |    }
 2367|  1.57k|    else {
 2368|  1.57k|        auto range_it = range.begin();
 2369|  1.57k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2369:28): [True: 1.57k, False: 0]
  ------------------
 2370|  1.57k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  | 1014|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.57k, False: 0]
  |  |  ------------------
  ------------------
 2371|  1.57k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2372|  1.57k|                return unexpected(parse_error::error);
 2373|  1.57k|            }
 2374|  1.57k|        }
 2375|      0|        return it;
 2376|  1.57k|    }
 2377|  1.57k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3773|    500|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|    500|    {
 4280|    500|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    500|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|    500|        float_reader<CharT> rd{};
 4283|    500|        return read_impl<Range>(
 4284|    500|            range, rd,
 4285|    500|            [](float_reader<CharT>& r, auto&&... args) {
 4286|    500|                return r.read_source(SCN_FWD(args)...);
 4287|    500|            },
 4288|    500|            value);
 4289|    500|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|    500|        : m_fptr([](storage fn,
  753|    500|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    500|              cvref<T> obj = *get<T>(fn);
  755|    500|              if constexpr (std::is_void_v<R>) {
  756|    500|                  obj(static_cast<decltype(args)>(args)...);
  757|    500|              }
  758|    500|              else {
  759|    500|                  return obj(static_cast<decltype(args)>(args)...);
  760|    500|              }
  761|    500|          }),
  762|    500|          m_storage(std::addressof(f))
  763|    500|    {
  764|    500|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|    500|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    500|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    500|              else {
  759|    500|                  return obj(static_cast<decltype(args)>(args)...);
  760|    500|              }
  761|    500|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|    500|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|    500|        else if constexpr (std::is_object_v<T>) {
  694|    500|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    500|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|    500|            [](float_reader<CharT>& r, auto&&... args) {
 4286|    500|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|    500|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|    500|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|    500|        {
  668|    500|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|    500|    {
 5386|    500|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    500|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|    500|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|    500|    {
 5386|    500|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    500|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|    500|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|    500|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|    500|                          basic_contiguous_scan_context<char_type>>) {
 6014|    500|            auto rd = make_reader<T, char_type>();
 6015|    500|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|    500|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6001|    500|    {
 6002|    500|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    500|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|    500|                        .transform_error(make_eof_scan_error));
 6004|    500|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|    500|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5385|    500|    {
 5386|    500|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|    500|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|    500|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|    500|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3047|   101k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   101k|    static_cast<    \
  |  | 1084|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   101k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   101k|          m_current(m_range.begin())
 3050|   101k|    {
 3051|   101k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3059|   414M|    {
 3060|   414M|        return m_range.end();
 3061|   414M|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1342|   207M|{
 1343|       |    // TODO: optimize
 1344|   207M|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1079|   207M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   207M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1345|   207M|    auto res = get_next_code_point(str);
 1346|   207M|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1347|   207M|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3074|   207M|    {
 3075|   207M|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   207M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   207M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   207M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   207M|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 207M]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   207M|        }
 3081|   207M|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   207M|    static_cast<    \
  |  | 1084|   207M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   207M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3064|  20.6k|    {
 3065|  20.6k|        return ranges::subrange{begin(), end()};
 3066|  20.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6173|  2.50k|    {
 6174|  2.50k|        const bool need_skipped_width =
 6175|  2.50k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 34, False: 2.46k]
  |  Branch (6175:33): [True: 2.46k, False: 0]
  ------------------
 6176|  2.50k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  2.50k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 46, False: 2.45k]
  ------------------
 6180|  2.50k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 472, False: 1.98k]
  ------------------
 6181|    518|            return skip_fill(rng, specs.precision, specs.fill,
 6182|    518|                             need_skipped_width);
 6183|    518|        }
 6184|  1.98k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 1.94k, False: 44]
  |  Branch (6184:56): [True: 1.21k, False: 722]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  1.21k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 1.21k, False: 0]
  ------------------
 6188|  1.21k|                auto max_width_view = take_width(rng, specs.precision);
 6189|  1.21k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|  1.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 116, False: 1.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    116|    }                                                  \
  |  |  |  | 3995|  1.21k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|  1.10k|                                  .transform_error(make_eof_scan_error));
 6191|  1.10k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|  1.21k|            }
 6193|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  1.21k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|                            make_eof_scan_error));
 6195|       |
 6196|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|      0|            return result_type{it, 0};
 6204|      0|        }
 6205|       |
 6206|    766|        return result_type{rng.begin(), 0};
 6207|  1.98k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 6088|    518|{
 6089|    518|    using char_type = detail::char_t<Range>;
 6090|    518|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6091|       |
 6092|    518|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6092:9): [True: 518, False: 0]
  ------------------
 6093|    518|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6094|    518|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6095|       |
 6096|    518|        if (max_width == 0) {
  ------------------
  |  Branch (6096:13): [True: 0, False: 518]
  ------------------
 6097|      0|            auto it = read_while_code_unit(range, pred);
 6098|       |
 6099|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6099:17): [True: 0, False: 0]
  ------------------
 6100|      0|                auto prefix_width =
 6101|      0|                    static_cast<std::ptrdiff_t>(
 6102|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6103|      0|                    ranges::distance(range.begin(), it);
 6104|      0|                return result_type{it, prefix_width};
 6105|      0|            }
 6106|      0|            return result_type{it, 0};
 6107|      0|        }
 6108|       |
 6109|    518|        auto max_width_view = take_width(range, max_width);
 6110|    518|        auto w_it = read_while_code_unit(max_width_view, pred);
 6111|       |
 6112|    518|        if (want_skipped_width) {
  ------------------
  |  Branch (6112:13): [True: 518, False: 0]
  ------------------
 6113|    518|            return result_type{w_it.base(), max_width - w_it.count()};
 6114|    518|        }
 6115|      0|        return result_type{w_it.base(), 0};
 6116|    518|    }
 6117|       |
 6118|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6119|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6119:9): [True: 0, False: 0]
  ------------------
 6120|      0|        auto it = read_while_code_units(range, fill_chars);
 6121|       |
 6122|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 0]
  ------------------
 6123|      0|            auto prefix_width =
 6124|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6125|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6126|      0|            return result_type{it, prefix_width};
 6127|      0|        }
 6128|      0|        return result_type{it, 0};
 6129|      0|    }
 6130|       |
 6131|      0|    auto max_width_view = take_width(range, max_width);
 6132|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6133|       |
 6134|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6134:9): [True: 0, False: 0]
  ------------------
 6135|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6136|      0|    }
 6137|      0|    return result_type{w_it.base(), 0};
 6138|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  752|    518|        : m_fptr([](storage fn,
  753|    518|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    518|              cvref<T> obj = *get<T>(fn);
  755|    518|              if constexpr (std::is_void_v<R>) {
  756|    518|                  obj(static_cast<decltype(args)>(args)...);
  757|    518|              }
  758|    518|              else {
  759|    518|                  return obj(static_cast<decltype(args)>(args)...);
  760|    518|              }
  761|    518|          }),
  762|    518|          m_storage(std::addressof(f))
  763|    518|    {
  764|    518|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  753|    790|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|    790|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|    790|              else {
  759|    790|                  return obj(static_cast<decltype(args)>(args)...);
  760|    790|              }
  761|    790|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  689|    790|    {
  690|    790|        if constexpr (std::is_const_v<T>) {
  691|    790|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|    790|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 6094|    790|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|    518|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|    518|        {
  673|    518|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|    518|{
 2134|    518|    return read_until_code_unit(range, std::not_fn(pred));
 2135|    518|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|    518|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|    518|    else {
 2105|    518|        auto first = range.begin();
 2106|    824|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 790, False: 34]
  ------------------
 2107|    790|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 484, False: 306]
  ------------------
 2108|    484|                return first;
 2109|    484|            }
 2110|    790|        }
 2111|     34|        return first;
 2112|    518|    }
 2113|    518|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2982|  2.95k|    {
 2983|  2.95k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2984|  2.95k|                                      m_count};
 2985|  2.95k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2887|  11.4k|    {
 2888|  11.4k|        return view;
 2889|  11.4k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2543|  2.95k|        : m_current(x), m_end(s), m_count(n)
 2544|  2.95k|    {
 2545|  2.95k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2953|  2.64k|        {
 2954|  2.64k|            return !(y == x);
 2955|  2.64k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2940|  5.55k|        {
 2941|  5.55k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2941:21): [True: 266, False: 5.29k]
  |  Branch (2941:39): [True: 266, False: 0]
  ------------------
 2942|  5.55k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2942:20): [True: 0, False: 5.29k]
  ------------------
 2943|  5.55k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2943:21): [True: 672, False: 4.62k]
  |  Branch (2943:39): [True: 672, False: 0]
  ------------------
 2944|  5.29k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2944:21): [True: 0, False: 672]
  ------------------
 2945|  5.55k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2583|    938|    {
 2584|    938|        return m_multibyte_left;
 2585|    938|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2588|    672|    {
 2589|    672|        assert(count() != 0 || multibyte_left() != 0);
 2590|    672|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2591|    672|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2815|  2.67k|    {
 2816|  2.67k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1014|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.67k]
  |  |  ------------------
  ------------------
 2817|      0|            return 0;
 2818|      0|        }
 2819|       |
 2820|  2.67k|        if (cplen == 1) {
  ------------------
  |  Branch (2820:13): [True: 2.67k, False: 0]
  ------------------
 2821|  2.67k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2822|  2.67k|            auto cp = static_cast<char32_t>(*m_current);
 2823|  2.67k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2824|  2.67k|        }
 2825|       |
 2826|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2827|      0|                                           cplen);
 2828|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2829|      0|            return 0;
 2830|      0|        }
 2831|       |
 2832|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2833|      0|        return static_cast<difference_type>(calculate_text_width(
 2834|      0|            std::basic_string_view<value_type>{cp_str.data(), cp_str.size()}));
 2835|      0|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2809|  2.67k|    {
 2810|  2.67k|        return static_cast<difference_type>(
 2811|  2.67k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2812|  2.67k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2988|  5.55k|    {
 2989|  5.55k|        return sentinel<true>{m_base.get().end()};
 2990|  5.55k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2921|  5.55k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1083|  5.55k|    static_cast<    \
  |  | 1084|  5.55k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2594|  4.19k|    {
 2595|  4.19k|        return *m_current;
 2596|  4.19k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2603|  2.00k|    {
 2604|  2.00k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1079|  2.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2605|  2.00k|        _increment_current();
 2606|  2.00k|        return *this;
 2607|  2.00k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2838|  2.00k|    {
 2839|  2.00k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2839:13): [True: 2.00k, False: 0]
  ------------------
 2840|  2.00k|            auto cplen = _get_cp_length_at_current();
 2841|  2.00k|            m_multibyte_left = cplen - 1;
 2842|  2.00k|            m_count -= _get_width_at_current_cp_start(cplen);
 2843|  2.00k|        }
 2844|      0|        else {
 2845|      0|            --m_multibyte_left;
 2846|      0|        }
 2847|       |
 2848|  2.00k|        ++m_current;
 2849|  2.00k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 3004|  1.73k|    {
 3005|  1.73k|        return take_width_view{r, n};
 3006|  1.73k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2972|  1.73k|        : m_base(base), m_count(count)
 2973|  1.73k|    {
 2974|  1.73k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2884|  1.73k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|  1.21k|{
 3129|  1.21k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 1.21k, False: 0]
  ------------------
 3130|  1.21k|        auto it = read_while_classic_space(range);
 3131|  1.21k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  1.21k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 116, False: 1.10k]
  |  |  ------------------
  ------------------
 3133|    116|            return unexpected(e);
 3134|    116|        }
 3135|       |
 3136|  1.10k|        return it;
 3137|  1.21k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  1.21k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|  1.21k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  1.21k|    else {
 2286|  1.21k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|  1.21k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  1.21k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  1.21k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  1.21k|            return detail::is_cp_space(cp);
 2300|  1.21k|        });
 2301|  1.21k|    }
 2302|  1.21k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|  1.21k|{
 2242|  1.21k|    return read_until_code_point(range, std::not_fn(pred));
 2243|  1.21k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|  1.21k|{
 2220|  1.21k|    auto it = range.begin();
 2221|  1.81k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 1.70k, False: 116]
  ------------------
 2222|  1.70k|        const auto val =
 2223|  1.70k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  1.70k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  1.70k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.70k, False: 0]
  |  |  ------------------
  ------------------
 2225|  1.70k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  1.70k|                std::basic_string_view<detail::char_t<Range>>{
 2227|  1.70k|                    val.codepoint.data(), val.codepoint.size()});
 2228|  1.70k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 1.10k, False: 598]
  ------------------
 2229|  1.10k|                return it;
 2230|  1.10k|            }
 2231|  1.70k|        }
 2232|    598|        it = val.iterator;
 2233|    598|    }
 2234|       |
 2235|    116|    return it;
 2236|  1.21k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 2023|  1.70k|{
 2024|  1.70k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  1.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  1.70k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  1.70k|    auto it = range.begin();
 2028|  1.70k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  1.70k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.70k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  1.70k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 1.70k, False: 0]
  ------------------
 2037|  1.70k|        ++it;
 2038|  1.70k|        return {it, string_type(1, *range.begin())};
 2039|  1.70k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  1.70k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  954|  2.91k|{
  955|  2.91k|    return is_range_eof(r.begin(), r.end());
  956|  2.91k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  938|  2.91k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  2.91k|    {
  948|  2.91k|        return begin == end;
  949|  2.91k|    }
  950|  2.91k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 2014|  1.70k|    {
 2015|  1.70k|        return !codepoint.empty();
 2016|  1.70k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|  1.21k|        : m_fptr([](storage fn,
  753|  1.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.21k|              cvref<T> obj = *get<T>(fn);
  755|  1.21k|              if constexpr (std::is_void_v<R>) {
  756|  1.21k|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.21k|              }
  758|  1.21k|              else {
  759|  1.21k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.21k|              }
  761|  1.21k|          }),
  762|  1.21k|          m_storage(std::addressof(f))
  763|  1.21k|    {
  764|  1.21k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|  1.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.70k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.70k|              else {
  759|  1.70k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.70k|              }
  761|  1.70k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|  1.70k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.70k|        else if constexpr (std::is_object_v<T>) {
  694|  1.70k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.70k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|  1.70k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  1.70k|            return detail::is_cp_space(cp);
 2300|  1.70k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  1.21k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.21k|        {
  668|  1.21k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  960|  1.21k|{
  961|  1.21k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 116, False: 1.10k]
  |  |  ------------------
  ------------------
  962|    116|        return eof_error::eof;
  963|    116|    }
  964|  1.10k|    return eof_error::good;
  965|  1.21k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2575|  6.91k|    {
 2576|  6.91k|        return m_current;
 2577|  6.91k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2579|  13.1k|    {
 2580|  13.1k|        return m_count;
 2581|  13.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|  4.40k|    {
 6174|  4.40k|        const bool need_skipped_width =
 6175|  4.40k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 2.39k, False: 2.00k]
  |  Branch (6175:33): [True: 0, False: 2.00k]
  ------------------
 6176|  4.40k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  4.40k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 140, False: 4.26k]
  ------------------
 6180|  4.40k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 670, False: 3.59k]
  ------------------
 6181|    810|            return skip_fill(rng, specs.precision, specs.fill,
 6182|    810|                             need_skipped_width);
 6183|    810|        }
 6184|  3.59k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 3.40k, False: 184]
  |  Branch (6184:56): [True: 2.56k, False: 840]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  2.56k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 2.56k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|  5.13k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|  2.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  2.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  2.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  2.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 2.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  2.56k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  2.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|  5.13k|                            make_eof_scan_error));
 6195|       |
 6196|  5.13k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 1.83k, False: 736]
  ------------------
 6197|  1.83k|                return result_type{
 6198|  1.83k|                    it,
 6199|  1.83k|                    calculate_text_width(make_contiguous_buffer(
 6200|  1.83k|                                             ranges::subrange{rng.begin(), it})
 6201|  1.83k|                                             .view())};
 6202|  1.83k|            }
 6203|    736|            return result_type{it, 0};
 6204|  5.13k|        }
 6205|       |
 6206|  1.02k|        return result_type{rng.begin(), 0};
 6207|  3.59k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|  2.44k|    {
 6216|  2.44k|        const bool need_skipped_width =
 6217|  2.44k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 602, False: 1.84k]
  |  Branch (6217:33): [True: 1.00k, False: 836]
  ------------------
 6218|  2.44k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  2.44k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 68, False: 2.37k]
  ------------------
 6221|  2.44k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 656, False: 1.72k]
  ------------------
 6222|    724|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 258, False: 466]
  ------------------
 6223|    724|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 142, False: 116]
  ------------------
 6224|    142|                return result_type{rng.begin(), 0};
 6225|    142|            }
 6226|    582|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|    582|                             specs.fill, need_skipped_width);
 6228|    724|        }
 6229|  1.72k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 1.65k, False: 70]
  ------------------
 6230|  1.72k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 1.31k, False: 336]
  ------------------
 6231|  1.72k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 392, False: 922]
  |  Branch (6231:35): [True: 380, False: 12]
  ------------------
 6232|  1.31k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 586, False: 348]
  ------------------
 6233|    934|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 440, False: 146]
  ------------------
 6234|    820|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 440, False: 380]
  ------------------
 6235|    440|                const auto initial_width =
 6236|    440|                    specs.precision - prefix_width - value_width;
 6237|    440|                auto max_width_view = take_width(rng, initial_width);
 6238|    440|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|    440|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    440|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    440|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    440|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 440]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    440|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    440|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|    440|                                  .transform_error(make_eof_scan_error));
 6240|    440|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|    440|            }
 6242|    760|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    820|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    820|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|    760|                            make_eof_scan_error));
 6244|       |
 6245|    760|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 380, False: 0]
  ------------------
 6246|    380|                return result_type{
 6247|    380|                    it,
 6248|    380|                    calculate_text_width(make_contiguous_buffer(
 6249|    380|                                             ranges::subrange{rng.begin(), it})
 6250|    380|                                             .view())};
 6251|    380|            }
 6252|      0|            return result_type{it, 0};
 6253|    760|        }
 6254|    900|        return result_type{rng.begin(), 0};
 6255|  1.72k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6325|  1.29k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.29k|            auto rd = make_reader<T, char_type>();
 6331|  1.29k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.29k|    do {                                                            \
  |  | 3985|  1.29k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 632, False: 660]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    632|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    632|        }                                                           \
  |  | 3988|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    660|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.29k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    660|    {
 6261|    660|        const bool need_skipped_width =
 6262|    660|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 248, False: 412]
  |  Branch (6262:33): [True: 224, False: 188]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    660|        auto it = rng.begin();
 6266|    660|        std::ptrdiff_t prefix_width = 0;
 6267|    660|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 226, False: 434]
  ------------------
 6268|    226|            auto max_width_view = take_width(rng, specs.precision);
 6269|    226|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 20, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     20|    }                                                  \
  |  |  |  | 3995|    226|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    206|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    206|            it = prefix_result.first.base();
 6272|    206|            prefix_width = prefix_result.second;
 6273|    206|        }
 6274|    434|        else {
 6275|    434|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    434|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    434|            std::tie(it, prefix_width) = prefix_result;
 6277|    434|        }
 6278|    640|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    640|        std::ptrdiff_t value_width = 0;
 6282|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 206, False: 434]
  ------------------
 6283|    206|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 2, False: 204]
  ------------------
 6284|      2|                return detail::unexpected_scan_error(
 6285|      2|                    scan_error::invalid_fill,
 6286|      2|                    "Too many fill characters before value, "
 6287|      2|                    "precision exceeded before reading value");
 6288|      2|            }
 6289|       |
 6290|    204|            const auto initial_width = specs.precision - prefix_width;
 6291|    204|            auto max_width_view =
 6292|    204|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    204|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 180, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    180|    }                                                  \
  |  |  |  | 3995|    204|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|     24|            it = w_it.base();
 6295|     24|            value_width = initial_width - w_it.count();
 6296|     24|        }
 6297|    434|        else {
 6298|    434|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 380, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    380|    }                                                  \
  |  | 3995|    434|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|     54|                                             specs, value, loc));
 6300|       |
 6301|     54|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 8, False: 46]
  ------------------
 6302|      8|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      8|                        .view()));
 6305|      8|            }
 6306|     54|        }
 6307|       |
 6308|       |        // Read postfix
 6309|     78|        std::ptrdiff_t postfix_width = 0;
 6310|     78|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 78, False: 0]
  ------------------
 6311|     78|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|     78|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     78|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     78|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     78|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|     78|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|     78|                                 rd.skip_ws_before_read(), prefix_width,
 6314|     78|                                 value_width));
 6315|     78|            std::tie(it, postfix_width) = postfix_result;
 6316|     78|        }
 6317|       |
 6318|     78|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|     78|    do {                                                            \
  |  | 3985|     78|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 4, False: 74]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      4|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      4|        }                                                           \
  |  | 3988|     78|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|     78|            specs, prefix_width, value_width, postfix_width));
 6320|     74|        return it;
 6321|     78|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6325|  1.29k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.29k|            auto rd = make_reader<T, char_type>();
 6331|  1.29k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.29k|    do {                                                            \
  |  | 3985|  1.29k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 632, False: 660]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    632|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    632|        }                                                           \
  |  | 3988|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    660|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.29k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    660|    {
 6261|    660|        const bool need_skipped_width =
 6262|    660|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 248, False: 412]
  |  Branch (6262:33): [True: 224, False: 188]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    660|        auto it = rng.begin();
 6266|    660|        std::ptrdiff_t prefix_width = 0;
 6267|    660|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 226, False: 434]
  ------------------
 6268|    226|            auto max_width_view = take_width(rng, specs.precision);
 6269|    226|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 20, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     20|    }                                                  \
  |  |  |  | 3995|    226|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    206|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    206|            it = prefix_result.first.base();
 6272|    206|            prefix_width = prefix_result.second;
 6273|    206|        }
 6274|    434|        else {
 6275|    434|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    434|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    434|            std::tie(it, prefix_width) = prefix_result;
 6277|    434|        }
 6278|    640|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    640|        std::ptrdiff_t value_width = 0;
 6282|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 206, False: 434]
  ------------------
 6283|    206|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 2, False: 204]
  ------------------
 6284|      2|                return detail::unexpected_scan_error(
 6285|      2|                    scan_error::invalid_fill,
 6286|      2|                    "Too many fill characters before value, "
 6287|      2|                    "precision exceeded before reading value");
 6288|      2|            }
 6289|       |
 6290|    204|            const auto initial_width = specs.precision - prefix_width;
 6291|    204|            auto max_width_view =
 6292|    204|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    204|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 180, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    180|    }                                                  \
  |  |  |  | 3995|    204|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|     24|            it = w_it.base();
 6295|     24|            value_width = initial_width - w_it.count();
 6296|     24|        }
 6297|    434|        else {
 6298|    434|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 380, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    380|    }                                                  \
  |  | 3995|    434|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|     54|                                             specs, value, loc));
 6300|       |
 6301|     54|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 8, False: 46]
  ------------------
 6302|      8|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      8|                        .view()));
 6305|      8|            }
 6306|     54|        }
 6307|       |
 6308|       |        // Read postfix
 6309|     78|        std::ptrdiff_t postfix_width = 0;
 6310|     78|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 78, False: 0]
  ------------------
 6311|     78|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|     78|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     78|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     78|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     78|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|     78|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|     78|                                 rd.skip_ws_before_read(), prefix_width,
 6314|     78|                                 value_width));
 6315|     78|            std::tie(it, postfix_width) = postfix_result;
 6316|     78|        }
 6317|       |
 6318|     78|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|     78|    do {                                                            \
  |  | 3985|     78|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 4, False: 74]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      4|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      4|        }                                                           \
  |  | 3988|     78|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|     78|            specs, prefix_width, value_width, postfix_width));
 6320|     74|        return it;
 6321|     78|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6325|  1.23k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.23k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.23k|            auto rd = make_reader<T, char_type>();
 6331|  1.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.23k|    do {                                                            \
  |  | 3985|  1.23k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 708, False: 522]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    708|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    708|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    708|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    708|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    708|        }                                                           \
  |  | 3988|  1.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    522|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.23k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5878|  1.23k|    {
 5879|  1.23k|        reader_error_handler eh{};
 5880|  1.23k|        detail::check_pointer_type_specs(specs, eh);
 5881|  1.23k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 708, False: 522]
  |  |  ------------------
  ------------------
 5882|    708|            return detail::unexpected_scan_error(
 5883|    708|                scan_error::invalid_format_string, eh.m_msg);
 5884|    708|        }
 5885|    522|        return {};
 5886|  1.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6260|    522|    {
 6261|    522|        const bool need_skipped_width =
 6262|    522|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 238, False: 284]
  |  Branch (6262:33): [True: 156, False: 128]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    522|        auto it = rng.begin();
 6266|    522|        std::ptrdiff_t prefix_width = 0;
 6267|    522|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 158, False: 364]
  ------------------
 6268|    158|            auto max_width_view = take_width(rng, specs.precision);
 6269|    158|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    158|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    158|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    158|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    158|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 8, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      8|    }                                                  \
  |  |  |  | 3995|    158|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    158|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    150|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    150|            it = prefix_result.first.base();
 6272|    150|            prefix_width = prefix_result.second;
 6273|    150|        }
 6274|    364|        else {
 6275|    364|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    364|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    364|            std::tie(it, prefix_width) = prefix_result;
 6277|    364|        }
 6278|    514|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    514|        std::ptrdiff_t value_width = 0;
 6282|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 150, False: 364]
  ------------------
 6283|    150|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 2, False: 148]
  ------------------
 6284|      2|                return detail::unexpected_scan_error(
 6285|      2|                    scan_error::invalid_fill,
 6286|      2|                    "Too many fill characters before value, "
 6287|      2|                    "precision exceeded before reading value");
 6288|      2|            }
 6289|       |
 6290|    148|            const auto initial_width = specs.precision - prefix_width;
 6291|    148|            auto max_width_view =
 6292|    148|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    148|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 138, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    138|    }                                                  \
  |  |  |  | 3995|    148|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|     10|            it = w_it.base();
 6295|     10|            value_width = initial_width - w_it.count();
 6296|     10|        }
 6297|    364|        else {
 6298|    364|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 322, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    322|    }                                                  \
  |  | 3995|    364|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|     42|                                             specs, value, loc));
 6300|       |
 6301|     42|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 8, False: 34]
  ------------------
 6302|      8|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      8|                        .view()));
 6305|      8|            }
 6306|     42|        }
 6307|       |
 6308|       |        // Read postfix
 6309|     52|        std::ptrdiff_t postfix_width = 0;
 6310|     52|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 52, False: 0]
  ------------------
 6311|     52|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|     52|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     52|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     52|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 52]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     52|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|     52|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|     52|                                 rd.skip_ws_before_read(), prefix_width,
 6314|     52|                                 value_width));
 6315|     52|            std::tie(it, postfix_width) = postfix_result;
 6316|     52|        }
 6317|       |
 6318|     52|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|     52|    do {                                                            \
  |  | 3985|     52|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 4, False: 48]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      4|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      4|        }                                                           \
  |  | 3988|     52|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|     52|            specs, prefix_width, value_width, postfix_width));
 6320|     48|        return it;
 6321|     52|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5908|    148|    {
 5909|    148|        SCN_UNUSED(specs);
  ------------------
  |  | 1064|    148|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5910|    148|        return read_default(range, value, loc);
 5911|    148|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5891|    148|    {
 5892|    148|        detail::format_specs specs{};
 5893|    148|        specs.type = detail::presentation_type::int_hex;
 5894|       |
 5895|    148|        std::uintptr_t intvalue{};
 5896|    148|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3996|    148|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    148|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    148|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 138, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    138|    }                                                  \
  |  |  |  | 3995|    148|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    148|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5897|     10|                                                                intvalue, loc));
 5898|     10|        value = reinterpret_cast<void*>(intvalue);
 5899|     10|        return result;
 5900|    148|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5908|    364|    {
 5909|    364|        SCN_UNUSED(specs);
  ------------------
  |  | 1064|    364|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5910|    364|        return read_default(range, value, loc);
 5911|    364|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6325|  1.29k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.29k|            auto rd = make_reader<T, char_type>();
 6331|  1.29k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.29k|    do {                                                            \
  |  | 3985|  1.29k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 530, False: 762]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    530|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    530|        }                                                           \
  |  | 3988|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    762|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.29k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|  1.29k|    {
 3219|  1.29k|        reader_error_handler eh{};
 3220|  1.29k|        get_derived().check_specs_impl(specs, eh);
 3221|  1.29k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 530, False: 762]
  |  |  ------------------
  ------------------
 3222|    530|            return detail::unexpected_scan_error(
 3223|    530|                scan_error::invalid_format_string, eh.m_msg);
 3224|    530|        }
 3225|    762|        return {};
 3226|  1.29k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3230|  1.29k|    {
 3231|  1.29k|        return static_cast<Derived&>(*this);
 3232|  1.29k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5619|  1.29k|    {
 5620|  1.29k|        detail::check_bool_type_specs(specs, eh);
 5621|  1.29k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    762|    {
 6261|    762|        const bool need_skipped_width =
 6262|    762|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 266, False: 496]
  |  Branch (6262:33): [True: 268, False: 228]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    762|        auto it = rng.begin();
 6266|    762|        std::ptrdiff_t prefix_width = 0;
 6267|    762|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 272, False: 490]
  ------------------
 6268|    272|            auto max_width_view = take_width(rng, specs.precision);
 6269|    272|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 22, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     22|    }                                                  \
  |  |  |  | 3995|    272|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    250|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    250|            it = prefix_result.first.base();
 6272|    250|            prefix_width = prefix_result.second;
 6273|    250|        }
 6274|    490|        else {
 6275|    490|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    490|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 490]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    490|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    490|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    490|            std::tie(it, prefix_width) = prefix_result;
 6277|    490|        }
 6278|    740|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    740|        std::ptrdiff_t value_width = 0;
 6282|    740|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 250, False: 490]
  ------------------
 6283|    250|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 4, False: 246]
  ------------------
 6284|      4|                return detail::unexpected_scan_error(
 6285|      4|                    scan_error::invalid_fill,
 6286|      4|                    "Too many fill characters before value, "
 6287|      4|                    "precision exceeded before reading value");
 6288|      4|            }
 6289|       |
 6290|    246|            const auto initial_width = specs.precision - prefix_width;
 6291|    246|            auto max_width_view =
 6292|    246|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    246|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 222, False: 24]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    222|    }                                                  \
  |  |  |  | 3995|    246|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|     24|            it = w_it.base();
 6295|     24|            value_width = initial_width - w_it.count();
 6296|     24|        }
 6297|    490|        else {
 6298|    490|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 436, False: 54]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    436|    }                                                  \
  |  | 3995|    490|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    490|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|     54|                                             specs, value, loc));
 6300|       |
 6301|     54|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 8, False: 46]
  ------------------
 6302|      8|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      8|                        .view()));
 6305|      8|            }
 6306|     54|        }
 6307|       |
 6308|       |        // Read postfix
 6309|     78|        std::ptrdiff_t postfix_width = 0;
 6310|     78|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 78, False: 0]
  ------------------
 6311|     78|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|     78|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     78|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     78|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     78|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|     78|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|     78|                                 rd.skip_ws_before_read(), prefix_width,
 6314|     78|                                 value_width));
 6315|     78|            std::tie(it, postfix_width) = postfix_result;
 6316|     78|        }
 6317|       |
 6318|     78|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|     78|    do {                                                            \
  |  | 3985|     78|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 4, False: 74]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      4|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      4|        }                                                           \
  |  | 3988|     78|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|     78|            specs, prefix_width, value_width, postfix_width));
 6320|     74|        return it;
 6321|     78|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5638|    246|    {
 5639|    246|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5640|       |
 5641|    246|#if !SCN_DISABLE_LOCALE
 5642|    246|        if (specs.localized) {
  ------------------
  |  Branch (5642:13): [True: 28, False: 218]
  ------------------
 5643|     28|            return rd.read_localized(range, loc, value);
 5644|     28|        }
 5645|       |#else
 5646|       |        SCN_UNUSED(loc);
 5647|       |#endif
 5648|       |
 5649|    218|        return rd.read_classic(range, value);
 5650|    246|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5653|    736|    {
 5654|    736|        SCN_GCC_COMPAT_PUSH
 5655|    736|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5656|       |
 5657|    736|        switch (specs.type) {
 5658|     96|            case detail::presentation_type::string:
  ------------------
  |  Branch (5658:13): [True: 96, False: 640]
  ------------------
 5659|     96|                return bool_reader_base::allow_text;
 5660|       |
 5661|     24|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5661:13): [True: 24, False: 712]
  ------------------
 5662|     54|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5662:13): [True: 30, False: 706]
  ------------------
 5663|     62|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5663:13): [True: 8, False: 728]
  ------------------
 5664|     78|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5664:13): [True: 16, False: 720]
  ------------------
 5665|     94|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5665:13): [True: 16, False: 720]
  ------------------
 5666|    108|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5666:13): [True: 14, False: 722]
  ------------------
 5667|    108|                return bool_reader_base::allow_numeric;
 5668|       |
 5669|    532|            default:
  ------------------
  |  Branch (5669:13): [True: 532, False: 204]
  ------------------
 5670|    532|                return bool_reader_base::allow_text |
 5671|    532|                       bool_reader_base::allow_numeric;
 5672|    736|        }
 5673|       |
 5674|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5675|    736|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5549|     28|    {
 5550|     28|        scan_error err{scan_error::invalid_scanned_value,
 5551|     28|                       "Failed to read boolean"};
 5552|       |
 5553|     28|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5553:13): [True: 26, False: 2]
  ------------------
 5554|     26|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5554:22): [True: 4, False: 22]
  ------------------
 5555|      4|                return *r;
 5556|      4|            }
 5557|     22|            else {
 5558|     22|                err = r.error();
 5559|     22|            }
 5560|     26|        }
 5561|       |
 5562|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5562:13): [True: 14, False: 10]
  ------------------
 5563|     14|            auto stdloc = loc.get<std::locale>();
 5564|     14|            const auto& numpunct =
 5565|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5566|     14|            const auto truename = numpunct.truename();
 5567|     14|            const auto falsename = numpunct.falsename();
 5568|       |
 5569|     14|            if (auto r =
  ------------------
  |  Branch (5569:22): [True: 0, False: 14]
  ------------------
 5570|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5571|      0|                return *r;
 5572|      0|            }
 5573|     14|            else {
 5574|     14|                err = r.error();
 5575|     14|            }
 5576|     14|        }
 5577|       |
 5578|     24|        return unexpected(err);
 5579|     24|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5505|    204|    {
 5506|    204|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5506:18): [True: 24, False: 180]
  ------------------
 5507|     24|            value = false;
 5508|     24|            return *r;
 5509|     24|        }
 5510|    180|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5510:18): [True: 0, False: 180]
  ------------------
 5511|      0|            value = true;
 5512|      0|            return *r;
 5513|      0|        }
 5514|       |
 5515|    180|        return detail::unexpected_scan_error(
 5516|    180|            scan_error::invalid_scanned_value,
 5517|    180|            "Failed to read numeric boolean value: No match");
 5518|    180|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2307|    384|{
 2308|    384|    auto it = read_code_unit(range);
 2309|    384|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 2310|      0|        return unexpected(make_eof_parse_error(it.error()));
 2311|      0|    }
 2312|       |
 2313|    384|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 360, False: 24]
  |  |  ------------------
  ------------------
 2314|    384|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|    360|        return unexpected(parse_error::error);
 2316|    360|    }
 2317|       |
 2318|     24|    return *it;
 2319|    384|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5589|     14|    {
 5590|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5591|     14|        const auto shorter = std::pair{
 5592|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5592:13): [True: 14, False: 0]
  ------------------
 5593|     14|        const auto longer = std::pair{
 5594|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5594:13): [True: 0, False: 14]
  ------------------
 5595|       |
 5596|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5596:18): [True: 0, False: 14]
  ------------------
 5597|      0|            value = shorter.second;
 5598|      0|            return *r;
 5599|      0|        }
 5600|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5600:18): [True: 0, False: 14]
  ------------------
 5601|      0|            value = longer.second;
 5602|      0|            return *r;
 5603|      0|        }
 5604|       |
 5605|     14|        return detail::unexpected_scan_error(
 5606|     14|            scan_error::invalid_scanned_value,
 5607|     14|            "Failed to read textual boolean: No match");
 5608|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2340|     28|{
 2341|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 18, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     18|    }                                                  \
  |  |  |  | 3995|     28|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     28|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2342|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2343|     10|                    .transform_error(make_eof_parse_error));
 2344|       |
 2345|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2346|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1014|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2347|     10|        return unexpected(parse_error::error);
 2348|     10|    }
 2349|      0|    return it;
 2350|     10|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1981|    376|{
 1982|    376|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|    376|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    376|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|    376|    else {
 1993|    376|        auto it = range.begin();
 1994|    376|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 0, False: 376]
  ------------------
 1995|      0|            return ranges::next(it, count);
 1996|      0|        }
 1997|       |
 1998|  1.73k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 1.49k, False: 248]
  ------------------
 1999|  1.49k|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 128, False: 1.36k]
  ------------------
 2000|    128|                return unexpected(eof_error::eof);
 2001|    128|            }
 2002|  1.49k|        }
 2003|       |
 2004|    248|        return it;
 2005|    376|    }
 2006|    376|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1113|    376|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|       |                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|       |        else {
 1125|       |            if (r.begin().stores_parent()) {
 1126|       |                return static_cast<size_t>(
 1127|       |                    r.begin().parent()->chars_available() -
 1128|       |                    r.begin().position());
 1129|       |            }
 1130|       |            return r.begin().contiguous_segment().size();
 1131|       |        }
 1132|       |    }
 1133|    376|    else {
 1134|    376|        SCN_UNUSED(r);
  ------------------
  |  | 1064|    376|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1135|    376|        return 0;
 1136|    376|    }
 1137|    376|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5476|    218|    {
 5477|    218|        scan_error err{scan_error::invalid_scanned_value,
 5478|    218|                       "Failed to read boolean"};
 5479|       |
 5480|    218|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5480:13): [True: 178, False: 40]
  ------------------
 5481|    178|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5481:22): [True: 20, False: 158]
  ------------------
 5482|     20|                return *r;
 5483|     20|            }
 5484|    158|            else {
 5485|    158|                err = r.error();
 5486|    158|            }
 5487|    178|        }
 5488|       |
 5489|    198|        if (m_options & allow_text) {
  ------------------
  |  Branch (5489:13): [True: 174, False: 24]
  ------------------
 5490|    174|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5490:22): [True: 0, False: 174]
  ------------------
 5491|      0|                return *r;
 5492|      0|            }
 5493|    174|            else {
 5494|    174|                err = r.error();
 5495|    174|            }
 5496|    174|        }
 5497|       |
 5498|    198|        return unexpected(err);
 5499|    198|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5523|    174|    {
 5524|    174|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5524:18): [True: 0, False: 174]
  ------------------
 5525|      0|            value = true;
 5526|      0|            return *r;
 5527|      0|        }
 5528|    174|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5528:18): [True: 0, False: 174]
  ------------------
 5529|      0|            value = false;
 5530|      0|            return *r;
 5531|      0|        }
 5532|       |
 5533|    174|        return detail::unexpected_scan_error(
 5534|    174|            scan_error::invalid_scanned_value,
 5535|    174|            "Failed to read textual boolean value: No match");
 5536|    174|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2355|    348|{
 2356|    348|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 110, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    110|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    110|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    110|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    110|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    110|    }                                                  \
  |  |  |  | 3995|    348|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2357|    238|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2358|    238|                    .transform_error(make_eof_parse_error));
 2359|       |
 2360|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2361|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2362|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2363|       |            return unexpected(parse_error::error);
 2364|       |        }
 2365|       |        return it;
 2366|       |    }
 2367|    238|    else {
 2368|    238|        auto range_it = range.begin();
 2369|    238|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2369:28): [True: 238, False: 0]
  ------------------
 2370|    238|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  | 1014|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 238, False: 0]
  |  |  ------------------
  ------------------
 2371|    238|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2372|    238|                return unexpected(parse_error::error);
 2373|    238|            }
 2374|    238|        }
 2375|      0|        return it;
 2376|    238|    }
 2377|    238|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5638|    490|    {
 5639|    490|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5640|       |
 5641|    490|#if !SCN_DISABLE_LOCALE
 5642|    490|        if (specs.localized) {
  ------------------
  |  Branch (5642:13): [True: 30, False: 460]
  ------------------
 5643|     30|            return rd.read_localized(range, loc, value);
 5644|     30|        }
 5645|       |#else
 5646|       |        SCN_UNUSED(loc);
 5647|       |#endif
 5648|       |
 5649|    460|        return rd.read_classic(range, value);
 5650|    490|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5549|     30|    {
 5550|     30|        scan_error err{scan_error::invalid_scanned_value,
 5551|     30|                       "Failed to read boolean"};
 5552|       |
 5553|     30|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5553:13): [True: 28, False: 2]
  ------------------
 5554|     28|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5554:22): [True: 6, False: 22]
  ------------------
 5555|      6|                return *r;
 5556|      6|            }
 5557|     22|            else {
 5558|     22|                err = r.error();
 5559|     22|            }
 5560|     28|        }
 5561|       |
 5562|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5562:13): [True: 12, False: 12]
  ------------------
 5563|     12|            auto stdloc = loc.get<std::locale>();
 5564|     12|            const auto& numpunct =
 5565|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5566|     12|            const auto truename = numpunct.truename();
 5567|     12|            const auto falsename = numpunct.falsename();
 5568|       |
 5569|     12|            if (auto r =
  ------------------
  |  Branch (5569:22): [True: 0, False: 12]
  ------------------
 5570|     12|                    read_textual_custom(range, value, truename, falsename)) {
 5571|      0|                return *r;
 5572|      0|            }
 5573|     12|            else {
 5574|     12|                err = r.error();
 5575|     12|            }
 5576|     12|        }
 5577|       |
 5578|     24|        return unexpected(err);
 5579|     24|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5589|     12|    {
 5590|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5591|     12|        const auto shorter = std::pair{
 5592|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5592:13): [True: 12, False: 0]
  ------------------
 5593|     12|        const auto longer = std::pair{
 5594|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5594:13): [True: 0, False: 12]
  ------------------
 5595|       |
 5596|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5596:18): [True: 0, False: 12]
  ------------------
 5597|      0|            value = shorter.second;
 5598|      0|            return *r;
 5599|      0|        }
 5600|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5600:18): [True: 0, False: 12]
  ------------------
 5601|      0|            value = longer.second;
 5602|      0|            return *r;
 5603|      0|        }
 5604|       |
 5605|     12|        return detail::unexpected_scan_error(
 5606|     12|            scan_error::invalid_scanned_value,
 5607|     12|            "Failed to read textual boolean: No match");
 5608|     12|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2340|     24|{
 2341|     24|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      2|    }                                                  \
  |  |  |  | 3995|     24|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2342|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2343|     22|                    .transform_error(make_eof_parse_error));
 2344|       |
 2345|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2346|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1014|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2347|     22|        return unexpected(parse_error::error);
 2348|     22|    }
 2349|      0|    return it;
 2350|     22|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6325|  1.23k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.23k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.23k|            auto rd = make_reader<T, char_type>();
 6331|  1.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.23k|    do {                                                            \
  |  | 3985|  1.23k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 624, False: 606]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    624|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    624|        }                                                           \
  |  | 3988|  1.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    606|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    606|    {
 6261|    606|        const bool need_skipped_width =
 6262|    606|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 244, False: 362]
  |  Branch (6262:33): [True: 196, False: 166]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    606|        auto it = rng.begin();
 6266|    606|        std::ptrdiff_t prefix_width = 0;
 6267|    606|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 198, False: 408]
  ------------------
 6268|    198|            auto max_width_view = take_width(rng, specs.precision);
 6269|    198|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    198|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    198|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    198|            it = prefix_result.first.base();
 6272|    198|            prefix_width = prefix_result.second;
 6273|    198|        }
 6274|    408|        else {
 6275|    408|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    408|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 408]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    408|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    408|            std::tie(it, prefix_width) = prefix_result;
 6277|    408|        }
 6278|    606|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    606|        std::ptrdiff_t value_width = 0;
 6282|    606|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 198, False: 408]
  ------------------
 6283|    198|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 2, False: 196]
  ------------------
 6284|      2|                return detail::unexpected_scan_error(
 6285|      2|                    scan_error::invalid_fill,
 6286|      2|                    "Too many fill characters before value, "
 6287|      2|                    "precision exceeded before reading value");
 6288|      2|            }
 6289|       |
 6290|    196|            const auto initial_width = specs.precision - prefix_width;
 6291|    196|            auto max_width_view =
 6292|    196|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    196|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 34, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     34|    }                                                  \
  |  |  |  | 3995|    196|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    196|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    162|            it = w_it.base();
 6295|    162|            value_width = initial_width - w_it.count();
 6296|    162|        }
 6297|    408|        else {
 6298|    408|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    408|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    408|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 40, False: 368]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|     40|    }                                                  \
  |  | 3995|    408|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    408|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    368|                                             specs, value, loc));
 6300|       |
 6301|    368|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 236, False: 132]
  ------------------
 6302|    236|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    236|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    236|                        .view()));
 6305|    236|            }
 6306|    368|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    530|        std::ptrdiff_t postfix_width = 0;
 6310|    530|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 530, False: 0]
  ------------------
 6311|    530|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    530|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    530|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    530|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 530]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    530|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    530|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    530|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    530|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    530|                                 value_width));
 6315|    530|            std::tie(it, postfix_width) = postfix_result;
 6316|    530|        }
 6317|       |
 6318|    530|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    530|    do {                                                            \
  |  | 3985|    530|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    530|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 228, False: 302]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    228|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    228|        }                                                           \
  |  | 3988|    530|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    530|            specs, prefix_width, value_width, postfix_width));
 6320|    302|        return it;
 6321|    530|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6325|  1.29k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.29k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.29k|            auto rd = make_reader<T, char_type>();
 6331|  1.29k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.29k|    do {                                                            \
  |  | 3985|  1.29k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 634, False: 658]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    634|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    634|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    634|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    634|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    634|        }                                                           \
  |  | 3988|  1.29k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|    658|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.29k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|    658|    {
 6261|    658|        const bool need_skipped_width =
 6262|    658|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 252, False: 406]
  |  Branch (6262:33): [True: 206, False: 200]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|    658|        auto it = rng.begin();
 6266|    658|        std::ptrdiff_t prefix_width = 0;
 6267|    658|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 210, False: 448]
  ------------------
 6268|    210|            auto max_width_view = take_width(rng, specs.precision);
 6269|    210|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    210|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    210|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    210|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 16, False: 194]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     16|    }                                                  \
  |  |  |  | 3995|    210|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    210|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    194|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    194|            it = prefix_result.first.base();
 6272|    194|            prefix_width = prefix_result.second;
 6273|    194|        }
 6274|    448|        else {
 6275|    448|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    448|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    448|            std::tie(it, prefix_width) = prefix_result;
 6277|    448|        }
 6278|    642|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|    642|        std::ptrdiff_t value_width = 0;
 6282|    642|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 194, False: 448]
  ------------------
 6283|    194|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 4, False: 190]
  ------------------
 6284|      4|                return detail::unexpected_scan_error(
 6285|      4|                    scan_error::invalid_fill,
 6286|      4|                    "Too many fill characters before value, "
 6287|      4|                    "precision exceeded before reading value");
 6288|      4|            }
 6289|       |
 6290|    190|            const auto initial_width = specs.precision - prefix_width;
 6291|    190|            auto max_width_view =
 6292|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 170, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    170|    }                                                  \
  |  |  |  | 3995|    190|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|     20|            it = w_it.base();
 6295|     20|            value_width = initial_width - w_it.count();
 6296|     20|        }
 6297|    448|        else {
 6298|    448|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 370, False: 78]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|    370|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|    370|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    370|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    370|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|    370|    }                                                  \
  |  | 3995|    448|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|     78|                                             specs, value, loc));
 6300|       |
 6301|     78|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 8, False: 70]
  ------------------
 6302|      8|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      8|                        .view()));
 6305|      8|            }
 6306|     78|        }
 6307|       |
 6308|       |        // Read postfix
 6309|     98|        std::ptrdiff_t postfix_width = 0;
 6310|     98|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 98, False: 0]
  ------------------
 6311|     98|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|     98|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|     98|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|     98|                                 rd.skip_ws_before_read(), prefix_width,
 6314|     98|                                 value_width));
 6315|     98|            std::tie(it, postfix_width) = postfix_result;
 6316|     98|        }
 6317|       |
 6318|     98|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|     98|    do {                                                            \
  |  | 3985|     98|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 4, False: 94]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      4|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      4|        }                                                           \
  |  | 3988|     98|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|     98|            specs, prefix_width, value_width, postfix_width));
 6320|     94|        return it;
 6321|     98|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  1.23k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.23k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.23k|            auto rd = make_reader<T, char_type>();
 6331|  1.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.23k|    do {                                                            \
  |  | 3985|  1.23k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 218, False: 1.01k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    218|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    218|        }                                                           \
  |  | 3988|  1.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  1.01k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|  1.01k|    {
 6261|  1.01k|        const bool need_skipped_width =
 6262|  1.01k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 312, False: 700]
  |  Branch (6262:33): [True: 398, False: 302]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  1.01k|        auto it = rng.begin();
 6266|  1.01k|        std::ptrdiff_t prefix_width = 0;
 6267|  1.01k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 404, False: 608]
  ------------------
 6268|    404|            auto max_width_view = take_width(rng, specs.precision);
 6269|    404|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|    404|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    394|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    394|            it = prefix_result.first.base();
 6272|    394|            prefix_width = prefix_result.second;
 6273|    394|        }
 6274|    608|        else {
 6275|    608|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    608|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    608|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    608|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    608|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    608|            std::tie(it, prefix_width) = prefix_result;
 6277|    608|        }
 6278|  1.00k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  1.00k|        std::ptrdiff_t value_width = 0;
 6282|  1.00k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 394, False: 608]
  ------------------
 6283|    394|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 6, False: 388]
  ------------------
 6284|      6|                return detail::unexpected_scan_error(
 6285|      6|                    scan_error::invalid_fill,
 6286|      6|                    "Too many fill characters before value, "
 6287|      6|                    "precision exceeded before reading value");
 6288|      6|            }
 6289|       |
 6290|    388|            const auto initial_width = specs.precision - prefix_width;
 6291|    388|            auto max_width_view =
 6292|    388|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    388|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 80, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     80|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     80|    }                                                  \
  |  |  |  | 3995|    388|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    308|            it = w_it.base();
 6295|    308|            value_width = initial_width - w_it.count();
 6296|    308|        }
 6297|    608|        else {
 6298|    608|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    608|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    608|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 66, False: 542]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|     66|    }                                                  \
  |  | 3995|    608|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    542|                                             specs, value, loc));
 6300|       |
 6301|    542|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 304, False: 238]
  ------------------
 6302|    304|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    304|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    304|                        .view()));
 6305|    304|            }
 6306|    542|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    850|        std::ptrdiff_t postfix_width = 0;
 6310|    850|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 510, False: 340]
  ------------------
 6311|    510|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    510|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    510|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    510|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    510|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    510|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    510|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    510|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    510|                                 value_width));
 6315|    510|            std::tie(it, postfix_width) = postfix_result;
 6316|    510|        }
 6317|       |
 6318|    850|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    850|    do {                                                            \
  |  | 3985|    850|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 78, False: 772]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|     78|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|     78|        }                                                           \
  |  | 3988|    850|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    850|            specs, prefix_width, value_width, postfix_width));
 6320|    772|        return it;
 6321|    850|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  1.23k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.23k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.23k|            auto rd = make_reader<T, char_type>();
 6331|  1.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.23k|    do {                                                            \
  |  | 3985|  1.23k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 218, False: 1.01k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    218|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    218|        }                                                           \
  |  | 3988|  1.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  1.01k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|  1.01k|    {
 6261|  1.01k|        const bool need_skipped_width =
 6262|  1.01k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 312, False: 700]
  |  Branch (6262:33): [True: 398, False: 302]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  1.01k|        auto it = rng.begin();
 6266|  1.01k|        std::ptrdiff_t prefix_width = 0;
 6267|  1.01k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 404, False: 608]
  ------------------
 6268|    404|            auto max_width_view = take_width(rng, specs.precision);
 6269|    404|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|    404|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    394|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    394|            it = prefix_result.first.base();
 6272|    394|            prefix_width = prefix_result.second;
 6273|    394|        }
 6274|    608|        else {
 6275|    608|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    608|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    608|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    608|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    608|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    608|            std::tie(it, prefix_width) = prefix_result;
 6277|    608|        }
 6278|  1.00k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  1.00k|        std::ptrdiff_t value_width = 0;
 6282|  1.00k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 394, False: 608]
  ------------------
 6283|    394|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 6, False: 388]
  ------------------
 6284|      6|                return detail::unexpected_scan_error(
 6285|      6|                    scan_error::invalid_fill,
 6286|      6|                    "Too many fill characters before value, "
 6287|      6|                    "precision exceeded before reading value");
 6288|      6|            }
 6289|       |
 6290|    388|            const auto initial_width = specs.precision - prefix_width;
 6291|    388|            auto max_width_view =
 6292|    388|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    388|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 80, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     80|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     80|    }                                                  \
  |  |  |  | 3995|    388|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    308|            it = w_it.base();
 6295|    308|            value_width = initial_width - w_it.count();
 6296|    308|        }
 6297|    608|        else {
 6298|    608|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    608|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    608|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 66, False: 542]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|     66|    }                                                  \
  |  | 3995|    608|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    542|                                             specs, value, loc));
 6300|       |
 6301|    542|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 304, False: 238]
  ------------------
 6302|    304|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    304|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    304|                        .view()));
 6305|    304|            }
 6306|    542|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    850|        std::ptrdiff_t postfix_width = 0;
 6310|    850|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 510, False: 340]
  ------------------
 6311|    510|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    510|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    510|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    510|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    510|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    510|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    510|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    510|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    510|                                 value_width));
 6315|    510|            std::tie(it, postfix_width) = postfix_result;
 6316|    510|        }
 6317|       |
 6318|    850|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    850|    do {                                                            \
  |  | 3985|    850|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 78, False: 772]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|     78|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|     78|        }                                                           \
  |  | 3988|    850|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    850|            specs, prefix_width, value_width, postfix_width));
 6320|    772|        return it;
 6321|    850|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  1.23k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  1.23k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  1.23k|            auto rd = make_reader<T, char_type>();
 6331|  1.23k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  1.23k|    do {                                                            \
  |  | 3985|  1.23k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 218, False: 1.01k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    218|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    218|        }                                                           \
  |  | 3988|  1.23k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  1.01k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  1.23k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6260|  1.01k|    {
 6261|  1.01k|        const bool need_skipped_width =
 6262|  1.01k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 312, False: 700]
  |  Branch (6262:33): [True: 398, False: 302]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  1.01k|        auto it = rng.begin();
 6266|  1.01k|        std::ptrdiff_t prefix_width = 0;
 6267|  1.01k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 404, False: 608]
  ------------------
 6268|    404|            auto max_width_view = take_width(rng, specs.precision);
 6269|    404|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     10|    }                                                  \
  |  |  |  | 3995|    404|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|    394|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|    394|            it = prefix_result.first.base();
 6272|    394|            prefix_width = prefix_result.second;
 6273|    394|        }
 6274|    608|        else {
 6275|    608|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|    608|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    608|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    608|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    608|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|    608|            std::tie(it, prefix_width) = prefix_result;
 6277|    608|        }
 6278|  1.00k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  1.00k|        std::ptrdiff_t value_width = 0;
 6282|  1.00k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 394, False: 608]
  ------------------
 6283|    394|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 6, False: 388]
  ------------------
 6284|      6|                return detail::unexpected_scan_error(
 6285|      6|                    scan_error::invalid_fill,
 6286|      6|                    "Too many fill characters before value, "
 6287|      6|                    "precision exceeded before reading value");
 6288|      6|            }
 6289|       |
 6290|    388|            const auto initial_width = specs.precision - prefix_width;
 6291|    388|            auto max_width_view =
 6292|    388|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|    388|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 80, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|     80|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|     80|    }                                                  \
  |  |  |  | 3995|    388|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|    308|            it = w_it.base();
 6295|    308|            value_width = initial_width - w_it.count();
 6296|    308|        }
 6297|    608|        else {
 6298|    608|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|    608|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|    608|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 66, False: 542]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|     66|    }                                                  \
  |  | 3995|    608|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|    542|                                             specs, value, loc));
 6300|       |
 6301|    542|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 304, False: 238]
  ------------------
 6302|    304|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|    304|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|    304|                        .view()));
 6305|    304|            }
 6306|    542|        }
 6307|       |
 6308|       |        // Read postfix
 6309|    850|        std::ptrdiff_t postfix_width = 0;
 6310|    850|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 510, False: 340]
  ------------------
 6311|    510|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|    510|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    510|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    510|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    510|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 510]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    510|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    510|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|    510|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|    510|                                 rd.skip_ws_before_read(), prefix_width,
 6314|    510|                                 value_width));
 6315|    510|            std::tie(it, postfix_width) = postfix_result;
 6316|    510|        }
 6317|       |
 6318|    850|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|    850|    do {                                                            \
  |  | 3985|    850|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    850|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 78, False: 772]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|     78|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|     78|        }                                                           \
  |  | 3988|    850|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|    850|            specs, prefix_width, value_width, postfix_width));
 6320|    772|        return it;
 6321|    850|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|    632|    {
 3615|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|    632|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|       |        if constexpr (!std::is_signed_v<T>) {
 3619|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3620|       |                return detail::unexpected_scan_error(
 3621|       |                    scan_error::invalid_scanned_value,
 3622|       |                    "Unexpected '-' sign when parsing an "
 3623|       |                    "unsigned value");
 3624|       |            }
 3625|       |        }
 3626|       |
 3627|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 632]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  1.26k|                parse_integer_digits_without_thsep(
 3634|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  1.26k|                    prefix_result.parsed_base));
 3636|       |
 3637|  1.26k|        auto buf = make_contiguous_buffer(
 3638|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    632|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|      0|                                    prefix_result.parsed_base));
 3642|       |
 3643|      0|        return ranges::next(prefix_result.iterator,
 3644|      0|                            ranges::distance(buf.view().begin(), result_it));
 3645|  1.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3614|    632|    {
 3615|    632|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|    632|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|    632|        if constexpr (!std::is_signed_v<T>) {
 3619|    632|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 0, False: 632]
  ------------------
 3620|      0|                return detail::unexpected_scan_error(
 3621|      0|                    scan_error::invalid_scanned_value,
 3622|      0|                    "Unexpected '-' sign when parsing an "
 3623|      0|                    "unsigned value");
 3624|      0|            }
 3625|    632|        }
 3626|       |
 3627|    632|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 632]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 632]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  1.26k|                parse_integer_digits_without_thsep(
 3634|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  1.26k|                    prefix_result.parsed_base));
 3636|       |
 3637|  1.26k|        auto buf = make_contiguous_buffer(
 3638|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|    632|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|    632|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|    632|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|    632|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 632, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    632|    }                                                  \
  |  |  |  | 3995|    632|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|    632|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|      0|                                    prefix_result.parsed_base));
 3642|       |
 3643|      0|        return ranges::next(prefix_result.iterator,
 3644|      0|                            ranges::distance(buf.view().begin(), result_it));
 3645|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  2.81k|{
   69|  2.81k|    scn::fuzz::run(data, size);
   70|  2.81k|    return 0;
   71|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  2.81k|{
   52|  2.81k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 2.81k]
  |  Branch (52:35): [True: 0, False: 2.81k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  2.81k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  2.81k|    run_for_source(sv);
   59|  2.81k|    run_for_source(wsv_reinterpret);
   60|  2.81k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 2.81k, False: 0]
  ------------------
   61|  2.81k|        run_for_source(wsv_transcode);
   62|  2.81k|    }
   63|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  2.81k|{
   37|  2.81k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  2.81k|    run_for_type<char_type>(source);
   40|  2.81k|    run_for_type<int>(source);
   41|  2.81k|    run_for_type<unsigned>(source);
   42|  2.81k|    run_for_type<double>(source);
   43|  2.81k|    run_for_type<bool>(source);
   44|  2.81k|    run_for_type<void*>(source);
   45|  2.81k|    run_for_type<std::string>(source);
   46|  2.81k|    run_for_type<std::wstring>(source);
   47|  2.81k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  2.81k|{
   25|  2.81k|    {
   26|  2.81k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  2.81k|    }
   28|  2.81k|    {
   29|  2.81k|        auto _ =
   30|  2.81k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  2.81k|    }
   32|  2.81k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  5.62k|{
   37|  5.62k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  5.62k|    run_for_type<char_type>(source);
   40|  5.62k|    run_for_type<int>(source);
   41|  5.62k|    run_for_type<unsigned>(source);
   42|  5.62k|    run_for_type<double>(source);
   43|  5.62k|    run_for_type<bool>(source);
   44|  5.62k|    run_for_type<void*>(source);
   45|  5.62k|    run_for_type<std::string>(source);
   46|  5.62k|    run_for_type<std::wstring>(source);
   47|  5.62k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  5.62k|{
   25|  5.62k|    {
   26|  5.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  5.62k|    }
   28|  5.62k|    {
   29|  5.62k|        auto _ =
   30|  5.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  5.62k|    }
   32|  5.62k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.81k|{
   53|  2.81k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1079|  2.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.81k|    string_buffer.resize(size);
   57|  2.81k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.81k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.81k|    const auto wsv_reinterpret_size =
   62|  2.81k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 93, False: 2.71k]
  ------------------
   63|  2.81k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.81k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.81k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.81k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.81k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.81k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.81k|}

